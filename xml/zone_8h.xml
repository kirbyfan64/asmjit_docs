<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="zone_8h" kind="file">
    <compoundname>zone.h</compoundname>
    <includes refid="apibegin_8h" local="yes">../base/apibegin.h</includes>
    <includes refid="apiend_8h" local="yes">../base/apiend.h</includes>
    <includedby refid="codegen_8h" local="yes">codegen.h</includedby>
    <includedby refid="assembler_8h" local="yes">assembler.h</includedby>
    <includedby refid="base_8h" local="yes">base.h</includedby>
    <includedby refid="context__p_8h" local="yes">context_p.h</includedby>
    <includedby refid="zone_8cpp" local="yes">zone.cpp</includedby>
    <incdepgraph>
      <node id="2441">
        <label>../base/globals.h</label>
        <childnode refid="2434" relation="include">
        </childnode>
        <childnode refid="2433" relation="include">
        </childnode>
        <childnode refid="2442" relation="include">
        </childnode>
      </node>
      <node id="2442">
        <label>../base/apiend.h</label>
      </node>
      <node id="2443">
        <label>stdarg.h</label>
      </node>
      <node id="2445">
        <label>stdint.h</label>
      </node>
      <node id="2437">
        <label>stdlib.h</label>
      </node>
      <node id="2432">
        <label>zone.h</label>
        <link refid="zone.h"/>
        <childnode refid="2433" relation="include">
        </childnode>
        <childnode refid="2442" relation="include">
        </childnode>
      </node>
      <node id="2433">
        <label>../base/apibegin.h</label>
        <childnode refid="2434" relation="include">
        </childnode>
      </node>
      <node id="2439">
        <label>../base/defs.h</label>
        <childnode refid="2440" relation="include">
        </childnode>
        <childnode refid="2433" relation="include">
        </childnode>
        <childnode refid="2442" relation="include">
        </childnode>
      </node>
      <node id="2446">
        <label>limits.h</label>
      </node>
      <node id="2444">
        <label>new</label>
      </node>
      <node id="2435">
        <label>config.h</label>
      </node>
      <node id="2440">
        <label>../base/intutil.h</label>
        <childnode refid="2441" relation="include">
        </childnode>
        <childnode refid="2433" relation="include">
        </childnode>
        <childnode refid="2442" relation="include">
        </childnode>
      </node>
      <node id="2434">
        <label>../build.h</label>
        <childnode refid="2435" relation="include">
        </childnode>
        <childnode refid="2436" relation="include">
        </childnode>
        <childnode refid="2437" relation="include">
        </childnode>
        <childnode refid="2438" relation="include">
        </childnode>
        <childnode refid="2444" relation="include">
        </childnode>
        <childnode refid="2445" relation="include">
        </childnode>
        <childnode refid="2446" relation="include">
        </childnode>
      </node>
      <node id="2436">
        <label>stdio.h</label>
      </node>
      <node id="2438">
        <label>string.h</label>
        <childnode refid="2439" relation="include">
        </childnode>
        <childnode refid="2441" relation="include">
        </childnode>
        <childnode refid="2443" relation="include">
        </childnode>
        <childnode refid="2433" relation="include">
        </childnode>
        <childnode refid="2442" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2457">
        <label>testopcode.cpp</label>
      </node>
      <node id="2448">
        <label>codegen.h</label>
        <childnode refid="2449" relation="include">
        </childnode>
        <childnode refid="2450" relation="include">
        </childnode>
        <childnode refid="2466" relation="include">
        </childnode>
        <childnode refid="2477" relation="include">
        </childnode>
      </node>
      <node id="2470">
        <label>x86context_p.h</label>
      </node>
      <node id="2476">
        <label>runtime.cpp</label>
      </node>
      <node id="2452">
        <label>asmjit.h</label>
        <childnode refid="2453" relation="include">
        </childnode>
        <childnode refid="2454" relation="include">
        </childnode>
        <childnode refid="2456" relation="include">
        </childnode>
        <childnode refid="2458" relation="include">
        </childnode>
        <childnode refid="2459" relation="include">
        </childnode>
        <childnode refid="2460" relation="include">
        </childnode>
        <childnode refid="2457" relation="include">
        </childnode>
        <childnode refid="2455" relation="include">
        </childnode>
      </node>
      <node id="2447">
        <label>zone.h</label>
        <link refid="zone.h"/>
        <childnode refid="2448" relation="include">
        </childnode>
        <childnode refid="2449" relation="include">
        </childnode>
        <childnode refid="2450" relation="include">
        </childnode>
        <childnode refid="2468" relation="include">
        </childnode>
        <childnode refid="2478" relation="include">
        </childnode>
      </node>
      <node id="2459">
        <label>testdummy.cpp</label>
      </node>
      <node id="2449">
        <label>assembler.h</label>
        <childnode refid="2450" relation="include">
        </childnode>
        <childnode refid="2466" relation="include">
        </childnode>
        <childnode refid="2475" relation="include">
        </childnode>
        <childnode refid="2467" relation="include">
        </childnode>
        <childnode refid="2476" relation="include">
        </childnode>
        <childnode refid="2472" relation="include">
        </childnode>
        <childnode refid="2471" relation="include">
        </childnode>
      </node>
      <node id="2475">
        <label>assembler.cpp</label>
      </node>
      <node id="2465">
        <label>x86.h</label>
      </node>
      <node id="2473">
        <label>x86compiler.h</label>
        <childnode refid="2470" relation="include">
        </childnode>
        <childnode refid="2465" relation="include">
        </childnode>
      </node>
      <node id="2467">
        <label>compiler.cpp</label>
      </node>
      <node id="2451">
        <label>testsizeof.cpp</label>
      </node>
      <node id="2450">
        <label>base.h</label>
        <childnode refid="2451" relation="include">
        </childnode>
        <childnode refid="2452" relation="include">
        </childnode>
        <childnode refid="2461" relation="include">
        </childnode>
        <childnode refid="2462" relation="include">
        </childnode>
        <childnode refid="2463" relation="include">
        </childnode>
        <childnode refid="2464" relation="include">
        </childnode>
        <childnode refid="2465" relation="include">
        </childnode>
      </node>
      <node id="2463">
        <label>winremoteruntime.h</label>
        <childnode refid="2464" relation="include">
        </childnode>
      </node>
      <node id="2455">
        <label>testx86.cpp</label>
      </node>
      <node id="2474">
        <label>x86func.h</label>
        <childnode refid="2473" relation="include">
        </childnode>
        <childnode refid="2465" relation="include">
        </childnode>
      </node>
      <node id="2456">
        <label>genopcode.h</label>
        <childnode refid="2453" relation="include">
        </childnode>
        <childnode refid="2457" relation="include">
        </childnode>
      </node>
      <node id="2468">
        <label>context_p.h</label>
        <childnode refid="2467" relation="include">
        </childnode>
        <childnode refid="2469" relation="include">
        </childnode>
        <childnode refid="2470" relation="include">
        </childnode>
      </node>
      <node id="2454">
        <label>genblend.h</label>
        <childnode refid="2453" relation="include">
        </childnode>
        <childnode refid="2455" relation="include">
        </childnode>
      </node>
      <node id="2469">
        <label>context.cpp</label>
      </node>
      <node id="2478">
        <label>zone.cpp</label>
      </node>
      <node id="2472">
        <label>x86assembler.h</label>
        <childnode refid="2473" relation="include">
        </childnode>
        <childnode refid="2470" relation="include">
        </childnode>
        <childnode refid="2465" relation="include">
        </childnode>
      </node>
      <node id="2477">
        <label>codegen.cpp</label>
      </node>
      <node id="2462">
        <label>winremoteruntime.cpp</label>
      </node>
      <node id="2460">
        <label>testmem.cpp</label>
      </node>
      <node id="2461">
        <label>host.h</label>
        <childnode refid="2452" relation="include">
        </childnode>
      </node>
      <node id="2464">
        <label>contrib.h</label>
      </node>
      <node id="2453">
        <label>benchx86.cpp</label>
      </node>
      <node id="2458">
        <label>testcpu.cpp</label>
      </node>
      <node id="2466">
        <label>compiler.h</label>
        <childnode refid="2450" relation="include">
        </childnode>
        <childnode refid="2467" relation="include">
        </childnode>
        <childnode refid="2468" relation="include">
        </childnode>
        <childnode refid="2471" relation="include">
        </childnode>
        <childnode refid="2473" relation="include">
        </childnode>
        <childnode refid="2470" relation="include">
        </childnode>
      </node>
      <node id="2471">
        <label>x86defs.h</label>
        <childnode refid="2472" relation="include">
        </childnode>
        <childnode refid="2473" relation="include">
        </childnode>
        <childnode refid="2474" relation="include">
        </childnode>
        <childnode refid="2470" relation="include">
        </childnode>
        <childnode refid="2465" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structasmjit_1_1Zone" prot="public">asmjit::Zone</innerclass>
    <innerclass refid="structasmjit_1_1Zone_1_1Chunk" prot="public">asmjit::Zone::Chunk</innerclass>
    <innernamespace refid="namespaceasmjit">asmjit</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMJIT_BASE_ZONE_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_ASMJIT_BASE_ZONE_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="16"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_base</highlight></codeline>
<codeline lineno="17"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::Zone]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">//!<sp/>@brief<sp/>Fast<sp/>incremental<sp/>memory<sp/>allocator.</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="25"><highlight class="comment">//!<sp/>Memory<sp/>allocator<sp/>designed<sp/>to<sp/>allocate<sp/>small<sp/>objects<sp/>that<sp/>will<sp/>be<sp/>invalidated</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//!<sp/>(free)<sp/>all<sp/>at<sp/>once.</highlight></codeline>
<codeline lineno="27" refid="structasmjit_1_1Zone" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1Zone" kindref="compound" tooltip="Fast incremental memory allocator.">Zone</ref><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Chunk]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>One<sp/>allocated<sp/>chunk<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Chunk<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>count<sp/>of<sp/>remaining<sp/>(unused)<sp/>bytes<sp/>in<sp/>chunk.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>getRemainingSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size<sp/>-<sp/>pos;<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Link<sp/>to<sp/>previous<sp/>chunk.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>Chunk*<sp/>prev;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Position<sp/>in<sp/>this<sp/>chunk.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Size<sp/>of<sp/>this<sp/>chunk<sp/>(in<sp/>bytes).</highlight></codeline>
<codeline lineno="44"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Data.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>data[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)];</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>instance<sp/>of<sp/>@c<sp/>Zone<sp/>allocator.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>//!<sp/>@param<sp/>chunkSize<sp/>Default<sp/>size<sp/>of<sp/>the<sp/>first<sp/>chunk.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1Zone_1aa149dca67383ad19e563e3cfd24120cc" kindref="member" tooltip="Create a new instance of Zone allocator.">Zone</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkSize);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>@ref<sp/>Zone<sp/>instance.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1Zone_1ae94a7270b072c927ee2e14d28a95c40d" kindref="member" tooltip="Destroy Zone instance.">~Zone</ref>();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Clear<sp/>/<sp/>Reset]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Free<sp/>all<sp/>allocated<sp/>memory<sp/>except<sp/>first<sp/>block<sp/>that<sp/>remains<sp/>for<sp/>reuse.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/>//!<sp/>Note<sp/>that<sp/>this<sp/>method<sp/>will<sp/>invalidate<sp/>all<sp/>instances<sp/>using<sp/>this<sp/>memory</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/>//!<sp/>allocated<sp/>by<sp/>this<sp/>zone<sp/>instance.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Zone_1a96ea6f474546d09502ad270af0b82422" kindref="member" tooltip="Free all allocated memory except first block that remains for reuse.">clear</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Free<sp/>all<sp/>allocated<sp/>memory<sp/>at<sp/>once.</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/>//!<sp/>Note<sp/>that<sp/>this<sp/>method<sp/>will<sp/>invalidate<sp/>all<sp/>instances<sp/>using<sp/>this<sp/>memory</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/>//!<sp/>allocated<sp/>by<sp/>this<sp/>zone<sp/>instance.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Zone_1a253ae00df345d8aa7d2c6989496ac986" kindref="member" tooltip="Free all allocated memory at once.">reset</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>(default)<sp/>chunk<sp/>size.</highlight></codeline>
<codeline lineno="83" refid="structasmjit_1_1Zone_1a3cee4658b5b080c2285f157040e038ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Zone_1a3cee4658b5b080c2285f157040e038ca" kindref="member" tooltip="Get (default) chunk size.">getChunkSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Zone_1a4a1de48b6327c6f264bb38498f507518" kindref="member" tooltip="Default chunk size.">_chunkSize</ref>;<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Alloc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Allocate<sp/>@c<sp/>size<sp/>bytes<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/>//!<sp/>Pointer<sp/>allocated<sp/>by<sp/>this<sp/>way<sp/>will<sp/>be<sp/>valid<sp/>until<sp/>@c<sp/>Zone<sp/>object<sp/>is</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/>//!<sp/>destroyed.<sp/>To<sp/>create<sp/>class<sp/>by<sp/>this<sp/>way<sp/>use<sp/>placement<sp/>@c<sp/>new<sp/>and<sp/>@c<sp/>delete</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/>//!<sp/>operators:</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/>//!<sp/>@code</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>Example<sp/>of<sp/>simple<sp/>class<sp/>allocation.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/>//!<sp/>using<sp/>namespace<sp/>asmjit</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>Your<sp/>class.</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/>//!<sp/>class<sp/>Object</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/>//!<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>//<sp/>members...</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/>//!<sp/>};</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>Your<sp/>function</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/>//!<sp/>void<sp/>f()</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/>//!<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>//<sp/>Create<sp/>zone<sp/>object<sp/>with<sp/>chunk<sp/>size<sp/>of<sp/>65536<sp/>bytes.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>Zone<sp/>zone(65536);</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>//<sp/>Create<sp/>your<sp/>objects<sp/>using<sp/>zone<sp/>object<sp/>allocating,<sp/>for<sp/>example:</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>Object*<sp/>obj<sp/>=<sp/>new(zone.alloc(sizeof(YourClass)))<sp/>Object();</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>//<sp/>...<sp/>lifetime<sp/>of<sp/>your<sp/>objects<sp/>...</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>//<sp/>Destroy<sp/>your<sp/>objects:</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>obj-&gt;~Object();</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>//<sp/>Zone<sp/>destructor<sp/>will<sp/>free<sp/>all<sp/>memory<sp/>allocated<sp/>through<sp/>it,<sp/>you<sp/>can</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>//<sp/>call<sp/>@c<sp/>zone.reset()<sp/>if<sp/>you<sp/>wan&apos;t<sp/>to<sp/>reuse<sp/>current<sp/>@ref<sp/>Zone.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/>//!<sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/>//!<sp/>@endcode</highlight></codeline>
<codeline lineno="123" refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>Chunk*<sp/>cur<sp/>=<sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur-&gt;getRemainingSize()<sp/>&lt;<sp/>size)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_alloc(size);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>p<sp/>=<sp/>cur-&gt;data<sp/>+<sp/>cur-&gt;pos;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>cur-&gt;pos<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(cur-&gt;pos<sp/>&lt;=<sp/>cur-&gt;size);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)p;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Like<sp/>@ref<sp/>alloc(),<sp/>but<sp/>returns<sp/>&lt;code&gt;T*&lt;/code&gt;.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="138" refid="structasmjit_1_1Zone_1aff1f5ac43e4a8c42a7dbc5cf8e0b7a47" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>T*<sp/><ref refid="structasmjit_1_1Zone_1aff1f5ac43e4a8c42a7dbc5cf8e0b7a47" kindref="member" tooltip="Like alloc(), but returns T*.">allocT</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T))<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(size));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="143"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_alloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Allocate<sp/>@c<sp/>size<sp/>bytes<sp/>of<sp/>zeroed<sp/>memory.</highlight></codeline>
<codeline lineno="146" refid="structasmjit_1_1Zone_1ae557fd4914c39ce401ea23e855cb4583" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1Zone_1ae557fd4914c39ce401ea23e855cb4583" kindref="member" tooltip="Allocate size bytes of zeroed memory.">calloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>Chunk*<sp/>cur<sp/>=<sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur-&gt;getRemainingSize()<sp/>&lt;<sp/>size)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_calloc(size);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>p<sp/>=<sp/>cur-&gt;data<sp/>+<sp/>cur-&gt;pos;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>cur-&gt;pos<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(cur-&gt;pos<sp/>&lt;=<sp/>cur-&gt;size);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>::memset(p,<sp/>0,<sp/>size);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)p;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="161"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>_calloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Helper<sp/>to<sp/>duplicate<sp/>data.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1Zone_1a2d832389e5898c0fcc52c6d22728a826" kindref="member" tooltip="Helper to duplicate data.">dup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Helper<sp/>to<sp/>duplicate<sp/>string.</highlight></codeline>
<codeline lineno="167"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1Zone_1a6dde61ffae89af5a1ca189db8767eec5" kindref="member" tooltip="Helper to duplicate string.">sdup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Helper<sp/>to<sp/>duplicate<sp/>formatted<sp/>string,<sp/>maximum<sp/>length<sp/>is<sp/>256<sp/>bytes.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1Zone_1a7a89a9728df35f2486f724ad1754880e" kindref="member" tooltip="Helper to duplicate formatted string, maximum length is 256 bytes.">sformat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/>...);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Last<sp/>allocated<sp/>chunk<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="177" refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>Chunk*<sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Default<sp/>chunk<sp/>size.</highlight></codeline>
<codeline lineno="179" refid="structasmjit_1_1Zone_1a4a1de48b6327c6f264bb38498f507518" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Zone_1a4a1de48b6327c6f264bb38498f507518" kindref="member" tooltip="Default chunk size.">_chunkSize</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="182"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="183"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_ASMJIT_BASE_ZONE_H</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/base/zone.h"/>
  </compounddef>
</doxygen>
