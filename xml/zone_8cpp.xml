<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="zone_8cpp" kind="file">
    <compoundname>zone.cpp</compoundname>
    <includes refid="defs_8h" local="yes">../base/defs.h</includes>
    <includes refid="intutil_8h" local="yes">../base/intutil.h</includes>
    <includes refid="zone_8h" local="yes">../base/zone.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes refid="apibegin_8h" local="yes">../base/apibegin.h</includes>
    <includes refid="apiend_8h" local="yes">../base/apiend.h</includes>
    <incdepgraph>
      <node id="2418">
        <label>../base/globals.h</label>
        <childnode refid="2419" relation="include">
        </childnode>
        <childnode refid="2425" relation="include">
        </childnode>
        <childnode refid="2426" relation="include">
        </childnode>
      </node>
      <node id="2426">
        <label>../base/apiend.h</label>
      </node>
      <node id="2424">
        <label>stdarg.h</label>
      </node>
      <node id="2428">
        <label>stdint.h</label>
      </node>
      <node id="2422">
        <label>stdlib.h</label>
      </node>
      <node id="2430">
        <label>../base/zone.h</label>
        <childnode refid="2425" relation="include">
        </childnode>
        <childnode refid="2426" relation="include">
        </childnode>
      </node>
      <node id="2425">
        <label>../base/apibegin.h</label>
        <childnode refid="2419" relation="include">
        </childnode>
      </node>
      <node id="2416">
        <label>../base/defs.h</label>
        <childnode refid="2417" relation="include">
        </childnode>
        <childnode refid="2425" relation="include">
        </childnode>
        <childnode refid="2426" relation="include">
        </childnode>
      </node>
      <node id="2429">
        <label>limits.h</label>
      </node>
      <node id="2427">
        <label>new</label>
      </node>
      <node id="2420">
        <label>config.h</label>
      </node>
      <node id="2417">
        <label>../base/intutil.h</label>
        <childnode refid="2418" relation="include">
        </childnode>
        <childnode refid="2425" relation="include">
        </childnode>
        <childnode refid="2426" relation="include">
        </childnode>
      </node>
      <node id="2415">
        <label>zone.cpp</label>
        <link refid="zone.cpp"/>
        <childnode refid="2416" relation="include">
        </childnode>
        <childnode refid="2417" relation="include">
        </childnode>
        <childnode refid="2430" relation="include">
        </childnode>
        <childnode refid="2424" relation="include">
        </childnode>
        <childnode refid="2425" relation="include">
        </childnode>
        <childnode refid="2426" relation="include">
        </childnode>
      </node>
      <node id="2419">
        <label>../build.h</label>
        <childnode refid="2420" relation="include">
        </childnode>
        <childnode refid="2421" relation="include">
        </childnode>
        <childnode refid="2422" relation="include">
        </childnode>
        <childnode refid="2423" relation="include">
        </childnode>
        <childnode refid="2427" relation="include">
        </childnode>
        <childnode refid="2428" relation="include">
        </childnode>
        <childnode refid="2429" relation="include">
        </childnode>
      </node>
      <node id="2421">
        <label>stdio.h</label>
      </node>
      <node id="2423">
        <label>string.h</label>
        <childnode refid="2416" relation="include">
        </childnode>
        <childnode refid="2418" relation="include">
        </childnode>
        <childnode refid="2424" relation="include">
        </childnode>
        <childnode refid="2425" relation="include">
        </childnode>
        <childnode refid="2426" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceasmjit">asmjit</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="zone_8cpp_1a4885b81a3643f489bcb59697d21cb21d" prot="public" static="no">
        <name>ASMJIT_EXPORTS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/zone.cpp" line="8" bodyfile="/home/ryan/asmjit/src/asmjit/base/zone.cpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Export]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASMJIT_EXPORTS</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/defs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/intutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/zone.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>C]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">//!<sp/>@brief<sp/>Zero<sp/>width<sp/>chunk<sp/>used<sp/>when<sp/>Zone<sp/>doesn&apos;t<sp/>have<sp/>any<sp/>memory<sp/>allocated.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Zone::Chunk<sp/>Zone_zeroChunk<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>NULL,<sp/>0,<sp/>0,<sp/>{<sp/>0<sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::Zone<sp/>-<sp/>Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="structasmjit_1_1Zone_1aa149dca67383ad19e563e3cfd24120cc" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1Zone_1aa149dca67383ad19e563e3cfd24120cc" kindref="member" tooltip="Create a new instance of Zone allocator.">Zone::Zone</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkSize)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref><sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Zone::Chunk*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;Zone_zeroChunk);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Zone_1a4a1de48b6327c6f264bb38498f507518" kindref="member" tooltip="Default chunk size.">_chunkSize</ref><sp/>=<sp/>chunkSize;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structasmjit_1_1Zone_1ae94a7270b072c927ee2e14d28a95c40d" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1Zone_1ae94a7270b072c927ee2e14d28a95c40d" kindref="member" tooltip="Destroy Zone instance.">Zone::~Zone</ref>()<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Zone_1a253ae00df345d8aa7d2c6989496ac986" kindref="member" tooltip="Free all allocated memory at once.">reset</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::Zone<sp/>-<sp/>Clear<sp/>/<sp/>Reset]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="structasmjit_1_1Zone_1a96ea6f474546d09502ad270af0b82422" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Zone_1a96ea6f474546d09502ad270af0b82422" kindref="member" tooltip="Free all allocated memory except first block that remains for reuse.">Zone::clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>Chunk*<sp/>cur<sp/>=<sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur<sp/>==<sp/>&amp;Zone_zeroChunk)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>cur<sp/>=<sp/>cur-&gt;prev;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cur<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>Chunk*<sp/>prev<sp/>=<sp/>cur-&gt;prev;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>::free(cur);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref>-&gt;pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref>-&gt;prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="structasmjit_1_1Zone_1a253ae00df345d8aa7d2c6989496ac986" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Zone_1a253ae00df345d8aa7d2c6989496ac986" kindref="member" tooltip="Free all allocated memory at once.">Zone::reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>Chunk*<sp/>cur<sp/>=<sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur<sp/>==<sp/>&amp;Zone_zeroChunk)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cur<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>Chunk*<sp/>prev<sp/>=<sp/>cur-&gt;prev;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>::free(cur);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref><sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Zone::Chunk*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;Zone_zeroChunk);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::Zone<sp/>-<sp/>Alloc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Zone::_alloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>Chunk*<sp/>cur<sp/>=<sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(cur<sp/>==<sp/>&amp;Zone_zeroChunk<sp/>||<sp/>cur-&gt;getRemainingSize()<sp/>&lt;<sp/>size);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkSize<sp/>=<sp/><ref refid="structasmjit_1_1Zone_1a4a1de48b6327c6f264bb38498f507518" kindref="member" tooltip="Default chunk size.">_chunkSize</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(chunkSize<sp/>&lt;<sp/>size)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>chunkSize<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>cur<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Chunk*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(::malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Chunk)<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>+<sp/>chunkSize));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>cur-&gt;prev<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>cur-&gt;pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>cur-&gt;size<sp/>=<sp/>chunkSize;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref><sp/>!=<sp/>&amp;Zone_zeroChunk)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>cur-&gt;prev<sp/>=<sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Zone_1a142af8ce75cf4b9c720fe18595ed934f" kindref="member" tooltip="Last allocated chunk of memory.">_chunks</ref><sp/>=<sp/>cur;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>p<sp/>=<sp/>cur-&gt;data<sp/>+<sp/>cur-&gt;pos;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>cur-&gt;pos<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(cur-&gt;pos<sp/>&lt;=<sp/>cur-&gt;size);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)p;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>Zone::_calloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>_alloc(size);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>::memset(p,<sp/>0,<sp/>size);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="structasmjit_1_1Zone_1a2d832389e5898c0fcc52c6d22728a826" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1Zone_1a2d832389e5898c0fcc52c6d22728a826" kindref="member" tooltip="Helper to duplicate data.">Zone::dup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>m<sp/>=<sp/><ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(size);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>::memcpy(m,<sp/>data,<sp/>size);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="structasmjit_1_1Zone_1a6dde61ffae89af5a1ca189db8767eec5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1Zone_1a6dde61ffae89af5a1ca189db8767eec5" kindref="member" tooltip="Helper to duplicate string.">Zone::sdup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>strlen(str);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Include<sp/>NULL<sp/>terminator<sp/>and<sp/>limit<sp/>string<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++len<sp/>&gt;<sp/>256)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>m<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(len));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>::memcpy(m,<sp/>str,<sp/>len);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>m[len<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="structasmjit_1_1Zone_1a7a89a9728df35f2486f724ad1754880e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1Zone_1a7a89a9728df35f2486f724ad1754880e" kindref="member" tooltip="Helper to duplicate formatted string, maximum length is 256 bytes.">Zone::sformat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[256];</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>vsnprintf(buf,<sp/>256,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>len<sp/>=<sp/>IntUtil::iMin&lt;size_t&gt;(len,<sp/>255);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>buf[len++]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Zone_1a2d832389e5898c0fcc52c6d22728a826" kindref="member" tooltip="Helper to duplicate data.">dup</ref>(buf,<sp/>len));</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/base/zone.cpp"/>
  </compounddef>
</doxygen>
