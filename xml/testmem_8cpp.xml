<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="testmem_8cpp" kind="file">
    <compoundname>testmem.cpp</compoundname>
    <includes refid="asmjit_8h" local="no">asmjit/asmjit.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <incdepgraph>
      <node id="1817">
        <label>../base/globals.h</label>
        <childnode refid="1810" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1819">
        <label>../base/apiend.h</label>
      </node>
      <node id="1820">
        <label>stdarg.h</label>
      </node>
      <node id="1825">
        <label>../base/codegen.h</label>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1826" relation="include">
        </childnode>
        <childnode refid="1827" relation="include">
        </childnode>
        <childnode refid="1828" relation="include">
        </childnode>
        <childnode refid="1829" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1835">
        <label>base/lock.h</label>
        <childnode refid="1810" relation="include">
        </childnode>
        <childnode refid="1836" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1837">
        <label>base/memorymanager.h</label>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1822">
        <label>stdint.h</label>
      </node>
      <node id="1813">
        <label>stdlib.h</label>
      </node>
      <node id="1826">
        <label>../base/error.h</label>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1808">
        <label>asmjit/asmjit.h</label>
        <childnode refid="1809" relation="include">
        </childnode>
        <childnode refid="1840" relation="include">
        </childnode>
      </node>
      <node id="1829">
        <label>../base/zone.h</label>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1818">
        <label>../base/apibegin.h</label>
        <childnode refid="1810" relation="include">
        </childnode>
      </node>
      <node id="1827">
        <label>../base/logger.h</label>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1814" relation="include">
        </childnode>
        <childnode refid="1820" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1824">
        <label>base/assembler.h</label>
        <childnode refid="1825" relation="include">
        </childnode>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1826" relation="include">
        </childnode>
        <childnode refid="1827" relation="include">
        </childnode>
        <childnode refid="1830" relation="include">
        </childnode>
        <childnode refid="1831" relation="include">
        </childnode>
        <childnode refid="1828" relation="include">
        </childnode>
        <childnode refid="1829" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1815">
        <label>../base/defs.h</label>
        <childnode refid="1816" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1823">
        <label>limits.h</label>
      </node>
      <node id="1830">
        <label>../base/podlist.h</label>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1836">
        <label>pthread.h</label>
      </node>
      <node id="1831">
        <label>../base/podvector.h</label>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1826" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1809">
        <label>base.h</label>
        <childnode refid="1810" relation="include">
        </childnode>
        <childnode refid="1824" relation="include">
        </childnode>
        <childnode refid="1825" relation="include">
        </childnode>
        <childnode refid="1832" relation="include">
        </childnode>
        <childnode refid="1834" relation="include">
        </childnode>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1826" relation="include">
        </childnode>
        <childnode refid="1833" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1816" relation="include">
        </childnode>
        <childnode refid="1835" relation="include">
        </childnode>
        <childnode refid="1827" relation="include">
        </childnode>
        <childnode refid="1837" relation="include">
        </childnode>
        <childnode refid="1830" relation="include">
        </childnode>
        <childnode refid="1831" relation="include">
        </childnode>
        <childnode refid="1814" relation="include">
        </childnode>
        <childnode refid="1838" relation="include">
        </childnode>
        <childnode refid="1839" relation="include">
        </childnode>
        <childnode refid="1829" relation="include">
        </childnode>
      </node>
      <node id="1821">
        <label>new</label>
      </node>
      <node id="1839">
        <label>base/vmem.h</label>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1834">
        <label>base/cpu.h</label>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1811">
        <label>config.h</label>
      </node>
      <node id="1838">
        <label>base/vectypes.h</label>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1816">
        <label>../base/intutil.h</label>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1828">
        <label>../base/runtime.h</label>
        <childnode refid="1826" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1807">
        <label>testmem.cpp</label>
        <link refid="testmem.cpp"/>
        <childnode refid="1808" relation="include">
        </childnode>
        <childnode refid="1812" relation="include">
        </childnode>
        <childnode refid="1813" relation="include">
        </childnode>
        <childnode refid="1814" relation="include">
        </childnode>
      </node>
      <node id="1840">
        <label>host.h</label>
        <childnode refid="1809" relation="include">
        </childnode>
      </node>
      <node id="1810">
        <label>build.h</label>
        <childnode refid="1811" relation="include">
        </childnode>
        <childnode refid="1812" relation="include">
        </childnode>
        <childnode refid="1813" relation="include">
        </childnode>
        <childnode refid="1814" relation="include">
        </childnode>
        <childnode refid="1821" relation="include">
        </childnode>
        <childnode refid="1822" relation="include">
        </childnode>
        <childnode refid="1823" relation="include">
        </childnode>
      </node>
      <node id="1812">
        <label>stdio.h</label>
      </node>
      <node id="1814">
        <label>string.h</label>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1820" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1833">
        <label>../base/func.h</label>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1817" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
      <node id="1832">
        <label>base/compiler.h</label>
        <childnode refid="1824" relation="include">
        </childnode>
        <childnode refid="1825" relation="include">
        </childnode>
        <childnode refid="1815" relation="include">
        </childnode>
        <childnode refid="1826" relation="include">
        </childnode>
        <childnode refid="1833" relation="include">
        </childnode>
        <childnode refid="1816" relation="include">
        </childnode>
        <childnode refid="1830" relation="include">
        </childnode>
        <childnode refid="1831" relation="include">
        </childnode>
        <childnode refid="1828" relation="include">
        </childnode>
        <childnode refid="1818" relation="include">
        </childnode>
        <childnode refid="1819" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="testmem_8cpp_1ac2bdc4a9cd2a8b8c62030c4578d1e34d" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int problems</definition>
        <argsstring></argsstring>
        <name>problems</name>
        <initializer> 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/app/test/testmem.cpp" line="17" bodyfile="/home/ryan/asmjit/src/app/test/testmem.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="testmem_8cpp_1a3e607bb7e5080de80802ea4f320d71e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gen</definition>
        <argsstring>(void *a, void *b, int i)</argsstring>
        <name>gen</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/app/test/testmem.cpp" line="19" bodyfile="/home/ryan/asmjit/src/app/test/testmem.cpp" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="testmem_8cpp_1a5638682784a6a9d7d252a0808f24e19e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void verify</definition>
        <argsstring>(void *a, void *b)</argsstring>
        <name>verify</name>
        <param>
          <type>void *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/app/test/testmem.cpp" line="27" bodyfile="/home/ryan/asmjit/src/app/test/testmem.cpp" bodystart="27" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="testmem_8cpp_1a42c831020558b8d880920cdf12ca0407" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void die</definition>
        <argsstring>()</argsstring>
        <name>die</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/app/test/testmem.cpp" line="37" bodyfile="/home/ryan/asmjit/src/app/test/testmem.cpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="testmem_8cpp_1a4369a17791e8f22528e94c7570f02563" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void stats</definition>
        <argsstring>(MemoryManager *memmgr)</argsstring>
        <name>stats</name>
        <param>
          <type><ref refid="structasmjit_1_1MemoryManager" kindref="compound">MemoryManager</ref> *</type>
          <declname>memmgr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/app/test/testmem.cpp" line="42" bodyfile="/home/ryan/asmjit/src/app/test/testmem.cpp" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="testmem_8cpp_1a5a1855b79f4968a95d511e7e374a1beb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void shuffle</definition>
        <argsstring>(void **a, void **b, size_t count)</argsstring>
        <name>shuffle</name>
        <param>
          <type>void **</type>
          <declname>a</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>b</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/app/test/testmem.cpp" line="47" bodyfile="/home/ryan/asmjit/src/app/test/testmem.cpp" bodystart="47" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="testmem_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/app/test/testmem.cpp" line="62" bodyfile="/home/ryan/asmjit/src/app/test/testmem.cpp" bodystart="62" bodyend="173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;asmjit/asmjit.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>C]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">asmjit;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>problems<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>gen(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>b,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pattern<sp/>=<sp/>rand()<sp/>%<sp/>256;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)a<sp/><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)b<sp/><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>::memset((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)a<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>pattern,<sp/>i<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>::memset((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)b<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">),<sp/>pattern,<sp/>i<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>verify(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>a,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ai<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)a;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bi<sp/>=<sp/>*(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)b;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ai<sp/>!=<sp/>bi<sp/>||<sp/>memcmp(a,<sp/>b,<sp/>ai)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>verify<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>a);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>problems++;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>die()<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>allocate<sp/>virtual<sp/>memory,<sp/>this<sp/>test<sp/>needs<sp/>at<sp/>least<sp/>100MB<sp/>of<sp/>free<sp/>virtual<sp/>memory.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>stats(<ref refid="structasmjit_1_1MemoryManager" kindref="compound" tooltip="Virtual memory manager interface.">MemoryManager</ref>*<sp/>memmgr)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;--<sp/>Used:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)memmgr-&gt;<ref refid="structasmjit_1_1MemoryManager_1a3c857e73f5851f36cfec68be2a87403f" kindref="member" tooltip="Get how many bytes are currently used.">getUsedBytes</ref>());</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;--<sp/>Allocated:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)memmgr-&gt;<ref refid="structasmjit_1_1MemoryManager_1a32d762ee420d3863e8931b14b9658a4f" kindref="member" tooltip="Get how many bytes are currently allocated.">getAllocatedBytes</ref>());</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>shuffle(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**a,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**b,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gaa8b171d60de31743a13e44bd7aa353a0" kindref="member" tooltip="Gpw register.">si</ref><sp/>=<sp/>(size_t)rand()<sp/>%<sp/>count;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ta<sp/>=<sp/>a[i];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*tb<sp/>=<sp/>b[i];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i]<sp/>=<sp/>a[<ref refid="group__asmjit__x86x64_1gaa8b171d60de31743a13e44bd7aa353a0" kindref="member" tooltip="Gpw register.">si</ref>];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>b[<ref refid="group__asmjit__x86x64_1gaa8b171d60de31743a13e44bd7aa353a0" kindref="member" tooltip="Gpw register.">si</ref>];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>a[<ref refid="group__asmjit__x86x64_1gaa8b171d60de31743a13e44bd7aa353a0" kindref="member" tooltip="Gpw register.">si</ref>]<sp/>=<sp/>ta;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>b[<ref refid="group__asmjit__x86x64_1gaa8b171d60de31743a13e44bd7aa353a0" kindref="member" tooltip="Gpw register.">si</ref>]<sp/>=<sp/>tb;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1MemoryManager" kindref="compound" tooltip="Virtual memory manager interface.">MemoryManager</ref>*<sp/>memmgr<sp/>=<sp/><ref refid="structasmjit_1_1MemoryManager_1a9f49c72d7c2fac093dd76a5ff800f0fe" kindref="member" tooltip="Get global memory manager instance.">MemoryManager::getGlobal</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>200000;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Memory<sp/>alloc/free<sp/>test<sp/>-<sp/>%d<sp/>allocations\n\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)count);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>a<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)::malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>*<sp/>count);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>b<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**)::malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>*<sp/>count);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a<sp/>||<sp/>!b)<sp/>die();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>srand(100);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Allocating<sp/>virtual<sp/>memory...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>(rand()<sp/>%<sp/>1000)<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i]<sp/>=<sp/>memmgr-&gt;<ref refid="structasmjit_1_1MemoryManager_1aaec761f463f2956d2722c2da1695215d" kindref="member" tooltip="Allocate a size bytes of virtual memory.">alloc</ref>(r);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[i]<sp/>==<sp/>NULL)<sp/>die();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>::memset(a[i],<sp/>0,<sp/>r);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;done\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>stats(memmgr);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Freeing<sp/>virtual<sp/>memory...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memmgr-&gt;<ref refid="structasmjit_1_1MemoryManager_1a0b4ac246abb5c7ecfe20f258244d509b" kindref="member" tooltip="Free previously allocated memory at a given address.">release</ref>(a[i])<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>free<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>b[i]);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>problems++;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;done\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>stats(memmgr);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Verified<sp/>alloc/free<sp/>test<sp/>-<sp/>%d<sp/>allocations\n\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)count);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Alloc...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>(rand()<sp/>%<sp/>1000)<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i]<sp/>=<sp/>memmgr-&gt;<ref refid="structasmjit_1_1MemoryManager_1aaec761f463f2956d2722c2da1695215d" kindref="member" tooltip="Allocate a size bytes of virtual memory.">alloc</ref>(r);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>::malloc(r);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[i]<sp/>==<sp/>NULL<sp/>||<sp/>b[i]<sp/>==<sp/>NULL)<sp/>die();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>gen(a[i],<sp/>b[i],<sp/>r);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;done\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>stats(memmgr);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Shuffling...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>shuffle(a,<sp/>b,<sp/>count);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;done\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Verify<sp/>and<sp/>free...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count<sp/>/<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>verify(a[i],<sp/>b[i]);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memmgr-&gt;<ref refid="structasmjit_1_1MemoryManager_1a0b4ac246abb5c7ecfe20f258244d509b" kindref="member" tooltip="Free previously allocated memory at a given address.">release</ref>(a[i])<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>free<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>a[i]);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>problems++;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>free(b[i]);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;done\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>stats(memmgr);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Alloc...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count<sp/>/<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r<sp/>=<sp/>(rand()<sp/>%<sp/>1000)<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>a[i]<sp/>=<sp/>memmgr-&gt;<ref refid="structasmjit_1_1MemoryManager_1aaec761f463f2956d2722c2da1695215d" kindref="member" tooltip="Allocate a size bytes of virtual memory.">alloc</ref>(r);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>b[i]<sp/>=<sp/>::malloc(r);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a[i]<sp/>==<sp/>NULL<sp/>||<sp/>b[i]<sp/>==<sp/>NULL)<sp/>die();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>gen(a[i],<sp/>b[i],<sp/>r);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;done\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>stats(memmgr);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Verify<sp/>and<sp/>free...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>verify(a[i],<sp/>b[i]);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memmgr-&gt;<ref refid="structasmjit_1_1MemoryManager_1a0b4ac246abb5c7ecfe20f258244d509b" kindref="member" tooltip="Free previously allocated memory at a given address.">release</ref>(a[i])<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>free<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>a[i]);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>problems++;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>free(b[i]);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;done\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>stats(memmgr);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(problems)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Status:<sp/>Failure:<sp/>%d<sp/>problems<sp/>found\n&quot;</highlight><highlight class="normal">,<sp/>problems);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Status:<sp/>Success\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>::free(a);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>::free(b);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/app/test/testmem.cpp"/>
  </compounddef>
</doxygen>
