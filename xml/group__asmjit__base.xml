<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="group__asmjit__base" kind="group">
    <compoundname>asmjit_base</compoundname>
    <title>Platform neutral API, abstract classes and operands.</title>
    <innerclass refid="structasmjit_1_1LabelLink" prot="public">asmjit::LabelLink</innerclass>
    <innerclass refid="structasmjit_1_1LabelData" prot="public">asmjit::LabelData</innerclass>
    <innerclass refid="structasmjit_1_1RelocData" prot="public">asmjit::RelocData</innerclass>
    <innerclass refid="structasmjit_1_1BaseAssembler" prot="public">asmjit::BaseAssembler</innerclass>
    <innerclass refid="structasmjit_1_1CodeGen" prot="public">asmjit::CodeGen</innerclass>
    <innerclass refid="structasmjit_1_1BaseCpu" prot="public">asmjit::BaseCpu</innerclass>
    <innerclass refid="structasmjit_1_1Operand" prot="public">asmjit::Operand</innerclass>
    <innerclass refid="structasmjit_1_1OperandUtil" prot="public">asmjit::OperandUtil</innerclass>
    <innerclass refid="structasmjit_1_1BaseReg" prot="public">asmjit::BaseReg</innerclass>
    <innerclass refid="structasmjit_1_1BaseMem" prot="public">asmjit::BaseMem</innerclass>
    <innerclass refid="structasmjit_1_1BaseVar" prot="public">asmjit::BaseVar</innerclass>
    <innerclass refid="structasmjit_1_1Imm" prot="public">asmjit::Imm</innerclass>
    <innerclass refid="structasmjit_1_1Label" prot="public">asmjit::Label</innerclass>
    <innerclass refid="structasmjit_1_1ErrorHandler" prot="public">asmjit::ErrorHandler</innerclass>
    <innerclass refid="structasmjit_1_1ErrorUtil" prot="public">asmjit::ErrorUtil</innerclass>
    <innerclass refid="structasmjit_1_1__Init" prot="public">asmjit::_Init</innerclass>
    <innerclass refid="structasmjit_1_1__NoInit" prot="public">asmjit::_NoInit</innerclass>
    <innerclass refid="structasmjit_1_1IntTraits" prot="public">asmjit::IntTraits</innerclass>
    <innerclass refid="structasmjit_1_1IntUtil" prot="public">asmjit::IntUtil</innerclass>
    <innerclass refid="unionasmjit_1_1UInt64" prot="public">asmjit::UInt64</innerclass>
    <innerclass refid="structasmjit_1_1Lock" prot="public">asmjit::Lock</innerclass>
    <innerclass refid="structasmjit_1_1AutoLock" prot="public">asmjit::AutoLock</innerclass>
    <innerclass refid="structasmjit_1_1PodList" prot="public">asmjit::PodList</innerclass>
    <innerclass refid="structasmjit_1_1PodVectorData" prot="public">asmjit::PodVectorData</innerclass>
    <innerclass refid="structasmjit_1_1PodVectorBase" prot="public">asmjit::PodVectorBase</innerclass>
    <innerclass refid="structasmjit_1_1PodVector" prot="public">asmjit::PodVector</innerclass>
    <innerclass refid="structasmjit_1_1StringUtil" prot="public">asmjit::StringUtil</innerclass>
    <innerclass refid="structasmjit_1_1StringBuilder" prot="public">asmjit::StringBuilder</innerclass>
    <innerclass refid="structasmjit_1_1StringBuilderT" prot="public">asmjit::StringBuilderT</innerclass>
    <innerclass refid="structasmjit_1_1VMem" prot="public">asmjit::VMem</innerclass>
    <innerclass refid="structasmjit_1_1Zone" prot="public">asmjit::Zone</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__asmjit__base_1ga1e5786823de989baf3528c6d8033cbc9" prot="public" static="no">
        <name>kCodeGen</name>
        <enumvalue id="group__asmjit__base_1gga1e5786823de989baf3528c6d8033cbc9af84c8f14d20066c430419110d14c0ced" prot="public">
          <name>kCodeGenOptimizedAlign</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Emit optimized code-alignment sequences. </para>          </briefdescription>
          <detaileddescription>
<para>X86/X64:</para><para>Default align sequence used by X86/X64 architecture is one-byte 0x90 opcode that is mostly shown by disassemblers as nop. However there are more optimized align sequences for 2-11 bytes that may execute faster. If this feature is enabled asmjit will generate specialized sequences for alignment between 1 to 11 bytes. Also when x86x64::Compiler is used, it may add rex prefixes into the code to make some instructions larger so no alignment sequences are needed.</para><para>true. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga1e5786823de989baf3528c6d8033cbc9a6e46cdab2550ee673837adc632451037" prot="public">
          <name>kCodeGenPredictedJumps</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Emit jump-prediction hints. </para>          </briefdescription>
          <detaileddescription>
<para>X86/X64:</para><para>Jump prediction is usually based on the direction of the jump. If the jump is backward it is usually predicted as taken; and if the jump is forward it is usually predicted as not-taken. The reason is that loops generally use backward jumps and conditions usually use forward jumps. However this behavior can be overridden by using instruction prefixes. If this option is enabled these hints will be emitted.</para><para>true. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="structasmjit_1_1CodeGen" kindref="compound">CodeGen</ref> features. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/codegen.h" line="31" bodyfile="/home/ryan/asmjit/src/asmjit/base/codegen.h" bodystart="31" bodyend="60"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1gaf99557bc959d675f99a7413c43b18491" prot="public" static="no">
        <name>kCpuVendor</name>
        <enumvalue id="group__asmjit__base_1ggaf99557bc959d675f99a7413c43b18491a373fc1ee653533046adad518101c2a2b" prot="public">
          <name>kCpuVendorUnknown</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Unknown CPU vendor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggaf99557bc959d675f99a7413c43b18491a3e4d75ca28030952346e1228e0e135d1" prot="public">
          <name>kCpuVendorIntel</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Intel CPU vendor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggaf99557bc959d675f99a7413c43b18491a6a2f3432bac2f693af105f463d13db02" prot="public">
          <name>kCpuVendorAmd</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>AMD CPU vendor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggaf99557bc959d675f99a7413c43b18491a84fcc958361f8be6594bacd4efbf3fac" prot="public">
          <name>kCpuVendorNSM</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>National Semiconductor CPU vendor (applies also to Cyrix processors). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggaf99557bc959d675f99a7413c43b18491a3ce730dbe74d5cc9274aca654b2212c4" prot="public">
          <name>kCpuVendorTransmeta</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Transmeta CPU vendor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggaf99557bc959d675f99a7413c43b18491a608f861dd08c9029e7992419a82e13d9" prot="public">
          <name>kCpuVendorVia</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>VIA CPU vendor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Cpu vendor IDs. </para>        </briefdescription>
        <detaileddescription>
<para>Cpu vendor IDs are specific for AsmJit library. Vendor ID is not directly read from cpuid result, instead it&apos;s based on CPU vendor string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/cpu.h" line="30" bodyfile="/home/ryan/asmjit/src/asmjit/base/cpu.h" bodystart="30" bodyend="44"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1ga12e36dc942976d5794c1e88619b5e8cb" prot="public" static="no">
        <name>kOperandType</name>
        <enumvalue id="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba5606bb706ba515b597456bed0abe8b03" prot="public">
          <name>kOperandTypeNone</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Invalid operand, used only internally (not initialized <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref>). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba8742403556c7e635e7531c58252de1ea" prot="public">
          <name>kOperandTypeReg</name>
          <initializer> 1</initializer>
          <briefdescription>
<para><ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> is a register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cbad24fc6aeac580335e62f8a11e8a2043f" prot="public">
          <name>kOperandTypeVar</name>
          <initializer> 2</initializer>
          <briefdescription>
<para><ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> is a variable. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" prot="public">
          <name>kOperandTypeMem</name>
          <initializer> 3</initializer>
          <briefdescription>
<para><ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> is a memory. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba1d91cd01cea7a2b5067aa24907d1372b" prot="public">
          <name>kOperandTypeImm</name>
          <initializer> 4</initializer>
          <briefdescription>
<para><ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> is an immediate value. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba2dcaa04fd5ea217510587264bb4ecac8" prot="public">
          <name>kOperandTypeLabel</name>
          <initializer> 5</initializer>
          <briefdescription>
<para><ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> is a label. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> types that can be encoded in <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="34" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="34" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1ga1941577d59c9d0f61a4bcde8c19ec9c5" prot="public" static="no">
        <name>kOperandId</name>
        <enumvalue id="group__asmjit__base_1gga1941577d59c9d0f61a4bcde8c19ec9c5a295c08b8f3024d78e730ef790265d632" prot="public">
          <name>kOperandIdVar</name>
          <initializer> 0x80000000U</initializer>
          <briefdescription>
<para><ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> id refers to <ref refid="structasmjit_1_1BaseVar" kindref="compound">BaseVar</ref>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga1941577d59c9d0f61a4bcde8c19ec9c5a57978d4fcf92c565ed3798a59dfd3eda" prot="public">
          <name>kOperandIdNum</name>
          <initializer> 0x7FFFFFFFU</initializer>
          <briefdescription>
<para><ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> id to real index mask. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> id masks used to determine the operand type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="54" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1ga99bcebf1cfe0e5748810ea481c0191e7" prot="public" static="no">
        <name>kRegClass</name>
        <enumvalue id="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" prot="public">
          <name>kRegClassGp</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Gp register class (any architecture). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a9ee1beb9a4b48c08d666811d3776ed65" prot="public">
          <name>kRegClassInvalid</name>
          <initializer> 0xFF</initializer>
          <briefdescription>
<para>Invalid register class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Register class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="66" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="66" bodyend="72"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1gac34fc57ca3f35b031f715fded4fb35f3" prot="public" static="no">
        <name>kInstCode</name>
        <enumvalue id="group__asmjit__base_1ggac34fc57ca3f35b031f715fded4fb35f3a40322f3634e1579cf825c83e286dc39b" prot="public">
          <name>kInstNone</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>No instruction. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Instruction codes (stub). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="79" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1ga1a4feb7204b0ca222114af10730305bc" prot="public" static="no">
        <name>kInstOptions</name>
        <enumvalue id="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bcaba5334994b8849b668e2fce1bed61cea" prot="public">
          <name>kInstOptionNone</name>
          <initializer> 0x00</initializer>
          <briefdescription>
<para>No instruction options. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca3f497bb7cd655089b1e5470867cbc187" prot="public">
          <name>kInstOptionShortForm</name>
          <initializer> 0x01</initializer>
          <briefdescription>
<para>Emit short form of the instruction. </para>          </briefdescription>
          <detaileddescription>
<para>X86/X64:</para><para>Short form is mostly related to jmp and jcc instructions, but can be used by other instructions supporting 8-bit or 32-bit immediates. This option can be dangerous if the short jmp/jcc is required, but not encodable due to large displacement, in such case an error happens and the whole assembler/compiler stream is unusable. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca0914ab67e09d24f2e0c0d512b70c7f08" prot="public">
          <name>kInstOptionLongForm</name>
          <initializer> 0x02</initializer>
          <briefdescription>
<para>Emit long form of the instruction. </para>          </briefdescription>
          <detaileddescription>
<para>X86/X64:</para><para>Long form is mosrlt related to jmp and jcc instructions, but like the kInstOptionShortForm option it can be used by other instructions supporting both 8-bit and 32-bit immediates. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4df01d78f89add2e942ec79ad211a4f5" prot="public">
          <name>kInstOptionTaken</name>
          <initializer> 0x04</initializer>
          <briefdescription>
<para>Condition is likely to be taken (instruction). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4c436f33ba83c4df5948e49e01a5ef67" prot="public">
          <name>kInstOptionNotTaken</name>
          <initializer> 0x08</initializer>
          <briefdescription>
<para>Condition is unlikely to be taken (instruction). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Instruction options (stub). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="89" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="89" bodyend="117"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1gaf2740675f6f8b14a3aea317cd6c75ade" prot="public" static="no">
        <name>kSize</name>
        <enumvalue id="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" prot="public">
          <name>kSizeByte</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>1 byte size. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" prot="public">
          <name>kSizeWord</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>2 bytes size. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" prot="public">
          <name>kSizeDWord</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>4 bytes size. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" prot="public">
          <name>kSizeQWord</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>8 bytes size. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" prot="public">
          <name>kSizeTWord</name>
          <initializer> 10</initializer>
          <briefdescription>
<para>10 bytes size. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" prot="public">
          <name>kSizeOWord</name>
          <initializer> 16</initializer>
          <briefdescription>
<para>16 bytes size. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" prot="public">
          <name>kSizeYWord</name>
          <initializer> 32</initializer>
          <briefdescription>
<para>32 bytes size. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Common size of registers and pointers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="124" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="124" bodyend="139"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1ga2c246b178fd6ed7e28cf318e9432af7c" prot="public" static="no">
        <name>kMemType</name>
        <enumvalue id="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" prot="public">
          <name>kMemTypeBaseIndex</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Memory operand is a combination of base register, optional index register and optional displacement. </para>          </briefdescription>
          <detaileddescription>
<para><simplesect kind="note"><para>The Assembler interprets kMemTypeBaseIndex and kMemTypeStackIndex types the same way, but Compiler interprets kMemTypeBaseIndex as [base + index] and kMemTypeStackIndex as [stack(base) + index]. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" prot="public">
          <name>kMemTypeStackIndex</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Memory operand is a combination of variable&apos;s memory location, optional index register and displacement. </para>          </briefdescription>
          <detaileddescription>
<para><simplesect kind="note"><para>The Assembler interprets kMemTypeBaseIndex and kMemTypeStackIndex types in the same way, but Compiler interprets kMemTypeBaseIndex as [base + index] and kMemTypeStackIndex as [stack(base) + index]. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7cae82bd56fa0b87db8b547e91bd69ac096" prot="public">
          <name>kMemTypeLabel</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>Memory operand refers to the memory location specified by a label. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca1af22cea9780418b75dcac75808743ac" prot="public">
          <name>kMemTypeAbsolute</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>Memory operand is an absolute memory location. </para>          </briefdescription>
          <detaileddescription>
<para>Supported mostly by x86, truncated to a 32-bit value when running in 64-bit mode (x64). </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type of memory operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="146" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="146" bodyend="172"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1ga9ca66fe5934ea03c67056886d4738059" prot="public" static="no">
        <name>kVarType</name>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" prot="public">
          <name>kVarTypeInt8</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Variable is signed 8-bit integer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" prot="public">
          <name>kVarTypeUInt8</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Variable is unsigned 8-bit integer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" prot="public">
          <name>kVarTypeInt16</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>Variable is signed 16-bit integer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" prot="public">
          <name>kVarTypeUInt16</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>Variable is unsigned 16-bit integer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" prot="public">
          <name>kVarTypeInt32</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Variable is signed 32-bit integer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" prot="public">
          <name>kVarTypeUInt32</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>Variable is unsigned 32-bit integer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" prot="public">
          <name>kVarTypeInt64</name>
          <initializer> 6</initializer>
          <briefdescription>
<para>Variable is signed 64-bit integer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" prot="public">
          <name>kVarTypeUInt64</name>
          <initializer> 7</initializer>
          <briefdescription>
<para>Variable is unsigned 64-bit integer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a773337143d44de47e460e5e280661e3e" prot="public">
          <name>kVarTypeIntPtr</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>Variable is target <computeroutput>intptr_t</computeroutput> (not compatible with host <computeroutput>intptr_t</computeroutput>). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a68a9e960e4b15136ae863da48d59f8cd" prot="public">
          <name>kVarTypeUIntPtr</name>
          <initializer> 9</initializer>
          <briefdescription>
<para>Variable is target <computeroutput>uintptr_t</computeroutput> (not compatible with host <computeroutput>uintptr_t</computeroutput>). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" prot="public">
          <name>kVarTypeFp32</name>
          <initializer> 10</initializer>
          <briefdescription>
<para>Variable is 32-bit floating point (single precision). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" prot="public">
          <name>kVarTypeFp64</name>
          <initializer> 11</initializer>
          <briefdescription>
<para>Variable is 64-bit floating point (double precision). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a1e19eaa393e8cb9865b1acd0d728d7bb" prot="public">
          <name>kVarTypeInvalid</name>
          <initializer> 0xFF</initializer>
          <briefdescription>
<para>Invalid variable type. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059afd88f50df8c216dd3e476e99799de86c" prot="public">
          <name>_kVarTypeIntStart</name>
          <initializer> kVarTypeInt8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a03ee1e22b305010e570ade684a7cd94a" prot="public">
          <name>_kVarTypeIntEnd</name>
          <initializer> kVarTypeUIntPtr</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a7ed02f3acbd4599096af4f47372068a4" prot="public">
          <name>_kVarTypeFpStart</name>
          <initializer> kVarTypeFp32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aa25f57a01011b697e3adad93df386cd9" prot="public">
          <name>_kVarTypeFpEnd</name>
          <initializer> kVarTypeFp64</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="178" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="178" bodyend="218"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1ga2af0fdb24baf154053f9c66acd758768" prot="public" static="no">
        <name>kRelocMode</name>
        <enumvalue id="group__asmjit__base_1gga2af0fdb24baf154053f9c66acd758768a0a158a0afd9ed0973269b36204c680df" prot="public">
          <name>kRelocAbsToAbs</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga2af0fdb24baf154053f9c66acd758768a75488012e611e93764a75e06053073c2" prot="public">
          <name>kRelocRelToAbs</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga2af0fdb24baf154053f9c66acd758768a968339673812ca61cc335f0432389a43" prot="public">
          <name>kRelocAbsToRel</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga2af0fdb24baf154053f9c66acd758768ae654c4a1c549633eee83b1ac32878977" prot="public">
          <name>kRelocTrampoline</name>
          <initializer> 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="224" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="224" bodyend="229"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1ga4d80121b99d57fc3e7269801bc1e98af" prot="public" static="no">
        <name>kError</name>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" prot="public">
          <name>kErrorOk</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>No error (success). </para>          </briefdescription>
          <detaileddescription>
<para>This is default state and state you want. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" prot="public">
          <name>kErrorNoHeapMemory</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Heap memory allocation failed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa1f04b9953660ab89255e8be134f5d621" prot="public">
          <name>kErrorNoVirtualMemory</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>Virtual memory allocation failed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afacf36f8ebff7fdd3f8cff8688b86d399e" prot="public">
          <name>kErrorInvalidArgument</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>Invalid argument. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa78799e101ad4020abb524d7ebef96902" prot="public">
          <name>kErrorInvalidState</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Invalid state. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afacf3902dc2b1981434c3d586c38f939aa" prot="public">
          <name>kErrorAssemblerUnknownInst</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>Unknown instruction. This happens only if instruction code is out of bounds. Shouldn&apos;t happen. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa346fdaab81454d309e04e9e42ec45191" prot="public">
          <name>kErrorAssemblerIllegalInst</name>
          <initializer> 6</initializer>
          <briefdescription>
<para>Illegal instruction, usually generated by asmjit::Assembler class when emitting instruction opcode. If this error is generated the target buffer is not affected by this invalid instruction. </para>          </briefdescription>
          <detaileddescription>
<para>You can also get this status code if you are under x64 (64-bit x86) and you tried to decode instruction using AH, BH, CH or DH register with REX prefix. These registers can&apos;t be accessed if REX prefix is used and AsmJit didn&apos;t check for this situation in intrinsics (<computeroutput>Compiler</computeroutput> takes care of this and rearrange registers if needed).</para><para>Examples that will raise <computeroutput>kErrorAssemblerIllegalInst</computeroutput> error (a is <computeroutput>Assembler</computeroutput> instance):</para><para><programlisting><codeline><highlight class="normal"><sp/>a.mov(<ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(<ref refid="group__asmjit__x86x64_1ga26df91f0fa40947bb620b176472bf3d3" kindref="member" tooltip="Gpd register.">eax</ref>),<sp/><ref refid="group__asmjit__x86x64_1ga79b2845f7cab7fb453e202877e02d069" kindref="member" tooltip="Gpb-lo register.">al</ref>);<sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>address<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>a.mov(<ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(r10),<sp/><ref refid="group__asmjit__x86x64_1gad3d48dab9109c26546c94766a3b33825" kindref="member" tooltip="Gpb-hi register.">ah</ref>);<sp/><sp/></highlight><highlight class="comment">//<sp/>Undecodable<sp/>instruction<sp/>(AH<sp/>used<sp/>with<sp/>r10</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>can<sp/>be<sp/>encoded<sp/>by<sp/>using<sp/>REX<sp/>prefix<sp/>only)</highlight></codeline>
</programlisting></para><para><simplesect kind="note"><para>In debug mode you get assertion failure instead of setting error code. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa708a3224cc77d587a93504eec23b1971" prot="public">
          <name>kErrorAssemblerIllegalAddr</name>
          <initializer> 7</initializer>
          <briefdescription>
<para>Illegal addressing used (unencodable). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa735bf5ee691bb952bd2fd59247751e45" prot="public">
          <name>kErrorAssemblerIllegalShortJump</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>Short jump instruction used, but displacement is out of bounds. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa1dcaa20750234e63b2bd9e96ac3b42ed" prot="public">
          <name>kErrorCompilerNoFunc</name>
          <initializer> 9</initializer>
          <briefdescription>
<para>No function defined. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa2c8eab5f276914a2333a0623ae75fc92" prot="public">
          <name>kErrorCompilerIncompleteFunc</name>
          <initializer> 10</initializer>
          <briefdescription>
<para>Function generation is not finished by using <computeroutput>Compiler::endFunc()</computeroutput> or something bad happened during generation related to function. This can be missing compiler node, etc... </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afae9cd29c4aecbbf8c96e5800dc01b7f37" prot="public">
          <name>kErrorCompilerOverlappedArgs</name>
          <initializer> 11</initializer>
          <briefdescription>
<para>Tried to generate a function with overlapped arguments. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa0f3a9d1e584ee324e5f5769a941c996f" prot="public">
          <name>kErrorCompilerNoRegs</name>
          <initializer> 12</initializer>
          <briefdescription>
<para>Compiler can&apos;t allocate registers. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa456d136cd9336cb9f516a2f8d5458ac2" prot="public">
          <name>kErrorCompilerOverlappedRegs</name>
          <initializer> 13</initializer>
          <briefdescription>
<para>Compiler can&apos;t allocate registers, because they overlap. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa582fa84c94ce8e85375183eb1f82aae7" prot="public">
          <name>kErrorCompilerIncompatibleArg</name>
          <initializer> 14</initializer>
          <briefdescription>
<para>Tried to call function with an incompatible argument. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa6c59c4c25cc85605baf7e981c49994ac" prot="public">
          <name>kErrorCompilerIncompatibleRet</name>
          <initializer> 15</initializer>
          <briefdescription>
<para>Incompatible return value. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afaef398e9d771bed55744ed34798650fe8" prot="public">
          <name>kErrorCount</name>
          <initializer> 16</initializer>
          <briefdescription>
<para>Count of AsmJit status codes. Can grow in future. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AsmJit error codes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/error.h" line="24" bodyfile="/home/ryan/asmjit/src/asmjit/base/error.h" bodystart="24" bodyend="91"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1ga0e7868a21bae2d1653ab275d6020e4de" prot="public" static="no">
        <name>kGlobals</name>
        <enumvalue id="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" prot="public">
          <name>kInvalidValue</name>
          <initializer> 0xFFFFFFFF</initializer>
          <briefdescription>
<para>Invalid value or operand id. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" prot="public">
          <name>kInvalidReg</name>
          <initializer> 0xFF</initializer>
          <briefdescription>
<para>Invalid register index. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea2af85491aa499ddf71e1d5541f0f6990" prot="public">
          <name>kBufferGrow</name>
          <initializer> 32U</initializer>
          <briefdescription>
<para>Minimum reserved bytes in Buffer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea9ddef91955d2ced375c90287feda24a2" prot="public">
          <name>kMemAllocMinimum</name>
          <initializer> 4096</initializer>
          <briefdescription>
<para>Minimum size of assembler/compiler code buffer. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4deaf57f10b0f67dc1de5f70188fc8b35dd6" prot="public">
          <name>kMemAllocGrowMax</name>
          <initializer> 8192 * 1024</initializer>
          <briefdescription>
<para>Memory grow threshold. </para>          </briefdescription>
          <detaileddescription>
<para>After the grow threshold is reached the capacity won&apos;t be doubled anymore. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea296578ff073ac37c73f692864a529129" prot="public">
          <name>kMemAllocOverhead</name>
          <initializer> sizeof(intptr_t) * 4</initializer>
          <briefdescription>
<para>Host memory allocator overhead. </para>          </briefdescription>
          <detaileddescription>
<para>We decrement the overhead from our pools so the host operating system doesn&apos;t need allocate an extra virtual page to put the data it needs to manage the requested memory block (for example if a single virtual page is 4096 and we require the same memory size we decrease our requirement by kMemAllocOverhead). </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/globals.h" line="28" bodyfile="/home/ryan/asmjit/src/asmjit/base/globals.h" bodystart="28" bodyend="55"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1ga2360fa86fd003572056ea5b790630e98" prot="public" static="no">
        <name>kArch</name>
        <enumvalue id="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a6fa38f2eb4a35299c100501c9111540e" prot="public">
          <name>kArchNone</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>No/Unknown architecture. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" prot="public">
          <name>kArchX86</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>X86 architecture. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98ac570137deb519c20e131c51ed65d2426" prot="public">
          <name>kArchX64</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>X64 architecture, also called AMD64. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a7352aeb10a9e020bcb42538a9480598f" prot="public">
          <name>kArchArm</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Arm architecture. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Architecture. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/globals.h" line="62" bodyfile="/home/ryan/asmjit/src/asmjit/base/globals.h" bodystart="62" bodyend="88"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1gadc7ca6dbc5c94fc4ab122e3f0a8c1206" prot="public" static="no">
        <name>kStringOp</name>
        <enumvalue id="group__asmjit__base_1ggadc7ca6dbc5c94fc4ab122e3f0a8c1206a6cfd8fc6b944c40e8d37bc425c493cac" prot="public">
          <name>kStringOpSet</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Replace the current string by a given content. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggadc7ca6dbc5c94fc4ab122e3f0a8c1206ad3f1db597c0ffb9ee7fa7159173af48a" prot="public">
          <name>kStringOpAppend</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Append a given content to the current string. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>String operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/string.h" line="31" bodyfile="/home/ryan/asmjit/src/asmjit/base/string.h" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__base_1gad75838fc8ed01730f1edc507ddecbbef" prot="public" static="no">
        <name>kStringFormat</name>
        <enumvalue id="group__asmjit__base_1ggad75838fc8ed01730f1edc507ddecbbefa0012893d9e1a60d19308afe0f92de842" prot="public">
          <name>kStringFormatShowSign</name>
          <initializer> 0x00000001</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggad75838fc8ed01730f1edc507ddecbbefaa1036929762fb5a3f63dd5a7194428f0" prot="public">
          <name>kStringFormatShowSpace</name>
          <initializer> 0x00000002</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggad75838fc8ed01730f1edc507ddecbbefaa75a4c7317292730bc47796967d8ae96" prot="public">
          <name>kStringFormatAlternate</name>
          <initializer> 0x00000004</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__base_1ggad75838fc8ed01730f1edc507ddecbbefa4f480ed8a61209b1ce8b64fbbf332a85" prot="public">
          <name>kStringFormatSigned</name>
          <initializer> 0x80000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>String format flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/string.h" line="43" bodyfile="/home/ryan/asmjit/src/asmjit/base/string.h" bodystart="43" bodyend="48"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__asmjit__base_1ga39730f3011134c2aa11a5692aea2a4ae" prot="public" static="no">
        <type>int64_t</type>
        <definition>typedef int64_t asmjit::SignedPtr</definition>
        <argsstring></argsstring>
        <name>SignedPtr</name>
        <briefdescription>
<para>64-bit signed pointer, compatible with JIT and non-JIT generators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="236" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" prot="public" static="no">
        <type>uint64_t</type>
        <definition>typedef uint64_t asmjit::Ptr</definition>
        <argsstring></argsstring>
        <name>Ptr</name>
        <briefdescription>
<para>64-bit unsigned pointer, compatible with JIT and non-JIT generators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="239" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__asmjit__base_1gade1d7d51bda1acb8e049f1e78fd4ec30" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t asmjit::Error</definition>
        <argsstring></argsstring>
        <name>Error</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/error.h" line="97" bodyfile="/home/ryan/asmjit/src/asmjit/base/error.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__asmjit__base_1ga14a277e675d899ed66c38b6d834ead84" prot="public" static="no" mutable="no">
        <type>const Operand</type>
        <definition>ASMJIT_API const Operand asmjit::noOperand</definition>
        <argsstring></argsstring>
        <name>noOperand</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.cpp" line="22" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__base_1ga1563f10d16ccc9599b314a4fcbe78dd6" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t asmjit::kInvalidIndex</definition>
        <argsstring></argsstring>
        <name>kInvalidIndex</name>
        <initializer> ~static_cast&lt;size_t&gt;(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/globals.h" line="26" bodyfile="/home/ryan/asmjit/src/asmjit/base/globals.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__base_1ga54d3e86ab080cb27df3294c895c0edd8" prot="public" static="yes" mutable="no">
        <type>const _Init</type>
        <definition>const _Init asmjit::Init</definition>
        <argsstring></argsstring>
        <name>Init</name>
        <initializer> {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/globals.h" line="95" bodyfile="/home/ryan/asmjit/src/asmjit/base/globals.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__base_1gac53a0622c30b5a478baca749f7da822c" prot="public" static="yes" mutable="no">
        <type>const _NoInit</type>
        <definition>const _NoInit asmjit::NoInit</definition>
        <argsstring></argsstring>
        <name>NoInit</name>
        <initializer> {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/globals.h" line="98" bodyfile="/home/ryan/asmjit/src/asmjit/base/globals.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Imm</type>
        <definition>static Imm asmjit::imm</definition>
        <argsstring>(int64_t val)</argsstring>
        <name>imm</name>
        <param>
          <type>int64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Create signed immediate value operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="1075" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="1075" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__base_1ga4594b4672222fbd0152080800fe73779" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Imm</type>
        <definition>static Imm asmjit::imm_u</definition>
        <argsstring>(uint64_t val)</argsstring>
        <name>imm_u</name>
        <param>
          <type>uint64_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Create unsigned immediate value operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="1077" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="1077" bodyend="1077"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__base_1ga765b5df64ba936f3026390664085d518" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Imm</type>
        <definition>static Imm asmjit::imm_ptr</definition>
        <argsstring>(void *p)</argsstring>
        <name>imm_ptr</name>
        <param>
          <type>void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Create void* pointer immediate value operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="1079" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="1079" bodyend="1079"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__base_1ga14c6796911b413c3fe1ad198e186901f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>ASMJIT_API void asmjit::assertionFailed</definition>
        <argsstring>(const char *exp, const char *file, int line)</argsstring>
        <name>assertionFailed</name>
        <param>
          <type>const char *</type>
          <declname>exp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Called in debug build on assertion failure. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exp</parametername>
</parameternamelist>
<parameterdescription>
<para>Expression that failed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>Source file name where it happened. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>Line in the source file.</para></parameterdescription>
</parameteritem>
</parameterlist>
If you have problems with assertions put a breakpoint at <ref refid="group__asmjit__base_1ga14c6796911b413c3fe1ad198e186901f" kindref="member">assertionFailed()</ref> function (asmjit/base/assert.cpp) to see what happened. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/globals.cpp" line="22" bodyfile="/home/ryan/asmjit/src/asmjit/base/globals.cpp" bodystart="22" bodyend="25"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__asmjit__base_1gac3afe7431f1f99e17034e65dbc045c14" prot="public" static="no">
        <name>ASMJIT_PROPAGATE_ERROR</name>
        <param><defname>_Exp_</defname></param>
        <initializer>do { \
    ::asmjit::Error errval_ = (_Exp_); \
    if (errval_ != ::asmjit::kErrorOk) \
      return errval_; \
  } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/error.h" line="186" bodyfile="/home/ryan/asmjit/src/asmjit/base/error.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains all AsmJit classes and helper functions that are neutral or abstract. All abstract classes are reimplemented for every supported architecture.</para><para><itemizedlist>
<listitem><para>See <computeroutput>asmjit::Assembler</computeroutput> class for low level code generation documentation.</para></listitem><listitem><para>See <computeroutput><ref refid="structasmjit_1_1Operand" kindref="compound">asmjit::Operand</ref></computeroutput> for AsmJit operand&apos;s overview.</para></listitem></itemizedlist>
</para><sect1 id="group__asmjit__base_1AsmJit_Core_Registers">
<title>Registers</title>
<para>There are static objects that represents X86 and X64 registers. They can be used directly (like <computeroutput>eax</computeroutput>, <computeroutput>mm</computeroutput>, <computeroutput>xmm</computeroutput>, ...) or created through these functions:</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga89be8bc827d7615648e7074c9b0a11b3" kindref="member">asmjit::gpb_lo()</ref></computeroutput> - Get Gpb-lo register.</para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga0005f63fd37e6867078d64f361c6c49d" kindref="member">asmjit::gpb_hi()</ref></computeroutput> - Get Gpb-hi register.</para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga84d074ec698bde54e1b258a5afe0ab21" kindref="member">asmjit::gpw()</ref></computeroutput> - Get Gpw register.</para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga7edc123ef6a6bc00b64fe45d9a295c1c" kindref="member">asmjit::gpd()</ref></computeroutput> - Get Gpd register.</para></listitem><listitem><para><computeroutput>asmjit::gpq()</computeroutput> - Get Gpq Gp register.</para></listitem><listitem><para><computeroutput>asmjit::gpz()</computeroutput> - Get Gpd/Gpq register.</para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga966625c8483c9f4de98c1697840ab166" kindref="member">asmjit::fp()</ref></computeroutput> - Get Fp register.</para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga9a8333264f20709b9757ea2fe6d98062" kindref="member">asmjit::mm()</ref></computeroutput> - Get Mm register.</para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member">asmjit::xmm()</ref></computeroutput> - Get Xmm register.</para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga670a05a7edf855537e6d4d30c4ccb135" kindref="member">asmjit::ymm()</ref></computeroutput> - Get Ymm register.</para></listitem></itemizedlist>
</para></sect1>
<sect1 id="group__asmjit__base_1AsmJit_Core_Addressing">
<title>Addressing</title>
<para>X86 and x64 architectures contains several addressing modes and most ones are possible with AsmJit library. Memory represents are represented by <computeroutput><ref refid="structasmjit_1_1BaseMem" kindref="compound">asmjit::BaseMem</ref></computeroutput> class. These functions are used to make operands that represents memory addresses:</para><para><itemizedlist>
<listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member">asmjit::ptr()</ref></computeroutput> </para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member">asmjit::byte_ptr()</ref></computeroutput> </para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member">asmjit::word_ptr()</ref></computeroutput> </para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member">asmjit::dword_ptr()</ref></computeroutput> </para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member">asmjit::qword_ptr()</ref></computeroutput> </para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member">asmjit::tword_ptr()</ref></computeroutput> </para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member">asmjit::oword_ptr()</ref></computeroutput> </para></listitem><listitem><para><computeroutput><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member">asmjit::yword_ptr()</ref></computeroutput> </para></listitem><listitem><para><computeroutput>asmjit::intptr_ptr()</computeroutput> </para></listitem></itemizedlist>
</para><para>Most useful function to make pointer should be <computeroutput><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member">asmjit::ptr()</ref></computeroutput>. It creates pointer to the target with unspecified size. Unspecified size works in all intrinsics where are used registers (this means that size is specified by register operand or by instruction itself). For example <computeroutput><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member">asmjit::ptr()</ref></computeroutput> can&apos;t be used with <computeroutput>asmjit::Assembler::inc()</computeroutput> instruction. In this case size must be specified and it&apos;s also reason to make difference between pointer sizes.</para><para>Supported are simple address forms (register + displacement) and complex address forms (register + (register &lt;&lt; shift) + displacement).</para></sect1>
<sect1 id="group__asmjit__base_1AsmJit_Core_Immediates">
<title>Immediates</title>
<para>Immediate values are constants thats passed directly after instruction opcode. To create such value use <computeroutput><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member">asmjit::imm()</ref></computeroutput> or <computeroutput><ref refid="group__asmjit__base_1ga4594b4672222fbd0152080800fe73779" kindref="member">asmjit::imm_u()</ref></computeroutput> methods to create signed or unsigned immediate value.</para><para><simplesect kind="see"><para><computeroutput><ref refid="structasmjit_1_1BaseCompiler" kindref="compound">asmjit::BaseCompiler</ref></computeroutput>. </para></simplesect>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
