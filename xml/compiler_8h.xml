<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="compiler_8h" kind="file">
    <compoundname>compiler.h</compoundname>
    <includes refid="assembler_8h" local="yes">../base/assembler.h</includes>
    <includes refid="codegen_8h" local="yes">../base/codegen.h</includes>
    <includes refid="defs_8h" local="yes">../base/defs.h</includes>
    <includes refid="error_8h" local="yes">../base/error.h</includes>
    <includes refid="func_8h" local="yes">../base/func.h</includes>
    <includes refid="intutil_8h" local="yes">../base/intutil.h</includes>
    <includes refid="podlist_8h" local="yes">../base/podlist.h</includes>
    <includes refid="podvector_8h" local="yes">../base/podvector.h</includes>
    <includes refid="runtime_8h" local="yes">../base/runtime.h</includes>
    <includes refid="apibegin_8h" local="yes">../base/apibegin.h</includes>
    <includes refid="apiend_8h" local="yes">../base/apiend.h</includes>
    <includedby refid="base_8h" local="yes">base.h</includedby>
    <includedby refid="compiler_8cpp" local="yes">compiler.cpp</includedby>
    <includedby refid="context__p_8h" local="yes">context_p.h</includedby>
    <includedby refid="x86defs_8h" local="yes">x86defs.h</includedby>
    <includedby refid="x86compiler_8h" local="yes">x86compiler.h</includedby>
    <includedby refid="x86context__p_8h" local="yes">x86context_p.h</includedby>
    <incdepgraph>
      <node id="532">
        <label>../base/globals.h</label>
        <childnode refid="533" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="540">
        <label>../base/apiend.h</label>
      </node>
      <node id="538">
        <label>stdarg.h</label>
      </node>
      <node id="529">
        <label>../base/codegen.h</label>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="544" relation="include">
        </childnode>
        <childnode refid="545" relation="include">
        </childnode>
        <childnode refid="546" relation="include">
        </childnode>
        <childnode refid="547" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="542">
        <label>stdint.h</label>
      </node>
      <node id="536">
        <label>stdlib.h</label>
      </node>
      <node id="544">
        <label>../base/error.h</label>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="547">
        <label>../base/zone.h</label>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="539">
        <label>../base/apibegin.h</label>
        <childnode refid="533" relation="include">
        </childnode>
      </node>
      <node id="545">
        <label>../base/logger.h</label>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="528">
        <label>../base/assembler.h</label>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="544" relation="include">
        </childnode>
        <childnode refid="545" relation="include">
        </childnode>
        <childnode refid="548" relation="include">
        </childnode>
        <childnode refid="549" relation="include">
        </childnode>
        <childnode refid="546" relation="include">
        </childnode>
        <childnode refid="547" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="530">
        <label>../base/defs.h</label>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="543">
        <label>limits.h</label>
      </node>
      <node id="548">
        <label>../base/podlist.h</label>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="549">
        <label>../base/podvector.h</label>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="544" relation="include">
        </childnode>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="541">
        <label>new</label>
      </node>
      <node id="534">
        <label>config.h</label>
      </node>
      <node id="531">
        <label>../base/intutil.h</label>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="546">
        <label>../base/runtime.h</label>
        <childnode refid="544" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="533">
        <label>../build.h</label>
        <childnode refid="534" relation="include">
        </childnode>
        <childnode refid="535" relation="include">
        </childnode>
        <childnode refid="536" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
        <childnode refid="542" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
      </node>
      <node id="535">
        <label>stdio.h</label>
      </node>
      <node id="537">
        <label>string.h</label>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="550">
        <label>../base/func.h</label>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
      <node id="527">
        <label>compiler.h</label>
        <link refid="compiler.h"/>
        <childnode refid="528" relation="include">
        </childnode>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="544" relation="include">
        </childnode>
        <childnode refid="550" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="548" relation="include">
        </childnode>
        <childnode refid="549" relation="include">
        </childnode>
        <childnode refid="546" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="559">
        <label>testopcode.cpp</label>
      </node>
      <node id="571">
        <label>x86context_p.h</label>
      </node>
      <node id="554">
        <label>asmjit.h</label>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
        <childnode refid="558" relation="include">
        </childnode>
        <childnode refid="560" relation="include">
        </childnode>
        <childnode refid="561" relation="include">
        </childnode>
        <childnode refid="562" relation="include">
        </childnode>
        <childnode refid="559" relation="include">
        </childnode>
        <childnode refid="557" relation="include">
        </childnode>
      </node>
      <node id="561">
        <label>testdummy.cpp</label>
      </node>
      <node id="567">
        <label>x86.h</label>
      </node>
      <node id="574">
        <label>x86compiler.h</label>
        <childnode refid="571" relation="include">
        </childnode>
        <childnode refid="567" relation="include">
        </childnode>
      </node>
      <node id="568">
        <label>compiler.cpp</label>
      </node>
      <node id="553">
        <label>testsizeof.cpp</label>
      </node>
      <node id="552">
        <label>base.h</label>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="554" relation="include">
        </childnode>
        <childnode refid="563" relation="include">
        </childnode>
        <childnode refid="564" relation="include">
        </childnode>
        <childnode refid="565" relation="include">
        </childnode>
        <childnode refid="566" relation="include">
        </childnode>
        <childnode refid="567" relation="include">
        </childnode>
      </node>
      <node id="565">
        <label>winremoteruntime.h</label>
        <childnode refid="566" relation="include">
        </childnode>
      </node>
      <node id="557">
        <label>testx86.cpp</label>
      </node>
      <node id="575">
        <label>x86func.h</label>
        <childnode refid="574" relation="include">
        </childnode>
        <childnode refid="567" relation="include">
        </childnode>
      </node>
      <node id="558">
        <label>genopcode.h</label>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="559" relation="include">
        </childnode>
      </node>
      <node id="569">
        <label>context_p.h</label>
        <childnode refid="568" relation="include">
        </childnode>
        <childnode refid="570" relation="include">
        </childnode>
        <childnode refid="571" relation="include">
        </childnode>
      </node>
      <node id="556">
        <label>genblend.h</label>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="557" relation="include">
        </childnode>
      </node>
      <node id="570">
        <label>context.cpp</label>
      </node>
      <node id="573">
        <label>x86assembler.h</label>
        <childnode refid="574" relation="include">
        </childnode>
        <childnode refid="571" relation="include">
        </childnode>
        <childnode refid="567" relation="include">
        </childnode>
      </node>
      <node id="564">
        <label>winremoteruntime.cpp</label>
      </node>
      <node id="562">
        <label>testmem.cpp</label>
      </node>
      <node id="563">
        <label>host.h</label>
        <childnode refid="554" relation="include">
        </childnode>
      </node>
      <node id="566">
        <label>contrib.h</label>
      </node>
      <node id="555">
        <label>benchx86.cpp</label>
      </node>
      <node id="560">
        <label>testcpu.cpp</label>
      </node>
      <node id="551">
        <label>compiler.h</label>
        <link refid="compiler.h"/>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="568" relation="include">
        </childnode>
        <childnode refid="569" relation="include">
        </childnode>
        <childnode refid="572" relation="include">
        </childnode>
        <childnode refid="574" relation="include">
        </childnode>
        <childnode refid="571" relation="include">
        </childnode>
      </node>
      <node id="572">
        <label>x86defs.h</label>
        <childnode refid="573" relation="include">
        </childnode>
        <childnode refid="574" relation="include">
        </childnode>
        <childnode refid="575" relation="include">
        </childnode>
        <childnode refid="571" relation="include">
        </childnode>
        <childnode refid="567" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structasmjit_1_1MemCell" prot="public">asmjit::MemCell</innerclass>
    <innerclass refid="structasmjit_1_1VarBits" prot="public">asmjit::VarBits</innerclass>
    <innerclass refid="structasmjit_1_1VarData" prot="public">asmjit::VarData</innerclass>
    <innerclass refid="structasmjit_1_1VarAttr" prot="public">asmjit::VarAttr</innerclass>
    <innerclass refid="structasmjit_1_1BaseVarInst" prot="public">asmjit::BaseVarInst</innerclass>
    <innerclass refid="structasmjit_1_1BaseVarState" prot="public">asmjit::BaseVarState</innerclass>
    <innerclass refid="structasmjit_1_1BaseNode" prot="public">asmjit::BaseNode</innerclass>
    <innerclass refid="structasmjit_1_1AlignNode" prot="public">asmjit::AlignNode</innerclass>
    <innerclass refid="structasmjit_1_1EmbedNode" prot="public">asmjit::EmbedNode</innerclass>
    <innerclass refid="structasmjit_1_1CommentNode" prot="public">asmjit::CommentNode</innerclass>
    <innerclass refid="structasmjit_1_1HintNode" prot="public">asmjit::HintNode</innerclass>
    <innerclass refid="structasmjit_1_1TargetNode" prot="public">asmjit::TargetNode</innerclass>
    <innerclass refid="structasmjit_1_1InstNode" prot="public">asmjit::InstNode</innerclass>
    <innerclass refid="structasmjit_1_1JumpNode" prot="public">asmjit::JumpNode</innerclass>
    <innerclass refid="structasmjit_1_1FuncNode" prot="public">asmjit::FuncNode</innerclass>
    <innerclass refid="structasmjit_1_1EndNode" prot="public">asmjit::EndNode</innerclass>
    <innerclass refid="structasmjit_1_1RetNode" prot="public">asmjit::RetNode</innerclass>
    <innerclass refid="structasmjit_1_1CallNode" prot="public">asmjit::CallNode</innerclass>
    <innerclass refid="structasmjit_1_1SArgNode" prot="public">asmjit::SArgNode</innerclass>
    <innerclass refid="structasmjit_1_1BaseCompiler" prot="public">asmjit::BaseCompiler</innerclass>
    <innernamespace refid="namespaceasmjit">asmjit</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMJIT_BASE_COMPILER_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_ASMJIT_BASE_COMPILER_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/assembler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/codegen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/defs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/func.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/intutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/podlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/podvector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/runtime.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Forward<sp/>Declarations]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BaseCompiler;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VarAttr;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VarData;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BaseVarInst;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BaseVarState;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BaseNode;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">EndNode;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InstNode;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">JumpNode;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kVarAttrFlags]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">//!<sp/>@brief<sp/>Variable<sp/>attribute<sp/>flags.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(kVarAttrFlags)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>accessed<sp/>through<sp/>register<sp/>on<sp/>input.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrInReg<sp/>=<sp/>0x00000001,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>accessed<sp/>through<sp/>register<sp/>on<sp/>output.</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrOutReg<sp/>=<sp/>0x00000002,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>accessed<sp/>through<sp/>register<sp/>on<sp/>input<sp/>&amp;<sp/>output.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrInOutReg<sp/>=<sp/>0x00000003,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>accessed<sp/>through<sp/>memory<sp/>on<sp/>input.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrInMem<sp/>=<sp/>0x00000004,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>accessed<sp/>through<sp/>memory<sp/>on<sp/>output.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrOutMem<sp/>=<sp/>0x00000008,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>accessed<sp/>through<sp/>memory<sp/>on<sp/>input<sp/>&amp;<sp/>output.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrInOutMem<sp/>=<sp/>0x0000000C,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>It<sp/>can<sp/>be<sp/>decided<sp/>whether<sp/>it&apos;s<sp/>better<sp/>to<sp/>alloc<sp/>variable<sp/>to<sp/>register</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/>//!<sp/>or<sp/>memory<sp/>on<sp/>the<sp/>input.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrInDecide<sp/>=<sp/>0x00000010,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>It<sp/>can<sp/>be<sp/>decided<sp/>whether<sp/>it&apos;s<sp/>better<sp/>to<sp/>alloc<sp/>variable<sp/>to<sp/>register</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>//!<sp/>or<sp/>memory<sp/>on<sp/>the<sp/>output.</highlight></codeline>
<codeline lineno="68"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrOutDecide<sp/>=<sp/>0x00000020,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>It<sp/>can<sp/>be<sp/>decided<sp/>whether<sp/>it&apos;s<sp/>better<sp/>to<sp/>alloc<sp/>variable<sp/>to<sp/>register</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/>//!<sp/>or<sp/>memory<sp/>on<sp/>the<sp/>input<sp/>&amp;<sp/>output.</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrInOutDecide<sp/>=<sp/>0x00000030,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>converted<sp/>to<sp/>other<sp/>type/class<sp/>on<sp/>the<sp/>input.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrInConv<sp/>=<sp/>0x00000040,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>converted<sp/>from<sp/>other<sp/>type/class<sp/>on<sp/>the<sp/>output.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrOutConv<sp/>=<sp/>0x00000080,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Combination<sp/>of<sp/>@ref<sp/>kVarAttrInConv<sp/>and<sp/>@ref<sp/>kVarAttrOutConv.</highlight></codeline>
<codeline lineno="78"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrInOutConv<sp/>=<sp/>0x000000C0,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>a<sp/>function<sp/>call<sp/>operand.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrInCall<sp/>=<sp/>0x00000100,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>a<sp/>function<sp/>argument<sp/>passed<sp/>in<sp/>register.</highlight></codeline>
<codeline lineno="83"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrInArg<sp/>=<sp/>0x00000200,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>a<sp/>function<sp/>return<sp/>value<sp/>passed<sp/>in<sp/>register.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrOutRet<sp/>=<sp/>0x00000400,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>should<sp/>be<sp/>unused<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>instruction/node.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrUnuse<sp/>=<sp/>0x00000800,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>kVarAttrInAll<sp/>=<sp/>kVarAttrInReg<sp/>|<sp/>kVarAttrInMem<sp/>|<sp/>kVarAttrInDecide<sp/>|<sp/>kVarAttrInCall<sp/>|<sp/>kVarAttrInArg,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>kVarAttrOutAll<sp/>=<sp/>kVarAttrOutReg<sp/>|<sp/>kVarAttrOutMem<sp/>|<sp/>kVarAttrOutDecide<sp/>|<sp/>kVarAttrOutRet,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>already<sp/>allocated<sp/>on<sp/>the<sp/>input.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrAllocInDone<sp/>=<sp/>0x00400000,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>already<sp/>allocated<sp/>on<sp/>the<sp/>output.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarAttrAllocOutDone<sp/>=<sp/>0x00800000</highlight></codeline>
<codeline lineno="97"><highlight class="normal">};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kVarHint]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment">//!<sp/>@brief<sp/>Variable<sp/>hint<sp/>(used<sp/>by<sp/>@ref<sp/>BaseCompiler).</highlight></codeline>
<codeline lineno="104"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="105"><highlight class="comment">//!<sp/>@sa<sp/>@ref<sp/>BaseCompiler.</highlight></codeline>
<codeline lineno="106"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(kVarHint)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Alloc<sp/>variable.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarHintAlloc<sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Spill<sp/>variable.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarHintSpill<sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Save<sp/>variable<sp/>if<sp/>modified.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarHintSave<sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Save<sp/>variable<sp/>if<sp/>modified<sp/>and<sp/>mark<sp/>it<sp/>as<sp/>unused.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarHintSaveAndUnuse<sp/>=<sp/>3,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mark<sp/>variable<sp/>as<sp/>unused.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarHintUnuse<sp/>=<sp/>4</highlight></codeline>
<codeline lineno="117"><highlight class="normal">};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kVarState]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment">//!<sp/>@brief<sp/>State<sp/>of<sp/>variable.</highlight></codeline>
<codeline lineno="124"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="125"><highlight class="comment">//!<sp/>@note<sp/>State<sp/>of<sp/>variable<sp/>is<sp/>used<sp/>only<sp/>during<sp/>make<sp/>process<sp/>and<sp/>it&apos;s<sp/>not</highlight></codeline>
<codeline lineno="126"><highlight class="comment">//!<sp/>visible<sp/>to<sp/>the<sp/>developer.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(kVarState)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>currently<sp/>not<sp/>used.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarStateUnused<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>in<sp/>register.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/>//!<sp/>Variable<sp/>is<sp/>currently<sp/>allocated<sp/>in<sp/>register.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarStateReg<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>in<sp/>memory<sp/>location<sp/>or<sp/>spilled.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/>//!<sp/>Variable<sp/>was<sp/>spilled<sp/>from<sp/>register<sp/>to<sp/>memory<sp/>or<sp/>variable<sp/>is<sp/>used<sp/>for</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/>//!<sp/>memory<sp/>only<sp/>storage.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kVarStateMem<sp/>=<sp/>2</highlight></codeline>
<codeline lineno="141"><highlight class="normal">};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kNodeType]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment">//!<sp/>@brief<sp/>Type<sp/>of<sp/>node<sp/>(see<sp/>@ref<sp/>BaseNode).</highlight></codeline>
<codeline lineno="148"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(kNodeType)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Invalid<sp/>node<sp/>(internal,<sp/>can&apos;t<sp/>be<sp/>used).</highlight></codeline>
<codeline lineno="150"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeNone<sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>is<sp/>an<sp/>.align<sp/>directive,<sp/>see<sp/>@ref<sp/>AlignNode.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeAlign,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>is<sp/>an<sp/>embedded<sp/>data,<sp/>see<sp/>@ref<sp/>EmbedNode.</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeEmbed,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>is<sp/>a<sp/>comment,<sp/>see<sp/>@ref<sp/>CommentNode.</highlight></codeline>
<codeline lineno="156"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeComment,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>is<sp/>a<sp/>variable<sp/>hint<sp/>(alloc,<sp/>spill,<sp/>use,<sp/>unuse),<sp/>see<sp/>@ref<sp/>HintNode.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeHint,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>is<sp/>a<sp/>label,<sp/>see<sp/>@ref<sp/>TargetNode.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeTarget,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>is<sp/>an<sp/>instruction,<sp/>see<sp/>@ref<sp/>InstNode.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeInst,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>is<sp/>a<sp/>function<sp/>declaration,<sp/>see<sp/>@ref<sp/>FuncNode.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeFunc,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>is<sp/>an<sp/>end<sp/>of<sp/>the<sp/>function,<sp/>see<sp/>@ref<sp/>EndNode.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeEnd,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>is<sp/>a<sp/>return,<sp/>see<sp/>@ref<sp/>RetNode.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeRet,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>is<sp/>a<sp/>function<sp/>call,<sp/>see<sp/>@ref<sp/>CallNode.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeCall,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>is<sp/>a<sp/>function<sp/>call<sp/>argument<sp/>moved<sp/>on<sp/>stack,<sp/>see<sp/>@ref<sp/>SArgNode.</highlight></codeline>
<codeline lineno="172"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeTypeSArg</highlight></codeline>
<codeline lineno="173"><highlight class="normal">};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kNodeFlag]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">ASMJIT_ENUM(kNodeFlag)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>node<sp/>was<sp/>translated<sp/>by<sp/>@ref<sp/>BaseContext.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeFlagIsTranslated<sp/>=<sp/>0x0001,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/>//!<sp/>@Brief<sp/>Whether<sp/>the<sp/>@ref<sp/>InstNode<sp/>is<sp/>a<sp/>jump.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeFlagIsJmp<sp/>=<sp/>0x0002,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/>//!<sp/>@Brief<sp/>Whether<sp/>the<sp/>@ref<sp/>InstNode<sp/>is<sp/>a<sp/>conditional<sp/>jump.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeFlagIsJcc<sp/>=<sp/>0x0004,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>@ref<sp/>InstNode<sp/>is<sp/>an<sp/>unconditinal<sp/>jump<sp/>or<sp/>conditional</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/>//!<sp/>jump<sp/>that<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>taken.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeFlagIsTaken<sp/>=<sp/>0x0008,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>@ref<sp/>Node<sp/>will<sp/>return<sp/>from<sp/>a<sp/>function.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>flag<sp/>is<sp/>used<sp/>by<sp/>both<sp/>@ref<sp/>EndNode<sp/>and<sp/>@ref<sp/>RetNode.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeFlagIsRet<sp/>=<sp/>0x0010,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>instruction<sp/>is<sp/>special.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeFlagIsSpecial<sp/>=<sp/>0x0020,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>instruction<sp/>is<sp/>an<sp/>FPU<sp/>instruction.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kNodeFlagIsFp<sp/>=<sp/>0x0040</highlight></codeline>
<codeline lineno="202"><highlight class="normal">};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::MemCell]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MemCell<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(MemCell)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>cell<sp/>offset.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int32_t<sp/>getOffset()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_offset;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>cell<sp/>offset.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setOffset(int32_t<sp/>offset)<sp/>{<sp/>_offset<sp/>=<sp/>offset;<sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>cell<sp/>size.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_size;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>cell<sp/>size.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setSize(uint32_t<sp/>size)<sp/>{<sp/>_size<sp/>=<sp/>size;<sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>cell<sp/>alignment.</highlight></codeline>
<codeline lineno="226"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getAlignment()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_alignment;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>cell<sp/>alignment.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAlignment(uint32_t<sp/>alignment)<sp/>{<sp/>_alignment<sp/>=<sp/>alignment;<sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Next<sp/>active<sp/>cell.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>MemCell*<sp/>_next;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Offset,<sp/>relative<sp/>to<sp/>base-offset.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>int32_t<sp/>_offset;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Size.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/>_size;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Alignment.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/>_alignment;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::VarBits]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="249"><highlight class="comment">//!<sp/>@brief<sp/>Bit-array<sp/>used<sp/>by<sp/>variable-liveness<sp/>analysis.</highlight></codeline>
<codeline lineno="250" refid="structasmjit_1_1VarBits" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Enums]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>kEntitySize<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uintptr_t)),</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>kEntityBits<sp/>=<sp/>kEntitySize<sp/>*<sp/>8</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uintptr_t<sp/>getBit(uint32_t<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(data[index<sp/>/<sp/>kEntityBits]<sp/>&gt;&gt;<sp/>(index<sp/>%<sp/>kEntityBits))<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setBit(uint32_t<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>data[index<sp/>/<sp/>kEntityBits]<sp/>|=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uintptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(index<sp/>%<sp/>kEntityBits);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>delBit(uint32_t<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>data[index<sp/>/<sp/>kEntityBits]<sp/>&amp;=<sp/>~(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uintptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(index<sp/>%<sp/>kEntityBits));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Ops]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copyBits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s0,<sp/>uint32_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>t<sp/>=<sp/>s0-&gt;data[i];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>|=<sp/>t;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addBits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s0,<sp/>uint32_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addBits(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>s0,<sp/>len);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addBits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s1,<sp/>uint32_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>t<sp/>=<sp/>s0-&gt;data[i]<sp/>|<sp/>s1-&gt;data[i];</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>|=<sp/>t;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>andBits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s1,<sp/>uint32_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>andBits(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>s1,<sp/>len);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>andBits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s1,<sp/>uint32_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>t<sp/>=<sp/>s0-&gt;data[i]<sp/>&amp;<sp/>s1-&gt;data[i];</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>|=<sp/>t;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delBits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s1,<sp/>uint32_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>delBits(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>s1,<sp/>len);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>delBits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s1,<sp/>uint32_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>t<sp/>=<sp/>s0-&gt;data[i]<sp/>&amp;<sp/>~s1-&gt;data[i];</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>t;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>|=<sp/>t;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_addBitsDelSource(<ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s1,<sp/>uint32_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_addBitsDelSource(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>s1,<sp/>len);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_addBitsDelSource(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s0,<sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>s1,<sp/>uint32_t<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>r<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>a<sp/>=<sp/>s0-&gt;data[i];</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uintptr_t<sp/>b<sp/>=<sp/>s1-&gt;data[i];</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;data[i]<sp/>=<sp/>a<sp/>|<sp/>b;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>&amp;=<sp/>~a;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s1-&gt;data[i]<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>|=<sp/>b;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>uintptr_t<sp/>data[1];</highlight></codeline>
<codeline lineno="356"><highlight class="normal">};</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::VarData]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="362"><highlight class="comment">//!<sp/>@brief<sp/>Base<sp/>variable<sp/>data.</highlight></codeline>
<codeline lineno="363" refid="structasmjit_1_1VarData" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>name.</highlight></codeline>
<codeline lineno="369" refid="structasmjit_1_1VarData_1ae44efa412b13db7c5e4b70e0f31119e6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1VarData_1ae44efa412b13db7c5e4b70e0f31119e6" kindref="member" tooltip="Get variable name.">getName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1abd206220e39b7864268c977d35cfc26d" kindref="member" tooltip="Variable name.">_name</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>id.</highlight></codeline>
<codeline lineno="371" refid="structasmjit_1_1VarData_1a5d839f4a14e8e3fd2dc833f82ed1445b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1a5d839f4a14e8e3fd2dc833f82ed1445b" kindref="member" tooltip="Get variable id.">getId</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1af1a8a994d16ae69eb389a009944f1b13" kindref="member" tooltip="Variable id.">_id</ref>;<sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>has<sp/>context<sp/>id.</highlight></codeline>
<codeline lineno="374" refid="structasmjit_1_1VarData_1afd2432372510e253956cd49a3d2960e1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1afd2432372510e253956cd49a3d2960e1" kindref="member" tooltip="Get whether the variable has context id.">hasContextId</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a604d23a483c678cb9102a094665b14ed" kindref="member" tooltip="Context variable id (used by Context only, initially set to kInvalidValue).">_contextId</ref><sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>context<sp/>variable<sp/>id<sp/>(used<sp/>only<sp/>by<sp/>@ref<sp/>Context).</highlight></codeline>
<codeline lineno="376" refid="structasmjit_1_1VarData_1a49aeaf843d92319bcfd68576b33110ba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1a49aeaf843d92319bcfd68576b33110ba" kindref="member" tooltip="Get context variable id (used only by Context).">getContextId</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a604d23a483c678cb9102a094665b14ed" kindref="member" tooltip="Context variable id (used by Context only, initially set to kInvalidValue).">_contextId</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>context<sp/>variable<sp/>id<sp/>(used<sp/>only<sp/>by<sp/>@ref<sp/>Context).</highlight></codeline>
<codeline lineno="378" refid="structasmjit_1_1VarData_1a56b004d1322da9abb32009d8a8848c08" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a56b004d1322da9abb32009d8a8848c08" kindref="member" tooltip="Set context variable id (used only by Context).">setContextId</ref>(uint32_t<sp/>contextId)<sp/>{<sp/><ref refid="structasmjit_1_1VarData_1a604d23a483c678cb9102a094665b14ed" kindref="member" tooltip="Context variable id (used by Context only, initially set to kInvalidValue).">_contextId</ref><sp/>=<sp/>contextId;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>context<sp/>variable<sp/>id<sp/>(used<sp/>only<sp/>by<sp/>@ref<sp/>Context).</highlight></codeline>
<codeline lineno="380" refid="structasmjit_1_1VarData_1ae7e16f8083219ca55974bfec66142633" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1ae7e16f8083219ca55974bfec66142633" kindref="member" tooltip="Reset context variable id (used only by Context).">resetContextId</ref>()<sp/>{<sp/><ref refid="structasmjit_1_1VarData_1a604d23a483c678cb9102a094665b14ed" kindref="member" tooltip="Context variable id (used by Context only, initially set to kInvalidValue).">_contextId</ref><sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>;<sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>type.</highlight></codeline>
<codeline lineno="383" refid="structasmjit_1_1VarData_1a4782b25d0670d39cd2fc8df836cb08d5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1a4782b25d0670d39cd2fc8df836cb08d5" kindref="member" tooltip="Get variable type.">getType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a66408044910637b2977deb7408738efc" kindref="member" tooltip="Variable type.">_type</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>class.</highlight></codeline>
<codeline lineno="385" refid="structasmjit_1_1VarData_1a386140fdd6c53c4f21e4aa60840902e1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1a386140fdd6c53c4f21e4aa60840902e1" kindref="member" tooltip="Get variable class.">getClass</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1ad11b9474002c5584729c81ac288a4b2e" kindref="member" tooltip="Variable class.">_class</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>flags.</highlight></codeline>
<codeline lineno="387" refid="structasmjit_1_1VarData_1aa7d53f2bec2a84b692eb347e7ba56587" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1aa7d53f2bec2a84b692eb347e7ba56587" kindref="member" tooltip="Get variable flags.">getFlags</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1afc4a03c6d63d731d75c5ee0d87b5d3f8" kindref="member" tooltip="Variable flags.">_flags</ref>;<sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>priority.</highlight></codeline>
<codeline lineno="390" refid="structasmjit_1_1VarData_1a66dbd989b502a5dfe51bad41c1a02610" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1a66dbd989b502a5dfe51bad41c1a02610" kindref="member" tooltip="Get variable priority.">getPriority</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a0825dd09123aad0a55c213448089ab26" kindref="member" tooltip="Variable priority.">_priority</ref>;<sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>state<sp/>(only<sp/>used<sp/>by<sp/>@ref<sp/>Context).</highlight></codeline>
<codeline lineno="393" refid="structasmjit_1_1VarData_1af553c865ef80d7eb4bb32534f3625cd3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1af553c865ef80d7eb4bb32534f3625cd3" kindref="member" tooltip="Get variable state (only used by Context).">getState</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a0d0c7c3e46740060a644baed771809da" kindref="member" tooltip="Variable state (connected with actual BaseVarState).">_state</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>variable<sp/>state<sp/>(only<sp/>used<sp/>by<sp/>@ref<sp/>Context).</highlight></codeline>
<codeline lineno="395" refid="structasmjit_1_1VarData_1a0fc11e4290386322f1c26ebd83171169" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a0fc11e4290386322f1c26ebd83171169" kindref="member" tooltip="Set variable state (only used by Context).">setState</ref>(uint32_t<sp/>state)<sp/>{<sp/><ref refid="structasmjit_1_1VarData_1a0d0c7c3e46740060a644baed771809da" kindref="member" tooltip="Variable state (connected with actual BaseVarState).">_state</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(state);<sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>register<sp/>index.</highlight></codeline>
<codeline lineno="398" refid="structasmjit_1_1VarData_1a3b956d9940c540d3fed5d51f9e932ecf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1a3b956d9940c540d3fed5d51f9e932ecf" kindref="member" tooltip="Get register index.">getRegIndex</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a8e2dd1821323dce7c5fb0e6e1f3a311e" kindref="member" tooltip="Actual register index (only used by Context), during translate.">_regIndex</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>register<sp/>index.</highlight></codeline>
<codeline lineno="400" refid="structasmjit_1_1VarData_1a514d9b2d6ed1cbd89a0fa7c63bfc4561" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a514d9b2d6ed1cbd89a0fa7c63bfc4561" kindref="member" tooltip="Set register index.">setRegIndex</ref>(uint32_t<sp/>regIndex)<sp/>{<sp/><ref refid="structasmjit_1_1VarData_1a8e2dd1821323dce7c5fb0e6e1f3a311e" kindref="member" tooltip="Actual register index (only used by Context), during translate.">_regIndex</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(regIndex);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>register<sp/>index.</highlight></codeline>
<codeline lineno="402" refid="structasmjit_1_1VarData_1aefbe1c9839a9245072d00c143f12f7e0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1aefbe1c9839a9245072d00c143f12f7e0" kindref="member" tooltip="Reset register index.">resetRegIndex</ref>()<sp/>{<sp/><ref refid="structasmjit_1_1VarData_1a8e2dd1821323dce7c5fb0e6e1f3a311e" kindref="member" tooltip="Actual register index (only used by Context), during translate.">_regIndex</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);<sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>VarData<sp/>is<sp/>only<sp/>memory<sp/>allocated<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="405" refid="structasmjit_1_1VarData_1a0709ba5eac2d90824aa83b05ed5df211" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a0709ba5eac2d90824aa83b05ed5df211" kindref="member" tooltip="Get whether the VarData is only memory allocated on the stack.">isStack</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1VarData_1a932ffa440b7237eb45d8fe2d8fc6c612" kindref="member" tooltip="Whether the variable is only used as memory allocated on the stack.">_isStack</ref>);<sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>a<sp/>function<sp/>argument<sp/>passed<sp/>through<sp/>memory.</highlight></codeline>
<codeline lineno="408" refid="structasmjit_1_1VarData_1aefe159ce984521abfbf815d6c16c34d8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1aefe159ce984521abfbf815d6c16c34d8" kindref="member" tooltip="Get whether the variable is a function argument passed through memory.">isMemArg</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1VarData_1aedd308a0934f4ff9c4374b3618516857" kindref="member" tooltip="Whether the variable is a function argument passed through memory.">_isMemArg</ref>);<sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>content<sp/>can<sp/>be<sp/>calculated<sp/>by<sp/>a<sp/>simple<sp/>instruction.</highlight></codeline>
<codeline lineno="411" refid="structasmjit_1_1VarData_1a04fead919e4d4e4b1d512c62e426c719" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a04fead919e4d4e4b1d512c62e426c719" kindref="member" tooltip="Get variable content can be calculated by a simple instruction.">isCalculated</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1VarData_1a4d63061334343ea9a222a87e17a28eba" kindref="member" tooltip="Whether variable content can be calculated by a simple instruction.">_isCalculated</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>to<sp/>save<sp/>variable<sp/>when<sp/>it&apos;s<sp/>unused<sp/>(spill).</highlight></codeline>
<codeline lineno="413" refid="structasmjit_1_1VarData_1aa7e9d4c5d6eaeea77b25d525467f3004" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1aa7e9d4c5d6eaeea77b25d525467f3004" kindref="member" tooltip="Get whether to save variable when it&amp;#39;s unused (spill).">saveOnUnuse</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1VarData_1a479f07d8219049f22533163cffe7980b" kindref="member" tooltip="Save on unuse (at end of the variable scope).">_saveOnUnuse</ref>);<sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>was<sp/>changed.</highlight></codeline>
<codeline lineno="416" refid="structasmjit_1_1VarData_1abdde0badc8a797eedf92dffef9c01e8f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1abdde0badc8a797eedf92dffef9c01e8f" kindref="member" tooltip="Get whether the variable was changed.">isModified</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1VarData_1a7b992af1a2835eca8a56c1e6ebd0b1d5" kindref="member" tooltip="Whether variable was changed (connected with actual BaseVarState).">_modified</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>whether<sp/>the<sp/>variable<sp/>was<sp/>changed.</highlight></codeline>
<codeline lineno="418" refid="structasmjit_1_1VarData_1add924a968e2abd51fb5b5dea47b3d1c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1add924a968e2abd51fb5b5dea47b3d1c5" kindref="member" tooltip="Set whether the variable was changed.">setModified</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>modified)<sp/>{<sp/><ref refid="structasmjit_1_1VarData_1a7b992af1a2835eca8a56c1e6ebd0b1d5" kindref="member" tooltip="Whether variable was changed (connected with actual BaseVarState).">_modified</ref><sp/>=<sp/>modified;<sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>alignment.</highlight></codeline>
<codeline lineno="421" refid="structasmjit_1_1VarData_1a2081674a98787c4395baa3758004ef30" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1a2081674a98787c4395baa3758004ef30" kindref="member" tooltip="Get variable alignment.">getAlignment</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a76922ee86badaeb0b869404432ccff34" kindref="member" tooltip="Varialbe natural alignment.">_alignment</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>size.</highlight></codeline>
<codeline lineno="423" refid="structasmjit_1_1VarData_1accd6f24965f4d7477834d6035713c5e3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1accd6f24965f4d7477834d6035713c5e3" kindref="member" tooltip="Get variable size.">getSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1aa6bdac1f459bd79e0c0ff700c152f6be" kindref="member" tooltip="Variable size.">_size</ref>;<sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>home<sp/>memory<sp/>offset.</highlight></codeline>
<codeline lineno="426" refid="structasmjit_1_1VarData_1a504c158befceb46a60b9e36c69078aa8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int32_t<sp/><ref refid="structasmjit_1_1VarData_1a504c158befceb46a60b9e36c69078aa8" kindref="member" tooltip="Get home memory offset.">getMemOffset</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a532c225c5dd3a47b412012e2e1bd19d0" kindref="member" tooltip="Home memory offset.">_memOffset</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>home<sp/>memory<sp/>offset.</highlight></codeline>
<codeline lineno="428" refid="structasmjit_1_1VarData_1a4d53249fb0edc4221b1fdb96e6800b8b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a4d53249fb0edc4221b1fdb96e6800b8b" kindref="member" tooltip="Set home memory offset.">setMemOffset</ref>(int32_t<sp/>offset)<sp/>{<sp/><ref refid="structasmjit_1_1VarData_1a532c225c5dd3a47b412012e2e1bd19d0" kindref="member" tooltip="Home memory offset.">_memOffset</ref><sp/>=<sp/>offset;<sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>home<sp/>memory<sp/>cell.</highlight></codeline>
<codeline lineno="431" refid="structasmjit_1_1VarData_1afdfc419087cafd6948f67da5e5c4fa7c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>MemCell*<sp/><ref refid="structasmjit_1_1VarData_1afdfc419087cafd6948f67da5e5c4fa7c" kindref="member" tooltip="Get home memory cell.">getMemCell</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a088702cfdcc9556a61893d8d4e0241a2" kindref="member" tooltip="Home memory cell, used by Context (initially NULL).">_memCell</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>home<sp/>memory<sp/>cell.</highlight></codeline>
<codeline lineno="433" refid="structasmjit_1_1VarData_1a690bf400be2757a823e65dba5357aa93" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a690bf400be2757a823e65dba5357aa93" kindref="member" tooltip="Set home memory cell.">setMemCell</ref>(MemCell*<sp/>cell)<sp/>{<sp/><ref refid="structasmjit_1_1VarData_1a088702cfdcc9556a61893d8d4e0241a2" kindref="member" tooltip="Home memory cell, used by Context (initially NULL).">_memCell</ref><sp/>=<sp/>cell;<sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors<sp/>-<sp/>Temporary<sp/>Usage]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>temporary<sp/>VarAttr.</highlight></codeline>
<codeline lineno="440" refid="structasmjit_1_1VarData_1af6996e30d380fec6a505f230c50f6f76" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarAttr*<sp/><ref refid="structasmjit_1_1VarData_1af6996e30d380fec6a505f230c50f6f76" kindref="member" tooltip="Get temporary VarAttr.">getVa</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a67d619cbc09377832ec49721b80ccc87" kindref="member" tooltip="Temporary link to VarAttr* used by the Context used in various phases, but always set back to NULL wh...">_va</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>temporary<sp/>VarAttr.</highlight></codeline>
<codeline lineno="442" refid="structasmjit_1_1VarData_1a71f904f1074f9f0fdf64ce398c3e4940" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a71f904f1074f9f0fdf64ce398c3e4940" kindref="member" tooltip="Set temporary VarAttr.">setVa</ref>(VarAttr*<sp/>va)<sp/>{<sp/><ref refid="structasmjit_1_1VarData_1a67d619cbc09377832ec49721b80ccc87" kindref="member" tooltip="Temporary link to VarAttr* used by the Context used in various phases, but always set back to NULL wh...">_va</ref><sp/>=<sp/>va;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>temporary<sp/>VarAttr.</highlight></codeline>
<codeline lineno="444" refid="structasmjit_1_1VarData_1a0c78fcbbdefd343c947afa17948ccaa8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1VarData_1a0c78fcbbdefd343c947afa17948ccaa8" kindref="member" tooltip="Reset temporary VarAttr.">resetVa</ref>()<sp/>{<sp/><ref refid="structasmjit_1_1VarData_1a67d619cbc09377832ec49721b80ccc87" kindref="member" tooltip="Temporary link to VarAttr* used by the Context used in various phases, but always set back to NULL wh...">_va</ref><sp/>=<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>name.</highlight></codeline>
<codeline lineno="451" refid="structasmjit_1_1VarData_1abd206220e39b7864268c977d35cfc26d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1VarData_1abd206220e39b7864268c977d35cfc26d" kindref="member" tooltip="Variable name.">_name</ref>;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>id.</highlight></codeline>
<codeline lineno="454" refid="structasmjit_1_1VarData_1af1a8a994d16ae69eb389a009944f1b13" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1af1a8a994d16ae69eb389a009944f1b13" kindref="member" tooltip="Variable id.">_id</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Context<sp/>variable<sp/>id<sp/>(used<sp/>by<sp/>@ref<sp/>Context<sp/>only,<sp/>initially<sp/>set<sp/>to</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/>//!<sp/>@c<sp/>kInvalidValue).</highlight></codeline>
<codeline lineno="457" refid="structasmjit_1_1VarData_1a604d23a483c678cb9102a094665b14ed" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1a604d23a483c678cb9102a094665b14ed" kindref="member" tooltip="Context variable id (used by Context only, initially set to kInvalidValue).">_contextId</ref>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>type.</highlight></codeline>
<codeline lineno="460" refid="structasmjit_1_1VarData_1a66408044910637b2977deb7408738efc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1a66408044910637b2977deb7408738efc" kindref="member" tooltip="Variable type.">_type</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>class.</highlight></codeline>
<codeline lineno="462" refid="structasmjit_1_1VarData_1ad11b9474002c5584729c81ac288a4b2e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1ad11b9474002c5584729c81ac288a4b2e" kindref="member" tooltip="Variable class.">_class</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>flags.</highlight></codeline>
<codeline lineno="464" refid="structasmjit_1_1VarData_1afc4a03c6d63d731d75c5ee0d87b5d3f8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1afc4a03c6d63d731d75c5ee0d87b5d3f8" kindref="member" tooltip="Variable flags.">_flags</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>priority.</highlight></codeline>
<codeline lineno="466" refid="structasmjit_1_1VarData_1a0825dd09123aad0a55c213448089ab26" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1a0825dd09123aad0a55c213448089ab26" kindref="member" tooltip="Variable priority.">_priority</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>state<sp/>(connected<sp/>with<sp/>actual<sp/>@ref<sp/>BaseVarState).</highlight></codeline>
<codeline lineno="469" refid="structasmjit_1_1VarData_1a0d0c7c3e46740060a644baed771809da" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1a0d0c7c3e46740060a644baed771809da" kindref="member" tooltip="Variable state (connected with actual BaseVarState).">_state</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Actual<sp/>register<sp/>index<sp/>(only<sp/>used<sp/>by<sp/>@ref<sp/>Context),<sp/>during<sp/>translate.</highlight></codeline>
<codeline lineno="471" refid="structasmjit_1_1VarData_1a8e2dd1821323dce7c5fb0e6e1f3a311e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1a8e2dd1821323dce7c5fb0e6e1f3a311e" kindref="member" tooltip="Actual register index (only used by Context), during translate.">_regIndex</ref>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>variable<sp/>is<sp/>only<sp/>used<sp/>as<sp/>memory<sp/>allocated<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="474" refid="structasmjit_1_1VarData_1a932ffa440b7237eb45d8fe2d8fc6c612" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1a932ffa440b7237eb45d8fe2d8fc6c612" kindref="member" tooltip="Whether the variable is only used as memory allocated on the stack.">_isStack</ref><sp/>:<sp/>1;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>variable<sp/>is<sp/>a<sp/>function<sp/>argument<sp/>passed<sp/>through<sp/>memory.</highlight></codeline>
<codeline lineno="476" refid="structasmjit_1_1VarData_1aedd308a0934f4ff9c4374b3618516857" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1aedd308a0934f4ff9c4374b3618516857" kindref="member" tooltip="Whether the variable is a function argument passed through memory.">_isMemArg</ref><sp/>:<sp/>1;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>variable<sp/>content<sp/>can<sp/>be<sp/>calculated<sp/>by<sp/>a<sp/>simple<sp/>instruction.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>is<sp/>used<sp/>mainly<sp/>by<sp/>MMX<sp/>and<sp/>SSE2<sp/>code.<sp/>This<sp/>flag<sp/>indicates<sp/>that</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/>//!<sp/>register<sp/>allocator<sp/>should<sp/>never<sp/>reserve<sp/>memory<sp/>for<sp/>this<sp/>variable,<sp/>because</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/>//!<sp/>the<sp/>content<sp/>can<sp/>be<sp/>generated<sp/>by<sp/>a<sp/>single<sp/>instruction<sp/>(for<sp/>example<sp/>PXOR).</highlight></codeline>
<codeline lineno="482" refid="structasmjit_1_1VarData_1a4d63061334343ea9a222a87e17a28eba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1a4d63061334343ea9a222a87e17a28eba" kindref="member" tooltip="Whether variable content can be calculated by a simple instruction.">_isCalculated</ref><sp/>:<sp/>1;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Save<sp/>on<sp/>unuse<sp/>(at<sp/>end<sp/>of<sp/>the<sp/>variable<sp/>scope).</highlight></codeline>
<codeline lineno="484" refid="structasmjit_1_1VarData_1a479f07d8219049f22533163cffe7980b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1a479f07d8219049f22533163cffe7980b" kindref="member" tooltip="Save on unuse (at end of the variable scope).">_saveOnUnuse</ref><sp/>:<sp/>1;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>variable<sp/>was<sp/>changed<sp/>(connected<sp/>with<sp/>actual<sp/>@ref<sp/>BaseVarState).</highlight></codeline>
<codeline lineno="486" refid="structasmjit_1_1VarData_1a7b992af1a2835eca8a56c1e6ebd0b1d5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1a7b992af1a2835eca8a56c1e6ebd0b1d5" kindref="member" tooltip="Whether variable was changed (connected with actual BaseVarState).">_modified</ref><sp/>:<sp/>1;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="488"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/>_reserved0<sp/>:<sp/>3;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Varialbe<sp/>natural<sp/>alignment.</highlight></codeline>
<codeline lineno="490" refid="structasmjit_1_1VarData_1a76922ee86badaeb0b869404432ccff34" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1VarData_1a76922ee86badaeb0b869404432ccff34" kindref="member" tooltip="Varialbe natural alignment.">_alignment</ref>;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>size.</highlight></codeline>
<codeline lineno="493" refid="structasmjit_1_1VarData_1aa6bdac1f459bd79e0c0ff700c152f6be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1aa6bdac1f459bd79e0c0ff700c152f6be" kindref="member" tooltip="Variable size.">_size</ref>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Home<sp/>memory<sp/>offset.</highlight></codeline>
<codeline lineno="496" refid="structasmjit_1_1VarData_1a532c225c5dd3a47b412012e2e1bd19d0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="structasmjit_1_1VarData_1a532c225c5dd3a47b412012e2e1bd19d0" kindref="member" tooltip="Home memory offset.">_memOffset</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Home<sp/>memory<sp/>cell,<sp/>used<sp/>by<sp/>@c<sp/>Context<sp/>(initially<sp/>NULL).</highlight></codeline>
<codeline lineno="498" refid="structasmjit_1_1VarData_1a088702cfdcc9556a61893d8d4e0241a2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>MemCell*<sp/><ref refid="structasmjit_1_1VarData_1a088702cfdcc9556a61893d8d4e0241a2" kindref="member" tooltip="Home memory cell, used by Context (initially NULL).">_memCell</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>read<sp/>access<sp/>statistics.</highlight></codeline>
<codeline lineno="501" refid="structasmjit_1_1VarData_1a2115f81379b916b125c86533f63f287c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1a2115f81379b916b125c86533f63f287c" kindref="member" tooltip="Register read access statistics.">rReadCount</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>write<sp/>access<sp/>statistics.</highlight></codeline>
<codeline lineno="503" refid="structasmjit_1_1VarData_1ab68c535f834061e11edc9866e534b6f3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1ab68c535f834061e11edc9866e534b6f3" kindref="member" tooltip="Register write access statistics.">rWriteCount</ref>;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>read<sp/>statistics.</highlight></codeline>
<codeline lineno="506" refid="structasmjit_1_1VarData_1a0bae731ad14f36323953933545c4e284" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1a0bae731ad14f36323953933545c4e284" kindref="member" tooltip="Memory read statistics.">mReadCount</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>write<sp/>statistics.</highlight></codeline>
<codeline lineno="508" refid="structasmjit_1_1VarData_1a6ef42095624282230f061f4c5f14cf0c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1VarData_1a6ef42095624282230f061f4c5f14cf0c" kindref="member" tooltip="Memory write statistics.">mWriteCount</ref>;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members<sp/>-<sp/>Temporary<sp/>Usage]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>variables<sp/>are<sp/>only<sp/>used<sp/>during<sp/>register<sp/>allocation.<sp/>They<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialized<sp/>by<sp/>init()<sp/>phase<sp/>and<sp/>cleared<sp/>by<sp/>cleanup()<sp/>phase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Temporary<sp/>link<sp/>to<sp/>VarAttr*<sp/>used<sp/>by<sp/>the<sp/>@ref<sp/>Context<sp/>used<sp/>in</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>various<sp/>phases,<sp/>but<sp/>always<sp/>set<sp/>back<sp/>to<sp/>NULL<sp/>when<sp/>finished.</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/><sp/><sp/>//!</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>This<sp/>temporary<sp/>data<sp/>is<sp/>designed<sp/>to<sp/>be<sp/>used<sp/>by<sp/>algorithms<sp/>that<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>store<sp/>some<sp/>data<sp/>into<sp/>variables<sp/>themselves<sp/>during<sp/>compilation.<sp/>But<sp/>it&apos;s</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>expected<sp/>that<sp/>after<sp/>variable<sp/>is<sp/>compiled<sp/>&amp;<sp/>translated<sp/>the<sp/>data<sp/>is<sp/>set</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>back<sp/>to<sp/>zero/null.<sp/>Initial<sp/>value<sp/>is<sp/>NULL.</highlight></codeline>
<codeline lineno="525" refid="structasmjit_1_1VarData_1a67d619cbc09377832ec49721b80ccc87" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/><ref refid="structasmjit_1_1VarData_1a67d619cbc09377832ec49721b80ccc87" kindref="member" tooltip="Temporary link to VarAttr* used by the Context used in various phases, but always set back to NULL wh...">_va</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="528"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uintptr_t<sp/>_vaUInt;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="530"><highlight class="normal">};</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::VarAttr]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VarAttr<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Setup]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setup(VarData*<sp/>vd,<sp/>uint32_t<sp/>flags<sp/>=<sp/>0,<sp/>uint32_t<sp/>inRegs<sp/>=<sp/>0,<sp/>uint32_t<sp/>allocableRegs<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>_vd<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>_flags<sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>_varCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>_inRegIndex<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>_outRegIndex<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>_reserved<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>_inRegs<sp/>=<sp/>inRegs;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>_allocableRegs<sp/>=<sp/>allocableRegs;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>VarData.</highlight></codeline>
<codeline lineno="557"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarData*<sp/>getVd()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_vd;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>VarData.</highlight></codeline>
<codeline lineno="559"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setVd(VarData*<sp/>vd)<sp/>{<sp/>_vd<sp/>=<sp/>vd;<sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>flags.</highlight></codeline>
<codeline lineno="562"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getFlags()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_flags;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>flags.</highlight></codeline>
<codeline lineno="564"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setFlags(uint32_t<sp/>flags)<sp/>{<sp/>_flags<sp/>=<sp/>flags;<sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>@a<sp/>flag<sp/>is<sp/>on.</highlight></codeline>
<codeline lineno="567"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasFlag(uint32_t<sp/>flag)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_flags<sp/>&amp;<sp/>flag)<sp/>!=<sp/>0;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>@a<sp/>flags.</highlight></codeline>
<codeline lineno="569"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addFlags(uint32_t<sp/>flags)<sp/>{<sp/>_flags<sp/>|=<sp/>flags;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mask<sp/>@a<sp/>flags.</highlight></codeline>
<codeline lineno="571"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>andFlags(uint32_t<sp/>flags)<sp/>{<sp/>_flags<sp/>&amp;=<sp/>flags;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>@a<sp/>flags.</highlight></codeline>
<codeline lineno="573"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>delFlags(uint32_t<sp/>flags)<sp/>{<sp/>_flags<sp/>&amp;=<sp/>~flags;<sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>how<sp/>many<sp/>times<sp/>the<sp/>variable<sp/>is<sp/>used<sp/>by<sp/>the<sp/>instruction/node.</highlight></codeline>
<codeline lineno="576"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getVarCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_varCount;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>how<sp/>many<sp/>times<sp/>the<sp/>variable<sp/>is<sp/>used<sp/>by<sp/>the<sp/>instruction/node.</highlight></codeline>
<codeline lineno="578"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setVarCount(uint32_t<sp/>count)<sp/>{<sp/>_varCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(count);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>how<sp/>many<sp/>times<sp/>the<sp/>variable<sp/>is<sp/>used<sp/>by<sp/>the<sp/>instruction/node.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addVarCount(uint32_t<sp/>count<sp/>=<sp/>1)<sp/>{<sp/>_varCount<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(count);<sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>has<sp/>to<sp/>be<sp/>allocated<sp/>in<sp/>a<sp/>specific<sp/>input<sp/>register.</highlight></codeline>
<codeline lineno="583"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>hasInRegIndex()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_inRegIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>input<sp/>register<sp/>index<sp/>or<sp/>@ref<sp/>kInvalidReg.</highlight></codeline>
<codeline lineno="585"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getInRegIndex()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_inRegIndex;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="586"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>the<sp/>input<sp/>register<sp/>index.</highlight></codeline>
<codeline lineno="587"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setInRegIndex(uint32_t<sp/>index)<sp/>{<sp/>_inRegIndex<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>the<sp/>input<sp/>register<sp/>index.</highlight></codeline>
<codeline lineno="589"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetInRegIndex()<sp/>{<sp/>_inRegIndex<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;<sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>has<sp/>to<sp/>be<sp/>allocated<sp/>in<sp/>a<sp/>specific<sp/>output<sp/>register.</highlight></codeline>
<codeline lineno="592"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>hasOutRegIndex()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_outRegIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>output<sp/>register<sp/>index<sp/>or<sp/>@ref<sp/>kInvalidReg.</highlight></codeline>
<codeline lineno="594"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getOutRegIndex()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_outRegIndex;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>the<sp/>output<sp/>register<sp/>index.</highlight></codeline>
<codeline lineno="596"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setOutRegIndex(uint32_t<sp/>index)<sp/>{<sp/>_outRegIndex<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>the<sp/>output<sp/>register<sp/>index.</highlight></codeline>
<codeline lineno="598"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetOutRegIndex()<sp/>{<sp/>_outRegIndex<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;<sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>mandatory<sp/>input<sp/>registers<sp/>are<sp/>in<sp/>used.</highlight></codeline>
<codeline lineno="601"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasInRegs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_inRegs<sp/>!=<sp/>0;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>mandatory<sp/>input<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="603"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getInRegs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_inRegs;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>mandatory<sp/>input<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="605"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setInRegs(uint32_t<sp/>mask)<sp/>{<sp/>_inRegs<sp/>=<sp/>mask;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>mandatory<sp/>input<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="607"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addInRegs(uint32_t<sp/>mask)<sp/>{<sp/>_inRegs<sp/>|=<sp/>mask;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And<sp/>mandatory<sp/>input<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="609"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>andInRegs(uint32_t<sp/>mask)<sp/>{<sp/>_inRegs<sp/>&amp;=<sp/>mask;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>mandatory<sp/>input<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="611"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>delInRegs(uint32_t<sp/>mask)<sp/>{<sp/>_inRegs<sp/>&amp;=<sp/>~mask;<sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>allocable<sp/>input<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="614"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getAllocableRegs()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_allocableRegs;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>allocable<sp/>input<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="616"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setAllocableRegs(uint32_t<sp/>mask)<sp/>{<sp/>_allocableRegs<sp/>=<sp/>mask;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>allocable<sp/>input<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="618"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addAllocableRegs(uint32_t<sp/>mask)<sp/>{<sp/>_allocableRegs<sp/>|=<sp/>mask;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And<sp/>allocable<sp/>input<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="620"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>andAllocableRegs(uint32_t<sp/>mask)<sp/>{<sp/>_allocableRegs<sp/>&amp;=<sp/>mask;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>allocable<sp/>input<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="622"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>delAllocableRegs(uint32_t<sp/>mask)<sp/>{<sp/>_allocableRegs<sp/>&amp;=<sp/>~mask;<sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarAttr&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VarAttr&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>::memcpy(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;other,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VarAttr));</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>VarData*<sp/>_vd;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Flags.</highlight></codeline>
<codeline lineno="639"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/>_flags;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>How<sp/>many<sp/>times<sp/>the<sp/>variable<sp/>is<sp/>used<sp/>by<sp/>the<sp/>instruction/node.</highlight></codeline>
<codeline lineno="644"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>_varCount;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Input<sp/>register<sp/>index<sp/>or<sp/>@ref<sp/>kInvalidReg<sp/>if<sp/>it&apos;s<sp/>not<sp/>given.</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>Even<sp/>if<sp/>the<sp/>input<sp/>register<sp/>index<sp/>is<sp/>not<sp/>given<sp/>(i.e.<sp/>it<sp/>may<sp/>by<sp/>any</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>register),<sp/>register<sp/>allocator<sp/>should<sp/>assign<sp/>an<sp/>index<sp/>that<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>used<sp/>to<sp/>persist<sp/>a<sp/>variable<sp/>into<sp/>this<sp/>specific<sp/>index.<sp/>It&apos;s<sp/>helpful</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>in<sp/>situations<sp/>where<sp/>one<sp/>variable<sp/>has<sp/>to<sp/>be<sp/>allocated<sp/>in<sp/>multiple</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>registers<sp/>to<sp/>determine<sp/>the<sp/>register<sp/>which<sp/>will<sp/>be<sp/>persistent.</highlight></codeline>
<codeline lineno="652"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>_inRegIndex;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Output<sp/>register<sp/>index<sp/>or<sp/>@ref<sp/>kInvalidReg<sp/>if<sp/>it&apos;s<sp/>not<sp/>given.</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>Typically<sp/>@ref<sp/>kInvalidReg<sp/>if<sp/>variable<sp/>is<sp/>only<sp/>used<sp/>on<sp/>input.</highlight></codeline>
<codeline lineno="656"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>_outRegIndex;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="658"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>_reserved;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/><sp/><sp/><sp/>//!</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>data<sp/>#0.</highlight></codeline>
<codeline lineno="664"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>_packed;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mandatory<sp/>input<sp/>registers.</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/><sp/>//!<sp/>Mandatory<sp/>input<sp/>registers<sp/>are<sp/>required<sp/>by<sp/>the<sp/>instruction<sp/>even<sp/>if</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/>//!<sp/>there<sp/>are<sp/>duplicates.<sp/>This<sp/>schema<sp/>allows<sp/>us<sp/>to<sp/>allocate<sp/>one<sp/>variable</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/><sp/>//!<sp/>in<sp/>one<sp/>or<sp/>more<sp/>register<sp/>when<sp/>needed.<sp/>Required<sp/>mostly<sp/>by<sp/>instructions</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/>//!<sp/>that<sp/>have<sp/>implicit<sp/>register<sp/>operands<sp/>(imul,<sp/>cpuid,<sp/>...)<sp/>and<sp/>function</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/>//!<sp/>call.</highlight></codeline>
<codeline lineno="674"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/>_inRegs;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Allocable<sp/>input<sp/>registers.</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/>//!<sp/>Optional<sp/>input<sp/>registers<sp/>is<sp/>a<sp/>mask<sp/>of<sp/>all<sp/>allocable<sp/>registers<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/><sp/>//!<sp/>variable<sp/>where<sp/>we<sp/>have<sp/>to<sp/>pick<sp/>one<sp/>of<sp/>them.<sp/>This<sp/>mask<sp/>is<sp/>usually<sp/>not<sp/>used</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/>//!<sp/>when<sp/>_inRegs<sp/>is<sp/>set.<sp/>If<sp/>both<sp/>masks<sp/>are<sp/>used<sp/>then<sp/>the<sp/>register</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/>//!<sp/>allocator<sp/>tries<sp/>first<sp/>to<sp/>find<sp/>an<sp/>intersection<sp/>between<sp/>these<sp/>and<sp/>allocates</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/><sp/>//!<sp/>an<sp/>extra<sp/>slot<sp/>if<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="683"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/>_allocableRegs;</highlight></codeline>
<codeline lineno="684"><highlight class="normal">};</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseVarInst]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="690"><highlight class="comment">//!<sp/>@brief<sp/>Variable<sp/>allocation<sp/>instructions.</highlight></codeline>
<codeline lineno="691" refid="structasmjit_1_1BaseVarInst" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseVarInst" kindref="compound" tooltip="Variable allocation instructions.">BaseVarInst</ref><sp/>{};</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseVarState]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="697"><highlight class="comment">//!<sp/>@brief<sp/>Variable(s)<sp/>state.</highlight></codeline>
<codeline lineno="698" refid="structasmjit_1_1BaseVarState" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseVarState" kindref="compound" tooltip="Variable(s) state.">BaseVarState</ref><sp/>{};</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="704"><highlight class="comment">//!<sp/>@brief<sp/>Base<sp/>node.</highlight></codeline>
<codeline lineno="705"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="706"><highlight class="comment">//!<sp/>@ref<sp/>Every<sp/>node<sp/>represents<sp/>an<sp/>abstract<sp/>instruction,<sp/>directive,<sp/>label,<sp/>or</highlight></codeline>
<codeline lineno="707"><highlight class="comment">//!<sp/>macro-instruction<sp/>generated<sp/>by<sp/>compiler.</highlight></codeline>
<codeline lineno="708" refid="structasmjit_1_1BaseNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>new<sp/>@ref<sp/>BaseNode.</highlight></codeline>
<codeline lineno="716"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="717"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Always<sp/>use<sp/>compiler<sp/>to<sp/>create<sp/>nodes.</highlight></codeline>
<codeline lineno="718"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/>uint32_t<sp/>type);<sp/></highlight><highlight class="comment">//<sp/>Defined-Later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="720"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>@ref<sp/>BaseNode.</highlight></codeline>
<codeline lineno="721" refid="structasmjit_1_1BaseNode_1ab8d1dfe217c72d01c253687b8c31f64c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseNode_1ab8d1dfe217c72d01c253687b8c31f64c" kindref="member" tooltip="Destroy BaseNode.">~BaseNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>previous<sp/>node<sp/>in<sp/>the<sp/>compiler<sp/>stream.</highlight></codeline>
<codeline lineno="728" refid="structasmjit_1_1BaseNode_1aa28ded7ba5b0741ae57e021c411399a2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>BaseNode*<sp/><ref refid="structasmjit_1_1BaseNode_1aa28ded7ba5b0741ae57e021c411399a2" kindref="member" tooltip="Get previous node in the compiler stream.">getPrev</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>next<sp/>node<sp/>in<sp/>the<sp/>compiler<sp/>stream.</highlight></codeline>
<codeline lineno="730" refid="structasmjit_1_1BaseNode_1a3db24572d64989296c96d4049d0545b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>BaseNode*<sp/><ref refid="structasmjit_1_1BaseNode_1a3db24572d64989296c96d4049d0545b8" kindref="member" tooltip="Get next node in the compiler stream.">getNext</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref>;<sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>comment<sp/>string.</highlight></codeline>
<codeline lineno="733" refid="structasmjit_1_1BaseNode_1a52eb758170158aba2b06378313e5748d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1BaseNode_1a52eb758170158aba2b06378313e5748d" kindref="member" tooltip="Get comment string.">getComment</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1aa1270ef124c6809ca7fd3388fc7cb01e" kindref="member" tooltip="Inline comment string, initially set to NULL.">_comment</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>comment<sp/>string<sp/>to<sp/>@a<sp/>str.</highlight></codeline>
<codeline lineno="735" refid="structasmjit_1_1BaseNode_1ad6f66454cabfc61f1d29fb6ecb6bf18f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1ad6f66454cabfc61f1d29fb6ecb6bf18f" kindref="member" tooltip="Set comment string to str.">setComment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)<sp/>{<sp/><ref refid="structasmjit_1_1BaseNode_1aa1270ef124c6809ca7fd3388fc7cb01e" kindref="member" tooltip="Inline comment string, initially set to NULL.">_comment</ref><sp/>=<sp/>comment;<sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>type<sp/>of<sp/>node,<sp/>see<sp/>@ref<sp/>kNodeType.</highlight></codeline>
<codeline lineno="738" refid="structasmjit_1_1BaseNode_1adca7163f7abc9f6d6a5ac011254a48e4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseNode_1adca7163f7abc9f6d6a5ac011254a48e4" kindref="member" tooltip="Get type of node, see kNodeType.">getType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a41bc5e21cfb77d1a69f6eba49b944b8b" kindref="member" tooltip="Node type, see kNodeType.">_type</ref>;<sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>node<sp/>flags.</highlight></codeline>
<codeline lineno="741" refid="structasmjit_1_1BaseNode_1a8f41870fbc15450690d92a977e7dea83" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseNode_1a8f41870fbc15450690d92a977e7dea83" kindref="member" tooltip="Get node flags.">getFlags</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a3990c435857ff94bbd74935638a84ac0" kindref="member" tooltip="Node flags, different meaning for every node type.">_flags</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>node<sp/>flags<sp/>to<sp/>@a<sp/>flags.</highlight></codeline>
<codeline lineno="743" refid="structasmjit_1_1BaseNode_1a97cb2b2d64b539c1c4c4811344139e42" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a97cb2b2d64b539c1c4c4811344139e42" kindref="member" tooltip="Set node flags to flags.">setFlags</ref>(uint32_t<sp/>flags)<sp/>{<sp/><ref refid="structasmjit_1_1BaseNode_1a3990c435857ff94bbd74935638a84ac0" kindref="member" tooltip="Node flags, different meaning for every node type.">_flags</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(flags);<sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>has<sp/>flag<sp/>@a<sp/>flag.</highlight></codeline>
<codeline lineno="746" refid="structasmjit_1_1BaseNode_1a0a4159dd16b9c208acaaeea6daa164d8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0a4159dd16b9c208acaaeea6daa164d8" kindref="member" tooltip="Get whether the instruction has flag flag.">hasFlag</ref>(uint32_t<sp/>flag)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(static_cast&lt;uint32_t&gt;(<ref refid="structasmjit_1_1BaseNode_1a3990c435857ff94bbd74935638a84ac0" kindref="member" tooltip="Node flags, different meaning for every node type.">_flags</ref>)<sp/>&amp;<sp/>flag)<sp/>!=<sp/>0;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>instruction<sp/>@a<sp/>flags.</highlight></codeline>
<codeline lineno="748" refid="structasmjit_1_1BaseNode_1aba3954cf5ced25ede2fcc471b2fd6390" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1aba3954cf5ced25ede2fcc471b2fd6390" kindref="member" tooltip="Add instruction flags.">addFlags</ref>(uint32_t<sp/>flags)<sp/>{<sp/><ref refid="structasmjit_1_1BaseNode_1a3990c435857ff94bbd74935638a84ac0" kindref="member" tooltip="Node flags, different meaning for every node type.">_flags</ref><sp/>|=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(flags);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>instruction<sp/>@a<sp/>flags.</highlight></codeline>
<codeline lineno="750" refid="structasmjit_1_1BaseNode_1a7078ba8794a49cf97942d1bef1a043d6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a7078ba8794a49cf97942d1bef1a043d6" kindref="member" tooltip="Clear instruction flags.">delFlags</ref>(uint32_t<sp/>flags)<sp/>{<sp/><ref refid="structasmjit_1_1BaseNode_1a3990c435857ff94bbd74935638a84ac0" kindref="member" tooltip="Node flags, different meaning for every node type.">_flags</ref><sp/>&amp;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(~flags);<sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>node<sp/>has<sp/>beed<sp/>fetched.</highlight></codeline>
<codeline lineno="753" refid="structasmjit_1_1BaseNode_1a9e6bd7baceb3622c23ff751152bc44d3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a9e6bd7baceb3622c23ff751152bc44d3" kindref="member" tooltip="Get whether the node has beed fetched.">isFetched</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1aae00a71a49da71c80fce40654dfedf81" kindref="member" tooltip="Flow index.">_flowId</ref><sp/>!=<sp/>0;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>node<sp/>has<sp/>been<sp/>translated.</highlight></codeline>
<codeline lineno="755" refid="structasmjit_1_1BaseNode_1aafb1c845517d89dd84a7140b9a4b9886" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1aafb1c845517d89dd84a7140b9a4b9886" kindref="member" tooltip="Get whether the node has been translated.">isTranslated</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0a4159dd16b9c208acaaeea6daa164d8" kindref="member" tooltip="Get whether the instruction has flag flag.">hasFlag</ref>(kNodeFlagIsTranslated);<sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>instruction<sp/>is<sp/>an<sp/>unconditional<sp/>jump.</highlight></codeline>
<codeline lineno="758" refid="structasmjit_1_1BaseNode_1af1afe72717997793b3a7e2d987329e41" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1af1afe72717997793b3a7e2d987329e41" kindref="member" tooltip="Whether the instruction is an unconditional jump.">isJmp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0a4159dd16b9c208acaaeea6daa164d8" kindref="member" tooltip="Get whether the instruction has flag flag.">hasFlag</ref>(kNodeFlagIsJmp);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>instruction<sp/>is<sp/>a<sp/>conditional<sp/>jump.</highlight></codeline>
<codeline lineno="760" refid="structasmjit_1_1BaseNode_1a88d7b4ef3d5f1c1ac7c1621678d1c063" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a88d7b4ef3d5f1c1ac7c1621678d1c063" kindref="member" tooltip="Whether the instruction is a conditional jump.">isJcc</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0a4159dd16b9c208acaaeea6daa164d8" kindref="member" tooltip="Get whether the instruction has flag flag.">hasFlag</ref>(kNodeFlagIsJcc);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>instruction<sp/>is<sp/>an<sp/>unconditional<sp/>or<sp/>conditional<sp/>jump.</highlight></codeline>
<codeline lineno="762" refid="structasmjit_1_1BaseNode_1a27455b36f9a081b3d6b43ad3707fc180" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a27455b36f9a081b3d6b43ad3707fc180" kindref="member" tooltip="Whether the instruction is an unconditional or conditional jump.">isJmpOrJcc</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0a4159dd16b9c208acaaeea6daa164d8" kindref="member" tooltip="Get whether the instruction has flag flag.">hasFlag</ref>(kNodeFlagIsJmp<sp/>|<sp/>kNodeFlagIsJcc);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>instruction<sp/>is<sp/>a<sp/>return.</highlight></codeline>
<codeline lineno="764" refid="structasmjit_1_1BaseNode_1a511b4075627e8bb484d6e7ad20c1fae0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a511b4075627e8bb484d6e7ad20c1fae0" kindref="member" tooltip="Whether the instruction is a return.">isRet</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0a4159dd16b9c208acaaeea6daa164d8" kindref="member" tooltip="Get whether the instruction has flag flag.">hasFlag</ref>(kNodeFlagIsRet);<sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>is<sp/>special.</highlight></codeline>
<codeline lineno="767" refid="structasmjit_1_1BaseNode_1aba6d60c76d4dcb82b4521b0d0a0c33c2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1aba6d60c76d4dcb82b4521b0d0a0c33c2" kindref="member" tooltip="Get whether the instruction is special.">isSpecial</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0a4159dd16b9c208acaaeea6daa164d8" kindref="member" tooltip="Get whether the instruction has flag flag.">hasFlag</ref>(kNodeFlagIsSpecial);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>accesses<sp/>FPU.</highlight></codeline>
<codeline lineno="769" refid="structasmjit_1_1BaseNode_1ac27332d4205dc1effe008e6a168a1435" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1ac27332d4205dc1effe008e6a168a1435" kindref="member" tooltip="Get whether the instruction accesses FPU.">isFp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0a4159dd16b9c208acaaeea6daa164d8" kindref="member" tooltip="Get whether the instruction has flag flag.">hasFlag</ref>(kNodeFlagIsFp);<sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>flow<sp/>index.</highlight></codeline>
<codeline lineno="772" refid="structasmjit_1_1BaseNode_1ab7e1afde9f9b4282247e4b8867d80895" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseNode_1ab7e1afde9f9b4282247e4b8867d80895" kindref="member" tooltip="Get flow index.">getFlowId</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1aae00a71a49da71c80fce40654dfedf81" kindref="member" tooltip="Flow index.">_flowId</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>flow<sp/>index.</highlight></codeline>
<codeline lineno="774" refid="structasmjit_1_1BaseNode_1a47ecc2ce0220e63fbc69aca57b4a728f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a47ecc2ce0220e63fbc69aca57b4a728f" kindref="member" tooltip="Set flow index.">setFlowId</ref>(uint32_t<sp/>flowId)<sp/>{<sp/><ref refid="structasmjit_1_1BaseNode_1aae00a71a49da71c80fce40654dfedf81" kindref="member" tooltip="Flow index.">_flowId</ref><sp/>=<sp/>flowId;<sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>node<sp/>contains<sp/>variable<sp/>allocation<sp/>instructions.</highlight></codeline>
<codeline lineno="777" refid="structasmjit_1_1BaseNode_1a73cb9aaabf953b031116981688a8411f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a73cb9aaabf953b031116981688a8411f" kindref="member" tooltip="Get whether node contains variable allocation instructions.">hasVarInst</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1ab7f38e1bbbd868cc74fce0a7d01d5cbf" kindref="member" tooltip="Variable allocation instructions (initially NULL, filled by prepare phase).">_varInst</ref><sp/>!=<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>allocation<sp/>instructions.</highlight></codeline>
<codeline lineno="780" refid="structasmjit_1_1BaseNode_1acae8b89a5f312913e64c83caebdc52d2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseVarInst" kindref="compound" tooltip="Variable allocation instructions.">BaseVarInst</ref>*<sp/><ref refid="structasmjit_1_1BaseNode_1acae8b89a5f312913e64c83caebdc52d2" kindref="member" tooltip="Get variable allocation instructions.">getVarInst</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1ab7f38e1bbbd868cc74fce0a7d01d5cbf" kindref="member" tooltip="Variable allocation instructions (initially NULL, filled by prepare phase).">_varInst</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>allocation<sp/>instructions<sp/>&lt;T&gt;.</highlight></codeline>
<codeline lineno="782"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="783" refid="structasmjit_1_1BaseNode_1a324f00ff430ae18518368f9ef66398e0" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>T*<sp/><ref refid="structasmjit_1_1BaseNode_1a324f00ff430ae18518368f9ef66398e0" kindref="member" tooltip="Get variable allocation instructions &amp;lt;T&amp;gt;.">getVarInst</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseNode_1ab7f38e1bbbd868cc74fce0a7d01d5cbf" kindref="member" tooltip="Variable allocation instructions (initially NULL, filled by prepare phase).">_varInst</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>variable<sp/>allocation<sp/>instructions.</highlight></codeline>
<codeline lineno="785" refid="structasmjit_1_1BaseNode_1a0f1542bdcd6503fe2ee5a0e847f55215" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0f1542bdcd6503fe2ee5a0e847f55215" kindref="member" tooltip="Set variable allocation instructions.">setVarInst</ref>(<ref refid="structasmjit_1_1BaseVarInst" kindref="compound" tooltip="Variable allocation instructions.">BaseVarInst</ref>*<sp/>vi)<sp/>{<sp/><ref refid="structasmjit_1_1BaseNode_1ab7f38e1bbbd868cc74fce0a7d01d5cbf" kindref="member" tooltip="Variable allocation instructions (initially NULL, filled by prepare phase).">_varInst</ref><sp/>=<sp/>vi;<sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>node<sp/>state.</highlight></codeline>
<codeline lineno="788" refid="structasmjit_1_1BaseNode_1a3381bd2fc97d49d392fe7a4ad92cb890" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseVarState" kindref="compound" tooltip="Variable(s) state.">BaseVarState</ref>*<sp/><ref refid="structasmjit_1_1BaseNode_1a3381bd2fc97d49d392fe7a4ad92cb890" kindref="member" tooltip="Get node state.">getState</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a6006b732dec81463a1508cfad8cb018b" kindref="member" tooltip="Saved state.">_state</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>node<sp/>state<sp/>&lt;T&gt;.</highlight></codeline>
<codeline lineno="790"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="791" refid="structasmjit_1_1BaseNode_1a4b059f3ff2598f406c654833aee1fcbc" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>T*<sp/><ref refid="structasmjit_1_1BaseNode_1a4b059f3ff2598f406c654833aee1fcbc" kindref="member" tooltip="Get node state &amp;lt;T&amp;gt;.">getState</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseVarState" kindref="compound" tooltip="Variable(s) state.">BaseVarState</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseNode_1a6006b732dec81463a1508cfad8cb018b" kindref="member" tooltip="Saved state.">_state</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>node<sp/>state.</highlight></codeline>
<codeline lineno="793" refid="structasmjit_1_1BaseNode_1a841540382e62b6f80f699259ee59587b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a841540382e62b6f80f699259ee59587b" kindref="member" tooltip="Set node state.">setState</ref>(<ref refid="structasmjit_1_1BaseVarState" kindref="compound" tooltip="Variable(s) state.">BaseVarState</ref>*<sp/>state)<sp/>{<sp/><ref refid="structasmjit_1_1BaseNode_1a6006b732dec81463a1508cfad8cb018b" kindref="member" tooltip="Saved state.">_state</ref><sp/>=<sp/>state;<sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>node<sp/>has<sp/>variable<sp/>liveness<sp/>bits.</highlight></codeline>
<codeline lineno="796" refid="structasmjit_1_1BaseNode_1a4efc44156485164602dc216614995fc5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a4efc44156485164602dc216614995fc5" kindref="member" tooltip="Get whether the node has variable liveness bits.">hasLiveness</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0cefc47a244741a68c66ebd64217973c" kindref="member" tooltip="Variable liveness bits (initially NULL, filled by analysis phase).">_liveness</ref><sp/>!=<sp/>NULL;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>liveness<sp/>bits.</highlight></codeline>
<codeline lineno="798" refid="structasmjit_1_1BaseNode_1a601eb54343857a5be1d054876888acc8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/><ref refid="structasmjit_1_1BaseNode_1a601eb54343857a5be1d054876888acc8" kindref="member" tooltip="Get variable liveness bits.">getLiveness</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0cefc47a244741a68c66ebd64217973c" kindref="member" tooltip="Variable liveness bits (initially NULL, filled by analysis phase).">_liveness</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>variable<sp/>liveness<sp/>bits.</highlight></codeline>
<codeline lineno="800" refid="structasmjit_1_1BaseNode_1a3c55bbb4f84d3ee94123e65e3f212a46" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a3c55bbb4f84d3ee94123e65e3f212a46" kindref="member" tooltip="Set variable liveness bits.">setLiveness</ref>(<ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/>liveness)<sp/>{<sp/><ref refid="structasmjit_1_1BaseNode_1a0cefc47a244741a68c66ebd64217973c" kindref="member" tooltip="Variable liveness bits (initially NULL, filled by analysis phase).">_liveness</ref><sp/>=<sp/>liveness;<sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Previous<sp/>node.</highlight></codeline>
<codeline lineno="807" refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>BaseNode*<sp/><ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Next<sp/>node.</highlight></codeline>
<codeline lineno="809" refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>BaseNode*<sp/><ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref>;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="811"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>type,<sp/>see<sp/>@ref<sp/>kNodeType.</highlight></codeline>
<codeline lineno="812" refid="structasmjit_1_1BaseNode_1a41bc5e21cfb77d1a69f6eba49b944b8b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1BaseNode_1a41bc5e21cfb77d1a69f6eba49b944b8b" kindref="member" tooltip="Node type, see kNodeType.">_type</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Operands<sp/>count<sp/>(if<sp/>the<sp/>node<sp/>has<sp/>operands,<sp/>otherwise<sp/>zero).</highlight></codeline>
<codeline lineno="814" refid="structasmjit_1_1BaseNode_1a0f640dcb57f9c977efcd066cfa34bbd4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1BaseNode_1a0f640dcb57f9c977efcd066cfa34bbd4" kindref="member" tooltip="Operands count (if the node has operands, otherwise zero).">_opCount</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node<sp/>flags,<sp/>different<sp/>meaning<sp/>for<sp/>every<sp/>node<sp/>type.</highlight></codeline>
<codeline lineno="816" refid="structasmjit_1_1BaseNode_1a3990c435857ff94bbd74935638a84ac0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1BaseNode_1a3990c435857ff94bbd74935638a84ac0" kindref="member" tooltip="Node flags, different meaning for every node type.">_flags</ref>;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Flow<sp/>index.</highlight></codeline>
<codeline lineno="819" refid="structasmjit_1_1BaseNode_1aae00a71a49da71c80fce40654dfedf81" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseNode_1aae00a71a49da71c80fce40654dfedf81" kindref="member" tooltip="Flow index.">_flowId</ref>;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Inline<sp/>comment<sp/>string,<sp/>initially<sp/>set<sp/>to<sp/>NULL.</highlight></codeline>
<codeline lineno="822" refid="structasmjit_1_1BaseNode_1aa1270ef124c6809ca7fd3388fc7cb01e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1BaseNode_1aa1270ef124c6809ca7fd3388fc7cb01e" kindref="member" tooltip="Inline comment string, initially set to NULL.">_comment</ref>;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>allocation<sp/>instructions<sp/>(initially<sp/>NULL,<sp/>filled<sp/>by<sp/>prepare</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/><sp/>//!<sp/>phase).</highlight></codeline>
<codeline lineno="826" refid="structasmjit_1_1BaseNode_1ab7f38e1bbbd868cc74fce0a7d01d5cbf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseVarInst" kindref="compound" tooltip="Variable allocation instructions.">BaseVarInst</ref>*<sp/><ref refid="structasmjit_1_1BaseNode_1ab7f38e1bbbd868cc74fce0a7d01d5cbf" kindref="member" tooltip="Variable allocation instructions (initially NULL, filled by prepare phase).">_varInst</ref>;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>liveness<sp/>bits<sp/>(initially<sp/>NULL,<sp/>filled<sp/>by<sp/>analysis<sp/>phase).</highlight></codeline>
<codeline lineno="829" refid="structasmjit_1_1BaseNode_1a0cefc47a244741a68c66ebd64217973c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarBits" kindref="compound" tooltip="Bit-array used by variable-liveness analysis.">VarBits</ref>*<sp/><ref refid="structasmjit_1_1BaseNode_1a0cefc47a244741a68c66ebd64217973c" kindref="member" tooltip="Variable liveness bits (initially NULL, filled by analysis phase).">_liveness</ref>;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Saved<sp/>state.</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/>//!<sp/>Initially<sp/>NULL,<sp/>not<sp/>all<sp/>nodes<sp/>have<sp/>saved<sp/>state,<sp/>only<sp/>branch/flow<sp/>control</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/>//!<sp/>nodes.</highlight></codeline>
<codeline lineno="835" refid="structasmjit_1_1BaseNode_1a6006b732dec81463a1508cfad8cb018b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseVarState" kindref="compound" tooltip="Variable(s) state.">BaseVarState</ref>*<sp/><ref refid="structasmjit_1_1BaseNode_1a6006b732dec81463a1508cfad8cb018b" kindref="member" tooltip="Saved state.">_state</ref>;</highlight></codeline>
<codeline lineno="836"><highlight class="normal">};</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::AlignNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="842"><highlight class="comment">//!<sp/>@brief<sp/>Align<sp/>node.</highlight></codeline>
<codeline lineno="843" refid="structasmjit_1_1AlignNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1AlignNode" kindref="compound" tooltip="Align node.">AlignNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1AlignNode" kindref="compound" tooltip="Align node.">AlignNode</ref>)</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>AlignNode<sp/>instance.</highlight></codeline>
<codeline lineno="851" refid="structasmjit_1_1AlignNode_1af42eb6c7f02045ed3a4f60112141cf13" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1AlignNode" kindref="compound" tooltip="Align node.">AlignNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(compiler,<sp/>kNodeTypeAlign)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1AlignNode_1ac4582eaf3fbcb653f4accd6f044379ab" kindref="member" tooltip="Size of the alignment.">_size</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>AlignNode<sp/>instance.</highlight></codeline>
<codeline lineno="856" refid="structasmjit_1_1AlignNode_1aa8f1b1ae89465d50237abe4b14f623b4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1AlignNode_1aa8f1b1ae89465d50237abe4b14f623b4" kindref="member" tooltip="Destroy the AlignNode instance.">~AlignNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>align<sp/>size<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="863" refid="structasmjit_1_1AlignNode_1aef432408471566ae38e00223d7596d72" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1AlignNode_1aef432408471566ae38e00223d7596d72" kindref="member" tooltip="Get align size in bytes.">getSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1AlignNode_1ac4582eaf3fbcb653f4accd6f044379ab" kindref="member" tooltip="Size of the alignment.">_size</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>align<sp/>size<sp/>in<sp/>bytes<sp/>to<sp/>@a<sp/>size.</highlight></codeline>
<codeline lineno="865" refid="structasmjit_1_1AlignNode_1aa199a72af4c6b131ed2d1a6c35dca734" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1AlignNode_1aa199a72af4c6b131ed2d1a6c35dca734" kindref="member" tooltip="Set align size in bytes to size.">setSize</ref>(uint32_t<sp/>size)<sp/>{<sp/><ref refid="structasmjit_1_1AlignNode_1ac4582eaf3fbcb653f4accd6f044379ab" kindref="member" tooltip="Size of the alignment.">_size</ref><sp/>=<sp/>size;<sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Size<sp/>of<sp/>the<sp/>alignment.</highlight></codeline>
<codeline lineno="872" refid="structasmjit_1_1AlignNode_1ac4582eaf3fbcb653f4accd6f044379ab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1AlignNode_1ac4582eaf3fbcb653f4accd6f044379ab" kindref="member" tooltip="Size of the alignment.">_size</ref>;</highlight></codeline>
<codeline lineno="873"><highlight class="normal">};</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::EmbedNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="879"><highlight class="comment">//!<sp/>@brief<sp/>Embed<sp/>node.</highlight></codeline>
<codeline lineno="880"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="881"><highlight class="comment">//!<sp/>Embed<sp/>node<sp/>is<sp/>used<sp/>to<sp/>embed<sp/>data<sp/>into<sp/>final<sp/>assembler<sp/>stream.<sp/>The<sp/>data<sp/>is</highlight></codeline>
<codeline lineno="882"><highlight class="comment">//!<sp/>considered<sp/>to<sp/>be<sp/>RAW;<sp/>No<sp/>analysis<sp/>is<sp/>performed<sp/>on<sp/>RAW<sp/>data.</highlight></codeline>
<codeline lineno="883" refid="structasmjit_1_1EmbedNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Enums]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>kInlineBufferSize<sp/>=<sp/>8<sp/>};</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>EmbedNode<sp/>instance.</highlight></codeline>
<codeline lineno="897" refid="structasmjit_1_1EmbedNode_1ac2266db226d9b28ff7631e9fbe45764f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode_1ac2266db226d9b28ff7631e9fbe45764f" kindref="member" tooltip="Create a new EmbedNode instance.">EmbedNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(compiler,<sp/>kNodeTypeEmbed)<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1EmbedNode_1ae51d5b0568672c64c99e5764c9f205cf" kindref="member" tooltip="Size of the embedded data.">_size</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&lt;=<sp/>kInlineBufferSize)</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::memcpy(_data.buf,<sp/>data,<sp/>size);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_data.ptr<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data);</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>EmbedNode<sp/>instance.</highlight></codeline>
<codeline lineno="906" refid="structasmjit_1_1EmbedNode_1afe1403eb7175f3e6ed05ad1d7dd5e5fe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode_1afe1403eb7175f3e6ed05ad1d7dd5e5fe" kindref="member" tooltip="Destroy the EmbedNode instance.">~EmbedNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>pointer<sp/>to<sp/>data.</highlight></codeline>
<codeline lineno="913" refid="structasmjit_1_1EmbedNode_1a0f47d924b52f25e56818f3eb7467e139" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t*<sp/><ref refid="structasmjit_1_1EmbedNode_1a0f47d924b52f25e56818f3eb7467e139" kindref="member" tooltip="Get pointer to data.">getData</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1EmbedNode_1adfdab6b1fb4b3bc6dd667bd996c35525" kindref="member" tooltip="Get size of data.">getSize</ref>()<sp/>&lt;=<sp/>kInlineBufferSize<sp/>?<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_data.buf)<sp/>:<sp/>_data.ptr;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>size<sp/>of<sp/>data.</highlight></codeline>
<codeline lineno="915" refid="structasmjit_1_1EmbedNode_1adfdab6b1fb4b3bc6dd667bd996c35525" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1EmbedNode_1adfdab6b1fb4b3bc6dd667bd996c35525" kindref="member" tooltip="Get size of data.">getSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1EmbedNode_1ae51d5b0568672c64c99e5764c9f205cf" kindref="member" tooltip="Size of the embedded data.">_size</ref>;<sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Size<sp/>of<sp/>the<sp/>embedded<sp/>data.</highlight></codeline>
<codeline lineno="922" refid="structasmjit_1_1EmbedNode_1ae51d5b0568672c64c99e5764c9f205cf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1EmbedNode_1ae51d5b0568672c64c99e5764c9f205cf" kindref="member" tooltip="Size of the embedded data.">_size</ref>;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>data<sp/>buffer.</highlight></codeline>
<codeline lineno="926" refid="structasmjit_1_1EmbedNode_1a2d9a35a0bcfd4fd7a334762a51c51ff9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1EmbedNode_1a2d9a35a0bcfd4fd7a334762a51c51ff9" kindref="member" tooltip="data buffer.">buf</ref>[kInlineBufferSize];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Data<sp/>buffer.</highlight></codeline>
<codeline lineno="928" refid="structasmjit_1_1EmbedNode_1ae07dc3ac638bef55e619265851b6bcd4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/><ref refid="structasmjit_1_1EmbedNode_1ae07dc3ac638bef55e619265851b6bcd4" kindref="member" tooltip="Data buffer.">ptr</ref>;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>}<sp/>_data;</highlight></codeline>
<codeline lineno="930"><highlight class="normal">};</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::CommentNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="936"><highlight class="comment">//!<sp/>@brief<sp/>Comment<sp/>node.</highlight></codeline>
<codeline lineno="937"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="938"><highlight class="comment">//!<sp/>Comments<sp/>allows<sp/>to<sp/>comment<sp/>your<sp/>assembler<sp/>stream<sp/>for<sp/>better<sp/>debugging</highlight></codeline>
<codeline lineno="939"><highlight class="comment">//!<sp/>and<sp/>visualization.<sp/>Comments<sp/>are<sp/>usually<sp/>ignored<sp/>in<sp/>release<sp/>builds<sp/>unless</highlight></codeline>
<codeline lineno="940"><highlight class="comment">//!<sp/>the<sp/>logger<sp/>is<sp/>present.</highlight></codeline>
<codeline lineno="941" refid="structasmjit_1_1CommentNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref>)</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>CommentNode<sp/>instance.</highlight></codeline>
<codeline lineno="949" refid="structasmjit_1_1CommentNode_1a7bd77d755f81fa732eea777712e2fc2c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)<sp/>:<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(compiler,<sp/>kNodeTypeComment)<sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1aa1270ef124c6809ca7fd3388fc7cb01e" kindref="member" tooltip="Inline comment string, initially set to NULL.">_comment</ref><sp/>=<sp/>comment;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>CommentNode<sp/>instance.</highlight></codeline>
<codeline lineno="954" refid="structasmjit_1_1CommentNode_1a49304f1e2801b1d8eaf766d8776e9680" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1CommentNode_1a49304f1e2801b1d8eaf766d8776e9680" kindref="member" tooltip="Destroy the CommentNode instance.">~CommentNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="955"><highlight class="normal">};</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::HintNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="961"><highlight class="comment">//!<sp/>@brief<sp/>Hint<sp/>node.</highlight></codeline>
<codeline lineno="962" refid="structasmjit_1_1HintNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1HintNode" kindref="compound" tooltip="Hint node.">HintNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1HintNode" kindref="compound" tooltip="Hint node.">HintNode</ref>)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>HintNode<sp/>instance.</highlight></codeline>
<codeline lineno="970" refid="structasmjit_1_1HintNode_1a0c92890db18454d491dcff86af86d8db" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1HintNode" kindref="compound" tooltip="Hint node.">HintNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>vd,<sp/>uint32_t<sp/>hint,<sp/>uint32_t<sp/>value)<sp/>:<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(compiler,<sp/>kNodeTypeHint)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1HintNode_1a8c5cd789bca2d7c198d4276553fba3ca" kindref="member" tooltip="Variable.">_vd</ref><sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1HintNode_1a49c49a179ed4128a1745d9ec563ea869" kindref="member" tooltip="Hint id.">_hint</ref><sp/>=<sp/>hint;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1HintNode_1a6b97d883daec930f41447bdc1ae26b77" kindref="member" tooltip="Value.">_value</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>HintNode<sp/>instance.</highlight></codeline>
<codeline lineno="977" refid="structasmjit_1_1HintNode_1a5ea1be4cfdad997306718ceffa1e2039" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1HintNode_1a5ea1be4cfdad997306718ceffa1e2039" kindref="member" tooltip="Destroy the HintNode instance.">~HintNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable.</highlight></codeline>
<codeline lineno="984" refid="structasmjit_1_1HintNode_1a9190501dc48972301c2f3bda30557974" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1HintNode_1a9190501dc48972301c2f3bda30557974" kindref="member" tooltip="Get variable.">getVd</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1HintNode_1a8c5cd789bca2d7c198d4276553fba3ca" kindref="member" tooltip="Variable.">_vd</ref>;<sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>hint<sp/>it<sp/>(see<sp/>@ref<sp/>kVarHint).</highlight></codeline>
<codeline lineno="987" refid="structasmjit_1_1HintNode_1ab1b2a2b2bd9e592f74920946e4dd6202" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1HintNode_1ab1b2a2b2bd9e592f74920946e4dd6202" kindref="member" tooltip="Get hint it (see kVarHint).">getHint</ref>()</highlight><highlight class="keyword"><sp/>const</highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1HintNode_1a49c49a179ed4128a1745d9ec563ea869" kindref="member" tooltip="Hint id.">_hint</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>hint<sp/>it<sp/>(see<sp/>@ref<sp/>kVarHint).</highlight></codeline>
<codeline lineno="989" refid="structasmjit_1_1HintNode_1a0608f9436a6cb5e673c51fc062f18eee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1HintNode_1a0608f9436a6cb5e673c51fc062f18eee" kindref="member" tooltip="Set hint it (see kVarHint).">setHint</ref>(uint32_t<sp/>hint)<sp/>{<sp/><ref refid="structasmjit_1_1HintNode_1a49c49a179ed4128a1745d9ec563ea869" kindref="member" tooltip="Hint id.">_hint</ref><sp/>=<sp/>hint;<sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>hint<sp/>value.</highlight></codeline>
<codeline lineno="992" refid="structasmjit_1_1HintNode_1a5c1a0d474efee27431613bfb53bcba25" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1HintNode_1a5c1a0d474efee27431613bfb53bcba25" kindref="member" tooltip="Get hint value.">getValue</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1HintNode_1a6b97d883daec930f41447bdc1ae26b77" kindref="member" tooltip="Value.">_value</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>hint<sp/>value.</highlight></codeline>
<codeline lineno="994" refid="structasmjit_1_1HintNode_1ae1f4da8ea69cada8f4ad5e4e1038f6b1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1HintNode_1ae1f4da8ea69cada8f4ad5e4e1038f6b1" kindref="member" tooltip="Set hint value.">setValue</ref>(uint32_t<sp/>value)<sp/>{<sp/><ref refid="structasmjit_1_1HintNode_1a6b97d883daec930f41447bdc1ae26b77" kindref="member" tooltip="Value.">_value</ref><sp/>=<sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable.</highlight></codeline>
<codeline lineno="1001" refid="structasmjit_1_1HintNode_1a8c5cd789bca2d7c198d4276553fba3ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1HintNode_1a8c5cd789bca2d7c198d4276553fba3ca" kindref="member" tooltip="Variable.">_vd</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Hint<sp/>id.</highlight></codeline>
<codeline lineno="1003" refid="structasmjit_1_1HintNode_1a49c49a179ed4128a1745d9ec563ea869" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1HintNode_1a49c49a179ed4128a1745d9ec563ea869" kindref="member" tooltip="Hint id.">_hint</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Value.</highlight></codeline>
<codeline lineno="1005" refid="structasmjit_1_1HintNode_1a6b97d883daec930f41447bdc1ae26b77" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1HintNode_1a6b97d883daec930f41447bdc1ae26b77" kindref="member" tooltip="Value.">_value</ref>;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::TargetNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1012"><highlight class="comment">//!<sp/>@brief<sp/>label<sp/>node.</highlight></codeline>
<codeline lineno="1013" refid="structasmjit_1_1TargetNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>TargetNode<sp/>instance.</highlight></codeline>
<codeline lineno="1021" refid="structasmjit_1_1TargetNode_1a3df58f64c9c935da2f3270c075fd561b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/>uint32_t<sp/>labelId)<sp/>:<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(compiler,<sp/>kNodeTypeTarget)<sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1TargetNode_1a57c72d22cc4fc89b6335986425b6b573" kindref="member" tooltip="Label id.">_id</ref><sp/>=<sp/>labelId;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1TargetNode_1a7da6e45c60893e4f9e2474109f1ced2c" kindref="member" tooltip="Count of jumps here.">_numRefs</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1TargetNode_1a2d5bb92b1cb771d1991d4abf7de57cf6" kindref="member" tooltip="First jump instruction that points to this target (label).">_from</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>TargetNode<sp/>instance.</highlight></codeline>
<codeline lineno="1028" refid="structasmjit_1_1TargetNode_1a14a108a12499e3b15e864ad13978fa8a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1TargetNode_1a14a108a12499e3b15e864ad13978fa8a" kindref="member" tooltip="Destroy the TargetNode instance.">~TargetNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>target<sp/>label.</highlight></codeline>
<codeline lineno="1035" refid="structasmjit_1_1TargetNode_1a971651d9f52019f5eb82d89a13fa825f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref><sp/><ref refid="structasmjit_1_1TargetNode_1a971651d9f52019f5eb82d89a13fa825f" kindref="member" tooltip="Get target label.">getLabel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>(<ref refid="structasmjit_1_1TargetNode_1a57c72d22cc4fc89b6335986425b6b573" kindref="member" tooltip="Label id.">_id</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>target<sp/>label<sp/>id.</highlight></codeline>
<codeline lineno="1037" refid="structasmjit_1_1TargetNode_1a5023478b496a8a7122d075d1a282e756" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1TargetNode_1a5023478b496a8a7122d075d1a282e756" kindref="member" tooltip="Get target label id.">getLabelId</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1TargetNode_1a57c72d22cc4fc89b6335986425b6b573" kindref="member" tooltip="Label id.">_id</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>first<sp/>jmp<sp/>instruction.</highlight></codeline>
<codeline lineno="1040" refid="structasmjit_1_1TargetNode_1a4810fdb9a82353f215e0bb3325651783" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1JumpNode" kindref="compound" tooltip="Jump node.">JumpNode</ref>*<sp/><ref refid="structasmjit_1_1TargetNode_1a4810fdb9a82353f215e0bb3325651783" kindref="member" tooltip="Get first jmp instruction.">getFrom</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1TargetNode_1a2d5bb92b1cb771d1991d4abf7de57cf6" kindref="member" tooltip="First jump instruction that points to this target (label).">_from</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>node<sp/>has<sp/>assigned<sp/>state.</highlight></codeline>
<codeline lineno="1043" refid="structasmjit_1_1TargetNode_1a2c2b4418b1dd39ec8f2cefbb158f97ec" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1TargetNode_1a2c2b4418b1dd39ec8f2cefbb158f97ec" kindref="member" tooltip="Get whether the node has assigned state.">hasState</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a6006b732dec81463a1508cfad8cb018b" kindref="member" tooltip="Saved state.">_state</ref><sp/>!=<sp/>NULL;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>state<sp/>for<sp/>this<sp/>target.</highlight></codeline>
<codeline lineno="1045" refid="structasmjit_1_1TargetNode_1a30e20cf2807d752a8173a8e283d19fcc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseVarState" kindref="compound" tooltip="Variable(s) state.">BaseVarState</ref>*<sp/><ref refid="structasmjit_1_1TargetNode_1a30e20cf2807d752a8173a8e283d19fcc" kindref="member" tooltip="Get state for this target.">getState</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a6006b732dec81463a1508cfad8cb018b" kindref="member" tooltip="Saved state.">_state</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>state<sp/>for<sp/>this<sp/>target.</highlight></codeline>
<codeline lineno="1047" refid="structasmjit_1_1TargetNode_1ad659ad207f3703ef8d460303eb0b3a42" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1TargetNode_1ad659ad207f3703ef8d460303eb0b3a42" kindref="member" tooltip="Set state for this target.">setState</ref>(<ref refid="structasmjit_1_1BaseVarState" kindref="compound" tooltip="Variable(s) state.">BaseVarState</ref>*<sp/>state)<sp/>{<sp/><ref refid="structasmjit_1_1BaseNode_1a6006b732dec81463a1508cfad8cb018b" kindref="member" tooltip="Saved state.">_state</ref><sp/>=<sp/>state;<sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>number<sp/>of<sp/>jumps<sp/>to<sp/>this<sp/>target.</highlight></codeline>
<codeline lineno="1050" refid="structasmjit_1_1TargetNode_1a23b1c7a10347154e0c11e065b99ccaa2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1TargetNode_1a23b1c7a10347154e0c11e065b99ccaa2" kindref="member" tooltip="Get number of jumps to this target.">getNumRefs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1TargetNode_1a7da6e45c60893e4f9e2474109f1ced2c" kindref="member" tooltip="Count of jumps here.">_numRefs</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1051"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>number<sp/>of<sp/>jumps<sp/>to<sp/>this<sp/>target.</highlight></codeline>
<codeline lineno="1052" refid="structasmjit_1_1TargetNode_1a9cfeda06bc71b633af4de7448aade2c4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1TargetNode_1a9cfeda06bc71b633af4de7448aade2c4" kindref="member" tooltip="Set number of jumps to this target.">setNumRefs</ref>(uint32_t<sp/>i)<sp/>{<sp/><ref refid="structasmjit_1_1TargetNode_1a7da6e45c60893e4f9e2474109f1ced2c" kindref="member" tooltip="Count of jumps here.">_numRefs</ref><sp/>=<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>number<sp/>of<sp/>jumps<sp/>to<sp/>this<sp/>target.</highlight></codeline>
<codeline lineno="1055" refid="structasmjit_1_1TargetNode_1aac2170e7f566c8df6127da236689864e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1TargetNode_1aac2170e7f566c8df6127da236689864e" kindref="member" tooltip="Add number of jumps to this target.">addNumRefs</ref>(uint32_t<sp/>i<sp/>=<sp/>1)<sp/>{<sp/><ref refid="structasmjit_1_1TargetNode_1a7da6e45c60893e4f9e2474109f1ced2c" kindref="member" tooltip="Count of jumps here.">_numRefs</ref><sp/>+=<sp/>i;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Subtract<sp/>number<sp/>of<sp/>jumps<sp/>to<sp/>this<sp/>target.</highlight></codeline>
<codeline lineno="1057" refid="structasmjit_1_1TargetNode_1a80f8543c46cdbcb181f8ea61cc9fabff" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1TargetNode_1a80f8543c46cdbcb181f8ea61cc9fabff" kindref="member" tooltip="Subtract number of jumps to this target.">subNumRefs</ref>(uint32_t<sp/>i<sp/>=<sp/>1)<sp/>{<sp/><ref refid="structasmjit_1_1TargetNode_1a7da6e45c60893e4f9e2474109f1ced2c" kindref="member" tooltip="Count of jumps here.">_numRefs</ref><sp/>-=<sp/>i;<sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1063"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Label<sp/>id.</highlight></codeline>
<codeline lineno="1064" refid="structasmjit_1_1TargetNode_1a57c72d22cc4fc89b6335986425b6b573" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1TargetNode_1a57c72d22cc4fc89b6335986425b6b573" kindref="member" tooltip="Label id.">_id</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>jumps<sp/>here.</highlight></codeline>
<codeline lineno="1066" refid="structasmjit_1_1TargetNode_1a7da6e45c60893e4f9e2474109f1ced2c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1TargetNode_1a7da6e45c60893e4f9e2474109f1ced2c" kindref="member" tooltip="Count of jumps here.">_numRefs</ref>;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>First<sp/>jump<sp/>instruction<sp/>that<sp/>points<sp/>to<sp/>this<sp/>target<sp/>(label).</highlight></codeline>
<codeline lineno="1069" refid="structasmjit_1_1TargetNode_1a2d5bb92b1cb771d1991d4abf7de57cf6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1JumpNode" kindref="compound" tooltip="Jump node.">JumpNode</ref>*<sp/><ref refid="structasmjit_1_1TargetNode_1a2d5bb92b1cb771d1991d4abf7de57cf6" kindref="member" tooltip="First jump instruction that points to this target (label).">_from</ref>;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::InstNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1076"><highlight class="comment">//!<sp/>@brief<sp/>Instruction<sp/>node.</highlight></codeline>
<codeline lineno="1077" refid="structasmjit_1_1InstNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>)</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>InstNode<sp/>instance.</highlight></codeline>
<codeline lineno="1085" refid="structasmjit_1_1InstNode_1a17c42845dfd3b3699b94206b3b372594" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/>uint32_t<sp/>code,<sp/>uint32_t<sp/>options,<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>*<sp/>opList,<sp/>uint32_t<sp/>opCount)<sp/>:<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(compiler,<sp/>kNodeTypeInst)<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1InstNode_1a7d37df684be006c503760e4a154af5f8" kindref="member" tooltip="Instruction code, see kInstCode.">_code</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(code);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1InstNode_1a3ace70dff4b022dfacd57f0f59bc700d" kindref="member" tooltip="Instruction options, see kInstOptions.">_options</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(options);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1a0f640dcb57f9c977efcd066cfa34bbd4" kindref="member" tooltip="Operands count (if the node has operands, otherwise zero).">_opCount</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(opCount);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1InstNode_1a25278f5e52637cf59a983de4d22a1b60" kindref="member" tooltip="Operands list.">_opList</ref><sp/>=<sp/>opList;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/>_updateMemOp();</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>InstNode<sp/>instance.</highlight></codeline>
<codeline lineno="1096" refid="structasmjit_1_1InstNode_1ab943371d43280a2f04dcd0a9564ed06d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1InstNode_1ab943371d43280a2f04dcd0a9564ed06d" kindref="member" tooltip="Destroy the InstNode instance.">~InstNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>instruction<sp/>code,<sp/>see<sp/>@c<sp/>kInstCode.</highlight></codeline>
<codeline lineno="1103" refid="structasmjit_1_1InstNode_1a0c771b4d33c7b8bc7b603f8b7a154a49" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1InstNode_1a0c771b4d33c7b8bc7b603f8b7a154a49" kindref="member" tooltip="Get instruction code, see kInstCode.">getCode</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1104"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1a7d37df684be006c503760e4a154af5f8" kindref="member" tooltip="Instruction code, see kInstCode.">_code</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>instruction<sp/>code<sp/>to<sp/>@a<sp/>code.</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"><sp/><sp/>//!<sp/>Please<sp/>do<sp/>not<sp/>modify<sp/>instruction<sp/>code<sp/>if<sp/>you<sp/>are<sp/>not<sp/>know<sp/>what<sp/>you<sp/>are</highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/><sp/>//!<sp/>doing.<sp/>Incorrect<sp/>instruction<sp/>code<sp/>or<sp/>operands<sp/>can<sp/>raise<sp/>assertion()<sp/>at</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/><sp/>//!<sp/>runtime.</highlight></codeline>
<codeline lineno="1111" refid="structasmjit_1_1InstNode_1a81554a3081a0c787227f368d2d23c8d6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1a81554a3081a0c787227f368d2d23c8d6" kindref="member" tooltip="Set instruction code to code.">setCode</ref>(uint32_t<sp/>code)</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1InstNode_1a7d37df684be006c503760e4a154af5f8" kindref="member" tooltip="Instruction code, see kInstCode.">_code</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(code);<sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1114"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>instruction<sp/>is<sp/>an<sp/>unconditional<sp/>jump<sp/>or<sp/>whether<sp/>the</highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/>//!<sp/>instruction<sp/>is<sp/>a<sp/>conditional<sp/>jump<sp/>which<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>taken.</highlight></codeline>
<codeline lineno="1116" refid="structasmjit_1_1InstNode_1a5569fbf893e35849bc8e2b2ac9893f30" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1a5569fbf893e35849bc8e2b2ac9893f30" kindref="member" tooltip="Whether the instruction is an unconditional jump or whether the instruction is a conditional jump whi...">isTaken</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0a4159dd16b9c208acaaeea6daa164d8" kindref="member" tooltip="Get whether the instruction has flag flag.">hasFlag</ref>(kNodeFlagIsTaken);<sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>emit<sp/>options.</highlight></codeline>
<codeline lineno="1119" refid="structasmjit_1_1InstNode_1a1e9b1c55fe1ebcb58aba707fcde3284d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1InstNode_1a1e9b1c55fe1ebcb58aba707fcde3284d" kindref="member" tooltip="Get emit options.">getOptions</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1a3ace70dff4b022dfacd57f0f59bc700d" kindref="member" tooltip="Instruction options, see kInstOptions.">_options</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>emit<sp/>options.</highlight></codeline>
<codeline lineno="1121" refid="structasmjit_1_1InstNode_1abfb96d9d1842f1e5db2a27cc8530ab74" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1abfb96d9d1842f1e5db2a27cc8530ab74" kindref="member" tooltip="Set emit options.">setOptions</ref>(uint32_t<sp/>options)<sp/>{<sp/><ref refid="structasmjit_1_1InstNode_1a3ace70dff4b022dfacd57f0f59bc700d" kindref="member" tooltip="Instruction options, see kInstOptions.">_options</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(options);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>emit<sp/>options.</highlight></codeline>
<codeline lineno="1123" refid="structasmjit_1_1InstNode_1a11393e7039b8da4ddfdac9c99086fc64" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1a11393e7039b8da4ddfdac9c99086fc64" kindref="member" tooltip="Add emit options.">addOptions</ref>(uint32_t<sp/>options)<sp/>{<sp/><ref refid="structasmjit_1_1InstNode_1a3ace70dff4b022dfacd57f0f59bc700d" kindref="member" tooltip="Instruction options, see kInstOptions.">_options</ref><sp/>|=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(options);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mask<sp/>emit<sp/>options.</highlight></codeline>
<codeline lineno="1125" refid="structasmjit_1_1InstNode_1a0006d10ddccf18de643e649ce935ab64" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1a0006d10ddccf18de643e649ce935ab64" kindref="member" tooltip="Mask emit options.">andOptions</ref>(uint32_t<sp/>options)<sp/>{<sp/><ref refid="structasmjit_1_1InstNode_1a3ace70dff4b022dfacd57f0f59bc700d" kindref="member" tooltip="Instruction options, see kInstOptions.">_options</ref><sp/>&amp;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(options);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1126"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>emit<sp/>options.</highlight></codeline>
<codeline lineno="1127" refid="structasmjit_1_1InstNode_1ae436d06f23cf022742d434f428e320ae" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1ae436d06f23cf022742d434f428e320ae" kindref="member" tooltip="Clear emit options.">delOptions</ref>(uint32_t<sp/>options)<sp/>{<sp/><ref refid="structasmjit_1_1InstNode_1a3ace70dff4b022dfacd57f0f59bc700d" kindref="member" tooltip="Instruction options, see kInstOptions.">_options</ref><sp/>&amp;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(~options);<sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>operands<sp/>list.</highlight></codeline>
<codeline lineno="1130" refid="structasmjit_1_1InstNode_1a34d18efd555ba7388d7fcf704de5e82f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>*<sp/><ref refid="structasmjit_1_1InstNode_1a34d18efd555ba7388d7fcf704de5e82f" kindref="member" tooltip="Get operands list.">getOpList</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1a25278f5e52637cf59a983de4d22a1b60" kindref="member" tooltip="Operands list.">_opList</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1132" refid="structasmjit_1_1InstNode_1aa690f44922280e922cdd8d6aebabcece" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>*<sp/><ref refid="structasmjit_1_1InstNode_1aa690f44922280e922cdd8d6aebabcece" kindref="member">getOpList</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1a25278f5e52637cf59a983de4d22a1b60" kindref="member" tooltip="Operands list.">_opList</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>operands<sp/>count.</highlight></codeline>
<codeline lineno="1135" refid="structasmjit_1_1InstNode_1ab6374ed907b0e2a9a5f5f48596d5a7a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1InstNode_1ab6374ed907b0e2a9a5f5f48596d5a7a9" kindref="member" tooltip="Get operands count.">getOpCount</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode_1a0f640dcb57f9c977efcd066cfa34bbd4" kindref="member" tooltip="Operands count (if the node has operands, otherwise zero).">_opCount</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>contains<sp/>a<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="1138" refid="structasmjit_1_1InstNode_1aca05e95ecf9492620ab5bf18c667f5d9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1aca05e95ecf9492620ab5bf18c667f5d9" kindref="member" tooltip="Get whether the instruction contains a memory operand.">hasMemOp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_memOpIndex<sp/>!=<sp/>0xFF;<sp/>}</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>operand<sp/>index<sp/>(in<sp/>opList),<sp/>0xFF<sp/>means<sp/>that<sp/>instruction</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/><sp/>//!<sp/>doesn&apos;t<sp/>have<sp/>a<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="1142" refid="structasmjit_1_1InstNode_1a1b1abb3ae90d7e53859c46789251c1f8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1a1b1abb3ae90d7e53859c46789251c1f8" kindref="member" tooltip="Set memory operand index (in opList), 0xFF means that instruction doesn&amp;#39;t have a memory operand...">setMemOpIndex</ref>(uint32_t<sp/>index)<sp/>{<sp/>_memOpIndex<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>memory<sp/>operand<sp/>index,<sp/>setting<sp/>it<sp/>to<sp/>0xFF.</highlight></codeline>
<codeline lineno="1144" refid="structasmjit_1_1InstNode_1a19aebade792af45fcbc2457d568fa475" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode_1a19aebade792af45fcbc2457d568fa475" kindref="member" tooltip="Reset memory operand index, setting it to 0xFF.">resetMemOpIndex</ref>()<sp/>{<sp/>_memOpIndex<sp/>=<sp/>0xFF;<sp/>}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Can<sp/>only<sp/>be<sp/>called<sp/>if<sp/>the<sp/>instruction<sp/>has<sp/>such<sp/>operand,<sp/>see<sp/>@ref</highlight></codeline>
<codeline lineno="1149"><highlight class="comment"><sp/><sp/>//!<sp/>hasMemOp().</highlight></codeline>
<codeline lineno="1150" refid="structasmjit_1_1InstNode_1a1582342f696c8b5d88fca7e94dc95ef2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>*<sp/><ref refid="structasmjit_1_1InstNode_1a1582342f696c8b5d88fca7e94dc95ef2" kindref="member" tooltip="Get memory operand.">getMemOp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(<ref refid="structasmjit_1_1InstNode_1aca05e95ecf9492620ab5bf18c667f5d9" kindref="member" tooltip="Get whether the instruction contains a memory operand.">hasMemOp</ref>());</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="structasmjit_1_1InstNode_1a25278f5e52637cf59a983de4d22a1b60" kindref="member" tooltip="Operands list.">_opList</ref>[_memOpIndex]);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1155"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1156"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1157" refid="structasmjit_1_1InstNode_1afa491360aa95939d5bcc64134f1c826d" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>T*<sp/><ref refid="structasmjit_1_1InstNode_1afa491360aa95939d5bcc64134f1c826d" kindref="member">getMemOp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(<ref refid="structasmjit_1_1InstNode_1aca05e95ecf9492620ab5bf18c667f5d9" kindref="member" tooltip="Get whether the instruction contains a memory operand.">hasMemOp</ref>());</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="structasmjit_1_1InstNode_1a25278f5e52637cf59a983de4d22a1b60" kindref="member" tooltip="Operands list.">_opList</ref>[_memOpIndex]);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Utils]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_updateMemOp()<sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>*<sp/>opList<sp/>=<sp/><ref refid="structasmjit_1_1InstNode_1a34d18efd555ba7388d7fcf704de5e82f" kindref="member" tooltip="Get operands list.">getOpList</ref>();</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>opCount<sp/>=<sp/><ref refid="structasmjit_1_1InstNode_1ab6374ed907b0e2a9a5f5f48596d5a7a9" kindref="member" tooltip="Get operands count.">getOpCount</ref>();</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>opCount;<sp/>i++)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opList[i].isMem())</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Update;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal">_Update:</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1InstNode_1a1b1abb3ae90d7e53859c46789251c1f8" kindref="member" tooltip="Set memory operand index (in opList), 0xFF means that instruction doesn&amp;#39;t have a memory operand...">setMemOpIndex</ref>(i);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>code,<sp/>see<sp/>@c<sp/>kInstCode.</highlight></codeline>
<codeline lineno="1185" refid="structasmjit_1_1InstNode_1a7d37df684be006c503760e4a154af5f8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1InstNode_1a7d37df684be006c503760e4a154af5f8" kindref="member" tooltip="Instruction code, see kInstCode.">_code</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>options,<sp/>see<sp/>@c<sp/>kInstOptions.</highlight></codeline>
<codeline lineno="1187" refid="structasmjit_1_1InstNode_1a3ace70dff4b022dfacd57f0f59bc700d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1InstNode_1a3ace70dff4b022dfacd57f0f59bc700d" kindref="member" tooltip="Instruction options, see kInstOptions.">_options</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1188"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1189"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/>_memOpIndex;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1191"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Operands<sp/>list.</highlight></codeline>
<codeline lineno="1192" refid="structasmjit_1_1InstNode_1a25278f5e52637cf59a983de4d22a1b60" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>*<sp/><ref refid="structasmjit_1_1InstNode_1a25278f5e52637cf59a983de4d22a1b60" kindref="member" tooltip="Operands list.">_opList</ref>;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::JumpNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1199"><highlight class="comment">//!<sp/>@brief<sp/>Jump<sp/>node.</highlight></codeline>
<codeline lineno="1200" refid="structasmjit_1_1JumpNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1JumpNode" kindref="compound" tooltip="Jump node.">JumpNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref><sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1JumpNode" kindref="compound" tooltip="Jump node.">JumpNode</ref>)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1JumpNode" kindref="compound" tooltip="Jump node.">JumpNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/>uint32_t<sp/>code,<sp/>uint32_t<sp/>options,<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>*<sp/>opList,<sp/>uint32_t<sp/>opCount)<sp/>:</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>(compiler,<sp/>code,<sp/>options,<sp/>opList,<sp/>opCount)<sp/>{}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>~JumpNode()<sp/>{}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/>getTarget()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1JumpNode_1a8c981acd643a78a6516ea0f12fb76f72" kindref="member" tooltip="Target node.">_target</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>JumpNode*<sp/>getJumpNext()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1JumpNode_1aa53d2e0da4214825a8103cb2c92d2098" kindref="member" tooltip="Next jump to the same target in a single linked-list.">_jumpNext</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1222"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Target<sp/>node.</highlight></codeline>
<codeline lineno="1223" refid="structasmjit_1_1JumpNode_1a8c981acd643a78a6516ea0f12fb76f72" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/><ref refid="structasmjit_1_1JumpNode_1a8c981acd643a78a6516ea0f12fb76f72" kindref="member" tooltip="Target node.">_target</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1224"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Next<sp/>jump<sp/>to<sp/>the<sp/>same<sp/>target<sp/>in<sp/>a<sp/>single<sp/>linked-list.</highlight></codeline>
<codeline lineno="1225" refid="structasmjit_1_1JumpNode_1aa53d2e0da4214825a8103cb2c92d2098" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>JumpNode<sp/>*<ref refid="structasmjit_1_1JumpNode_1aa53d2e0da4214825a8103cb2c92d2098" kindref="member" tooltip="Next jump to the same target in a single linked-list.">_jumpNext</ref>;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::FuncNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1232"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>declaration<sp/>node.</highlight></codeline>
<codeline lineno="1233"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1234"><highlight class="comment">//!<sp/>Functions<sp/>are<sp/>base<sp/>blocks<sp/>for<sp/>generating<sp/>assembler<sp/>output.<sp/>Each<sp/>generated</highlight></codeline>
<codeline lineno="1235"><highlight class="comment">//!<sp/>assembler<sp/>stream<sp/>needs<sp/>standard<sp/>entry<sp/>and<sp/>leave<sp/>sequences<sp/>which<sp/>are<sp/>compatible</highlight></codeline>
<codeline lineno="1236"><highlight class="comment">//!<sp/>with<sp/>the<sp/>operating<sp/>system<sp/>ABI.</highlight></codeline>
<codeline lineno="1237"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1238"><highlight class="comment">//!<sp/>@ref<sp/>FuncNode<sp/>can<sp/>be<sp/>used<sp/>to<sp/>generate<sp/>function<sp/>prolog<sp/>and<sp/>epilog<sp/>which<sp/>are</highlight></codeline>
<codeline lineno="1239"><highlight class="comment">//!<sp/>compatible<sp/>with<sp/>a<sp/>given<sp/>function<sp/>calling<sp/>convention<sp/>and<sp/>to<sp/>allocate<sp/>and</highlight></codeline>
<codeline lineno="1240"><highlight class="comment">//!<sp/>manage<sp/>variables<sp/>that<sp/>can<sp/>be<sp/>allocated/spilled<sp/>during<sp/>compilation<sp/>phase.</highlight></codeline>
<codeline lineno="1241" refid="structasmjit_1_1FuncNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncNode" kindref="compound" tooltip="Function declaration node.">FuncNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1FuncNode" kindref="compound" tooltip="Function declaration node.">FuncNode</ref>)</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@c<sp/>FuncNode<sp/>instance.</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1250"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Always<sp/>use<sp/>@ref<sp/>asmjit::BaseCompiler::addFunc()<sp/>to<sp/>create<sp/>a</highlight></codeline>
<codeline lineno="1251"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/>//!<sp/>@ref<sp/>FuncNode<sp/>instance.</highlight></codeline>
<codeline lineno="1252" refid="structasmjit_1_1FuncNode_1a41c623e27e0c7f48a7449d5a2251c826" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncNode" kindref="compound" tooltip="Function declaration node.">FuncNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler)<sp/>:</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(compiler,<sp/>kNodeTypeFunc),</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1acaaa4dc2cfa9ba94903e54625c1ef6e2" kindref="member" tooltip="Function entry.">_entryNode</ref>(NULL),</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a8d037bed787b238ae8f76f46257b129e" kindref="member" tooltip="Function exit.">_exitNode</ref>(NULL),</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a8f054d6870355e7e43192fe857a0c7f5" kindref="member" tooltip="Function declaration.">_decl</ref>(NULL),</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a0e4f433063da83c574c012dbe4666037" kindref="member" tooltip="Function end.">_end</ref>(NULL),</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1af0787526f99e5db159be47cb0588bc68" kindref="member" tooltip="Arguments list as VarData.">_argList</ref>(NULL),</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a9717320ee3825c238a6135639e815720" kindref="member" tooltip="Function hints;.">_funcHints</ref>(IntUtil::mask(kFuncHintNaked)),</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a5d29ee06e312c72d751b151c4a0d3f79" kindref="member" tooltip="Function flags.">_funcFlags</ref>(0),</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a91f3d5309edc28c1da14cb3907bdff32" kindref="member" tooltip="Expected stack alignment (we depend on this value).">_expectedStackAlignment</ref>(0),</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1aded18efc8b9fba840692dd9aed792a8b" kindref="member" tooltip="Required stack alignment (usually for multimedia instructions).">_requiredStackAlignment</ref>(0),</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1af410035b78e1c824e33c0c6ded47bcb4" kindref="member" tooltip="The &amp;quot;Red Zone&amp;quot; suze - count of bytes which might be accessed without adjusting the stack pointer...">_redZoneSize</ref>(0),</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1ae224f3318bddbbc5795e96f75c46a152" kindref="member" tooltip="Spill zone size (zone used by WIN64ABI).">_spillZoneSize</ref>(0),</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a9669d78fe41fbcf09f7eb9069300a520" kindref="member" tooltip="Stack size needed for function arguments.">_argStackSize</ref>(0),</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a73d3f50ace864ac626582280cacc3d21" kindref="member" tooltip="Stack size needed for all variables and memory allocated on the stack.">_memStackSize</ref>(0),</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1aa26e0f5193d30287028dad57eb1c0c6e" kindref="member" tooltip="Stack size needed to call other functions.">_callStackSize</ref>(0)<sp/>{}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1269"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@c<sp/>FuncNode<sp/>instance.</highlight></codeline>
<codeline lineno="1270" refid="structasmjit_1_1FuncNode_1a96efa97101afa6de2470ab834012e2fd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncNode_1a96efa97101afa6de2470ab834012e2fd" kindref="member" tooltip="Destroy the FuncNode instance.">~FuncNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1276"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>entry<sp/>@ref<sp/>TargetNode.</highlight></codeline>
<codeline lineno="1277" refid="structasmjit_1_1FuncNode_1aeed90f1f76526e1230f5ce8299b0cdad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/><ref refid="structasmjit_1_1FuncNode_1aeed90f1f76526e1230f5ce8299b0cdad" kindref="member" tooltip="Get function entry TargetNode.">getEntryNode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1acaaa4dc2cfa9ba94903e54625c1ef6e2" kindref="member" tooltip="Function entry.">_entryNode</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1278"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>exit<sp/>@ref<sp/>TargetNode.</highlight></codeline>
<codeline lineno="1279" refid="structasmjit_1_1FuncNode_1a8205fefd8a9f370b03337480f49e484a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/><ref refid="structasmjit_1_1FuncNode_1a8205fefd8a9f370b03337480f49e484a" kindref="member" tooltip="Get function exit TargetNode.">getExitNode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a8d037bed787b238ae8f76f46257b129e" kindref="member" tooltip="Function exit.">_exitNode</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1281"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>entry<sp/>label.</highlight></codeline>
<codeline lineno="1282" refid="structasmjit_1_1FuncNode_1aec53520f981f2e4b63425144e206ae0a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref><sp/><ref refid="structasmjit_1_1FuncNode_1aec53520f981f2e4b63425144e206ae0a" kindref="member" tooltip="Get function entry label.">getEntryLabel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1acaaa4dc2cfa9ba94903e54625c1ef6e2" kindref="member" tooltip="Function entry.">_entryNode</ref>-&gt;<ref refid="structasmjit_1_1TargetNode_1a971651d9f52019f5eb82d89a13fa825f" kindref="member" tooltip="Get target label.">getLabel</ref>();<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1283"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>exit<sp/>label.</highlight></codeline>
<codeline lineno="1284" refid="structasmjit_1_1FuncNode_1a6c71ad8d223598cec26d42bfaa430a99" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref><sp/><ref refid="structasmjit_1_1FuncNode_1a6c71ad8d223598cec26d42bfaa430a99" kindref="member" tooltip="Get function exit label.">getExitLabel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a8d037bed787b238ae8f76f46257b129e" kindref="member" tooltip="Function exit.">_exitNode</ref>-&gt;<ref refid="structasmjit_1_1TargetNode_1a971651d9f52019f5eb82d89a13fa825f" kindref="member" tooltip="Get target label.">getLabel</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>@ref<sp/>EndNode.</highlight></codeline>
<codeline lineno="1287" refid="structasmjit_1_1FuncNode_1a90f96c6a5d681318e1ce80b7c9cfe84d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EndNode" kindref="compound" tooltip="End of function/block node.">EndNode</ref>*<sp/><ref refid="structasmjit_1_1FuncNode_1a90f96c6a5d681318e1ce80b7c9cfe84d" kindref="member" tooltip="Get function EndNode.">getEnd</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a0e4f433063da83c574c012dbe4666037" kindref="member" tooltip="Function end.">_end</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1288"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>declaration.</highlight></codeline>
<codeline lineno="1289" refid="structasmjit_1_1FuncNode_1ae4188639f1942c377c3167af2576405d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncDecl" kindref="compound" tooltip="Function declaration.">FuncDecl</ref>*<sp/><ref refid="structasmjit_1_1FuncNode_1ae4188639f1942c377c3167af2576405d" kindref="member" tooltip="Get function declaration.">getDecl</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a8f054d6870355e7e43192fe857a0c7f5" kindref="member" tooltip="Function declaration.">_decl</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1291"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>arguments<sp/>list.</highlight></codeline>
<codeline lineno="1292" refid="structasmjit_1_1FuncNode_1afe18b6be554afa222ea450fc058836a4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>**<sp/><ref refid="structasmjit_1_1FuncNode_1afe18b6be554afa222ea450fc058836a4" kindref="member" tooltip="Get arguments list.">getArgList</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1af0787526f99e5db159be47cb0588bc68" kindref="member" tooltip="Arguments list as VarData.">_argList</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1293"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>arguments<sp/>count.</highlight></codeline>
<codeline lineno="1294" refid="structasmjit_1_1FuncNode_1a4a3749b6a12a0ecd3f8b1f5b0ac2a871" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1a4a3749b6a12a0ecd3f8b1f5b0ac2a871" kindref="member" tooltip="Get arguments count.">getArgCount</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a8f054d6870355e7e43192fe857a0c7f5" kindref="member" tooltip="Function declaration.">_decl</ref>-&gt;<ref refid="structasmjit_1_1FuncDecl_1a256dfc25b9980a7571c13c4dd6d31e8e" kindref="member" tooltip="Get count of function arguments.">getArgCount</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1296"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>argument<sp/>at<sp/>@a<sp/>i.</highlight></codeline>
<codeline lineno="1297" refid="structasmjit_1_1FuncNode_1af5e1caec8cf6f58ecd28aae073b0c86c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1FuncNode_1af5e1caec8cf6f58ecd28aae073b0c86c" kindref="member" tooltip="Get argument at i.">getArg</ref>(uint32_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(i<sp/>&lt;<sp/><ref refid="structasmjit_1_1FuncNode_1a4a3749b6a12a0ecd3f8b1f5b0ac2a871" kindref="member" tooltip="Get arguments count.">getArgCount</ref>());</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1af0787526f99e5db159be47cb0588bc68" kindref="member" tooltip="Arguments list as VarData.">_argList</ref>[i];</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1302"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>argument<sp/>at<sp/>@a<sp/>i.</highlight></codeline>
<codeline lineno="1303" refid="structasmjit_1_1FuncNode_1a0d46bccbf501f9e4b994085c027438d6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a0d46bccbf501f9e4b994085c027438d6" kindref="member" tooltip="Set argument at i.">setArg</ref>(uint32_t<sp/>i,<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>vd)<sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(i<sp/>&lt;<sp/><ref refid="structasmjit_1_1FuncNode_1a4a3749b6a12a0ecd3f8b1f5b0ac2a871" kindref="member" tooltip="Get arguments count.">getArgCount</ref>());</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1af0787526f99e5db159be47cb0588bc68" kindref="member" tooltip="Arguments list as VarData.">_argList</ref>[i]<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1308"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>argument<sp/>at<sp/>@a<sp/>i.</highlight></codeline>
<codeline lineno="1309" refid="structasmjit_1_1FuncNode_1a1baf79213af86c6e6631f66dd7e25476" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a1baf79213af86c6e6631f66dd7e25476" kindref="member" tooltip="Reset argument at i.">resetArg</ref>(uint32_t<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(i<sp/>&lt;<sp/><ref refid="structasmjit_1_1FuncNode_1a4a3749b6a12a0ecd3f8b1f5b0ac2a871" kindref="member" tooltip="Get arguments count.">getArgCount</ref>());</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1af0787526f99e5db159be47cb0588bc68" kindref="member" tooltip="Arguments list as VarData.">_argList</ref>[i]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1314"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>hints.</highlight></codeline>
<codeline lineno="1315" refid="structasmjit_1_1FuncNode_1aba8998803b5626e6012ffd1aa2c7b305" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1aba8998803b5626e6012ffd1aa2c7b305" kindref="member" tooltip="Get function hints.">getFuncHints</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a9717320ee3825c238a6135639e815720" kindref="member" tooltip="Function hints;.">_funcHints</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1316"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>flags.</highlight></codeline>
<codeline lineno="1317" refid="structasmjit_1_1FuncNode_1ab288597be6fd35b3a97b6dab47730821" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1ab288597be6fd35b3a97b6dab47730821" kindref="member" tooltip="Get function flags.">getFuncFlags</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a5d29ee06e312c72d751b151c4a0d3f79" kindref="member" tooltip="Function flags.">_funcFlags</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>_funcFlags<sp/>has<sp/>@a<sp/>flag</highlight></codeline>
<codeline lineno="1320" refid="structasmjit_1_1FuncNode_1a8f1f92929534bea3a666d278d9446e9a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a8f1f92929534bea3a666d278d9446e9a" kindref="member" tooltip="Get whether the _funcFlags has flag.">hasFuncFlag</ref>(uint32_t<sp/>flag)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1FuncNode_1a5d29ee06e312c72d751b151c4a0d3f79" kindref="member" tooltip="Function flags.">_funcFlags</ref><sp/>&amp;<sp/>flag)<sp/>!=<sp/>0;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1321"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>function<sp/>@a<sp/>flag.</highlight></codeline>
<codeline lineno="1322" refid="structasmjit_1_1FuncNode_1a1332881057661c7f142307d91c9ba396" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a1332881057661c7f142307d91c9ba396" kindref="member" tooltip="Set function flag.">addFuncFlags</ref>(uint32_t<sp/>flags)<sp/>{<sp/><ref refid="structasmjit_1_1FuncNode_1a5d29ee06e312c72d751b151c4a0d3f79" kindref="member" tooltip="Function flags.">_funcFlags</ref><sp/>|=<sp/>flags;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1323"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>function<sp/>@a<sp/>flag.</highlight></codeline>
<codeline lineno="1324" refid="structasmjit_1_1FuncNode_1abb264e696714e3a7cf7cdf61dcde72d2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1abb264e696714e3a7cf7cdf61dcde72d2" kindref="member" tooltip="Clear function flag.">clearFuncFlags</ref>(uint32_t<sp/>flags)<sp/>{<sp/><ref refid="structasmjit_1_1FuncNode_1a5d29ee06e312c72d751b151c4a0d3f79" kindref="member" tooltip="Function flags.">_funcFlags</ref><sp/>&amp;=<sp/>~flags;<sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1326"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>function<sp/>is<sp/>naked.</highlight></codeline>
<codeline lineno="1327" refid="structasmjit_1_1FuncNode_1ac6a78aab2302c1c39748b6c74a558da3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1ac6a78aab2302c1c39748b6c74a558da3" kindref="member" tooltip="Get whether the function is naked.">isNaked</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a8f1f92929534bea3a666d278d9446e9a" kindref="member" tooltip="Get whether the _funcFlags has flag.">hasFuncFlag</ref>(kFuncFlagIsNaked);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1328"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>function<sp/>is<sp/>also<sp/>a<sp/>caller.</highlight></codeline>
<codeline lineno="1329" refid="structasmjit_1_1FuncNode_1a20a35cd49145e33de6d521690d9c6e35" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a20a35cd49145e33de6d521690d9c6e35" kindref="member" tooltip="Get whether the function is also a caller.">isCaller</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a8f1f92929534bea3a666d278d9446e9a" kindref="member" tooltip="Get whether the _funcFlags has flag.">hasFuncFlag</ref>(kFuncFlagIsCaller);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1330"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>required<sp/>stack<sp/>alignment<sp/>is<sp/>lower<sp/>than<sp/>expected<sp/>one,</highlight></codeline>
<codeline lineno="1331"><highlight class="comment"><sp/><sp/>//!<sp/>thus<sp/>it<sp/>has<sp/>to<sp/>be<sp/>aligned<sp/>manually.</highlight></codeline>
<codeline lineno="1332" refid="structasmjit_1_1FuncNode_1a184988eedf3ffcf73c0081990058b666" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a184988eedf3ffcf73c0081990058b666" kindref="member" tooltip="Get whether the required stack alignment is lower than expected one, thus it has to be aligned manual...">isStackMisaligned</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a8f1f92929534bea3a666d278d9446e9a" kindref="member" tooltip="Get whether the _funcFlags has flag.">hasFuncFlag</ref>(kFuncFlagIsStackMisaligned);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1333"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>stack<sp/>pointer<sp/>is<sp/>adjusted<sp/>inside<sp/>function<sp/>prolog/epilog.</highlight></codeline>
<codeline lineno="1334" refid="structasmjit_1_1FuncNode_1a58795b2bdab5f77a37e86396c8b4b958" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a58795b2bdab5f77a37e86396c8b4b958" kindref="member" tooltip="Get whether the stack pointer is adjusted inside function prolog/epilog.">isStackAdjusted</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a8f1f92929534bea3a666d278d9446e9a" kindref="member" tooltip="Get whether the _funcFlags has flag.">hasFuncFlag</ref>(kFuncFlagIsStackAdjusted);<sp/>}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>function<sp/>is<sp/>finished.</highlight></codeline>
<codeline lineno="1337" refid="structasmjit_1_1FuncNode_1afac40439e129d1c03e1c288d249a1b87" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1afac40439e129d1c03e1c288d249a1b87" kindref="member" tooltip="Get whether the function is finished.">isFinished</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a8f1f92929534bea3a666d278d9446e9a" kindref="member" tooltip="Get whether the _funcFlags has flag.">hasFuncFlag</ref>(kFuncFlagIsFinished);<sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1339"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>expected<sp/>stack<sp/>alignment.</highlight></codeline>
<codeline lineno="1340" refid="structasmjit_1_1FuncNode_1af99752f31977d386ee395a560bc8bba1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1af99752f31977d386ee395a560bc8bba1" kindref="member" tooltip="Get expected stack alignment.">getExpectedStackAlignment</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a91f3d5309edc28c1da14cb3907bdff32" kindref="member" tooltip="Expected stack alignment (we depend on this value).">_expectedStackAlignment</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1341"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>expected<sp/>stack<sp/>alignment.</highlight></codeline>
<codeline lineno="1342" refid="structasmjit_1_1FuncNode_1a641b509e0735f1ea7851eb0bcdae1857" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a641b509e0735f1ea7851eb0bcdae1857" kindref="member" tooltip="Set expected stack alignment.">setExpectedStackAlignment</ref>(uint32_t<sp/>alignment)<sp/>{<sp/><ref refid="structasmjit_1_1FuncNode_1a91f3d5309edc28c1da14cb3907bdff32" kindref="member" tooltip="Expected stack alignment (we depend on this value).">_expectedStackAlignment</ref><sp/>=<sp/>alignment;<sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1344"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>required<sp/>stack<sp/>alignment.</highlight></codeline>
<codeline lineno="1345" refid="structasmjit_1_1FuncNode_1af41af4e65f7a90887a6807c15fe001b4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1af41af4e65f7a90887a6807c15fe001b4" kindref="member" tooltip="Get required stack alignment.">getRequiredStackAlignment</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1aded18efc8b9fba840692dd9aed792a8b" kindref="member" tooltip="Required stack alignment (usually for multimedia instructions).">_requiredStackAlignment</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1346"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>required<sp/>stack<sp/>alignment.</highlight></codeline>
<codeline lineno="1347" refid="structasmjit_1_1FuncNode_1a9cca2ed6dea5b04e2fa3d1399bd902ec" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a9cca2ed6dea5b04e2fa3d1399bd902ec" kindref="member" tooltip="Set required stack alignment.">setRequiredStackAlignment</ref>(uint32_t<sp/>alignment)<sp/>{<sp/><ref refid="structasmjit_1_1FuncNode_1aded18efc8b9fba840692dd9aed792a8b" kindref="member" tooltip="Required stack alignment (usually for multimedia instructions).">_requiredStackAlignment</ref><sp/>=<sp/>alignment;<sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1349"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Update<sp/>required<sp/>stack<sp/>alignment<sp/>so<sp/>it&apos;s<sp/>not<sp/>lower<sp/>than<sp/>expected</highlight></codeline>
<codeline lineno="1350"><highlight class="comment"><sp/><sp/>//!<sp/>stack<sp/>alignment.</highlight></codeline>
<codeline lineno="1351" refid="structasmjit_1_1FuncNode_1aa64cca6fda38fa13985fd867fa1f27d4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1aa64cca6fda38fa13985fd867fa1f27d4" kindref="member" tooltip="Update required stack alignment so it&amp;#39;s not lower than expected stack alignment.">updateRequiredStackAlignment</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1FuncNode_1aded18efc8b9fba840692dd9aed792a8b" kindref="member" tooltip="Required stack alignment (usually for multimedia instructions).">_requiredStackAlignment</ref><sp/>&lt;=<sp/><ref refid="structasmjit_1_1FuncNode_1a91f3d5309edc28c1da14cb3907bdff32" kindref="member" tooltip="Expected stack alignment (we depend on this value).">_expectedStackAlignment</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1aded18efc8b9fba840692dd9aed792a8b" kindref="member" tooltip="Required stack alignment (usually for multimedia instructions).">_requiredStackAlignment</ref><sp/>=<sp/><ref refid="structasmjit_1_1FuncNode_1a91f3d5309edc28c1da14cb3907bdff32" kindref="member" tooltip="Expected stack alignment (we depend on this value).">_expectedStackAlignment</ref>;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1abb264e696714e3a7cf7cdf61dcde72d2" kindref="member" tooltip="Clear function flag.">clearFuncFlags</ref>(kFuncFlagIsStackMisaligned);</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a1332881057661c7f142307d91c9ba396" kindref="member" tooltip="Set function flag.">addFuncFlags</ref>(kFuncFlagIsStackMisaligned);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1361"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>stack<sp/>&quot;Red<sp/>Zone&quot;<sp/>size.</highlight></codeline>
<codeline lineno="1362" refid="structasmjit_1_1FuncNode_1a7af5be9a83bb4fd14263ce8ca1699a43" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1a7af5be9a83bb4fd14263ce8ca1699a43" kindref="member" tooltip="Set stack &amp;quot;Red Zone&amp;quot; size.">getRedZoneSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1af410035b78e1c824e33c0c6ded47bcb4" kindref="member" tooltip="The &amp;quot;Red Zone&amp;quot; suze - count of bytes which might be accessed without adjusting the stack pointer...">_redZoneSize</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1363"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>stack<sp/>&quot;Red<sp/>Zone&quot;<sp/>size.</highlight></codeline>
<codeline lineno="1364" refid="structasmjit_1_1FuncNode_1a652ea7b880c3f2c904870c8d8d917cfe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a652ea7b880c3f2c904870c8d8d917cfe" kindref="member" tooltip="Get stack &amp;quot;Red Zone&amp;quot; size.">setRedZoneSize</ref>(uint32_t<sp/>s)<sp/>{<sp/><ref refid="structasmjit_1_1FuncNode_1af410035b78e1c824e33c0c6ded47bcb4" kindref="member" tooltip="The &amp;quot;Red Zone&amp;quot; suze - count of bytes which might be accessed without adjusting the stack pointer...">_redZoneSize</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s);<sp/>}</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1366"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>stack<sp/>&quot;Spill<sp/>Zone&quot;<sp/>size.</highlight></codeline>
<codeline lineno="1367" refid="structasmjit_1_1FuncNode_1a5ebdca60a1bb6b7e9791f4be21d07325" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1a5ebdca60a1bb6b7e9791f4be21d07325" kindref="member" tooltip="Set stack &amp;quot;Spill Zone&amp;quot; size.">getSpillZoneSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1ae224f3318bddbbc5795e96f75c46a152" kindref="member" tooltip="Spill zone size (zone used by WIN64ABI).">_spillZoneSize</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1368"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>stack<sp/>&quot;Spill<sp/>Zone&quot;<sp/>size.</highlight></codeline>
<codeline lineno="1369" refid="structasmjit_1_1FuncNode_1a9ce69b1bcdb251f3599ee8adbccf64ab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a9ce69b1bcdb251f3599ee8adbccf64ab" kindref="member" tooltip="Get stack &amp;quot;Spill Zone&amp;quot; size.">setSpillZoneSize</ref>(uint32_t<sp/>s)<sp/>{<sp/><ref refid="structasmjit_1_1FuncNode_1ae224f3318bddbbc5795e96f75c46a152" kindref="member" tooltip="Spill zone size (zone used by WIN64ABI).">_spillZoneSize</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s);<sp/>}</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1371"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>stack<sp/>size<sp/>used<sp/>by<sp/>function<sp/>arguments.</highlight></codeline>
<codeline lineno="1372" refid="structasmjit_1_1FuncNode_1a029da97a3ffdaa9a6cf1157fac6b26ce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1a029da97a3ffdaa9a6cf1157fac6b26ce" kindref="member" tooltip="Get stack size used by function arguments.">getArgStackSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a9669d78fe41fbcf09f7eb9069300a520" kindref="member" tooltip="Stack size needed for function arguments.">_argStackSize</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1374"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>stack<sp/>size<sp/>used<sp/>by<sp/>variables<sp/>and<sp/>memory<sp/>allocated<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="1375" refid="structasmjit_1_1FuncNode_1aa73121b1cf91e667fc73f1ec32d2c029" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1aa73121b1cf91e667fc73f1ec32d2c029" kindref="member" tooltip="Get stack size used by variables and memory allocated on the stack.">getMemStackSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a73d3f50ace864ac626582280cacc3d21" kindref="member" tooltip="Stack size needed for all variables and memory allocated on the stack.">_memStackSize</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1377"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>stack<sp/>size<sp/>used<sp/>by<sp/>function<sp/>calls.</highlight></codeline>
<codeline lineno="1378" refid="structasmjit_1_1FuncNode_1a554dc7e9deeede7ac86c0631dc2ed318" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1a554dc7e9deeede7ac86c0631dc2ed318" kindref="member" tooltip="Get stack size used by function calls.">getCallStackSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1aa26e0f5193d30287028dad57eb1c0c6e" kindref="member" tooltip="Stack size needed to call other functions.">_callStackSize</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1379"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Merge<sp/>stack<sp/>size<sp/>used<sp/>by<sp/>function<sp/>call<sp/>with<sp/>@a<sp/>s.</highlight></codeline>
<codeline lineno="1380" refid="structasmjit_1_1FuncNode_1a3d84b7541e7fd994a183bed62502126d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1a3d84b7541e7fd994a183bed62502126d" kindref="member" tooltip="Merge stack size used by function call with s.">mergeCallStackSize</ref>(uint32_t<sp/>s)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1FuncNode_1aa26e0f5193d30287028dad57eb1c0c6e" kindref="member" tooltip="Stack size needed to call other functions.">_callStackSize</ref><sp/>&lt;<sp/>s)<sp/><ref refid="structasmjit_1_1FuncNode_1aa26e0f5193d30287028dad57eb1c0c6e" kindref="member" tooltip="Stack size needed to call other functions.">_callStackSize</ref><sp/>=<sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Hints]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1386"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>function<sp/>hint.</highlight></codeline>
<codeline lineno="1387" refid="structasmjit_1_1FuncNode_1ab0e4e78e2d42e3635ed22de5dd9116ef" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode_1ab0e4e78e2d42e3635ed22de5dd9116ef" kindref="member" tooltip="Set function hint.">setHint</ref>(uint32_t<sp/>hint,<sp/>uint32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(hint<sp/>&lt;=<sp/>31);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(value<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a9717320ee3825c238a6135639e815720" kindref="member" tooltip="Function hints;.">_funcHints</ref><sp/>&amp;=<sp/>~(1<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>hint);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a9717320ee3825c238a6135639e815720" kindref="member" tooltip="Function hints;.">_funcHints</ref><sp/>|=<sp/><sp/>(value<sp/>&lt;&lt;<sp/>hint);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1395"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>hint.</highlight></codeline>
<codeline lineno="1396" refid="structasmjit_1_1FuncNode_1a430fadb94a43dc3aeb1ff58c6f6a8015" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1a430fadb94a43dc3aeb1ff58c6f6a8015" kindref="member" tooltip="Get function hint.">getHint</ref>(uint32_t<sp/>hint)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(hint<sp/>&lt;=<sp/>31);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1FuncNode_1a9717320ee3825c238a6135639e815720" kindref="member" tooltip="Function hints;.">_funcHints</ref><sp/>&gt;&gt;<sp/>hint)<sp/>&amp;<sp/>0x1;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1405"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Function<sp/>entry.</highlight></codeline>
<codeline lineno="1406" refid="structasmjit_1_1FuncNode_1acaaa4dc2cfa9ba94903e54625c1ef6e2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/><ref refid="structasmjit_1_1FuncNode_1acaaa4dc2cfa9ba94903e54625c1ef6e2" kindref="member" tooltip="Function entry.">_entryNode</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1407"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Function<sp/>exit.</highlight></codeline>
<codeline lineno="1408" refid="structasmjit_1_1FuncNode_1a8d037bed787b238ae8f76f46257b129e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/><ref refid="structasmjit_1_1FuncNode_1a8d037bed787b238ae8f76f46257b129e" kindref="member" tooltip="Function exit.">_exitNode</ref>;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1410"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Function<sp/>declaration.</highlight></codeline>
<codeline lineno="1411" refid="structasmjit_1_1FuncNode_1a8f054d6870355e7e43192fe857a0c7f5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl" kindref="compound" tooltip="Function declaration.">FuncDecl</ref>*<sp/><ref refid="structasmjit_1_1FuncNode_1a8f054d6870355e7e43192fe857a0c7f5" kindref="member" tooltip="Function declaration.">_decl</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1412"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Function<sp/>end.</highlight></codeline>
<codeline lineno="1413" refid="structasmjit_1_1FuncNode_1a0e4f433063da83c574c012dbe4666037" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1EndNode" kindref="compound" tooltip="End of function/block node.">EndNode</ref>*<sp/><ref refid="structasmjit_1_1FuncNode_1a0e4f433063da83c574c012dbe4666037" kindref="member" tooltip="Function end.">_end</ref>;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1415"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Arguments<sp/>list<sp/>as<sp/>@ref<sp/>VarData.</highlight></codeline>
<codeline lineno="1416" refid="structasmjit_1_1FuncNode_1af0787526f99e5db159be47cb0588bc68" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>**<sp/><ref refid="structasmjit_1_1FuncNode_1af0787526f99e5db159be47cb0588bc68" kindref="member" tooltip="Arguments list as VarData.">_argList</ref>;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1418"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Function<sp/>hints;</highlight></codeline>
<codeline lineno="1419" refid="structasmjit_1_1FuncNode_1a9717320ee3825c238a6135639e815720" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1a9717320ee3825c238a6135639e815720" kindref="member" tooltip="Function hints;.">_funcHints</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1420"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Function<sp/>flags.</highlight></codeline>
<codeline lineno="1421" refid="structasmjit_1_1FuncNode_1a5d29ee06e312c72d751b151c4a0d3f79" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1a5d29ee06e312c72d751b151c4a0d3f79" kindref="member" tooltip="Function flags.">_funcFlags</ref>;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1423"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Expected<sp/>stack<sp/>alignment<sp/>(we<sp/>depend<sp/>on<sp/>this<sp/>value).</highlight></codeline>
<codeline lineno="1424"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1425"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>It<sp/>can<sp/>be<sp/>global<sp/>alignment<sp/>given<sp/>by<sp/>the<sp/>OS<sp/>or<sp/>described<sp/>by<sp/>an</highlight></codeline>
<codeline lineno="1426"><highlight class="comment"><sp/><sp/>//!<sp/>target<sp/>platform<sp/>ABI.</highlight></codeline>
<codeline lineno="1427" refid="structasmjit_1_1FuncNode_1a91f3d5309edc28c1da14cb3907bdff32" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1a91f3d5309edc28c1da14cb3907bdff32" kindref="member" tooltip="Expected stack alignment (we depend on this value).">_expectedStackAlignment</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1428"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Required<sp/>stack<sp/>alignment<sp/>(usually<sp/>for<sp/>multimedia<sp/>instructions).</highlight></codeline>
<codeline lineno="1429" refid="structasmjit_1_1FuncNode_1aded18efc8b9fba840692dd9aed792a8b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1aded18efc8b9fba840692dd9aed792a8b" kindref="member" tooltip="Required stack alignment (usually for multimedia instructions).">_requiredStackAlignment</ref>;</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1431"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>The<sp/>&quot;Red<sp/>Zone&quot;<sp/>suze<sp/>-<sp/>count<sp/>of<sp/>bytes<sp/>which<sp/>might<sp/>be<sp/>accessed</highlight></codeline>
<codeline lineno="1432"><highlight class="comment"><sp/><sp/>//!<sp/>without<sp/>adjusting<sp/>the<sp/>stack<sp/>pointer.</highlight></codeline>
<codeline lineno="1433" refid="structasmjit_1_1FuncNode_1af410035b78e1c824e33c0c6ded47bcb4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1FuncNode_1af410035b78e1c824e33c0c6ded47bcb4" kindref="member" tooltip="The &amp;quot;Red Zone&amp;quot; suze - count of bytes which might be accessed without adjusting the stack pointer...">_redZoneSize</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1434"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Spill<sp/>zone<sp/>size<sp/>(zone<sp/>used<sp/>by<sp/>WIN64ABI).</highlight></codeline>
<codeline lineno="1435" refid="structasmjit_1_1FuncNode_1ae224f3318bddbbc5795e96f75c46a152" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1FuncNode_1ae224f3318bddbbc5795e96f75c46a152" kindref="member" tooltip="Spill zone size (zone used by WIN64ABI).">_spillZoneSize</ref>;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1437"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Stack<sp/>size<sp/>needed<sp/>for<sp/>function<sp/>arguments.</highlight></codeline>
<codeline lineno="1438" refid="structasmjit_1_1FuncNode_1a9669d78fe41fbcf09f7eb9069300a520" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1a9669d78fe41fbcf09f7eb9069300a520" kindref="member" tooltip="Stack size needed for function arguments.">_argStackSize</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1439"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Stack<sp/>size<sp/>needed<sp/>for<sp/>all<sp/>variables<sp/>and<sp/>memory<sp/>allocated<sp/>on</highlight></codeline>
<codeline lineno="1440"><highlight class="comment"><sp/><sp/>//!<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="1441" refid="structasmjit_1_1FuncNode_1a73d3f50ace864ac626582280cacc3d21" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1a73d3f50ace864ac626582280cacc3d21" kindref="member" tooltip="Stack size needed for all variables and memory allocated on the stack.">_memStackSize</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1442"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Stack<sp/>size<sp/>needed<sp/>to<sp/>call<sp/>other<sp/>functions.</highlight></codeline>
<codeline lineno="1443" refid="structasmjit_1_1FuncNode_1aa26e0f5193d30287028dad57eb1c0c6e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncNode_1aa26e0f5193d30287028dad57eb1c0c6e" kindref="member" tooltip="Stack size needed to call other functions.">_callStackSize</ref>;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::EndNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1450"><highlight class="comment">//!<sp/>@brief<sp/>End<sp/>of<sp/>function/block<sp/>node.</highlight></codeline>
<codeline lineno="1451" refid="structasmjit_1_1EndNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1EndNode" kindref="compound" tooltip="End of function/block node.">EndNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1EndNode" kindref="compound" tooltip="End of function/block node.">EndNode</ref>)</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>EndNode<sp/>instance.</highlight></codeline>
<codeline lineno="1459" refid="structasmjit_1_1EndNode_1ad9073c7ca7641efb90f5c637621e7be5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EndNode" kindref="compound" tooltip="End of function/block node.">EndNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler)<sp/>:<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(compiler,<sp/>kNodeTypeEnd)<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1a3990c435857ff94bbd74935638a84ac0" kindref="member" tooltip="Node flags, different meaning for every node type.">_flags</ref><sp/>|=<sp/>kNodeFlagIsRet;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1463"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>EndNode<sp/>instance.</highlight></codeline>
<codeline lineno="1464" refid="structasmjit_1_1EndNode_1ad3b397539d900090ef8e79b29b44a5aa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EndNode_1ad3b397539d900090ef8e79b29b44a5aa" kindref="member" tooltip="Destroy the EndNode instance.">~EndNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::RetNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1471"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>return<sp/>node.</highlight></codeline>
<codeline lineno="1472" refid="structasmjit_1_1RetNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1RetNode" kindref="compound" tooltip="Function return node.">RetNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1RetNode" kindref="compound" tooltip="Function return node.">RetNode</ref>)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>RetNode<sp/>instance.</highlight></codeline>
<codeline lineno="1480" refid="structasmjit_1_1RetNode_1a7cc91c7def95bb01990274fb0d3500f1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1RetNode" kindref="compound" tooltip="Function return node.">RetNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/>const<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/>const<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1)<sp/>:<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(compiler,<sp/>kNodeTypeRet)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1a3990c435857ff94bbd74935638a84ac0" kindref="member" tooltip="Node flags, different meaning for every node type.">_flags</ref><sp/>|=<sp/>kNodeFlagIsRet;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1RetNode_1aa992d46847eca49d8c0c83c86ebabef2" kindref="member" tooltip="Ret operand(s).">_ret</ref>[0]<sp/>=<sp/>o0;</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1RetNode_1aa992d46847eca49d8c0c83c86ebabef2" kindref="member" tooltip="Ret operand(s).">_ret</ref>[1]<sp/>=<sp/>o1;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1486"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>RetNode<sp/>instance.</highlight></codeline>
<codeline lineno="1487" refid="structasmjit_1_1RetNode_1a7e6dfbdd4938415cefc757e1fcccc6ea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1RetNode_1a7e6dfbdd4938415cefc757e1fcccc6ea" kindref="member" tooltip="Destroy the RetNode instance.">~RetNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1493"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>first<sp/>return<sp/>operand.</highlight></codeline>
<codeline lineno="1494" refid="structasmjit_1_1RetNode_1a4878e3e222bd0614159588b25a90e562" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/><ref refid="structasmjit_1_1RetNode_1a4878e3e222bd0614159588b25a90e562" kindref="member" tooltip="Get the first return operand.">getFirst</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1RetNode_1aa992d46847eca49d8c0c83c86ebabef2" kindref="member" tooltip="Ret operand(s).">_ret</ref>[0];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1495"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1496" refid="structasmjit_1_1RetNode_1ad5aa0e1365a98797d4dbed3716d79da9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/><ref refid="structasmjit_1_1RetNode_1ad5aa0e1365a98797d4dbed3716d79da9" kindref="member">getFirst</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1RetNode_1aa992d46847eca49d8c0c83c86ebabef2" kindref="member" tooltip="Ret operand(s).">_ret</ref>[0];<sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1498"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>second<sp/>return<sp/>operand.</highlight></codeline>
<codeline lineno="1499" refid="structasmjit_1_1RetNode_1a6d8c558eeace6c7392a8613dd56abf1a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/><ref refid="structasmjit_1_1RetNode_1a6d8c558eeace6c7392a8613dd56abf1a" kindref="member" tooltip="Get the second return operand.">getSecond</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1RetNode_1aa992d46847eca49d8c0c83c86ebabef2" kindref="member" tooltip="Ret operand(s).">_ret</ref>[1];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1500"><highlight class="comment"><sp/><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1501" refid="structasmjit_1_1RetNode_1a4af0f5d57ba55c92a4f36a9e78712659" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/><ref refid="structasmjit_1_1RetNode_1a4af0f5d57ba55c92a4f36a9e78712659" kindref="member">getSecond</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1RetNode_1aa992d46847eca49d8c0c83c86ebabef2" kindref="member" tooltip="Ret operand(s).">_ret</ref>[1];<sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1507"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Ret<sp/>operand(s).</highlight></codeline>
<codeline lineno="1508" refid="structasmjit_1_1RetNode_1aa992d46847eca49d8c0c83c86ebabef2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref><sp/><ref refid="structasmjit_1_1RetNode_1aa992d46847eca49d8c0c83c86ebabef2" kindref="member" tooltip="Ret operand(s).">_ret</ref>[2];</highlight></codeline>
<codeline lineno="1509"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::CallNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1515"><highlight class="comment">//!<sp/>@brief<sp/>Function-call<sp/>node.</highlight></codeline>
<codeline lineno="1516" refid="structasmjit_1_1CallNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1CallNode" kindref="compound" tooltip="Function-call node.">CallNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1CallNode" kindref="compound" tooltip="Function-call node.">CallNode</ref>)</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>CallNode<sp/>instance.</highlight></codeline>
<codeline lineno="1524" refid="structasmjit_1_1CallNode_1a03f3b0f188d91332c719e90f147084f1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1CallNode" kindref="compound" tooltip="Function-call node.">CallNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/>const<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>target)<sp/>:</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(compiler,<sp/>kNodeTypeCall),</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CallNode_1aa2c8a71ac9866e5d5272c5d543a948c5" kindref="member" tooltip="Function declaration.">_decl</ref>(NULL),</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CallNode_1ab18b267ab4417390fddb7b75548c0abb" kindref="member" tooltip="Target (address of function, register, label, ...).">_target</ref>(target),</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CallNode_1aaaee075a448df1205c0440fdf7ce6485" kindref="member" tooltip="Arguments.">_args</ref>(NULL)<sp/>{}</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1530"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>CallNode<sp/>instance.</highlight></codeline>
<codeline lineno="1531" refid="structasmjit_1_1CallNode_1a6d671449fbf63f8157689de990eab670" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1CallNode_1a6d671449fbf63f8157689de990eab670" kindref="member" tooltip="Destroy the CallNode instance.">~CallNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1537"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>declaration.</highlight></codeline>
<codeline lineno="1538" refid="structasmjit_1_1CallNode_1a1fa523df8cac84ba0262b71dab7c5035" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncDecl" kindref="compound" tooltip="Function declaration.">FuncDecl</ref>*<sp/><ref refid="structasmjit_1_1CallNode_1a1fa523df8cac84ba0262b71dab7c5035" kindref="member" tooltip="Get function declaration.">getDecl</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CallNode_1aa2c8a71ac9866e5d5272c5d543a948c5" kindref="member" tooltip="Function declaration.">_decl</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1540"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>target<sp/>operand.</highlight></codeline>
<codeline lineno="1541" refid="structasmjit_1_1CallNode_1a544ac9c68513b1dad41a4f547208dc17" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/><ref refid="structasmjit_1_1CallNode_1a544ac9c68513b1dad41a4f547208dc17" kindref="member" tooltip="Get target operand.">getTarget</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CallNode_1ab18b267ab4417390fddb7b75548c0abb" kindref="member" tooltip="Target (address of function, register, label, ...).">_target</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1542"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1543" refid="structasmjit_1_1CallNode_1ab2add0e5a34e13ccf4d4883c63bf8385" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/><ref refid="structasmjit_1_1CallNode_1ab2add0e5a34e13ccf4d4883c63bf8385" kindref="member">getTarget</ref>()</highlight><highlight class="keyword"><sp/>const<sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CallNode_1ab18b267ab4417390fddb7b75548c0abb" kindref="member" tooltip="Target (address of function, register, label, ...).">_target</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1545"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>return<sp/>at<sp/>@a<sp/>i.</highlight></codeline>
<codeline lineno="1546" refid="structasmjit_1_1CallNode_1ae5f295b2a2aad38cb5db8b64135d5f14" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/><ref refid="structasmjit_1_1CallNode_1ae5f295b2a2aad38cb5db8b64135d5f14" kindref="member" tooltip="Get return at i.">getRet</ref>(uint32_t<sp/>i<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(i<sp/>&lt;<sp/>2);</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CallNode_1ae448fd3373867a476abeae2ac8cea2d4" kindref="member" tooltip="Return.">_ret</ref>[i];</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1550"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1551" refid="structasmjit_1_1CallNode_1ab19cd23198101c350689ae0e284838a3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/><ref refid="structasmjit_1_1CallNode_1ab19cd23198101c350689ae0e284838a3" kindref="member">getRet</ref>(uint32_t<sp/>i<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(i<sp/>&lt;<sp/>2);</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CallNode_1ae448fd3373867a476abeae2ac8cea2d4" kindref="member" tooltip="Return.">_ret</ref>[i];</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1556"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>argument<sp/>at<sp/>@a<sp/>i.</highlight></codeline>
<codeline lineno="1557" refid="structasmjit_1_1CallNode_1acdb77a4c703df4405627108200737f78" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/><ref refid="structasmjit_1_1CallNode_1acdb77a4c703df4405627108200737f78" kindref="member" tooltip="Get argument at i.">getArg</ref>(uint32_t<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(i<sp/>&lt;<sp/>kFuncArgCountLoHi);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CallNode_1aaaee075a448df1205c0440fdf7ce6485" kindref="member" tooltip="Arguments.">_args</ref>[i];</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1561"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1562" refid="structasmjit_1_1CallNode_1acbf4a17daa25691c045489843da30ea2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/><ref refid="structasmjit_1_1CallNode_1acbf4a17daa25691c045489843da30ea2" kindref="member">getArg</ref>(uint32_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(i<sp/>&lt;<sp/>kFuncArgCountLoHi);</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CallNode_1aaaee075a448df1205c0440fdf7ce6485" kindref="member" tooltip="Arguments.">_args</ref>[i];</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1571"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Function<sp/>declaration.</highlight></codeline>
<codeline lineno="1572" refid="structasmjit_1_1CallNode_1aa2c8a71ac9866e5d5272c5d543a948c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl" kindref="compound" tooltip="Function declaration.">FuncDecl</ref>*<sp/><ref refid="structasmjit_1_1CallNode_1aa2c8a71ac9866e5d5272c5d543a948c5" kindref="member" tooltip="Function declaration.">_decl</ref>;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1574"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Target<sp/>(address<sp/>of<sp/>function,<sp/>register,<sp/>label,<sp/>...).</highlight></codeline>
<codeline lineno="1575" refid="structasmjit_1_1CallNode_1ab18b267ab4417390fddb7b75548c0abb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref><sp/><ref refid="structasmjit_1_1CallNode_1ab18b267ab4417390fddb7b75548c0abb" kindref="member" tooltip="Target (address of function, register, label, ...).">_target</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1576"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return.</highlight></codeline>
<codeline lineno="1577" refid="structasmjit_1_1CallNode_1ae448fd3373867a476abeae2ac8cea2d4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref><sp/><ref refid="structasmjit_1_1CallNode_1ae448fd3373867a476abeae2ac8cea2d4" kindref="member" tooltip="Return.">_ret</ref>[2];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1578"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Arguments.</highlight></codeline>
<codeline lineno="1579" refid="structasmjit_1_1CallNode_1aaaee075a448df1205c0440fdf7ce6485" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>*<sp/><ref refid="structasmjit_1_1CallNode_1aaaee075a448df1205c0440fdf7ce6485" kindref="member" tooltip="Arguments.">_args</ref>;</highlight></codeline>
<codeline lineno="1580"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::SArgNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1586"><highlight class="comment">//!<sp/>@brief<sp/>Function-call<sp/>&apos;argument<sp/>on<sp/>the<sp/>stack&apos;<sp/>node.</highlight></codeline>
<codeline lineno="1587" refid="structasmjit_1_1SArgNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1SArgNode" kindref="compound" tooltip="Function-call &amp;#39;argument on the stack&amp;#39; node.">SArgNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref><sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1SArgNode" kindref="compound" tooltip="Function-call &amp;#39;argument on the stack&amp;#39; node.">SArgNode</ref>)</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>SArgNode<sp/>instance.</highlight></codeline>
<codeline lineno="1595" refid="structasmjit_1_1SArgNode_1aa9d517270647daeb71ee64a903a58a8d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1SArgNode" kindref="compound" tooltip="Function-call &amp;#39;argument on the stack&amp;#39; node.">SArgNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/><ref refid="structasmjit_1_1CallNode" kindref="compound" tooltip="Function-call node.">CallNode</ref>*<sp/>call,<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>sVd,<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>cVd)<sp/>:</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>(compiler,<sp/>kNodeTypeSArg),</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1SArgNode_1a887a6b9ffd6f3b3b064245905fd0a2a3" kindref="member" tooltip="Associated CallNode.">_call</ref>(call),</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1SArgNode_1a22b73ff7add1331ffb584cb23a108d5d" kindref="member" tooltip="Source variable.">_sVd</ref>(sVd),</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1SArgNode_1a27e5d1d8eff8c6c09a3d1e753704c74e" kindref="member" tooltip="Temporary variable used for conversion (or NULL).">_cVd</ref>(cVd),</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1SArgNode_1a28a2ae57ba3ca67c2d2a41c9ee5aba24" kindref="member" tooltip="Affected arguments bit-array.">_args</ref>(0)<sp/>{}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1602"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>SArgNode<sp/>instance.</highlight></codeline>
<codeline lineno="1603" refid="structasmjit_1_1SArgNode_1a6ea5f7d7bc7c6ecf4b6948d1acdd7991" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1SArgNode_1a6ea5f7d7bc7c6ecf4b6948d1acdd7991" kindref="member" tooltip="Destroy the SArgNode instance.">~SArgNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1609"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>associated<sp/>function-call.</highlight></codeline>
<codeline lineno="1610" refid="structasmjit_1_1SArgNode_1a090bececa6c462d371e458e116cfda1d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1CallNode" kindref="compound" tooltip="Function-call node.">CallNode</ref>*<sp/><ref refid="structasmjit_1_1SArgNode_1a090bececa6c462d371e458e116cfda1d" kindref="member" tooltip="Get the associated function-call.">getCall</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1SArgNode_1a887a6b9ffd6f3b3b064245905fd0a2a3" kindref="member" tooltip="Associated CallNode.">_call</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1611"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>source<sp/>variable.</highlight></codeline>
<codeline lineno="1612" refid="structasmjit_1_1SArgNode_1a4c938cc62240d248378247412f6b5b51" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1SArgNode_1a4c938cc62240d248378247412f6b5b51" kindref="member" tooltip="Get source variable.">getSVd</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1SArgNode_1a22b73ff7add1331ffb584cb23a108d5d" kindref="member" tooltip="Source variable.">_sVd</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1613"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>conversion<sp/>variable.</highlight></codeline>
<codeline lineno="1614" refid="structasmjit_1_1SArgNode_1ad4267cce4bedef48d8aa6f529dd6517d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1SArgNode_1ad4267cce4bedef48d8aa6f529dd6517d" kindref="member" tooltip="Get conversion variable.">getCVd</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1SArgNode_1a27e5d1d8eff8c6c09a3d1e753704c74e" kindref="member" tooltip="Temporary variable used for conversion (or NULL).">_cVd</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1620"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Associated<sp/>@ref<sp/>CallNode.</highlight></codeline>
<codeline lineno="1621" refid="structasmjit_1_1SArgNode_1a887a6b9ffd6f3b3b064245905fd0a2a3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CallNode" kindref="compound" tooltip="Function-call node.">CallNode</ref>*<sp/><ref refid="structasmjit_1_1SArgNode_1a887a6b9ffd6f3b3b064245905fd0a2a3" kindref="member" tooltip="Associated CallNode.">_call</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1622"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Source<sp/>variable.</highlight></codeline>
<codeline lineno="1623" refid="structasmjit_1_1SArgNode_1a22b73ff7add1331ffb584cb23a108d5d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1SArgNode_1a22b73ff7add1331ffb584cb23a108d5d" kindref="member" tooltip="Source variable.">_sVd</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1624"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Temporary<sp/>variable<sp/>used<sp/>for<sp/>conversion<sp/>(or<sp/>NULL).</highlight></codeline>
<codeline lineno="1625" refid="structasmjit_1_1SArgNode_1a27e5d1d8eff8c6c09a3d1e753704c74e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1SArgNode_1a27e5d1d8eff8c6c09a3d1e753704c74e" kindref="member" tooltip="Temporary variable used for conversion (or NULL).">_cVd</ref>;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1627"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Affected<sp/>arguments<sp/>bit-array.</highlight></codeline>
<codeline lineno="1628" refid="structasmjit_1_1SArgNode_1a28a2ae57ba3ca67c2d2a41c9ee5aba24" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1SArgNode_1a28a2ae57ba3ca67c2d2a41c9ee5aba24" kindref="member" tooltip="Affected arguments bit-array.">_args</ref>;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseCompiler]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1635"><highlight class="comment">//!<sp/>@brief<sp/>Base<sp/>compiler.</highlight></codeline>
<codeline lineno="1636"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1637"><highlight class="comment">//!<sp/>@sa<sp/>BaseAssembler.</highlight></codeline>
<codeline lineno="1638" refid="structasmjit_1_1BaseCompiler" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CodeGen" kindref="compound" tooltip="Abstract class inherited by Assembler and Compiler.">CodeGen</ref><sp/>{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>)</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"></highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>BaseCompiler<sp/>instance.</highlight></codeline>
<codeline lineno="1646"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>(<ref refid="structasmjit_1_1BaseRuntime" kindref="compound" tooltip="Base runtime.">BaseRuntime</ref>*<sp/>runtime);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1647"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>BaseCompiler<sp/>instance.</highlight></codeline>
<codeline lineno="1648"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1ad4e9cfa5d09e28246268e82d3b34eebe" kindref="member" tooltip="Destroy the BaseCompiler instance.">~BaseCompiler</ref>();</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[LookAhead]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1654"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>maximum<sp/>look<sp/>ahead.</highlight></codeline>
<codeline lineno="1655" refid="structasmjit_1_1BaseCompiler_1a4be1b2c2b911122b2f50967c820340a1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseCompiler_1a4be1b2c2b911122b2f50967c820340a1" kindref="member" tooltip="Get maximum look ahead.">getMaxLookAhead</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1af1693974a88dc5f515a77efbfa3576db" kindref="member" tooltip="Maximum count of nodes to look ahead when allocating/spilling registers.">_maxLookAhead</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1656"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>maximum<sp/>look<sp/>ahead<sp/>to<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="1657" refid="structasmjit_1_1BaseCompiler_1abf82cd552edd42804ab616b89a2bee93" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1abf82cd552edd42804ab616b89a2bee93" kindref="member" tooltip="Set maximum look ahead to val.">setMaxLookAhead</ref>(uint32_t<sp/>val)<sp/>{<sp/><ref refid="structasmjit_1_1BaseCompiler_1af1693974a88dc5f515a77efbfa3576db" kindref="member" tooltip="Maximum count of nodes to look ahead when allocating/spilling registers.">_maxLookAhead</ref><sp/>=<sp/>val;<sp/>}</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Clear<sp/>/<sp/>Reset]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1663"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>everything,<sp/>but<sp/>keep<sp/>buffers<sp/>allocated.</highlight></codeline>
<codeline lineno="1664"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1665"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>This<sp/>method<sp/>will<sp/>destroy<sp/>your<sp/>code.</highlight></codeline>
<codeline lineno="1666"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1afff080faca3b4a0ef878392ef8406efe" kindref="member" tooltip="Clear everything, but keep buffers allocated.">clear</ref>();</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1667"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>everything<sp/>and<sp/>reset<sp/>all<sp/>buffers.</highlight></codeline>
<codeline lineno="1668"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1669"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>This<sp/>method<sp/>will<sp/>destroy<sp/>your<sp/>code.</highlight></codeline>
<codeline lineno="1670"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a66ebed2ec94250d109a0cea4d9cb7cbc" kindref="member" tooltip="Clear everything and reset all buffers.">reset</ref>();</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1671"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Called<sp/>by<sp/>clear()<sp/>and<sp/>reset()<sp/>to<sp/>clear<sp/>all<sp/>data<sp/>related<sp/>to<sp/>derived</highlight></codeline>
<codeline lineno="1672"><highlight class="comment"><sp/><sp/>//!<sp/>class<sp/>implementation.</highlight></codeline>
<codeline lineno="1673"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a9bb0e088212274bee8c2fe7fa5279d6d" kindref="member" tooltip="Called by clear() and reset() to clear all data related to derived class implementation.">_purge</ref>();</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Nodes]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>T*<sp/>newNode()<sp/>{</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/><ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(p)<sp/>T(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0&gt;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>T*<sp/>newNode(P0<sp/>p0)<sp/>{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/><ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(p)<sp/>T(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>p0);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P1&gt;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>T*<sp/>newNode(P0<sp/>p0,<sp/>P1<sp/>p1)<sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/><ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(p)<sp/>T(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>p0,<sp/>p1);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P2&gt;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>T*<sp/>newNode(P0<sp/>p0,<sp/>P1<sp/>p1,<sp/>P2<sp/>p2)<sp/>{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/><ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(p)<sp/>T(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>p0,<sp/>p1,<sp/>p2);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1703"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>first<sp/>node.</highlight></codeline>
<codeline lineno="1704" refid="structasmjit_1_1BaseCompiler_1a691ca99350207a8a9ed20b2851c8e010" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a691ca99350207a8a9ed20b2851c8e010" kindref="member" tooltip="Get first node.">getFirstNode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1705"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>last<sp/>node.</highlight></codeline>
<codeline lineno="1706" refid="structasmjit_1_1BaseCompiler_1a9461d4f3a68f11e07a22d5d0181ae0d1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a9461d4f3a68f11e07a22d5d0181ae0d1" kindref="member" tooltip="Get last node.">getLastNode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" kindref="member" tooltip="Last node.">_lastNode</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1708"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>current<sp/>node.</highlight></codeline>
<codeline lineno="1709"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1710"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>If<sp/>this<sp/>method<sp/>returns<sp/>@c<sp/>NULL<sp/>it<sp/>means<sp/>that<sp/>nothing<sp/>has<sp/>been<sp/>emitted</highlight></codeline>
<codeline lineno="1711"><highlight class="comment"><sp/><sp/>//!<sp/>yet.</highlight></codeline>
<codeline lineno="1712" refid="structasmjit_1_1BaseCompiler_1ac895c34efb7f107ef1cc34fb277aa77a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1ac895c34efb7f107ef1cc34fb277aa77a" kindref="member" tooltip="Get current node.">getCursor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1713"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>the<sp/>current<sp/>node<sp/>without<sp/>returning<sp/>the<sp/>previous<sp/>node<sp/>(private).</highlight></codeline>
<codeline lineno="1714" refid="structasmjit_1_1BaseCompiler_1a9424cec63c505e47aae9e376d9f8a752" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a9424cec63c505e47aae9e376d9f8a752" kindref="member" tooltip="Set the current node without returning the previous node (private).">_setCursor</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node)<sp/>{<sp/><ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref><sp/>=<sp/>node;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1715"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>the<sp/>current<sp/>node<sp/>to<sp/>@a<sp/>node<sp/>and<sp/>return<sp/>the<sp/>previous<sp/>one.</highlight></codeline>
<codeline lineno="1716"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1ab258d8bb815f7c9e3368bdbab6fd6256" kindref="member" tooltip="Set the current node to node and return the previous one.">setCursor</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1718"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>node<sp/>@a<sp/>node<sp/>after<sp/>current<sp/>and<sp/>set<sp/>current<sp/>to<sp/>@a<sp/>node.</highlight></codeline>
<codeline lineno="1719"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1720"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>node<sp/>before<sp/>@a<sp/>ref.</highlight></codeline>
<codeline lineno="1721"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a0cb4ee83c430e485d57f6c18b6857b9f" kindref="member" tooltip="Add node before ref.">addNodeBefore</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node,<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>ref);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1722"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>node<sp/>after<sp/>@a<sp/>ref.</highlight></codeline>
<codeline lineno="1723"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1aa4d5d57d89518fd8d3224bebb8e9ae4f" kindref="member" tooltip="Add node after ref.">addNodeAfter</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node,<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>ref);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1724"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Remove<sp/>node<sp/>@a<sp/>node.</highlight></codeline>
<codeline lineno="1725"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1aeca9652a56df1842c3342bfcd774a3b9" kindref="member" tooltip="Remove node node.">removeNode</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1726"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Remove<sp/>multiple<sp/>nodes.</highlight></codeline>
<codeline lineno="1727"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1ae87563494bc6261b12d22fdfd094500f" kindref="member" tooltip="Remove multiple nodes.">removeNodes</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>first,<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>last);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Func]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1733"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>current<sp/>function.</highlight></codeline>
<codeline lineno="1734" refid="structasmjit_1_1BaseCompiler_1a9869bf24be59d50354a36c2d1a04877a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncNode" kindref="compound" tooltip="Function declaration node.">FuncNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a9869bf24be59d50354a36c2d1a04877a" kindref="member" tooltip="Get current function.">getFunc</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1afa054f0e028aa072a6b54a38e182812a" kindref="member" tooltip="Current function.">_func</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Align]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1740"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>AlignNode.</highlight></codeline>
<codeline lineno="1741"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1AlignNode" kindref="compound" tooltip="Align node.">AlignNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a463c4a6d099d52ea479a9650e696544a" kindref="member" tooltip="Create a new AlignNode.">newAlign</ref>(uint32_t<sp/>m);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1742"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>a<sp/>new<sp/>@ref<sp/>AlignNode.</highlight></codeline>
<codeline lineno="1743"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1AlignNode" kindref="compound" tooltip="Align node.">AlignNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1af69209313ac46fdbac3de52a613f44ca" kindref="member" tooltip="Add a new AlignNode.">addAlign</ref>(uint32_t<sp/>m);</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1745"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Align<sp/>target<sp/>buffer<sp/>to<sp/>@a<sp/>m<sp/>bytes.</highlight></codeline>
<codeline lineno="1746"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1747"><highlight class="comment"><sp/><sp/>//!<sp/>Typical<sp/>usage<sp/>of<sp/>this<sp/>is<sp/>to<sp/>align<sp/>labels<sp/>at<sp/>start<sp/>of<sp/>the<sp/>inner<sp/>loops.</highlight></codeline>
<codeline lineno="1748"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1749"><highlight class="comment"><sp/><sp/>//!<sp/>Inserts<sp/>@c<sp/>nop()<sp/>instructions<sp/>or<sp/>CPU<sp/>optimized<sp/>NOPs.</highlight></codeline>
<codeline lineno="1750" refid="structasmjit_1_1BaseCompiler_1aee491d0c270a38b9e3154e74be9ddd4c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1AlignNode" kindref="compound" tooltip="Align node.">AlignNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1aee491d0c270a38b9e3154e74be9ddd4c" kindref="member" tooltip="Align target buffer to m bytes.">align</ref>(uint32_t<sp/>m)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1af69209313ac46fdbac3de52a613f44ca" kindref="member" tooltip="Add a new AlignNode.">addAlign</ref>(m);<sp/>}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Target]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1756"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>TargetNode.</highlight></codeline>
<codeline lineno="1757"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a90c68e8beae42497baf524842a472154" kindref="member" tooltip="Create a new TargetNode.">newTarget</ref>();</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1758"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>a<sp/>new<sp/>@ref<sp/>TargetNode.</highlight></codeline>
<codeline lineno="1759"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a8e765ab9c84303bbc7cd50cd48978f74" kindref="member" tooltip="Add a new TargetNode.">addTarget</ref>();</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1761"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>@ref<sp/>TargetNode<sp/>by<sp/>@a<sp/>id.</highlight></codeline>
<codeline lineno="1762" refid="structasmjit_1_1BaseCompiler_1afda181597fca17f0b3ea3864820431e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1afda181597fca17f0b3ea3864820431e7" kindref="member" tooltip="Get TargetNode by id.">getTargetById</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(<ref refid="structasmjit_1_1OperandUtil_1abf6422cdd71e44672e769bd24e920a3a" kindref="member" tooltip="Get whether the id refers to Label.">OperandUtil::isLabelId</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/><ref refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" kindref="member" tooltip="Targets.">_targets</ref>.<ref refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" kindref="member" tooltip="Get length.">getLength</ref>());</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" kindref="member" tooltip="Targets.">_targets</ref>[id];</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1769"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>@ref<sp/>TargetNode<sp/>by<sp/>@a<sp/>label.</highlight></codeline>
<codeline lineno="1770" refid="structasmjit_1_1BaseCompiler_1a9b6ebe8c5a3a53f755186ca84fa8a975" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a9b6ebe8c5a3a53f755186ca84fa8a975" kindref="member" tooltip="Get TargetNode by label.">getTarget</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label)<sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1afda181597fca17f0b3ea3864820431e7" kindref="member" tooltip="Get TargetNode by id.">getTargetById</ref>(label.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>());</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Label]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1778"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>count<sp/>of<sp/>created<sp/>labels.</highlight></codeline>
<codeline lineno="1779" refid="structasmjit_1_1BaseCompiler_1a864ab9b2610cb527070455f3e5e893f8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a864ab9b2610cb527070455f3e5e893f8" kindref="member" tooltip="Get count of created labels.">getLabelsCount</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1780"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" kindref="member" tooltip="Targets.">_targets</ref>.<ref refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" kindref="member" tooltip="Get length.">getLength</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1782"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>@a<sp/>label<sp/>is<sp/>created.</highlight></codeline>
<codeline lineno="1783" refid="structasmjit_1_1BaseCompiler_1a731cc8cf46fa9456d9da537338975308" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a731cc8cf46fa9456d9da537338975308" kindref="member" tooltip="Get whether label is created.">isLabelCreated</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1784"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(label.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>())<sp/>&lt;<sp/><ref refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" kindref="member" tooltip="Targets.">_targets</ref>.<ref refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" kindref="member" tooltip="Get length.">getLength</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1786"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1787"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1788"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>and<sp/>initialize<sp/>a<sp/>new<sp/>label.</highlight></codeline>
<codeline lineno="1789"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/>_newLabel(<ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>*<sp/>dst);</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1791"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>and<sp/>return<sp/>new<sp/>label.</highlight></codeline>
<codeline lineno="1792" refid="structasmjit_1_1BaseCompiler_1a5eef24a0d411d3eb54677ef5a53957b3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref><sp/><ref refid="structasmjit_1_1BaseCompiler_1a5eef24a0d411d3eb54677ef5a53957b3" kindref="member" tooltip="Create and return new label.">newLabel</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref><sp/>result(NoInit);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/>_newLabel(&amp;result);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1798"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bind<sp/>label<sp/>to<sp/>the<sp/>current<sp/>offset.</highlight></codeline>
<codeline lineno="1799"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1800"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Label<sp/>can<sp/>be<sp/>bound<sp/>only<sp/>once!</highlight></codeline>
<codeline lineno="1801"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a79453ba71cbe71378808768bd51a4326" kindref="member" tooltip="Bind label to the current offset.">bind</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Embed]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1807"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>EmbedNode.</highlight></codeline>
<codeline lineno="1808"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a869d5617c72c2728059a49a14bbe0362" kindref="member" tooltip="Create a new EmbedNode.">newEmbed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>uint32_t<sp/>size);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1809"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>a<sp/>new<sp/>@ref<sp/>EmbedNode.</highlight></codeline>
<codeline lineno="1810"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1ad99bcb737fa3489e3d3d120f979b1793" kindref="member" tooltip="Add a new EmbedNode.">addEmbed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>uint32_t<sp/>size);</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1812"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Embed<sp/>data.</highlight></codeline>
<codeline lineno="1813" refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>uint32_t<sp/>size)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1ad99bcb737fa3489e3d3d120f979b1793" kindref="member" tooltip="Add a new EmbedNode.">addEmbed</ref>(data,<sp/>size);<sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Comment]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1819"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>CommentNode.</highlight></codeline>
<codeline lineno="1820"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a9a246926cd01ea668fbba41741dff72d" kindref="member" tooltip="Create a new CommentNode.">newComment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1821"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>a<sp/>new<sp/>@ref<sp/>CommentNode.</highlight></codeline>
<codeline lineno="1822"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a722b06b738b08acdfeb3559796fd4f7c" kindref="member" tooltip="Add a new CommentNode.">addComment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1824"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Emit<sp/>a<sp/>single<sp/>comment<sp/>line.</highlight></codeline>
<codeline lineno="1825"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1af501c8ac8635d94c0fa28dbfa2c9701f" kindref="member" tooltip="Emit a single comment line.">comment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...);</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Hint]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1831"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>HintNode.</highlight></codeline>
<codeline lineno="1832"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1HintNode" kindref="compound" tooltip="Hint node.">HintNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a0d67198e55d11240e7b71a9d9e5e252e" kindref="member" tooltip="Create a new HintNode.">newHint</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var,<sp/>uint32_t<sp/>hint,<sp/>uint32_t<sp/>value);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1833"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>a<sp/>new<sp/>@ref<sp/>HintNode.</highlight></codeline>
<codeline lineno="1834"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1HintNode" kindref="compound" tooltip="Hint node.">HintNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1abbd6d4c4b95647520ba3c798e67f67f4" kindref="member" tooltip="Add a new HintNode.">addHint</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var,<sp/>uint32_t<sp/>hint,<sp/>uint32_t<sp/>value);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Vars]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1840"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>variable<sp/>@a<sp/>var<sp/>is<sp/>created.</highlight></codeline>
<codeline lineno="1841" refid="structasmjit_1_1BaseCompiler_1a47d45c3cb329b30627222ecbbb033490" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a47d45c3cb329b30627222ecbbb033490" kindref="member" tooltip="Get whether variable var is created.">isVarCreated</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>&amp;<sp/><ref refid="group__asmjit__base_1gga1941577d59c9d0f61a4bcde8c19ec9c5a57978d4fcf92c565ed3798a59dfd3eda" kindref="member" tooltip="Operand id to real index mask.">kOperandIdNum</ref>)<sp/>&lt;<sp/><ref refid="structasmjit_1_1BaseCompiler_1a88ee18bc8626c78793233d684ba8eaef" kindref="member" tooltip="Variables.">_vars</ref>.<ref refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" kindref="member" tooltip="Get length.">getLength</ref>();</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1845"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1846"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1847"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>@ref<sp/>VarData<sp/>by<sp/>@a<sp/>var.</highlight></codeline>
<codeline lineno="1848"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>getVd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getVdById(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>());</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1852"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1853"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1854"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>@ref<sp/>VarData<sp/>by<sp/>@a<sp/>id.</highlight></codeline>
<codeline lineno="1855"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarData*<sp/>getVdById(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(static_cast&lt;size_t&gt;(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="group__asmjit__base_1gga1941577d59c9d0f61a4bcde8c19ec9c5a57978d4fcf92c565ed3798a59dfd3eda" kindref="member" tooltip="Operand id to real index mask.">kOperandIdNum</ref>)<sp/>&lt;<sp/><ref refid="structasmjit_1_1BaseCompiler_1a88ee18bc8626c78793233d684ba8eaef" kindref="member" tooltip="Variables.">_vars</ref>.<ref refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" kindref="member" tooltip="Get length.">getLength</ref>());</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a88ee18bc8626c78793233d684ba8eaef" kindref="member" tooltip="Variables.">_vars</ref>[</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="group__asmjit__base_1gga1941577d59c9d0f61a4bcde8c19ec9c5a57978d4fcf92c565ed3798a59dfd3eda" kindref="member" tooltip="Operand id to real index mask.">kOperandIdNum</ref>];</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1862"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1863"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1864"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>an<sp/>array<sp/>of<sp/>&apos;VarData*&apos;.</highlight></codeline>
<codeline lineno="1865"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarData**<sp/>_getVdArray()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">VarData**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a88ee18bc8626c78793233d684ba8eaef" kindref="member" tooltip="Variables.">_vars</ref>.<ref refid="structasmjit_1_1PodVector_1a99290e3577f0296a4d21346992b1de05" kindref="member" tooltip="Get data.">getData</ref>());</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1869"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1870"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1871"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>VarData.</highlight></codeline>
<codeline lineno="1872"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>VarData*<sp/>_newVd(uint32_t<sp/>type,<sp/>uint32_t<sp/>size,<sp/>uint32_t<sp/>c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="1873"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1874"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>BaseVar.</highlight></codeline>
<codeline lineno="1875"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Error<sp/><ref refid="structasmjit_1_1BaseCompiler_1a0a0d78ffb95c9b74d4c6fd0205519b62" kindref="member" tooltip="Create a new BaseVar.">_newVar</ref>(BaseVar*<sp/>var,<sp/>uint32_t<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1877"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Alloc<sp/>variable<sp/>@a<sp/>var.</highlight></codeline>
<codeline lineno="1878"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a9887abcaf860aff3620f790071659a47" kindref="member" tooltip="Alloc variable var.">alloc</ref>(BaseVar&amp;<sp/>var);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1879"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Alloc<sp/>variable<sp/>@a<sp/>var<sp/>using<sp/>@a<sp/>regIndex<sp/>as<sp/>a<sp/>register<sp/>index.</highlight></codeline>
<codeline lineno="1880"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a9887abcaf860aff3620f790071659a47" kindref="member" tooltip="Alloc variable var.">alloc</ref>(BaseVar&amp;<sp/>var,<sp/>uint32_t<sp/>regIndex);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1881"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Alloc<sp/>variable<sp/>@a<sp/>var<sp/>using<sp/>@a<sp/>reg<sp/>as<sp/>a<sp/>demanded<sp/>register.</highlight></codeline>
<codeline lineno="1882"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a9887abcaf860aff3620f790071659a47" kindref="member" tooltip="Alloc variable var.">alloc</ref>(BaseVar&amp;<sp/>var,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseReg&amp;<sp/>reg);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1883"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Spill<sp/>variable<sp/>@a<sp/>var.</highlight></codeline>
<codeline lineno="1884"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1ab816e5a2afbf8fd59c119b820f4c5954" kindref="member" tooltip="Spill variable var.">spill</ref>(BaseVar&amp;<sp/>var);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1885"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Save<sp/>variable<sp/>@a<sp/>var<sp/>if<sp/>modified.</highlight></codeline>
<codeline lineno="1886"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1aa387c6a473cd28b3a7271d964d4864ba" kindref="member" tooltip="Save variable var if modified.">save</ref>(BaseVar&amp;<sp/>var);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1887"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unuse<sp/>variable<sp/>@a<sp/>var.</highlight></codeline>
<codeline lineno="1888"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a5d9021937d9570df4d89abe454bfcee6" kindref="member" tooltip="Unuse variable var.">unuse</ref>(BaseVar&amp;<sp/>var);</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1890"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>priority<sp/>of<sp/>variable<sp/>@a<sp/>var.</highlight></codeline>
<codeline lineno="1891"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseCompiler_1a5a9364098d19d82b88c1a60e964369e5" kindref="member" tooltip="Get priority of variable var.">getPriority</ref>(BaseVar&amp;<sp/>var)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1892"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>priority<sp/>of<sp/>variable<sp/>@a<sp/>var<sp/>to<sp/>@a<sp/>priority.</highlight></codeline>
<codeline lineno="1893"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1af4d8526178948d9b59c533f5a07e599e" kindref="member" tooltip="Set priority of variable var to priority.">setPriority</ref>(BaseVar&amp;<sp/>var,<sp/>uint32_t<sp/>priority);</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1895"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>save-on-unuse<sp/>@a<sp/>var<sp/>property.</highlight></codeline>
<codeline lineno="1896"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a36d1e8d735fb1e7151ee5ccf6ef2bbe4" kindref="member" tooltip="Get save-on-unuse var property.">getSaveOnUnuse</ref>(BaseVar&amp;<sp/>var)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1897"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>save-on-unuse<sp/>@a<sp/>var<sp/>property<sp/>to<sp/>@a<sp/>value.</highlight></codeline>
<codeline lineno="1898"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a317bae3f4011066c5efc7781cb4bc30e" kindref="member" tooltip="Set save-on-unuse var property to value.">setSaveOnUnuse</ref>(BaseVar&amp;<sp/>var,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1900"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rename<sp/>variable<sp/>@a<sp/>var<sp/>to<sp/>@a<sp/>name.</highlight></codeline>
<codeline lineno="1901"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1902"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Only<sp/>new<sp/>name<sp/>will<sp/>appear<sp/>in<sp/>the<sp/>logger.</highlight></codeline>
<codeline lineno="1903"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a81286497909c2862d4ad440b47be7990" kindref="member" tooltip="Rename variable var to name.">rename</ref>(BaseVar&amp;<sp/>var,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Stack]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1909"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>BaseMem.</highlight></codeline>
<codeline lineno="1910"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Error<sp/><ref refid="structasmjit_1_1BaseCompiler_1a93a3e24196bf66d1268338da451548e7" kindref="member" tooltip="Create a new BaseMem.">_newStack</ref>(BaseMem*<sp/>mem,<sp/>uint32_t<sp/>size,<sp/>uint32_t<sp/>alignment,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Serialize]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1916"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Send<sp/>assembled<sp/>code<sp/>to<sp/>@a<sp/>assembler.</highlight></codeline>
<codeline lineno="1917"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Error<sp/><ref refid="structasmjit_1_1BaseCompiler_1a32fb90970a7d2603987e062daf6d0dae" kindref="member" tooltip="Send assembled code to assembler.">serialize</ref>(BaseAssembler&amp;<sp/>assembler)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1923"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Flow<sp/>id<sp/>added<sp/>to<sp/>each<sp/>node<sp/>created<sp/>(used<sp/>only<sp/>by<sp/>@ref<sp/>Context).</highlight></codeline>
<codeline lineno="1924" refid="structasmjit_1_1BaseCompiler_1a9928c755a7d0cfe65fbb928efef40977" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseCompiler_1a9928c755a7d0cfe65fbb928efef40977" kindref="member" tooltip="Flow id added to each node created (used only by Context).">_nodeFlowId</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1925"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Flags<sp/>added<sp/>to<sp/>each<sp/>node<sp/>created<sp/>(used<sp/>only<sp/>by<sp/>@ref<sp/>Context).</highlight></codeline>
<codeline lineno="1926" refid="structasmjit_1_1BaseCompiler_1ae7811102fca26efd20d13628125ca9db" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseCompiler_1ae7811102fca26efd20d13628125ca9db" kindref="member" tooltip="Flags added to each node created (used only by Context).">_nodeFlags</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1927"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Maximum<sp/>count<sp/>of<sp/>nodes<sp/>to<sp/>look<sp/>ahead<sp/>when<sp/>allocating/spilling</highlight></codeline>
<codeline lineno="1928"><highlight class="comment"><sp/><sp/>//!<sp/>registers.</highlight></codeline>
<codeline lineno="1929" refid="structasmjit_1_1BaseCompiler_1af1693974a88dc5f515a77efbfa3576db" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseCompiler_1af1693974a88dc5f515a77efbfa3576db" kindref="member" tooltip="Maximum count of nodes to look ahead when allocating/spilling registers.">_maxLookAhead</ref>;</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1931"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>mapping<sp/>(translates<sp/>incoming<sp/>kVarType<sp/>into<sp/>target).</highlight></codeline>
<codeline lineno="1932" refid="structasmjit_1_1BaseCompiler_1a628212c11a148a6d4e63f2828f78a1cc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a628212c11a148a6d4e63f2828f78a1cc" kindref="member" tooltip="Variable mapping (translates incoming kVarType into target).">_targetVarMapping</ref>;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1934"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>First<sp/>node.</highlight></codeline>
<codeline lineno="1935" refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1936"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Last<sp/>node.</highlight></codeline>
<codeline lineno="1937" refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" kindref="member" tooltip="Last node.">_lastNode</ref>;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1939"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Current<sp/>node.</highlight></codeline>
<codeline lineno="1940" refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1941"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Current<sp/>function.</highlight></codeline>
<codeline lineno="1942" refid="structasmjit_1_1BaseCompiler_1afa054f0e028aa072a6b54a38e182812a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncNode" kindref="compound" tooltip="Function declaration node.">FuncNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1afa054f0e028aa072a6b54a38e182812a" kindref="member" tooltip="Current function.">_func</ref>;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1944"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>allocator.</highlight></codeline>
<codeline lineno="1945" refid="structasmjit_1_1BaseCompiler_1a4d491c8178d555cded21ef092455122c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Zone" kindref="compound" tooltip="Fast incremental memory allocator.">Zone</ref><sp/><ref refid="structasmjit_1_1BaseCompiler_1a4d491c8178d555cded21ef092455122c" kindref="member" tooltip="Variable allocator.">_varAllocator</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1946"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>String/data<sp/>allocator.</highlight></codeline>
<codeline lineno="1947" refid="structasmjit_1_1BaseCompiler_1a72e0dd87a5728952e65969dca03bb7a6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Zone" kindref="compound" tooltip="Fast incremental memory allocator.">Zone</ref><sp/><ref refid="structasmjit_1_1BaseCompiler_1a72e0dd87a5728952e65969dca03bb7a6" kindref="member" tooltip="String/data allocator.">_stringAllocator</ref>;</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1949"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Targets.</highlight></codeline>
<codeline lineno="1950" refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1PodVector" kindref="compound">PodVector&lt;TargetNode*&gt;</ref><sp/><ref refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" kindref="member" tooltip="Targets.">_targets</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1951"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variables.</highlight></codeline>
<codeline lineno="1952" refid="structasmjit_1_1BaseCompiler_1a88ee18bc8626c78793233d684ba8eaef" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1PodVector" kindref="compound">PodVector&lt;VarData*&gt;</ref><sp/><ref refid="structasmjit_1_1BaseCompiler_1a88ee18bc8626c78793233d684ba8eaef" kindref="member" tooltip="Variables.">_vars</ref>;</highlight></codeline>
<codeline lineno="1953"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Defined-Later]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959" refid="structasmjit_1_1Label_1a2a91d937d92e72ff8620903b8a6e98f6" refkind="member"><highlight class="normal">ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" kindref="member" tooltip="Create new, unassociated label.">Label::Label</ref>(BaseCompiler&amp;<sp/>c)<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/>c._newLabel(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1961"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963" refid="structasmjit_1_1BaseNode_1a63c80a6e716812a701c6bec2e2be5007" refkind="member"><highlight class="normal">ASMJIT_INLINE<sp/>BaseNode::BaseNode(BaseCompiler*<sp/>compiler,<sp/>uint32_t<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1a41bc5e21cfb77d1a69f6eba49b944b8b" kindref="member" tooltip="Node type, see kNodeType.">_type</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type);</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1a0f640dcb57f9c977efcd066cfa34bbd4" kindref="member" tooltip="Operands count (if the node has operands, otherwise zero).">_opCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1a3990c435857ff94bbd74935638a84ac0" kindref="member" tooltip="Node flags, different meaning for every node type.">_flags</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(compiler-&gt;<ref refid="structasmjit_1_1BaseCompiler_1ae7811102fca26efd20d13628125ca9db" kindref="member" tooltip="Flags added to each node created (used only by Context).">_nodeFlags</ref>);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1aae00a71a49da71c80fce40654dfedf81" kindref="member" tooltip="Flow index.">_flowId</ref><sp/>=<sp/>compiler-&gt;<ref refid="structasmjit_1_1BaseCompiler_1a9928c755a7d0cfe65fbb928efef40977" kindref="member" tooltip="Flow id added to each node created (used only by Context).">_nodeFlowId</ref>;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1aa1270ef124c6809ca7fd3388fc7cb01e" kindref="member" tooltip="Inline comment string, initially set to NULL.">_comment</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1ab7f38e1bbbd868cc74fce0a7d01d5cbf" kindref="member" tooltip="Variable allocation instructions (initially NULL, filled by prepare phase).">_varInst</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1a0cefc47a244741a68c66ebd64217973c" kindref="member" tooltip="Variable liveness bits (initially NULL, filled by analysis phase).">_liveness</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode_1a6006b732dec81463a1508cfad8cb018b" kindref="member" tooltip="Saved state.">_state</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_ASMJIT_BASE_COMPILER_H</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/base/compiler.h"/>
  </compounddef>
</doxygen>
