<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="x86compiler_8h" kind="file">
    <compoundname>x86compiler.h</compoundname>
    <includes refid="compiler_8h" local="yes">../base/compiler.h</includes>
    <includes refid="x86assembler_8h" local="yes">../x86/x86assembler.h</includes>
    <includes refid="x86defs_8h" local="yes">../x86/x86defs.h</includes>
    <includes refid="x86func_8h" local="yes">../x86/x86func.h</includes>
    <includes refid="apibegin_8h" local="yes">../base/apibegin.h</includes>
    <includes refid="apiend_8h" local="yes">../base/apiend.h</includes>
    <includedby refid="x86context__p_8h" local="yes">x86context_p.h</includedby>
    <includedby refid="x86_8h" local="yes">x86.h</includedby>
    <incdepgraph>
      <node id="2212">
        <label>../base/globals.h</label>
        <childnode refid="2213" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2220">
        <label>../base/apiend.h</label>
      </node>
      <node id="2218">
        <label>stdarg.h</label>
      </node>
      <node id="2209">
        <label>../base/codegen.h</label>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2225" relation="include">
        </childnode>
        <childnode refid="2226" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2222">
        <label>stdint.h</label>
      </node>
      <node id="2216">
        <label>stdlib.h</label>
      </node>
      <node id="2224">
        <label>../base/error.h</label>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2227">
        <label>../base/zone.h</label>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2219">
        <label>../base/apibegin.h</label>
        <childnode refid="2213" relation="include">
        </childnode>
      </node>
      <node id="2225">
        <label>../base/logger.h</label>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2217" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2208">
        <label>../base/assembler.h</label>
        <childnode refid="2209" relation="include">
        </childnode>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2225" relation="include">
        </childnode>
        <childnode refid="2228" relation="include">
        </childnode>
        <childnode refid="2229" relation="include">
        </childnode>
        <childnode refid="2226" relation="include">
        </childnode>
        <childnode refid="2227" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2210">
        <label>../base/defs.h</label>
        <childnode refid="2211" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2223">
        <label>limits.h</label>
      </node>
      <node id="2228">
        <label>../base/podlist.h</label>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2206">
        <label>x86compiler.h</label>
        <link refid="x86compiler.h"/>
        <childnode refid="2207" relation="include">
        </childnode>
        <childnode refid="2231" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
        <childnode refid="2234" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2229">
        <label>../base/podvector.h</label>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2221">
        <label>new</label>
      </node>
      <node id="2234">
        <label>../x86/x86func.h</label>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2230" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2214">
        <label>config.h</label>
      </node>
      <node id="2233">
        <label>../base/vectypes.h</label>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2211">
        <label>../base/intutil.h</label>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2226">
        <label>../base/runtime.h</label>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2231">
        <label>../x86/x86assembler.h</label>
        <childnode refid="2208" relation="include">
        </childnode>
        <childnode refid="2232" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2213">
        <label>../build.h</label>
        <childnode refid="2214" relation="include">
        </childnode>
        <childnode refid="2215" relation="include">
        </childnode>
        <childnode refid="2216" relation="include">
        </childnode>
        <childnode refid="2217" relation="include">
        </childnode>
        <childnode refid="2221" relation="include">
        </childnode>
        <childnode refid="2222" relation="include">
        </childnode>
        <childnode refid="2223" relation="include">
        </childnode>
      </node>
      <node id="2215">
        <label>stdio.h</label>
      </node>
      <node id="2217">
        <label>string.h</label>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2218" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2230">
        <label>../base/func.h</label>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2207">
        <label>../base/compiler.h</label>
        <childnode refid="2208" relation="include">
        </childnode>
        <childnode refid="2209" relation="include">
        </childnode>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2224" relation="include">
        </childnode>
        <childnode refid="2230" relation="include">
        </childnode>
        <childnode refid="2211" relation="include">
        </childnode>
        <childnode refid="2228" relation="include">
        </childnode>
        <childnode refid="2229" relation="include">
        </childnode>
        <childnode refid="2226" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
      <node id="2232">
        <label>../x86/x86defs.h</label>
        <childnode refid="2208" relation="include">
        </childnode>
        <childnode refid="2207" relation="include">
        </childnode>
        <childnode refid="2210" relation="include">
        </childnode>
        <childnode refid="2212" relation="include">
        </childnode>
        <childnode refid="2211" relation="include">
        </childnode>
        <childnode refid="2233" relation="include">
        </childnode>
        <childnode refid="2219" relation="include">
        </childnode>
        <childnode refid="2220" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2236">
        <label>x86context_p.h</label>
      </node>
      <node id="2237">
        <label>x86.h</label>
      </node>
      <node id="2235">
        <label>x86compiler.h</label>
        <link refid="x86compiler.h"/>
        <childnode refid="2236" relation="include">
        </childnode>
        <childnode refid="2237" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structasmjit_1_1x86x64_1_1VarInst" prot="public">asmjit::x86x64::VarInst</innerclass>
    <innerclass refid="unionasmjit_1_1x86x64_1_1StateCell" prot="public">asmjit::x86x64::StateCell</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1VarState" prot="public">asmjit::x86x64::VarState</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" prot="public">asmjit::x86x64::X86X64FuncNode</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86X64CallNode" prot="public">asmjit::x86x64::X86X64CallNode</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86X64Compiler" prot="public">asmjit::x86x64::X86X64Compiler</innerclass>
    <innernamespace refid="namespaceasmjit">asmjit</innernamespace>
    <innernamespace refid="namespaceasmjit_1_1x86x64">asmjit::x86x64</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__asmjit__x86x64_1gaaf3f69d80d06b4a532023bb3012a7320" prot="public" static="no">
        <name>INST_0x</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_() { \
    return emit(_Code_); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="33" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga1c8e5a36936d8560ec803c0d65268946" prot="public" static="no">
        <name>INST_1x</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0) { \
    return emit(_Code_, o0); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="38" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga1141c99b39aef1af1c24374dac38626f" prot="public" static="no">
        <name>INST_1x_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="44" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1gaf5d4f68b466dcdbb81bfe5e77dea8d2e" prot="public" static="no">
        <name>INST_1i</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0) { \
    return emit(_Code_, o0); \
  } \
  /* @overload */ \
  ASMJIT_INLINE InstNode* _Inst_(int o0) { \
    return emit(_Code_, o0); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="53" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga4572c748250d3016c19bd474e4921307" prot="public" static="no">
        <name>INST_1i_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0); \
  } \
  /* @overload */ \
  ASMJIT_INLINE InstNode* _Inst_(int o0) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="64" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1gab30b8ea73cac05205fcd6a422696e9d6" prot="public" static="no">
        <name>INST_1cc</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Translate_</defname></param>
        <param><defname>_Op0_</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="100" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga1464791c7e0a5c818d38e8b5bbb18afb" prot="public" static="no">
        <name>INST_2x</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1) { \
    return emit(_Code_, o0, o1); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="105" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga7a1c1126cce4e6ebeae66ced1164b4d9" prot="public" static="no">
        <name>INST_2x_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="111" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga43443da73781e8ee9d76e7f48f729fb0" prot="public" static="no">
        <name>INST_2i</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1) { \
    return emit(_Code_, o0, o1); \
  } \
  /* @overload */ \
  ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, int o1) { \
    return emit(_Code_, o0, o1); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="120" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga272ac8865ce6fbdd79137da0ce95983b" prot="public" static="no">
        <name>INST_2i_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1); \
  } \
  /* @overload */ \
  ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, int o1) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="131" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga002c796f0d4f77c868e0872970510278" prot="public" static="no">
        <name>INST_2cc</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Translate_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="167" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga62fda50441bc63e96d9ec43773c89281" prot="public" static="no">
        <name>INST_3x</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2) { \
    return emit(_Code_, o0, o1, o2); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="172" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga2fbe398eb78774a87861973097325a99" prot="public" static="no">
        <name>INST_3x_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1, o2); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="178" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1gaf7e619e1c9c5014477f81c3ae016f6df" prot="public" static="no">
        <name>INST_3i</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2) { \
    return emit(_Code_, o0, o1, o2); \
  } \
  \
  /* @overload */ \
  ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, int o2) { \
    return emit(_Code_, o0, o1, o2); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="188" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1gae26e6241e5ea53bdd5711875b5823db4" prot="public" static="no">
        <name>INST_3i_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1, o2); \
  } \
  /* @overload */ \
  ASMJIT_INLINE InstNode* _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, int o2) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1, o2); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="199" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="190" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMJIT_X86_X86COMPILER_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_ASMJIT_X86_X86COMPILER_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/compiler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86assembler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86defs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86func.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x86x64<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_x86x64</highlight></codeline>
<codeline lineno="24"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="25"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[CodeGen-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_0x(_Inst_,<sp/>_Code_)<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_()<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_);<sp/>\</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_1x(_Inst_,<sp/>_Code_,<sp/>_Op0_)<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_1x_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_1i(_Inst_,<sp/>_Code_,<sp/>_Op0_)<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(int<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_1i_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(int<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_1cc(_Inst_,<sp/>_Code_,<sp/>_Translate_,<sp/>_Op0_)<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(uint32_t<sp/>cc,<sp/>const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Translate_(cc),<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##a(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##a,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##ae(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##ae,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##b(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##b,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##be(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##be,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##c(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##c,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##e(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##e,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##g(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##g,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##ge(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##ge,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##l(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##l,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##le(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##le,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##na(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##na,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nae(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nae,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nb(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nb,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nbe(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nbe,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nc(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nc,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##ne(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##ne,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##ng(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##ng,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nge(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nge,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nl(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nl,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nle(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nle,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##no(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##no,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##np(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##np,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##ns(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##ns,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nz(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nz,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##o(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##o,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##p(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##p,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##pe(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##pe,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##po(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##po,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##s(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##s,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##z(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##z,<sp/>o0);<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_2x(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_)<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_2x_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_2i(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_)<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>int<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_2i_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>int<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_2cc(_Inst_,<sp/>_Code_,<sp/>_Translate_,<sp/>_Op0_,<sp/>_Op1_)<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(uint32_t<sp/>cc,<sp/>const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Translate_(cc),<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##a(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##a,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##ae(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##ae,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##b(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##b,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##be(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##be,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##c(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##c,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##e(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##e,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##g(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##g,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##ge(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##ge,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##l(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##l,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##le(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##le,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##na(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##na,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nae(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nae,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nb(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nb,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nbe(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nbe,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nc(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nc,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##ne(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##ne,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##ng(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##ng,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nge(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nge,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nl(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nl,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nle(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nle,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##no(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##no,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##np(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##np,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##ns(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##ns,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##nz(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nz,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##o(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##o,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##p(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##p,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##pe(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##pe,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##po(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##po,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##s(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##s,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_##z(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##z,<sp/>o0,<sp/>o1);<sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_3x(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_)<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_3x_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_3i(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_)<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>int<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_3i_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>int<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Forward<sp/>Declarations]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">X86X64CallNode;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">X86X64FuncNode;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VarState;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kVarAttr]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="213"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>VarAttr<sp/>flags.</highlight></codeline>
<codeline lineno="214" refid="group__asmjit__x86x64_1ga6cd332deefac315f70e5a513038ab461" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga6cd332deefac315f70e5a513038ab461" kindref="member" tooltip="X86/X64 VarAttr flags.">kVarAttr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>kVarAttrGpbLo<sp/>=<sp/>0x10000000,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>kVarAttrGpbHi<sp/>=<sp/>0x20000000</highlight></codeline>
<codeline lineno="217"><highlight class="normal">};</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::VarInst]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VarInst<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseVarInst" kindref="compound" tooltip="Variable allocation instructions.">BaseVarInst</ref><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable-attributes<sp/>list<sp/>as<sp/>VarAttr<sp/>data.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarAttr*<sp/>getVaList()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">VarAttr*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_list);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable-attributes<sp/>list<sp/>as<sp/>VarAttr<sp/>data<sp/>(by<sp/>class).</highlight></codeline>
<codeline lineno="234"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarAttr*<sp/>getVaListByClass(uint32_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">VarAttr*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_list)<sp/>+<sp/>_start.get(c);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>position<sp/>of<sp/>variables<sp/>(by<sp/>class).</highlight></codeline>
<codeline lineno="239"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getVaStart(uint32_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_start.get(c);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>count<sp/>of<sp/>variables<sp/>(all).</highlight></codeline>
<codeline lineno="244"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getVaCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_vaCount;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>count<sp/>of<sp/>variables<sp/>(by<sp/>class).</highlight></codeline>
<codeline lineno="249"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getVaCountByClass(uint32_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_count.get(c);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>VarAttr<sp/>at<sp/>@a<sp/>index.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarAttr*<sp/>getVa(uint32_t<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(index<sp/>&lt;<sp/>_vaCount);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getVaList()<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>VarAttr<sp/>of<sp/>@a<sp/>c<sp/>class<sp/>at<sp/>@a<sp/>index.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarAttr*<sp/>getVaByClass(uint32_t<sp/>c,<sp/>uint32_t<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(index<sp/>&lt;<sp/>_count._regs[c]);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getVaListByClass(c)<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Utils]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>VarAttr.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarAttr*<sp/>findVa(VarData*<sp/>vd)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>list<sp/>=<sp/>getVaList();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>getVaCount();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list[i].getVd()<sp/>==<sp/>vd)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>VarAttr<sp/>(by<sp/>class).</highlight></codeline>
<codeline lineno="282"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarAttr*<sp/>findVaByClass(uint32_t<sp/>c,<sp/>VarData*<sp/>vd)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>list<sp/>=<sp/>getVaListByClass(c);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>getVaCountByClass(c);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list[i].getVd()<sp/>==<sp/>vd)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variables<sp/>count.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/>_vaCount;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Special<sp/>registers<sp/>on<sp/>input.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/>//!<sp/>Special<sp/>register(s)<sp/>restricted<sp/>to<sp/>one<sp/>or<sp/>more<sp/>physical<sp/>register.<sp/>If<sp/>there</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/>//!<sp/>is<sp/>more<sp/>than<sp/>one<sp/>special<sp/>register<sp/>it<sp/>means<sp/>that<sp/>we<sp/>have<sp/>to<sp/>duplicate<sp/>the</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/>//!<sp/>variable<sp/>content<sp/>to<sp/>all<sp/>of<sp/>them<sp/>(it<sp/>means<sp/>that<sp/>the<sp/>same<sp/>varible<sp/>was<sp/>used</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/>//!<sp/>by<sp/>two<sp/>or<sp/>more<sp/>operands).<sp/>We<sp/>forget<sp/>about<sp/>duplicates<sp/>after<sp/>the<sp/>register</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/>//!<sp/>allocation<sp/>finishes<sp/>and<sp/>marks<sp/>all<sp/>duplicates<sp/>as<sp/>non-assigned.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>RegMask<sp/>_inRegs;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Special<sp/>registers<sp/>on<sp/>output.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/>//!<sp/>Special<sp/>register(s)<sp/>used<sp/>on<sp/>output.<sp/>Each<sp/>variable<sp/>can<sp/>have<sp/>only<sp/>one</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/>//!<sp/>special<sp/>register<sp/>on<sp/>the<sp/>output,<sp/>&apos;VarInst&apos;<sp/>contains<sp/>all<sp/>registers<sp/>from</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/>//!<sp/>all<sp/>&apos;VarAttr&apos;s.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>RegMask<sp/>_outRegs;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clobbered<sp/>registers<sp/>(by<sp/>a<sp/>function<sp/>call).</highlight></codeline>
<codeline lineno="317"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>RegMask<sp/>_clobberedRegs;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Start<sp/>indexes<sp/>of<sp/>variables<sp/>per<sp/>register<sp/>class.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>RegCount<sp/>_start;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>variables<sp/>per<sp/>register<sp/>class.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>RegCount<sp/>_count;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>VarAttr<sp/>list.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>VarAttr<sp/>_list[1];</highlight></codeline>
<codeline lineno="326"><highlight class="normal">};</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::StateCell]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="332"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>state-cell.</highlight></codeline>
<codeline lineno="333" refid="unionasmjit_1_1x86x64_1_1StateCell" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionasmjit_1_1x86x64_1_1StateCell" kindref="compound" tooltip="X86/X64 state-cell.">StateCell</ref><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getState()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_state;<sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setState(uint32_t<sp/>state)<sp/>{<sp/>_state<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(state);<sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Reset]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset()<sp/>{<sp/>_packed<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>uint8_t<sp/>_packed;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>_state<sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>_unused<sp/>:<sp/>6;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="357"><highlight class="normal">};</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::VarState]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="363"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>state.</highlight></codeline>
<codeline lineno="364" refid="structasmjit_1_1x86x64_1_1VarState" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1VarState" kindref="compound" tooltip="X86/X64 state.">VarState</ref><sp/>:<sp/><ref refid="structasmjit_1_1BaseVarState" kindref="compound" tooltip="Variable(s) state.">BaseVarState</ref><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Base<sp/>index<sp/>for<sp/>Gp<sp/>registers.</highlight></codeline>
<codeline lineno="367" refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a721e1d003394002ce51d177f2e5b753f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a721e1d003394002ce51d177f2e5b753f" kindref="member" tooltip="Base index for Gp registers.">kGpIndex</ref><sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>Gp<sp/>registers.</highlight></codeline>
<codeline lineno="369" refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331acadbc43329e7558c6be00647c9021126" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331acadbc43329e7558c6be00647c9021126" kindref="member" tooltip="Count of Gp registers.">kGpCount</ref><sp/>=<sp/>16,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Base<sp/>index<sp/>for<sp/>Mm<sp/>registers.</highlight></codeline>
<codeline lineno="372" refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331ac2133aa375a58849420a577aa8fb34f4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331ac2133aa375a58849420a577aa8fb34f4" kindref="member" tooltip="Base index for Mm registers.">kMmIndex</ref><sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a721e1d003394002ce51d177f2e5b753f" kindref="member" tooltip="Base index for Gp registers.">kGpIndex</ref><sp/>+<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331acadbc43329e7558c6be00647c9021126" kindref="member" tooltip="Count of Gp registers.">kGpCount</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>Mm<sp/>registers.</highlight></codeline>
<codeline lineno="374" refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331ac0587e81e6bdedb698f86fe041c6b028" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331ac0587e81e6bdedb698f86fe041c6b028" kindref="member" tooltip="Count of Mm registers.">kMmCount</ref><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Base<sp/>index<sp/>for<sp/>Xmm<sp/>registers.</highlight></codeline>
<codeline lineno="377" refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a60fa04cece6e3daa2d48048fea33797b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a60fa04cece6e3daa2d48048fea33797b" kindref="member" tooltip="Base index for Xmm registers.">kXmmIndex</ref><sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331ac2133aa375a58849420a577aa8fb34f4" kindref="member" tooltip="Base index for Mm registers.">kMmIndex</ref><sp/>+<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331ac0587e81e6bdedb698f86fe041c6b028" kindref="member" tooltip="Count of Mm registers.">kMmCount</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>Xmm<sp/>registers.</highlight></codeline>
<codeline lineno="379" refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a7095d256203d204e13838903aa2df89e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a7095d256203d204e13838903aa2df89e" kindref="member" tooltip="Count of Xmm registers.">kXmmCount</ref><sp/>=<sp/>16,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>all<sp/>registers<sp/>in<sp/>@ref<sp/>VarState.</highlight></codeline>
<codeline lineno="382" refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a2e21256c6c1b021ed9005c46478f60a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a2e21256c6c1b021ed9005c46478f60a9" kindref="member" tooltip="Count of all registers in VarState.">kAllCount</ref><sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a60fa04cece6e3daa2d48048fea33797b" kindref="member" tooltip="Base index for Xmm registers.">kXmmIndex</ref><sp/>+<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a7095d256203d204e13838903aa2df89e" kindref="member" tooltip="Count of Xmm registers.">kXmmCount</ref></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>**<sp/>getList()<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1aaec2eb8171a02087dafd4c13b3d4b3e3" kindref="member" tooltip="List of all allocated variables in one array.">_list</ref>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>**<sp/>getListByClass(uint32_t<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a6eebf6592104a7f3e5a3e656f656786c" kindref="member" tooltip="Allocated Gp registers.">_listGp</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a0ff4a04fbc4243bd30909b3f2883c72a" kindref="member" tooltip="Allocated Mm registers.">_listMm</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a548638ebf6f2f8c02100f4e297131e89" kindref="member" tooltip="Allocated Xmm registers.">_listXmm</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Clear]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numCells)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>::memset(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0,<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a2e21256c6c1b021ed9005c46478f60a9" kindref="member" tooltip="Count of all registers in VarState.">kAllCount</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VarData*<sp/>)<sp/>+</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(RegMask<sp/><sp/>)<sp/>+</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numCells<sp/><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(StateCell));</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>List<sp/>of<sp/>all<sp/>allocated<sp/>variables<sp/>in<sp/>one<sp/>array.</highlight></codeline>
<codeline lineno="420" refid="structasmjit_1_1x86x64_1_1VarState_1aaec2eb8171a02087dafd4c13b3d4b3e3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1aaec2eb8171a02087dafd4c13b3d4b3e3" kindref="member" tooltip="List of all allocated variables in one array.">_list</ref>[<ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a2e21256c6c1b021ed9005c46478f60a9" kindref="member" tooltip="Count of all registers in VarState.">kAllCount</ref>];</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Allocated<sp/>Gp<sp/>registers.</highlight></codeline>
<codeline lineno="424" refid="structasmjit_1_1x86x64_1_1VarState_1a6eebf6592104a7f3e5a3e656f656786c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a6eebf6592104a7f3e5a3e656f656786c" kindref="member" tooltip="Allocated Gp registers.">_listGp</ref>[<ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331acadbc43329e7558c6be00647c9021126" kindref="member" tooltip="Count of Gp registers.">kGpCount</ref>];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Allocated<sp/>Mm<sp/>registers.</highlight></codeline>
<codeline lineno="426" refid="structasmjit_1_1x86x64_1_1VarState_1a0ff4a04fbc4243bd30909b3f2883c72a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a0ff4a04fbc4243bd30909b3f2883c72a" kindref="member" tooltip="Allocated Mm registers.">_listMm</ref>[<ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331ac0587e81e6bdedb698f86fe041c6b028" kindref="member" tooltip="Count of Mm registers.">kMmCount</ref>];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Allocated<sp/>Xmm<sp/>registers.</highlight></codeline>
<codeline lineno="428" refid="structasmjit_1_1x86x64_1_1VarState_1a548638ebf6f2f8c02100f4e297131e89" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a548638ebf6f2f8c02100f4e297131e89" kindref="member" tooltip="Allocated Xmm registers.">_listXmm</ref>[<ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a7095d256203d204e13838903aa2df89e" kindref="member" tooltip="Count of Xmm registers.">kXmmCount</ref>];</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Occupied<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="433" refid="structasmjit_1_1x86x64_1_1VarState_1aea05ab174ed599dc1f885a1c062e3631" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1aea05ab174ed599dc1f885a1c062e3631" kindref="member" tooltip="Occupied registers (mask).">_occupied</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Modified<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="435" refid="structasmjit_1_1x86x64_1_1VarState_1a8bc35997dd227198cf5ba50a7581f020" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8bc35997dd227198cf5ba50a7581f020" kindref="member" tooltip="Modified registers (mask).">_modified</ref>;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variables<sp/>data<sp/>(count<sp/>of<sp/>variables<sp/>is<sp/>stored<sp/>in<sp/>@ref<sp/>Context).</highlight></codeline>
<codeline lineno="438" refid="structasmjit_1_1x86x64_1_1VarState_1a0d89d9d4c8b4d092b032d39d5e570365" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="unionasmjit_1_1x86x64_1_1StateCell" kindref="compound" tooltip="X86/X64 state-cell.">StateCell</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a0d89d9d4c8b4d092b032d39d5e570365" kindref="member" tooltip="Variables data (count of variables is stored in Context).">_cells</ref>[1];</highlight></codeline>
<codeline lineno="439"><highlight class="normal">};</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::X86X64FuncNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="445"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>function<sp/>node.</highlight></codeline>
<codeline lineno="446" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound" tooltip="X86/X64 function node.">X86X64FuncNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncNode" kindref="compound" tooltip="Function declaration node.">FuncNode</ref><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound" tooltip="X86/X64 function node.">X86X64FuncNode</ref>)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>X86X64FuncNode<sp/>instance.</highlight></codeline>
<codeline lineno="454" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ab821939a8691f155afabb5e10f35550f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound" tooltip="X86/X64 function node.">X86X64FuncNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler)<sp/>:<sp/><ref refid="structasmjit_1_1FuncNode" kindref="compound" tooltip="Function declaration node.">FuncNode</ref>(compiler)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncNode_1a8f054d6870355e7e43192fe857a0c7f5" kindref="member" tooltip="Function declaration.">_decl</ref><sp/>=<sp/>&amp;<ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ab7b1e98c1ad850d01a07cfa735cc40a3" kindref="member" tooltip="X86 function decl.">_x86Decl</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a0477f1f0d41e21f895ab853613ba8104" kindref="member" tooltip="Registers which must be saved/restored in prolog/epilog.">_saveRestoreRegs</ref>.reset();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1aa183763933ff4c41f98cb8b4f6a3b405" kindref="member" tooltip="Stack size needed to align function back to the nature alignment.">_alignStackSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af4c6af5e71ca08a8cb955fd433d5f7da" kindref="member" tooltip="Like _memStackSize, but aligned.">_alignedMemStackSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a204254fc98c3cc76c611177b0a67e93a" kindref="member" tooltip="Stack required for push/pop in prolog/epilog (X86/X64 specific).">_pushPopStackSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ad3a4e4a7f4111474ce984ac3bb249165" kindref="member" tooltip="Stack required for movs in prolog/epilog (X86/X64 specific).">_moveStackSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a45d9f6f2ba1dd317864418ab278d058f" kindref="member" tooltip="Stack required to put extra data (for example function arguments when manually aligning to requested ...">_extraStackSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ae689a4bf5827463506735012d66cb798" kindref="member" tooltip="Stack frame register.">_stackFrameRegIndex</ref><sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1afc2ca4f52a741090bb014df1f1cfe23a" kindref="member" tooltip="Whether the stack frame register is preserved.">_isStackFrameRegPreserved</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af421421f6a04ee7f044a57c041b7ccf2" kindref="member" tooltip="Gp registers indexes that can be used to copy function arguments to a new location in case we are doi...">_stackFrameCopyGpIndex</ref>[0]<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af421421f6a04ee7f044a57c041b7ccf2" kindref="member" tooltip="Gp registers indexes that can be used to copy function arguments to a new location in case we are doi...">_stackFrameCopyGpIndex</ref>[1]<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af421421f6a04ee7f044a57c041b7ccf2" kindref="member" tooltip="Gp registers indexes that can be used to copy function arguments to a new location in case we are doi...">_stackFrameCopyGpIndex</ref>[2]<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af421421f6a04ee7f044a57c041b7ccf2" kindref="member" tooltip="Gp registers indexes that can be used to copy function arguments to a new location in case we are doi...">_stackFrameCopyGpIndex</ref>[3]<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af421421f6a04ee7f044a57c041b7ccf2" kindref="member" tooltip="Gp registers indexes that can be used to copy function arguments to a new location in case we are doi...">_stackFrameCopyGpIndex</ref>[4]<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af421421f6a04ee7f044a57c041b7ccf2" kindref="member" tooltip="Gp registers indexes that can be used to copy function arguments to a new location in case we are doi...">_stackFrameCopyGpIndex</ref>[5]<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>X86X64FuncNode<sp/>instance.</highlight></codeline>
<codeline lineno="475" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a43d3755fea5efcd9c856e726fdffd978" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a43d3755fea5efcd9c856e726fdffd978" kindref="member" tooltip="Destroy the X86X64FuncNode instance.">~X86X64FuncNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>declaration<sp/>as<sp/>@ref<sp/>X86X64FuncDecl.</highlight></codeline>
<codeline lineno="482" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a0303ecf0f0c00c5c6f0c94057bc6cce3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl" kindref="compound" tooltip="X86 function, including calling convention, arguments and their register indices or stack positions...">X86X64FuncDecl</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a0303ecf0f0c00c5c6f0c94057bc6cce3" kindref="member" tooltip="Get function declaration as X86X64FuncDecl.">getDecl</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl" kindref="compound" tooltip="X86 function, including calling convention, arguments and their register indices or stack positions...">X86X64FuncDecl</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ab7b1e98c1ad850d01a07cfa735cc40a3" kindref="member" tooltip="X86 function decl.">_x86Decl</ref>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>argument.</highlight></codeline>
<codeline lineno="487" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1aad9bb401fde773a43deb547198b5ffd7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1aad9bb401fde773a43deb547198b5ffd7" kindref="member" tooltip="Get argument.">getArg</ref>(uint32_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(i<sp/>&lt;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ab7b1e98c1ad850d01a07cfa735cc40a3" kindref="member" tooltip="X86 function decl.">_x86Decl</ref>.<ref refid="structasmjit_1_1FuncDecl_1a256dfc25b9980a7571c13c4dd6d31e8e" kindref="member" tooltip="Get count of function arguments.">getArgCount</ref>());</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1FuncNode_1af0787526f99e5db159be47cb0588bc68" kindref="member" tooltip="Arguments list as VarData.">_argList</ref>[i]);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>registers<sp/>which<sp/>have<sp/>to<sp/>be<sp/>saved<sp/>in<sp/>prolog/epilog.</highlight></codeline>
<codeline lineno="493" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ad8b58a76528833ac3f6322b6be63893d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ad8b58a76528833ac3f6322b6be63893d" kindref="member" tooltip="Get registers which have to be saved in prolog/epilog.">getSaveRestoreRegs</ref>(uint32_t<sp/>c)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a0477f1f0d41e21f895ab853613ba8104" kindref="member" tooltip="Registers which must be saved/restored in prolog/epilog.">_saveRestoreRegs</ref>.get(c);<sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>stack<sp/>size<sp/>needed<sp/>to<sp/>align<sp/>stack<sp/>back<sp/>to<sp/>the<sp/>nature<sp/>alignment.</highlight></codeline>
<codeline lineno="496" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ae2c06ad617140b029cbcf06091d4975d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ae2c06ad617140b029cbcf06091d4975d" kindref="member" tooltip="Get stack size needed to align stack back to the nature alignment.">getAlignStackSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1aa183763933ff4c41f98cb8b4f6a3b405" kindref="member" tooltip="Stack size needed to align function back to the nature alignment.">_alignStackSize</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>stack<sp/>size<sp/>needed<sp/>to<sp/>align<sp/>stack<sp/>back<sp/>to<sp/>the<sp/>nature<sp/>alignment.</highlight></codeline>
<codeline lineno="498" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ae7fb8e3055635ea099ccb7b3eed1788f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ae7fb8e3055635ea099ccb7b3eed1788f" kindref="member" tooltip="Set stack size needed to align stack back to the nature alignment.">setAlignStackSize</ref>(uint32_t<sp/>s)<sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1aa183763933ff4c41f98cb8b4f6a3b405" kindref="member" tooltip="Stack size needed to align function back to the nature alignment.">_alignStackSize</ref><sp/>=<sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>aligned<sp/>stack<sp/>size<sp/>used<sp/>by<sp/>variables<sp/>and<sp/>memory<sp/>allocated<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="501" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a09068d3d0e16fdce9cb391b69e7305b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a09068d3d0e16fdce9cb391b69e7305b8" kindref="member" tooltip="Get aligned stack size used by variables and memory allocated on the stack.">getAlignedMemStackSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af4c6af5e71ca08a8cb955fd433d5f7da" kindref="member" tooltip="Like _memStackSize, but aligned.">_alignedMemStackSize</ref>;<sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>stack<sp/>size<sp/>used<sp/>by<sp/>push/pop<sp/>sequences<sp/>in<sp/>prolog/epilog.</highlight></codeline>
<codeline lineno="504" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1adb4613d7863443f565b836f0ac686e27" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1adb4613d7863443f565b836f0ac686e27" kindref="member" tooltip="Get stack size used by push/pop sequences in prolog/epilog.">getPushPopStackSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a204254fc98c3cc76c611177b0a67e93a" kindref="member" tooltip="Stack required for push/pop in prolog/epilog (X86/X64 specific).">_pushPopStackSize</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>stack<sp/>size<sp/>used<sp/>by<sp/>push/pop<sp/>sequences<sp/>in<sp/>prolog/epilog.</highlight></codeline>
<codeline lineno="506" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ab315d64415c75e447f1872aa367ffbe0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ab315d64415c75e447f1872aa367ffbe0" kindref="member" tooltip="Set stack size used by push/pop sequences in prolog/epilog.">setPushPopStackSize</ref>(uint32_t<sp/>s)<sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a204254fc98c3cc76c611177b0a67e93a" kindref="member" tooltip="Stack required for push/pop in prolog/epilog (X86/X64 specific).">_pushPopStackSize</ref><sp/>=<sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>stack<sp/>size<sp/>used<sp/>by<sp/>mov<sp/>sequences<sp/>in<sp/>prolog/epilog.</highlight></codeline>
<codeline lineno="509" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a5bd65355333872182278d15f6d9e634e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a5bd65355333872182278d15f6d9e634e" kindref="member" tooltip="Get stack size used by mov sequences in prolog/epilog.">getMoveStackSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ad3a4e4a7f4111474ce984ac3bb249165" kindref="member" tooltip="Stack required for movs in prolog/epilog (X86/X64 specific).">_moveStackSize</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>stack<sp/>size<sp/>used<sp/>by<sp/>mov<sp/>sequences<sp/>in<sp/>prolog/epilog.</highlight></codeline>
<codeline lineno="511" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a21a0d0e029fb874744c06048d9f140c4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a21a0d0e029fb874744c06048d9f140c4" kindref="member" tooltip="Set stack size used by mov sequences in prolog/epilog.">setMoveStackSize</ref>(uint32_t<sp/>s)<sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ad3a4e4a7f4111474ce984ac3bb249165" kindref="member" tooltip="Stack required for movs in prolog/epilog (X86/X64 specific).">_moveStackSize</ref><sp/>=<sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>extra<sp/>stack<sp/>size.</highlight></codeline>
<codeline lineno="514" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a25b991d3971586209082faa6831a9888" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a25b991d3971586209082faa6831a9888" kindref="member" tooltip="Get extra stack size.">getExtraStackSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a45d9f6f2ba1dd317864418ab278d058f" kindref="member" tooltip="Stack required to put extra data (for example function arguments when manually aligning to requested ...">_extraStackSize</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>extra<sp/>stack<sp/>size.</highlight></codeline>
<codeline lineno="516" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1afdda8ef60b20251cd1d10cb037373c35" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1afdda8ef60b20251cd1d10cb037373c35" kindref="member" tooltip="Set extra stack size.">setExtraStackSize</ref>(uint32_t<sp/>s)<sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a45d9f6f2ba1dd317864418ab278d058f" kindref="member" tooltip="Stack required to put extra data (for example function arguments when manually aligning to requested ...">_extraStackSize</ref><sp/><sp/>=<sp/>s;<sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>function<sp/>has<sp/>stack<sp/>frame<sp/>register.</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Stack<sp/>frame<sp/>register<sp/>can<sp/>be<sp/>used<sp/>for<sp/>both<sp/>-<sp/>aligning<sp/>purposes<sp/>or</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/>//!<sp/>generating<sp/>standard<sp/>prolog/epilog<sp/>sequence.</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Used<sp/>only<sp/>when<sp/>stack<sp/>is<sp/>misaligned.</highlight></codeline>
<codeline lineno="524" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a677b24096c9ed3d5bf2265f87c6096be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a677b24096c9ed3d5bf2265f87c6096be" kindref="member" tooltip="Get whether the function has stack frame register.">hasStackFrameReg</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ae689a4bf5827463506735012d66cb798" kindref="member" tooltip="Stack frame register.">_stackFrameRegIndex</ref><sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>stack<sp/>frame<sp/>register<sp/>index.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Used<sp/>only<sp/>when<sp/>stack<sp/>is<sp/>misaligned.</highlight></codeline>
<codeline lineno="528" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a2f8155b0202b35c24abc99e0fd7ed51f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a2f8155b0202b35c24abc99e0fd7ed51f" kindref="member" tooltip="Get stack frame register index.">getStackFrameRegIndex</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ae689a4bf5827463506735012d66cb798" kindref="member" tooltip="Stack frame register.">_stackFrameRegIndex</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>stack<sp/>frame<sp/>register<sp/>is<sp/>preserved.</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Used<sp/>only<sp/>when<sp/>stack<sp/>is<sp/>misaligned.</highlight></codeline>
<codeline lineno="532" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1aff37a33f8ab799abb51099cadc623f9c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1aff37a33f8ab799abb51099cadc623f9c" kindref="member" tooltip="Get whether the stack frame register is preserved.">isStackFrameRegPreserved</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1afc2ca4f52a741090bb014df1f1cfe23a" kindref="member" tooltip="Whether the stack frame register is preserved.">_isStackFrameRegPreserved</ref>);<sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>X86<sp/>function<sp/>decl.</highlight></codeline>
<codeline lineno="539" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ab7b1e98c1ad850d01a07cfa735cc40a3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl" kindref="compound" tooltip="X86 function, including calling convention, arguments and their register indices or stack positions...">X86X64FuncDecl</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ab7b1e98c1ad850d01a07cfa735cc40a3" kindref="member" tooltip="X86 function decl.">_x86Decl</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Registers<sp/>which<sp/>must<sp/>be<sp/>saved/restored<sp/>in<sp/>prolog/epilog.</highlight></codeline>
<codeline lineno="541" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a0477f1f0d41e21f895ab853613ba8104" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a0477f1f0d41e21f895ab853613ba8104" kindref="member" tooltip="Registers which must be saved/restored in prolog/epilog.">_saveRestoreRegs</ref>;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Stack<sp/>size<sp/>needed<sp/>to<sp/>align<sp/>function<sp/>back<sp/>to<sp/>the<sp/>nature<sp/>alignment.</highlight></codeline>
<codeline lineno="544" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1aa183763933ff4c41f98cb8b4f6a3b405" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1aa183763933ff4c41f98cb8b4f6a3b405" kindref="member" tooltip="Stack size needed to align function back to the nature alignment.">_alignStackSize</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Like<sp/>@ref<sp/>_memStackSize,<sp/>but<sp/>aligned.</highlight></codeline>
<codeline lineno="546" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af4c6af5e71ca08a8cb955fd433d5f7da" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af4c6af5e71ca08a8cb955fd433d5f7da" kindref="member" tooltip="Like _memStackSize, but aligned.">_alignedMemStackSize</ref>;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Stack<sp/>required<sp/>for<sp/>push/pop<sp/>in<sp/>prolog/epilog<sp/>(X86/X64<sp/>specific).</highlight></codeline>
<codeline lineno="549" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a204254fc98c3cc76c611177b0a67e93a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a204254fc98c3cc76c611177b0a67e93a" kindref="member" tooltip="Stack required for push/pop in prolog/epilog (X86/X64 specific).">_pushPopStackSize</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Stack<sp/>required<sp/>for<sp/>movs<sp/>in<sp/>prolog/epilog<sp/>(X86/X64<sp/>specific).</highlight></codeline>
<codeline lineno="551" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ad3a4e4a7f4111474ce984ac3bb249165" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ad3a4e4a7f4111474ce984ac3bb249165" kindref="member" tooltip="Stack required for movs in prolog/epilog (X86/X64 specific).">_moveStackSize</ref>;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Stack<sp/>required<sp/>to<sp/>put<sp/>extra<sp/>data<sp/>(for<sp/>example<sp/>function<sp/>arguments</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/>//!<sp/>when<sp/>manually<sp/>aligning<sp/>to<sp/>requested<sp/>alignment).</highlight></codeline>
<codeline lineno="555" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a45d9f6f2ba1dd317864418ab278d058f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1a45d9f6f2ba1dd317864418ab278d058f" kindref="member" tooltip="Stack required to put extra data (for example function arguments when manually aligning to requested ...">_extraStackSize</ref>;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Stack<sp/>frame<sp/>register.</highlight></codeline>
<codeline lineno="558" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ae689a4bf5827463506735012d66cb798" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1ae689a4bf5827463506735012d66cb798" kindref="member" tooltip="Stack frame register.">_stackFrameRegIndex</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>stack<sp/>frame<sp/>register<sp/>is<sp/>preserved.</highlight></codeline>
<codeline lineno="560" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1afc2ca4f52a741090bb014df1f1cfe23a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1afc2ca4f52a741090bb014df1f1cfe23a" kindref="member" tooltip="Whether the stack frame register is preserved.">_isStackFrameRegPreserved</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Gp<sp/>registers<sp/>indexes<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>copy<sp/>function<sp/>arguments</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/>//!<sp/>to<sp/>a<sp/>new<sp/>location<sp/>in<sp/>case<sp/>we<sp/>are<sp/>doing<sp/>manual<sp/>stack<sp/>alignment.</highlight></codeline>
<codeline lineno="563" refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af421421f6a04ee7f044a57c041b7ccf2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode_1af421421f6a04ee7f044a57c041b7ccf2" kindref="member" tooltip="Gp registers indexes that can be used to copy function arguments to a new location in case we are doi...">_stackFrameCopyGpIndex</ref>[6];</highlight></codeline>
<codeline lineno="564"><highlight class="normal">};</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::X86X64CallNode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="570"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>function-call<sp/>node.</highlight></codeline>
<codeline lineno="571" refid="structasmjit_1_1x86x64_1_1X86X64CallNode" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound" tooltip="X86/X64 function-call node.">X86X64CallNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CallNode" kindref="compound" tooltip="Function-call node.">CallNode</ref><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound" tooltip="X86/X64 function-call node.">X86X64CallNode</ref>)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>X86X64CallNode<sp/>instance.</highlight></codeline>
<codeline lineno="579" refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1ad0a4e6429646df3c1544af8cdcf363e3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound" tooltip="X86/X64 function-call node.">X86X64CallNode</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/>compiler,<sp/>const<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>target)<sp/>:<sp/><ref refid="structasmjit_1_1CallNode" kindref="compound" tooltip="Function-call node.">CallNode</ref>(compiler,<sp/>target)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CallNode_1aa2c8a71ac9866e5d5272c5d543a948c5" kindref="member" tooltip="Function declaration.">_decl</ref><sp/>=<sp/>&amp;<ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1aa686f5f373cfd59ba4c8854f700475f2" kindref="member" tooltip="X86 declaration.">_x86Decl</ref>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a39029a28f6a871d1b5bca09a6f77b1e2" kindref="member" tooltip="Mask of all registers actually used to pass function arguments.">_usedArgs</ref>.reset();</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>X86X64CallNode<sp/>instance.</highlight></codeline>
<codeline lineno="585" refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a8769922b53c9c6af14581ae8c242086d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a8769922b53c9c6af14581ae8c242086d" kindref="member" tooltip="Destroy the X86X64CallNode instance.">~X86X64CallNode</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>prototype.</highlight></codeline>
<codeline lineno="592" refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a7485ef36096e880225a64b2c25a3b634" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl" kindref="compound" tooltip="X86 function, including calling convention, arguments and their register indices or stack positions...">X86X64FuncDecl</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a7485ef36096e880225a64b2c25a3b634" kindref="member" tooltip="Get function prototype.">getDecl</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl" kindref="compound" tooltip="X86 function, including calling convention, arguments and their register indices or stack positions...">X86X64FuncDecl</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1aa686f5f373cfd59ba4c8854f700475f2" kindref="member" tooltip="X86 declaration.">_x86Decl</ref>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Prototype]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>function<sp/>prototype.</highlight></codeline>
<codeline lineno="601"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1ae173bd09522689cd98a3dfd8b07c5e31" kindref="member" tooltip="Set function prototype.">setPrototype</ref>(uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref>&amp;<sp/>p);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Arg<sp/>/<sp/>Ret]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>argument<sp/>at<sp/>@a<sp/>i<sp/>to<sp/>@a<sp/>op.</highlight></codeline>
<codeline lineno="608"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a5857c00821fd51bf5df7761ac7dcb281" kindref="member" tooltip="Set argument at i to op.">_setArg</ref>(uint32_t<sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>op);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>return<sp/>at<sp/>@a<sp/>i<sp/>to<sp/>@a<sp/>op.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a4648cf2ff956eed15037f8848075e819" kindref="member" tooltip="Set return at i to op.">_setRet</ref>(uint32_t<sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>op);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>argument<sp/>at<sp/>@a<sp/>i<sp/>to<sp/>@a<sp/>var.</highlight></codeline>
<codeline lineno="613" refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a907a1c46c79e613048cd83fea15f8f68" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a907a1c46c79e613048cd83fea15f8f68" kindref="member" tooltip="Set argument at i to var.">setArg</ref>(uint32_t<sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a5857c00821fd51bf5df7761ac7dcb281" kindref="member" tooltip="Set argument at i to op.">_setArg</ref>(i,<sp/>var);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>argument<sp/>at<sp/>@a<sp/>i<sp/>to<sp/>@a<sp/>imm.</highlight></codeline>
<codeline lineno="615" refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a0ba53ef2cd63d3e6356243edf944e362" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a0ba53ef2cd63d3e6356243edf944e362" kindref="member" tooltip="Set argument at i to imm.">setArg</ref>(uint32_t<sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a5857c00821fd51bf5df7761ac7dcb281" kindref="member" tooltip="Set argument at i to op.">_setArg</ref>(i,<sp/>imm);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>return<sp/>at<sp/>@a<sp/>i<sp/>to<sp/>@a<sp/>var.</highlight></codeline>
<codeline lineno="617" refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a5b5450e31b49f38fd9e6d1e1d36aa5c2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a5b5450e31b49f38fd9e6d1e1d36aa5c2" kindref="member" tooltip="Set return at i to var.">setRet</ref>(uint32_t<sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a4648cf2ff956eed15037f8848075e819" kindref="member" tooltip="Set return at i to op.">_setRet</ref>(i,<sp/>var);<sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>X86<sp/>declaration.</highlight></codeline>
<codeline lineno="624" refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1aa686f5f373cfd59ba4c8854f700475f2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl" kindref="compound" tooltip="X86 function, including calling convention, arguments and their register indices or stack positions...">X86X64FuncDecl</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1aa686f5f373cfd59ba4c8854f700475f2" kindref="member" tooltip="X86 declaration.">_x86Decl</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mask<sp/>of<sp/>all<sp/>registers<sp/>actually<sp/>used<sp/>to<sp/>pass<sp/>function<sp/>arguments.</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>This<sp/>bit-mask<sp/>is<sp/>not<sp/>the<sp/>same<sp/>as<sp/>@c<sp/>X86X64Func::_passed.<sp/>It<sp/>contains</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/>//!<sp/>only<sp/>registers<sp/>actually<sp/>used<sp/>to<sp/>do<sp/>the<sp/>call<sp/>while<sp/>X86X64Func::_passed</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/><sp/>//!<sp/>mask<sp/>contains<sp/>all<sp/>registers<sp/>for<sp/>all<sp/>function<sp/>prototype<sp/>combinations.</highlight></codeline>
<codeline lineno="630" refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a39029a28f6a871d1b5bca09a6f77b1e2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a39029a28f6a871d1b5bca09a6f77b1e2" kindref="member" tooltip="Mask of all registers actually used to pass function arguments.">_usedArgs</ref>;</highlight></codeline>
<codeline lineno="631"><highlight class="normal">};</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Compiler]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="637"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>compiler.</highlight></codeline>
<codeline lineno="638"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="639"><highlight class="comment">//!<sp/>This<sp/>class<sp/>is<sp/>used<sp/>to<sp/>store<sp/>instruction<sp/>stream<sp/>and<sp/>allows<sp/>to<sp/>modify</highlight></codeline>
<codeline lineno="640"><highlight class="comment">//!<sp/>it<sp/>on<sp/>the<sp/>fly.<sp/>It<sp/>uses<sp/>different<sp/>concept<sp/>than<sp/>@c<sp/>asmjit::Assembler<sp/>class</highlight></codeline>
<codeline lineno="641"><highlight class="comment">//!<sp/>and<sp/>in<sp/>fact<sp/>@c<sp/>asmjit::Assembler<sp/>is<sp/>only<sp/>used<sp/>as<sp/>a<sp/>backend.<sp/>Compiler<sp/>never</highlight></codeline>
<codeline lineno="642"><highlight class="comment">//!<sp/>emits<sp/>machine<sp/>code<sp/>and<sp/>each<sp/>instruction<sp/>you<sp/>use<sp/>is<sp/>stored<sp/>to<sp/>instruction</highlight></codeline>
<codeline lineno="643"><highlight class="comment">//!<sp/>array<sp/>instead.<sp/>This<sp/>allows<sp/>to<sp/>modify<sp/>instruction<sp/>stream<sp/>later<sp/>and<sp/>for</highlight></codeline>
<codeline lineno="644"><highlight class="comment">//!<sp/>example<sp/>to<sp/>reorder<sp/>instructions<sp/>to<sp/>make<sp/>better<sp/>performance.</highlight></codeline>
<codeline lineno="645"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="646"><highlight class="comment">//!<sp/>@ref<sp/>asmjit::X86X64Compiler<sp/>moves<sp/>code<sp/>generation<sp/>to<sp/>a<sp/>higher<sp/>level.<sp/>Higher</highlight></codeline>
<codeline lineno="647"><highlight class="comment">//!<sp/>level<sp/>constructs<sp/>allows<sp/>to<sp/>write<sp/>more<sp/>abstract<sp/>and<sp/>extensible<sp/>code<sp/>that</highlight></codeline>
<codeline lineno="648"><highlight class="comment">//!<sp/>is<sp/>not<sp/>possible<sp/>with<sp/>pure<sp/>@c<sp/>asmjit::Assembler<sp/>class.<sp/>Because</highlight></codeline>
<codeline lineno="649"><highlight class="comment">//!<sp/>@c<sp/>asmjit::Compiler<sp/>needs<sp/>to<sp/>create<sp/>many<sp/>objects<sp/>and<sp/>lifetime<sp/>of<sp/>these</highlight></codeline>
<codeline lineno="650"><highlight class="comment">//!<sp/>objects<sp/>is<sp/>small<sp/>(same<sp/>as<sp/>@c<sp/>asmjit::Compiler<sp/>lifetime<sp/>itself)<sp/>it<sp/>uses</highlight></codeline>
<codeline lineno="651"><highlight class="comment">//!<sp/>very<sp/>fast<sp/>memory<sp/>management<sp/>model.<sp/>This<sp/>model<sp/>allows<sp/>to<sp/>create<sp/>object</highlight></codeline>
<codeline lineno="652"><highlight class="comment">//!<sp/>instances<sp/>in<sp/>nearly<sp/>zero<sp/>time<sp/>(compared<sp/>to<sp/>@c<sp/>malloc()<sp/>or<sp/>@c<sp/>new()</highlight></codeline>
<codeline lineno="653"><highlight class="comment">//!<sp/>operators)<sp/>so<sp/>overhead<sp/>by<sp/>creating<sp/>machine<sp/>code<sp/>by<sp/>@c<sp/>asmjit::Compiler</highlight></codeline>
<codeline lineno="654"><highlight class="comment">//!<sp/>is<sp/>minimized.</highlight></codeline>
<codeline lineno="655"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="656"><highlight class="comment">//!<sp/>@section<sp/>asmjit_compiler_introduction<sp/>The<sp/>Story</highlight></codeline>
<codeline lineno="657"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="658"><highlight class="comment">//!<sp/>Before<sp/>telling<sp/>you<sp/>how<sp/>Compiler<sp/>works<sp/>I&apos;d<sp/>like<sp/>to<sp/>write<sp/>a<sp/>story.<sp/>I&apos;d<sp/>like</highlight></codeline>
<codeline lineno="659"><highlight class="comment">//!<sp/>to<sp/>cover<sp/>reasons<sp/>why<sp/>this<sp/>class<sp/>was<sp/>created<sp/>and<sp/>why<sp/>I&apos;m<sp/>recommending<sp/>to<sp/>use</highlight></codeline>
<codeline lineno="660"><highlight class="comment">//!<sp/>it.<sp/>When<sp/>I<sp/>released<sp/>the<sp/>first<sp/>version<sp/>of<sp/>AsmJit<sp/>(0.1)<sp/>it<sp/>was<sp/>a<sp/>toy.<sp/>The</highlight></codeline>
<codeline lineno="661"><highlight class="comment">//!<sp/>first<sp/>function<sp/>I<sp/>wrote<sp/>was<sp/>function<sp/>which<sp/>is<sp/>still<sp/>available<sp/>as<sp/>testjit<sp/>and</highlight></codeline>
<codeline lineno="662"><highlight class="comment">//!<sp/>which<sp/>simply<sp/>returns<sp/>1024.<sp/>The<sp/>reason<sp/>why<sp/>function<sp/>works<sp/>for<sp/>both<sp/>32-bit/</highlight></codeline>
<codeline lineno="663"><highlight class="comment">//!<sp/>64-bit<sp/>mode<sp/>and<sp/>for<sp/>Windows/Unix<sp/>specific<sp/>calling<sp/>conventions<sp/>is<sp/>luck,<sp/>no</highlight></codeline>
<codeline lineno="664"><highlight class="comment">//!<sp/>arguments<sp/>usage<sp/>and<sp/>no<sp/>registers<sp/>usage<sp/>except<sp/>returning<sp/>value<sp/>in<sp/>EAX/RAX.</highlight></codeline>
<codeline lineno="665"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="666"><highlight class="comment">//!<sp/>Then<sp/>I<sp/>started<sp/>a<sp/>project<sp/>called<sp/>BlitJit<sp/>which<sp/>was<sp/>targetted<sp/>to<sp/>generating</highlight></codeline>
<codeline lineno="667"><highlight class="comment">//!<sp/>JIT<sp/>code<sp/>for<sp/>computer<sp/>graphics.<sp/>After<sp/>writing<sp/>some<sp/>lines<sp/>I<sp/>decided<sp/>that<sp/>I</highlight></codeline>
<codeline lineno="668"><highlight class="comment">//!<sp/>can&apos;t<sp/>join<sp/>pieces<sp/>of<sp/>code<sp/>together<sp/>without<sp/>abstraction,<sp/>should<sp/>be</highlight></codeline>
<codeline lineno="669"><highlight class="comment">//!<sp/>pixels<sp/>source<sp/>pointer<sp/>in<sp/>ESI/RSI<sp/>or<sp/>EDI/RDI<sp/>or<sp/>it&apos;s<sp/>completelly</highlight></codeline>
<codeline lineno="670"><highlight class="comment">//!<sp/>irrellevant?<sp/>What<sp/>about<sp/>destination<sp/>pointer<sp/>and<sp/>SSE2<sp/>register<sp/>for<sp/>reading</highlight></codeline>
<codeline lineno="671"><highlight class="comment">//!<sp/>input<sp/>pixels?<sp/>The<sp/>simple<sp/>answer<sp/>might<sp/>be<sp/>&quot;just<sp/>pick<sp/>some<sp/>one<sp/>and<sp/>use<sp/>it&quot;.</highlight></codeline>
<codeline lineno="672"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="673"><highlight class="comment">//!<sp/>Another<sp/>reason<sp/>for<sp/>abstraction<sp/>is<sp/>function<sp/>calling-conventions.<sp/>It&apos;s<sp/>really</highlight></codeline>
<codeline lineno="674"><highlight class="comment">//!<sp/>not<sp/>easy<sp/>to<sp/>write<sp/>assembler<sp/>code<sp/>for<sp/>32-bit<sp/>and<sp/>64-bit<sp/>platform<sp/>supporting</highlight></codeline>
<codeline lineno="675"><highlight class="comment">//!<sp/>three<sp/>calling<sp/>conventions<sp/>(32-bit<sp/>is<sp/>similar<sp/>between<sp/>Windows<sp/>and<sp/>Unix,<sp/>but</highlight></codeline>
<codeline lineno="676"><highlight class="comment">//!<sp/>64-bit<sp/>calling<sp/>conventions<sp/>are<sp/>different).</highlight></codeline>
<codeline lineno="677"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="678"><highlight class="comment">//!<sp/>At<sp/>this<sp/>time<sp/>I<sp/>realized<sp/>that<sp/>I<sp/>can&apos;t<sp/>write<sp/>code<sp/>which<sp/>uses<sp/>named<sp/>registers,</highlight></codeline>
<codeline lineno="679"><highlight class="comment">//!<sp/>I<sp/>need<sp/>to<sp/>abstract<sp/>it.<sp/>In<sp/>most<sp/>cases<sp/>you<sp/>don&apos;t<sp/>need<sp/>specific<sp/>register,<sp/>you</highlight></codeline>
<codeline lineno="680"><highlight class="comment">//!<sp/>need<sp/>to<sp/>emit<sp/>instruction<sp/>that<sp/>does<sp/>something<sp/>with<sp/>&apos;virtual&apos;<sp/>register(s),</highlight></codeline>
<codeline lineno="681"><highlight class="comment">//!<sp/>memory,<sp/>immediate<sp/>or<sp/>label.</highlight></codeline>
<codeline lineno="682"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="683"><highlight class="comment">//!<sp/>The<sp/>first<sp/>version<sp/>of<sp/>AsmJit<sp/>with<sp/>Compiler<sp/>was<sp/>0.5<sp/>(or<sp/>0.6?,<sp/>can&apos;t<sp/>remember).</highlight></codeline>
<codeline lineno="684"><highlight class="comment">//!<sp/>There<sp/>was<sp/>support<sp/>for<sp/>32-bit<sp/>and<sp/>64-bit<sp/>mode,<sp/>function<sp/>calling<sp/>conventions,</highlight></codeline>
<codeline lineno="685"><highlight class="comment">//!<sp/>but<sp/>when<sp/>emitting<sp/>instructions<sp/>the<sp/>developer<sp/>needed<sp/>to<sp/>decide<sp/>which</highlight></codeline>
<codeline lineno="686"><highlight class="comment">//!<sp/>registers<sp/>are<sp/>changed,<sp/>which<sp/>are<sp/>only<sp/>read<sp/>or<sp/>completely<sp/>overwritten.<sp/>This</highlight></codeline>
<codeline lineno="687"><highlight class="comment">//!<sp/>model<sp/>helped<sp/>a<sp/>lot<sp/>when<sp/>generating<sp/>code,<sp/>especially<sp/>when<sp/>joining<sp/>more</highlight></codeline>
<codeline lineno="688"><highlight class="comment">//!<sp/>code-sections<sp/>together,<sp/>but<sp/>there<sp/>was<sp/>also<sp/>small<sp/>possibility<sp/>for<sp/>mistakes.</highlight></codeline>
<codeline lineno="689"><highlight class="comment">//!<sp/>Simply<sp/>the<sp/>first<sp/>version<sp/>of<sp/>Compiler<sp/>was<sp/>great<sp/>improvement<sp/>over<sp/>low-level</highlight></codeline>
<codeline lineno="690"><highlight class="comment">//!<sp/>Assembler<sp/>class,<sp/>but<sp/>the<sp/>API<sp/>design<sp/>wasn&apos;t<sp/>perfect.</highlight></codeline>
<codeline lineno="691"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="692"><highlight class="comment">//!<sp/>The<sp/>second<sp/>version<sp/>of<sp/>Compiler,<sp/>completelly<sp/>rewritten<sp/>and<sp/>based<sp/>on</highlight></codeline>
<codeline lineno="693"><highlight class="comment">//!<sp/>different<sp/>goals,<sp/>is<sp/>part<sp/>of<sp/>AsmJit<sp/>starting<sp/>at<sp/>version<sp/>1.0.<sp/>This<sp/>version</highlight></codeline>
<codeline lineno="694"><highlight class="comment">//!<sp/>was<sp/>designed<sp/>after<sp/>the<sp/>first<sp/>one<sp/>and<sp/>it<sp/>contains<sp/>serious<sp/>improvements<sp/>over</highlight></codeline>
<codeline lineno="695"><highlight class="comment">//!<sp/>the<sp/>old<sp/>one.<sp/>The<sp/>first<sp/>improvement<sp/>is<sp/>that<sp/>you<sp/>just<sp/>use<sp/>instructions<sp/>with</highlight></codeline>
<codeline lineno="696"><highlight class="comment">//!<sp/>virtual<sp/>registers<sp/>-<sp/>called<sp/>variables.<sp/>When<sp/>using<sp/>compiler<sp/>there<sp/>is<sp/>no<sp/>way</highlight></codeline>
<codeline lineno="697"><highlight class="comment">//!<sp/>to<sp/>use<sp/>native<sp/>registers,<sp/>there<sp/>are<sp/>variables<sp/>instead.<sp/>AsmJit<sp/>is<sp/>smarter</highlight></codeline>
<codeline lineno="698"><highlight class="comment">//!<sp/>than<sp/>before<sp/>and<sp/>it<sp/>knows<sp/>which<sp/>register<sp/>is<sp/>needed<sp/>only<sp/>for<sp/>read<sp/>(r),</highlight></codeline>
<codeline lineno="699"><highlight class="comment">//!<sp/>read/write<sp/>(w)<sp/>or<sp/>overwrite<sp/>(x).<sp/>Supported<sp/>are<sp/>also<sp/>instructions<sp/>which</highlight></codeline>
<codeline lineno="700"><highlight class="comment">//!<sp/>are<sp/>using<sp/>some<sp/>registers<sp/>in<sp/>implicit<sp/>way<sp/>(these<sp/>registers<sp/>are<sp/>not<sp/>part<sp/>of</highlight></codeline>
<codeline lineno="701"><highlight class="comment">//!<sp/>instruction<sp/>definition<sp/>in<sp/>string<sp/>form).<sp/>For<sp/>example<sp/>to<sp/>use<sp/>CPUID<sp/>instruction</highlight></codeline>
<codeline lineno="702"><highlight class="comment">//!<sp/>you<sp/>must<sp/>give<sp/>it<sp/>four<sp/>variables<sp/>which<sp/>will<sp/>be<sp/>automatically<sp/>allocated<sp/>in</highlight></codeline>
<codeline lineno="703"><highlight class="comment">//!<sp/>input/output<sp/>registers<sp/>(EAX,<sp/>EBX,<sp/>ECX,<sp/>EDX).</highlight></codeline>
<codeline lineno="704"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="705"><highlight class="comment">//!<sp/>Another<sp/>improvement<sp/>is<sp/>algorithm<sp/>used<sp/>by<sp/>a<sp/>register<sp/>allocator.<sp/>In<sp/>first</highlight></codeline>
<codeline lineno="706"><highlight class="comment">//!<sp/>version<sp/>the<sp/>registers<sp/>were<sp/>allocated<sp/>when<sp/>creating<sp/>instruction<sp/>stream.<sp/>In</highlight></codeline>
<codeline lineno="707"><highlight class="comment">//!<sp/>new<sp/>version<sp/>registers<sp/>are<sp/>allocated<sp/>after<sp/>calling<sp/>@c<sp/>Compiler::make(),</highlight></codeline>
<codeline lineno="708"><highlight class="comment">//!<sp/>thus<sp/>register<sp/>allocator<sp/>has<sp/>information<sp/>about<sp/>scope<sp/>of<sp/>all<sp/>variables<sp/>and</highlight></codeline>
<codeline lineno="709"><highlight class="comment">//!<sp/>statistics<sp/>of<sp/>their<sp/>usage.<sp/>The<sp/>algorithm<sp/>to<sp/>allocate<sp/>registers<sp/>is<sp/>very</highlight></codeline>
<codeline lineno="710"><highlight class="comment">//!<sp/>simple<sp/>and<sp/>it&apos;s<sp/>always<sp/>called<sp/>as<sp/>a<sp/>&apos;linear<sp/>scan<sp/>register<sp/>allocator&apos;.<sp/>When</highlight></codeline>
<codeline lineno="711"><highlight class="comment">//!<sp/>you<sp/>get<sp/>out<sp/>of<sp/>registers<sp/>the<sp/>all<sp/>possible<sp/>variables<sp/>are<sp/>scored<sp/>and<sp/>the<sp/>worst</highlight></codeline>
<codeline lineno="712"><highlight class="comment">//!<sp/>is<sp/>spilled.<sp/>Of<sp/>course<sp/>algorithm<sp/>ignores<sp/>the<sp/>variables<sp/>used<sp/>for<sp/>current</highlight></codeline>
<codeline lineno="713"><highlight class="comment">//!<sp/>instruction.</highlight></codeline>
<codeline lineno="714"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="715"><highlight class="comment">//!<sp/>In<sp/>addition,<sp/>because<sp/>registers<sp/>are<sp/>allocated<sp/>after<sp/>the<sp/>code<sp/>stream<sp/>is</highlight></codeline>
<codeline lineno="716"><highlight class="comment">//!<sp/>generated,<sp/>the<sp/>state<sp/>switches<sp/>between<sp/>jumps<sp/>are<sp/>handled<sp/>by<sp/>Compiler<sp/>too.</highlight></codeline>
<codeline lineno="717"><highlight class="comment">//!<sp/>You<sp/>don&apos;t<sp/>need<sp/>to<sp/>worry<sp/>about<sp/>jumps,<sp/>compiler<sp/>always<sp/>do<sp/>this<sp/>dirty<sp/>work</highlight></codeline>
<codeline lineno="718"><highlight class="comment">//!<sp/>for<sp/>you.</highlight></codeline>
<codeline lineno="719"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="720"><highlight class="comment">//!<sp/>The<sp/>nearly<sp/>last<sp/>thing<sp/>I&apos;d<sp/>like<sp/>to<sp/>present<sp/>is<sp/>calling<sp/>other<sp/>functions<sp/>from</highlight></codeline>
<codeline lineno="721"><highlight class="comment">//!<sp/>the<sp/>generated<sp/>code.<sp/>AsmJit<sp/>uses<sp/>a<sp/>@c<sp/>FuncPrototype<sp/>class<sp/>to<sp/>hold<sp/>function</highlight></codeline>
<codeline lineno="722"><highlight class="comment">//!<sp/>parameters,<sp/>their<sp/>position<sp/>in<sp/>stack<sp/>(or<sp/>register<sp/>index)<sp/>and<sp/>return<sp/>value.</highlight></codeline>
<codeline lineno="723"><highlight class="comment">//!<sp/>This<sp/>class<sp/>is<sp/>used<sp/>internally,<sp/>but<sp/>it<sp/>can<sp/>be<sp/>used<sp/>to<sp/>create<sp/>your<sp/>own</highlight></codeline>
<codeline lineno="724"><highlight class="comment">//!<sp/>function<sp/>calling-convention.<sp/>All<sp/>standard<sp/>function<sp/>calling<sp/>conventions<sp/>are</highlight></codeline>
<codeline lineno="725"><highlight class="comment">//!<sp/>implemented.</highlight></codeline>
<codeline lineno="726"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="727"><highlight class="comment">//!<sp/>Please<sp/>enjoy<sp/>the<sp/>new<sp/>version<sp/>of<sp/>Compiler,<sp/>it<sp/>was<sp/>created<sp/>for<sp/>writing<sp/>a</highlight></codeline>
<codeline lineno="728"><highlight class="comment">//!<sp/>low-level<sp/>code<sp/>using<sp/>high-level<sp/>API,<sp/>leaving<sp/>developer<sp/>to<sp/>concentrate<sp/>on</highlight></codeline>
<codeline lineno="729"><highlight class="comment">//!<sp/>real<sp/>problems<sp/>and<sp/>not<sp/>to<sp/>solving<sp/>a<sp/>register<sp/>puzzle.</highlight></codeline>
<codeline lineno="730"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="731"><highlight class="comment">//!<sp/>@section<sp/>asmjit_compiler_codegeneration<sp/>Code<sp/>Generation</highlight></codeline>
<codeline lineno="732"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="733"><highlight class="comment">//!<sp/>First<sp/>that<sp/>is<sp/>needed<sp/>to<sp/>know<sp/>about<sp/>compiler<sp/>is<sp/>that<sp/>compiler<sp/>never<sp/>emits</highlight></codeline>
<codeline lineno="734"><highlight class="comment">//!<sp/>machine<sp/>code.<sp/>It&apos;s<sp/>used<sp/>as<sp/>a<sp/>middleware<sp/>between<sp/>@c<sp/>asmjit::Assembler<sp/>and</highlight></codeline>
<codeline lineno="735"><highlight class="comment">//!<sp/>your<sp/>code.<sp/>There<sp/>is<sp/>also<sp/>convenience<sp/>method<sp/>@c<sp/>make()<sp/>that<sp/>allows<sp/>to</highlight></codeline>
<codeline lineno="736"><highlight class="comment">//!<sp/>generate<sp/>machine<sp/>code<sp/>directly<sp/>without<sp/>creating<sp/>@c<sp/>asmjit::Assembler</highlight></codeline>
<codeline lineno="737"><highlight class="comment">//!<sp/>instance.</highlight></codeline>
<codeline lineno="738"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="739"><highlight class="comment">//!<sp/>Comparison<sp/>of<sp/>generating<sp/>machine<sp/>code<sp/>through<sp/>@c<sp/>Assembler<sp/>and<sp/>directly</highlight></codeline>
<codeline lineno="740"><highlight class="comment">//!<sp/>by<sp/>@c<sp/>Compiler:</highlight></codeline>
<codeline lineno="741"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="742"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="743"><highlight class="comment">//!<sp/>//<sp/>Assembler<sp/>instance<sp/>is<sp/>low<sp/>level<sp/>code<sp/>generation<sp/>class<sp/>that<sp/>emits</highlight></codeline>
<codeline lineno="744"><highlight class="comment">//!<sp/>//<sp/>machine<sp/>code.</highlight></codeline>
<codeline lineno="745"><highlight class="comment">//!<sp/>Assembler<sp/>a;</highlight></codeline>
<codeline lineno="746"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="747"><highlight class="comment">//!<sp/>//<sp/>Compiler<sp/>instance<sp/>is<sp/>high<sp/>level<sp/>code<sp/>generation<sp/>class<sp/>that<sp/>stores<sp/>all</highlight></codeline>
<codeline lineno="748"><highlight class="comment">//!<sp/>//<sp/>instructions<sp/>in<sp/>internal<sp/>representation.</highlight></codeline>
<codeline lineno="749"><highlight class="comment">//!<sp/>Compiler<sp/>c;</highlight></codeline>
<codeline lineno="750"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="751"><highlight class="comment">//!<sp/>//<sp/>...<sp/>put<sp/>your<sp/>code<sp/>here<sp/>...</highlight></codeline>
<codeline lineno="752"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="753"><highlight class="comment">//!<sp/>//<sp/>Final<sp/>step<sp/>-<sp/>generate<sp/>code.<sp/>asmjit::Compiler::serialize()<sp/>will<sp/>send<sp/>all</highlight></codeline>
<codeline lineno="754"><highlight class="comment">//!<sp/>//<sp/>instructions<sp/>into<sp/>Assembler<sp/>and<sp/>this<sp/>ensures<sp/>generating<sp/>real<sp/>machine<sp/>code.</highlight></codeline>
<codeline lineno="755"><highlight class="comment">//!<sp/>c.serialize(a);</highlight></codeline>
<codeline lineno="756"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="757"><highlight class="comment">//!<sp/>//<sp/>Your<sp/>function</highlight></codeline>
<codeline lineno="758"><highlight class="comment">//!<sp/>void*<sp/>fn<sp/>=<sp/>a.make();</highlight></codeline>
<codeline lineno="759"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="760"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="761"><highlight class="comment">//!<sp/>Example<sp/>how<sp/>to<sp/>generate<sp/>machine<sp/>code<sp/>using<sp/>only<sp/>@c<sp/>Compiler<sp/>(preferred):</highlight></codeline>
<codeline lineno="762"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="763"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="764"><highlight class="comment">//!<sp/>//<sp/>Compiler<sp/>instance<sp/>is<sp/>enough.</highlight></codeline>
<codeline lineno="765"><highlight class="comment">//!<sp/>Compiler<sp/>c;</highlight></codeline>
<codeline lineno="766"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="767"><highlight class="comment">//!<sp/>//<sp/>...<sp/>put<sp/>your<sp/>code<sp/>here<sp/>...</highlight></codeline>
<codeline lineno="768"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="769"><highlight class="comment">//!<sp/>//<sp/>Your<sp/>function</highlight></codeline>
<codeline lineno="770"><highlight class="comment">//!<sp/>void*<sp/>fn<sp/>=<sp/>c.make();</highlight></codeline>
<codeline lineno="771"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="772"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="773"><highlight class="comment">//!<sp/>You<sp/>can<sp/>see<sp/>that<sp/>there<sp/>is<sp/>@c<sp/>asmjit::Compiler::serialize()<sp/>function<sp/>that</highlight></codeline>
<codeline lineno="774"><highlight class="comment">//!<sp/>emits<sp/>instructions<sp/>into<sp/>@c<sp/>asmjit::Assembler().<sp/>This<sp/>layered<sp/>architecture</highlight></codeline>
<codeline lineno="775"><highlight class="comment">//!<sp/>means<sp/>that<sp/>each<sp/>class<sp/>is<sp/>used<sp/>for<sp/>something<sp/>different<sp/>and<sp/>there<sp/>is<sp/>no<sp/>code</highlight></codeline>
<codeline lineno="776"><highlight class="comment">//!<sp/>duplication.<sp/>For<sp/>convenience<sp/>there<sp/>is<sp/>also<sp/>@c<sp/>asmjit::Compiler::make()</highlight></codeline>
<codeline lineno="777"><highlight class="comment">//!<sp/>method<sp/>that<sp/>can<sp/>create<sp/>your<sp/>function<sp/>using<sp/>@c<sp/>asmjit::Assembler,<sp/>but</highlight></codeline>
<codeline lineno="778"><highlight class="comment">//!<sp/>internally<sp/>(this<sp/>is<sp/>preferred<sp/>bahavior<sp/>when<sp/>using<sp/>@c<sp/>asmjit::Compiler).</highlight></codeline>
<codeline lineno="779"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="780"><highlight class="comment">//!<sp/>The<sp/>@c<sp/>make()<sp/>method<sp/>allocates<sp/>memory<sp/>using<sp/>@ref<sp/>BaseRuntime<sp/>instance<sp/>passed</highlight></codeline>
<codeline lineno="781"><highlight class="comment">//!<sp/>into<sp/>the<sp/>@c<sp/>Compiler<sp/>constructor.<sp/>If<sp/>code<sp/>generator<sp/>is<sp/>used<sp/>to<sp/>create<sp/>JIT</highlight></codeline>
<codeline lineno="782"><highlight class="comment">//!<sp/>function<sp/>then<sp/>virtual<sp/>memory<sp/>allocated<sp/>by<sp/>@c<sp/>MemoryManager<sp/>is<sp/>used.<sp/>To<sp/>get</highlight></codeline>
<codeline lineno="783"><highlight class="comment">//!<sp/>global<sp/>memory<sp/>manager<sp/>use<sp/>@c<sp/>MemoryManager::getGlobal().</highlight></codeline>
<codeline lineno="784"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="785"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="786"><highlight class="comment">//!<sp/>//<sp/>Compiler<sp/>instance<sp/>is<sp/>enough.</highlight></codeline>
<codeline lineno="787"><highlight class="comment">//!<sp/>Compiler<sp/>c;</highlight></codeline>
<codeline lineno="788"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="789"><highlight class="comment">//!<sp/>//<sp/>...<sp/>put<sp/>your<sp/>code<sp/>using<sp/>Compiler<sp/>instance<sp/>...</highlight></codeline>
<codeline lineno="790"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="791"><highlight class="comment">//!<sp/>//<sp/>Your<sp/>function</highlight></codeline>
<codeline lineno="792"><highlight class="comment">//!<sp/>void*<sp/>fn<sp/>=<sp/>c.make();</highlight></codeline>
<codeline lineno="793"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="794"><highlight class="comment">//!<sp/>//<sp/>Free<sp/>it<sp/>if<sp/>you<sp/>don&apos;t<sp/>want<sp/>it<sp/>anymore</highlight></codeline>
<codeline lineno="795"><highlight class="comment">//!<sp/>//<sp/>(using<sp/>global<sp/>memory<sp/>manager<sp/>instance)</highlight></codeline>
<codeline lineno="796"><highlight class="comment">//!<sp/>MemoryManager::getGlobal()-&gt;free(fn);</highlight></codeline>
<codeline lineno="797"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="798"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="799"><highlight class="comment">//!<sp/>@section<sp/>asmjit_compiler_Functions<sp/>Functions</highlight></codeline>
<codeline lineno="800"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="801"><highlight class="comment">//!<sp/>To<sp/>build<sp/>functions<sp/>with<sp/>@c<sp/>Compiler,<sp/>see<sp/>@c<sp/>asmjit::Compiler::addFunc()</highlight></codeline>
<codeline lineno="802"><highlight class="comment">//!<sp/>method.</highlight></codeline>
<codeline lineno="803"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="804"><highlight class="comment">//!<sp/>@section<sp/>asmjit_compiler_Variables<sp/>Variables</highlight></codeline>
<codeline lineno="805"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="806"><highlight class="comment">//!<sp/>Compiler<sp/>is<sp/>able<sp/>to<sp/>manage<sp/>variables<sp/>and<sp/>function<sp/>arguments.<sp/>Function</highlight></codeline>
<codeline lineno="807"><highlight class="comment">//!<sp/>arguments<sp/>are<sp/>moved<sp/>to<sp/>variables<sp/>by<sp/>using<sp/>@c<sp/>setArg()<sp/>method,<sp/>where<sp/>the</highlight></codeline>
<codeline lineno="808"><highlight class="comment">//!<sp/>first<sp/>parameter<sp/>is<sp/>argument<sp/>index<sp/>and<sp/>second<sp/>parameter<sp/>is<sp/>the<sp/>variable</highlight></codeline>
<codeline lineno="809"><highlight class="comment">//!<sp/>instance.<sp/>To<sp/>declare<sp/>variable<sp/>use<sp/>@c<sp/>newGpVar(),<sp/>@c<sp/>newMmVar()<sp/>and<sp/>@c</highlight></codeline>
<codeline lineno="810"><highlight class="comment">//!<sp/>newXmmVar()<sp/>methods.<sp/>The<sp/>@c<sp/>newXXX()<sp/>methods<sp/>accept<sp/>also<sp/>parameter</highlight></codeline>
<codeline lineno="811"><highlight class="comment">//!<sp/>describing<sp/>the<sp/>variable<sp/>type.<sp/>For<sp/>example<sp/>the<sp/>@c<sp/>newGpVar()<sp/>method<sp/>always</highlight></codeline>
<codeline lineno="812"><highlight class="comment">//!<sp/>creates<sp/>variable<sp/>which<sp/>size<sp/>matches<sp/>the<sp/>target<sp/>architecture<sp/>size<sp/>(for</highlight></codeline>
<codeline lineno="813"><highlight class="comment">//!<sp/>32-bit<sp/>target<sp/>the<sp/>32-bit<sp/>variable<sp/>is<sp/>created,<sp/>for<sp/>64-bit<sp/>target<sp/>the</highlight></codeline>
<codeline lineno="814"><highlight class="comment">//!<sp/>variable<sp/>size<sp/>is<sp/>64-bit).<sp/>To<sp/>override<sp/>this<sp/>behavior<sp/>the<sp/>variable<sp/>type</highlight></codeline>
<codeline lineno="815"><highlight class="comment">//!<sp/>must<sp/>be<sp/>specified.</highlight></codeline>
<codeline lineno="816"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="817"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="818"><highlight class="comment">//!<sp/>//<sp/>Compiler<sp/>and<sp/>function<sp/>declaration<sp/>-<sp/>void<sp/>f(int*);</highlight></codeline>
<codeline lineno="819"><highlight class="comment">//!<sp/>Compiler<sp/>c;</highlight></codeline>
<codeline lineno="820"><highlight class="comment">//!<sp/>GpVar<sp/>a0(c,<sp/>kVarTypeIntPtr);</highlight></codeline>
<codeline lineno="821"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="822"><highlight class="comment">//!<sp/>c.addFunc(kFuncConvHost,<sp/>BuildFunction1&lt;FnVoid,<sp/>int*&gt;());</highlight></codeline>
<codeline lineno="823"><highlight class="comment">//!<sp/>c.setArg(0,<sp/>a0);</highlight></codeline>
<codeline lineno="824"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="825"><highlight class="comment">//!<sp/>//<sp/>Create<sp/>your<sp/>variables.</highlight></codeline>
<codeline lineno="826"><highlight class="comment">//!<sp/>GpVar<sp/>x0(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="827"><highlight class="comment">//!<sp/>GpVar<sp/>x1(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="828"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="829"><highlight class="comment">//!<sp/>//<sp/>Init<sp/>your<sp/>variables.</highlight></codeline>
<codeline lineno="830"><highlight class="comment">//!<sp/>c.mov(x0,<sp/>1);</highlight></codeline>
<codeline lineno="831"><highlight class="comment">//!<sp/>c.mov(x1,<sp/>2);</highlight></codeline>
<codeline lineno="832"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="833"><highlight class="comment">//!<sp/>//<sp/>...<sp/>your<sp/>code<sp/>...</highlight></codeline>
<codeline lineno="834"><highlight class="comment">//!<sp/>c.add(x0,<sp/>x1);</highlight></codeline>
<codeline lineno="835"><highlight class="comment">//!<sp/>//<sp/>...<sp/>your<sp/>code<sp/>...</highlight></codeline>
<codeline lineno="836"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="837"><highlight class="comment">//!<sp/>//<sp/>Store<sp/>result<sp/>to<sp/>a<sp/>given<sp/>pointer<sp/>in<sp/>first<sp/>argument</highlight></codeline>
<codeline lineno="838"><highlight class="comment">//!<sp/>c.mov(dword_ptr(a0),<sp/>x0);</highlight></codeline>
<codeline lineno="839"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="840"><highlight class="comment">//!<sp/>//<sp/>End<sp/>of<sp/>function<sp/>body.</highlight></codeline>
<codeline lineno="841"><highlight class="comment">//!<sp/>c.endFunc();</highlight></codeline>
<codeline lineno="842"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="843"><highlight class="comment">//!<sp/>//<sp/>Make<sp/>the<sp/>function.</highlight></codeline>
<codeline lineno="844"><highlight class="comment">//!<sp/>typedef<sp/>void<sp/>(*MyFunc)(int*);</highlight></codeline>
<codeline lineno="845"><highlight class="comment">//!<sp/>MyFunc<sp/>func<sp/>=<sp/>asmjit_cast&lt;MyFunc&gt;(c.make());</highlight></codeline>
<codeline lineno="846"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="847"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="848"><highlight class="comment">//!<sp/>This<sp/>code<sp/>snipped<sp/>needs<sp/>to<sp/>be<sp/>explained.<sp/>You<sp/>can<sp/>see<sp/>that<sp/>there<sp/>are<sp/>more</highlight></codeline>
<codeline lineno="849"><highlight class="comment">//!<sp/>variable<sp/>types<sp/>that<sp/>can<sp/>be<sp/>used<sp/>by<sp/>@c<sp/>Compiler.<sp/>Most<sp/>useful<sp/>variables<sp/>can</highlight></codeline>
<codeline lineno="850"><highlight class="comment">//!<sp/>be<sp/>allocated<sp/>using<sp/>general<sp/>purpose<sp/>registers<sp/>(@c<sp/>GpVar),<sp/>MMX<sp/>registers</highlight></codeline>
<codeline lineno="851"><highlight class="comment">//!<sp/>(@c<sp/>MmVar)<sp/>or<sp/>SSE/SSE2<sp/>registers<sp/>(@c<sp/>XmmVar).</highlight></codeline>
<codeline lineno="852"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="853"><highlight class="comment">//!<sp/>X86/X64<sp/>variable<sp/>types:</highlight></codeline>
<codeline lineno="854"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="855"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeInt8<sp/><sp/><sp/>-<sp/>Signed<sp/>8-bit<sp/>integer,<sp/>mapped<sp/>to<sp/>Gpd<sp/>register<sp/>(eax,<sp/>ebx,<sp/>...).</highlight></codeline>
<codeline lineno="856"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeUInt8<sp/><sp/>-<sp/>Unsigned<sp/>8-bit<sp/>integer,<sp/>mapped<sp/>to<sp/>Gpd<sp/>register<sp/>(eax,<sp/>ebx,<sp/>...).</highlight></codeline>
<codeline lineno="857"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="858"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeInt16<sp/><sp/><sp/>-<sp/>Signed<sp/>16-bit<sp/>integer,<sp/>mapped<sp/>to<sp/>Gpd<sp/>register<sp/>(eax,<sp/>ebx,<sp/>...).</highlight></codeline>
<codeline lineno="859"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeUInt16<sp/><sp/>-<sp/>Unsigned<sp/>16-bit<sp/>integer,<sp/>mapped<sp/>to<sp/>Gpd<sp/>register<sp/>(eax,<sp/>ebx,<sp/>...).</highlight></codeline>
<codeline lineno="860"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="861"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeInt32<sp/><sp/><sp/>-<sp/>Signed<sp/>32-bit<sp/>integer,<sp/>mapped<sp/>to<sp/>Gpd<sp/>register<sp/>(eax,<sp/>ebx,<sp/>...).</highlight></codeline>
<codeline lineno="862"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeUInt32<sp/><sp/>-<sp/>Unsigned<sp/>32-bit<sp/>integer,<sp/>mapped<sp/>to<sp/>Gpd<sp/>register<sp/>(eax,<sp/>ebx,<sp/>...).</highlight></codeline>
<codeline lineno="863"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="864"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeInt64<sp/><sp/><sp/>-<sp/>Signed<sp/>64-bit<sp/>integer,<sp/>mapped<sp/>to<sp/>Gpq<sp/>register<sp/>(rax,<sp/>rbx,<sp/>...).</highlight></codeline>
<codeline lineno="865"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeUInt64<sp/><sp/>-<sp/>Unsigned<sp/>64-bit<sp/>integer,<sp/>mapped<sp/>to<sp/>Gpq<sp/>register<sp/>(rax,<sp/>rbx,<sp/>...).</highlight></codeline>
<codeline lineno="866"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="867"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeIntPtr<sp/><sp/>-<sp/>intptr_t,<sp/>mapped<sp/>to<sp/>Gpd/Gpq<sp/>register;<sp/>depends<sp/>on<sp/>target,<sp/>not<sp/>host!</highlight></codeline>
<codeline lineno="868"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeUIntPtr<sp/>-<sp/>uintptr_t,<sp/>mapped<sp/>to<sp/>Gpd/Gpq<sp/>register;<sp/>depends<sp/>on<sp/>target,<sp/>not<sp/>host!</highlight></codeline>
<codeline lineno="869"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="870"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeFp32<sp/><sp/><sp/><sp/>-<sp/>32-bit<sp/>floating<sp/>point<sp/>register<sp/>(fp0,<sp/>fp1,<sp/>...).</highlight></codeline>
<codeline lineno="871"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeFp64<sp/><sp/><sp/><sp/>-<sp/>64-bit<sp/>floating<sp/>point<sp/>register<sp/>(fp0,<sp/>fp1,<sp/>...).</highlight></codeline>
<codeline lineno="872"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="873"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeMm<sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>64-bit<sp/>Mm<sp/>register<sp/>(mm0,<sp/>mm1,<sp/>...).</highlight></codeline>
<codeline lineno="874"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="875"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeXmm<sp/><sp/><sp/><sp/><sp/>-<sp/>128-bit<sp/>SSE<sp/>register.</highlight></codeline>
<codeline lineno="876"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeXmmSs<sp/><sp/><sp/>-<sp/>128-bit<sp/>SSE<sp/>register<sp/>that<sp/>contains<sp/>a<sp/>scalar<sp/>32-bit<sp/>SP-FP<sp/>value.</highlight></codeline>
<codeline lineno="877"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeXmmSd<sp/><sp/><sp/>-<sp/>128-bit<sp/>SSE<sp/>register<sp/>that<sp/>contains<sp/>a<sp/>scalar<sp/>64-bit<sp/>DP-FP<sp/>value.</highlight></codeline>
<codeline lineno="878"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeXmmPs<sp/><sp/><sp/>-<sp/>128-bit<sp/>SSE<sp/>register<sp/>that<sp/>contains<sp/>4<sp/>packed<sp/>32-bit<sp/>SP-FP<sp/>values.</highlight></codeline>
<codeline lineno="879"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeXmmPd<sp/><sp/><sp/>-<sp/>128-bit<sp/>SSE<sp/>register<sp/>that<sp/>contains<sp/>2<sp/>packed<sp/>64-bit<sp/>DP-FP<sp/>values.</highlight></codeline>
<codeline lineno="880"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="881"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeYmm<sp/><sp/><sp/><sp/><sp/>-<sp/>256-bit<sp/>AVX<sp/>register.</highlight></codeline>
<codeline lineno="882"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeYmmPs<sp/><sp/><sp/>-<sp/>256-bit<sp/>AVX<sp/>register<sp/>that<sp/>contains<sp/>4<sp/>packed<sp/>32-bit<sp/>SP-FP<sp/>values.</highlight></codeline>
<codeline lineno="883"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeYmmPd<sp/><sp/><sp/>-<sp/>256-bit<sp/>AVX<sp/>register<sp/>that<sp/>contains<sp/>2<sp/>packed<sp/>64-bit<sp/>DP-FP<sp/>values.</highlight></codeline>
<codeline lineno="884"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="885"><highlight class="comment">//!<sp/>Variable<sp/>states:</highlight></codeline>
<codeline lineno="886"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="887"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarStateUnused<sp/>-<sp/>State<sp/>that<sp/>is<sp/>assigned<sp/>to<sp/>newly<sp/>created</highlight></codeline>
<codeline lineno="888"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/><sp/>variables<sp/>or<sp/>to<sp/>not<sp/>used<sp/>variables<sp/>(dereferenced<sp/>to<sp/>zero).</highlight></codeline>
<codeline lineno="889"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarStateReg<sp/><sp/><sp/><sp/>-<sp/>State<sp/>that<sp/>means<sp/>that<sp/>variable<sp/>is<sp/>currently</highlight></codeline>
<codeline lineno="890"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>in<sp/>register.</highlight></codeline>
<codeline lineno="891"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarStateMem<sp/><sp/><sp/><sp/>-<sp/>State<sp/>that<sp/>means<sp/>that<sp/>variable<sp/>is<sp/>currently</highlight></codeline>
<codeline lineno="892"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/><sp/>only<sp/>in<sp/>memory<sp/>location.</highlight></codeline>
<codeline lineno="893"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="894"><highlight class="comment">//!<sp/>When<sp/>you<sp/>create<sp/>new<sp/>variable,<sp/>initial<sp/>state<sp/>is<sp/>always<sp/>@c<sp/>kVarStateUnused,</highlight></codeline>
<codeline lineno="895"><highlight class="comment">//!<sp/>allocating<sp/>it<sp/>to<sp/>register<sp/>or<sp/>spilling<sp/>to<sp/>memory<sp/>changes<sp/>this<sp/>state<sp/>to</highlight></codeline>
<codeline lineno="896"><highlight class="comment">//!<sp/>@c<sp/>kVarStateReg<sp/>or<sp/>@c<sp/>kVarStateMem,<sp/>respectively.</highlight></codeline>
<codeline lineno="897"><highlight class="comment">//!<sp/>During<sp/>variable<sp/>lifetime<sp/>it&apos;s<sp/>usual<sp/>that<sp/>its<sp/>state<sp/>is<sp/>changed<sp/>multiple</highlight></codeline>
<codeline lineno="898"><highlight class="comment">//!<sp/>times.<sp/>To<sp/>generate<sp/>better<sp/>code,<sp/>you<sp/>can<sp/>control<sp/>allocating<sp/>and<sp/>spilling</highlight></codeline>
<codeline lineno="899"><highlight class="comment">//!<sp/>by<sp/>using<sp/>up<sp/>to<sp/>four<sp/>types<sp/>of<sp/>methods<sp/>that<sp/>allows<sp/>it<sp/>(see<sp/>next<sp/>list).</highlight></codeline>
<codeline lineno="900"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="901"><highlight class="comment">//!<sp/>Explicit<sp/>variable<sp/>allocating<sp/>/<sp/>spilling<sp/>methods:</highlight></codeline>
<codeline lineno="902"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="903"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>Compiler::alloc()<sp/>-<sp/>Explicit<sp/>method<sp/>to<sp/>alloc<sp/>variable<sp/>into</highlight></codeline>
<codeline lineno="904"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/><sp/>register.<sp/>You<sp/>can<sp/>use<sp/>this<sp/>before<sp/>loops<sp/>or<sp/>code<sp/>blocks.</highlight></codeline>
<codeline lineno="905"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="906"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>Compiler::spill()<sp/>-<sp/>Explicit<sp/>method<sp/>to<sp/>spill<sp/>variable.<sp/>If<sp/>variable</highlight></codeline>
<codeline lineno="907"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>in<sp/>register<sp/>and<sp/>you<sp/>call<sp/>this<sp/>method,<sp/>it&apos;s<sp/>moved<sp/>to<sp/>its<sp/>home<sp/>memory</highlight></codeline>
<codeline lineno="908"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/><sp/>location.<sp/>If<sp/>variable<sp/>is<sp/>not<sp/>in<sp/>register<sp/>no<sp/>operation<sp/>is<sp/>performed.</highlight></codeline>
<codeline lineno="909"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="910"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>Compiler::unuse()<sp/>-<sp/>Unuse<sp/>variable<sp/>(you<sp/>can<sp/>use<sp/>this<sp/>to<sp/>end<sp/>the</highlight></codeline>
<codeline lineno="911"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>scope<sp/>or<sp/>sub-scope).</highlight></codeline>
<codeline lineno="912"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="913"><highlight class="comment">//!<sp/>Please<sp/>see<sp/>AsmJit<sp/>tutorials<sp/>(testcompiler.cpp<sp/>and<sp/>testvariables.cpp)<sp/>for</highlight></codeline>
<codeline lineno="914"><highlight class="comment">//!<sp/>more<sp/>complete<sp/>examples.</highlight></codeline>
<codeline lineno="915"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="916"><highlight class="comment">//!<sp/>@section<sp/>asmjit_compiler_MemoryManagement<sp/>Memory<sp/>Management</highlight></codeline>
<codeline lineno="917"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="918"><highlight class="comment">//!<sp/>@c<sp/>Compiler<sp/>Memory<sp/>management<sp/>follows<sp/>these<sp/>rules:</highlight></codeline>
<codeline lineno="919"><highlight class="comment">//!<sp/>-<sp/>Everything<sp/>created<sp/>by<sp/>@c<sp/>Compiler<sp/>is<sp/>always<sp/>freed<sp/>by<sp/>@c<sp/>Compiler.</highlight></codeline>
<codeline lineno="920"><highlight class="comment">//!<sp/>-<sp/>To<sp/>get<sp/>decent<sp/>performance,<sp/>compiler<sp/>always<sp/>uses<sp/>larger<sp/>memory<sp/>buffer</highlight></codeline>
<codeline lineno="921"><highlight class="comment">//!<sp/><sp/><sp/>for<sp/>objects<sp/>to<sp/>allocate<sp/>and<sp/>when<sp/>compiler<sp/>instance<sp/>is<sp/>destroyed,<sp/>this</highlight></codeline>
<codeline lineno="922"><highlight class="comment">//!<sp/><sp/><sp/>buffer<sp/>is<sp/>freed.<sp/>Destructors<sp/>of<sp/>active<sp/>objects<sp/>are<sp/>called<sp/>when</highlight></codeline>
<codeline lineno="923"><highlight class="comment">//!<sp/><sp/><sp/>destroying<sp/>compiler<sp/>instance.<sp/>Destructors<sp/>of<sp/>abadonded<sp/>compiler</highlight></codeline>
<codeline lineno="924"><highlight class="comment">//!<sp/><sp/><sp/>objects<sp/>are<sp/>called<sp/>immediately<sp/>after<sp/>abadonding<sp/>them.</highlight></codeline>
<codeline lineno="925"><highlight class="comment">//!<sp/>-<sp/>This<sp/>type<sp/>of<sp/>memory<sp/>management<sp/>is<sp/>called<sp/>&apos;zone<sp/>memory<sp/>management&apos;.</highlight></codeline>
<codeline lineno="926"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="927"><highlight class="comment">//!<sp/>This<sp/>means<sp/>that<sp/>you<sp/>can&apos;t<sp/>use<sp/>any<sp/>@c<sp/>Compiler<sp/>object<sp/>after<sp/>destructing<sp/>it,</highlight></codeline>
<codeline lineno="928"><highlight class="comment">//!<sp/>it<sp/>also<sp/>means<sp/>that<sp/>each<sp/>object<sp/>like<sp/>@c<sp/>Label,<sp/>@c<sp/>BaseVar<sp/>and<sp/>others<sp/>are</highlight></codeline>
<codeline lineno="929"><highlight class="comment">//!<sp/>created<sp/>and<sp/>managed<sp/>by<sp/>@c<sp/>BaseCompiler<sp/>itself.<sp/>These<sp/>objects<sp/>contain<sp/>ID</highlight></codeline>
<codeline lineno="930"><highlight class="comment">//!<sp/>which<sp/>is<sp/>used<sp/>internally<sp/>by<sp/>Compiler<sp/>to<sp/>store<sp/>additional<sp/>information<sp/>about</highlight></codeline>
<codeline lineno="931"><highlight class="comment">//!<sp/>these<sp/>objects.</highlight></codeline>
<codeline lineno="932"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="933"><highlight class="comment">//!<sp/>@section<sp/>asmjit_compiler_StateManagement<sp/>Control-Flow<sp/>and<sp/>State<sp/>Management.</highlight></codeline>
<codeline lineno="934"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="935"><highlight class="comment">//!<sp/>The<sp/>@c<sp/>Compiler<sp/>automatically<sp/>manages<sp/>state<sp/>of<sp/>the<sp/>variables<sp/>when<sp/>using</highlight></codeline>
<codeline lineno="936"><highlight class="comment">//!<sp/>control<sp/>flow<sp/>instructions<sp/>like<sp/>jumps,<sp/>conditional<sp/>jumps<sp/>and<sp/>calls.<sp/>There</highlight></codeline>
<codeline lineno="937"><highlight class="comment">//!<sp/>is<sp/>minimal<sp/>heuristics<sp/>for<sp/>choosing<sp/>the<sp/>method<sp/>how<sp/>state<sp/>is<sp/>saved<sp/>or<sp/>restored.</highlight></codeline>
<codeline lineno="938"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="939"><highlight class="comment">//!<sp/>Generally<sp/>the<sp/>state<sp/>can<sp/>be<sp/>changed<sp/>only<sp/>when<sp/>using<sp/>jump<sp/>or<sp/>conditional<sp/>jump</highlight></codeline>
<codeline lineno="940"><highlight class="comment">//!<sp/>instruction.<sp/>When<sp/>using<sp/>non-conditional<sp/>jump<sp/>then<sp/>state<sp/>change<sp/>is<sp/>embedded</highlight></codeline>
<codeline lineno="941"><highlight class="comment">//!<sp/>into<sp/>the<sp/>instruction<sp/>stream<sp/>before<sp/>the<sp/>jump.<sp/>When<sp/>using<sp/>conditional<sp/>jump</highlight></codeline>
<codeline lineno="942"><highlight class="comment">//!<sp/>the<sp/>@c<sp/>Compiler<sp/>decides<sp/>whether<sp/>to<sp/>restore<sp/>state<sp/>before<sp/>the<sp/>jump<sp/>or<sp/>whether</highlight></codeline>
<codeline lineno="943"><highlight class="comment">//!<sp/>to<sp/>use<sp/>another<sp/>block<sp/>where<sp/>state<sp/>is<sp/>restored.<sp/>The<sp/>last<sp/>case<sp/>is<sp/>that<sp/>no-code</highlight></codeline>
<codeline lineno="944"><highlight class="comment">//!<sp/>have<sp/>to<sp/>be<sp/>emitted<sp/>and<sp/>there<sp/>is<sp/>no<sp/>state<sp/>change<sp/>(this<sp/>is<sp/>of<sp/>course<sp/>ideal).</highlight></codeline>
<codeline lineno="945"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="946"><highlight class="comment">//!<sp/>Choosing<sp/>whether<sp/>to<sp/>embed<sp/>&apos;restore-state&apos;<sp/>section<sp/>before<sp/>conditional<sp/>jump</highlight></codeline>
<codeline lineno="947"><highlight class="comment">//!<sp/>is<sp/>quite<sp/>simple.<sp/>If<sp/>jump<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>&apos;taken&apos;<sp/>then<sp/>code<sp/>is<sp/>embedded,<sp/>if</highlight></codeline>
<codeline lineno="948"><highlight class="comment">//!<sp/>jump<sp/>is<sp/>unlikely<sp/>to<sp/>be<sp/>taken<sp/>then<sp/>the<sp/>small<sp/>code<sp/>section<sp/>for<sp/>state-switch</highlight></codeline>
<codeline lineno="949"><highlight class="comment">//!<sp/>will<sp/>be<sp/>generated<sp/>instead.</highlight></codeline>
<codeline lineno="950"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="951"><highlight class="comment">//!<sp/>Next<sp/>example<sp/>is<sp/>the<sp/>situation<sp/>where<sp/>the<sp/>extended<sp/>code<sp/>block<sp/>is<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="952"><highlight class="comment">//!<sp/>do<sp/>state-change:</highlight></codeline>
<codeline lineno="953"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="954"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="955"><highlight class="comment">//!<sp/>Compiler<sp/>c;</highlight></codeline>
<codeline lineno="956"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="957"><highlight class="comment">//!<sp/>c.addFunc(kFuncConvHost,<sp/>FuncBuilder0&lt;FnVoid&gt;());</highlight></codeline>
<codeline lineno="958"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="959"><highlight class="comment">//!<sp/>//<sp/>Labels.</highlight></codeline>
<codeline lineno="960"><highlight class="comment">//!<sp/>Label<sp/>L0(c);</highlight></codeline>
<codeline lineno="961"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="962"><highlight class="comment">//!<sp/>//<sp/>Variables.</highlight></codeline>
<codeline lineno="963"><highlight class="comment">//!<sp/>GpVar<sp/>var0(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="964"><highlight class="comment">//!<sp/>GpVar<sp/>var1(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="965"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="966"><highlight class="comment">//!<sp/>//<sp/>Cleanup.<sp/>After<sp/>these<sp/>two<sp/>lines,<sp/>the<sp/>var0<sp/>and<sp/>var1<sp/>will<sp/>be<sp/>always<sp/>stored</highlight></codeline>
<codeline lineno="967"><highlight class="comment">//!<sp/>//<sp/>in<sp/>registers.<sp/>Our<sp/>example<sp/>is<sp/>very<sp/>small,<sp/>but<sp/>in<sp/>larger<sp/>code<sp/>the<sp/>var0<sp/>can</highlight></codeline>
<codeline lineno="968"><highlight class="comment">//!<sp/>//<sp/>be<sp/>spilled<sp/>by<sp/>xor(var1,<sp/>var1).</highlight></codeline>
<codeline lineno="969"><highlight class="comment">//!<sp/>c.xor_(var0,<sp/>var0);</highlight></codeline>
<codeline lineno="970"><highlight class="comment">//!<sp/>c.xor_(var1,<sp/>var1);</highlight></codeline>
<codeline lineno="971"><highlight class="comment">//!<sp/>c.cmp(var0,<sp/>var1);</highlight></codeline>
<codeline lineno="972"><highlight class="comment">//!<sp/>//<sp/>State:</highlight></codeline>
<codeline lineno="973"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="974"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="975"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="976"><highlight class="comment">//!<sp/>//<sp/>We<sp/>manually<sp/>spill<sp/>these<sp/>variables.</highlight></codeline>
<codeline lineno="977"><highlight class="comment">//!<sp/>c.spill(var0);</highlight></codeline>
<codeline lineno="978"><highlight class="comment">//!<sp/>c.spill(var1);</highlight></codeline>
<codeline lineno="979"><highlight class="comment">//!<sp/>//<sp/>State:</highlight></codeline>
<codeline lineno="980"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var0<sp/>-<sp/>memory.</highlight></codeline>
<codeline lineno="981"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var1<sp/>-<sp/>memory.</highlight></codeline>
<codeline lineno="982"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="983"><highlight class="comment">//!<sp/>//<sp/>Conditional<sp/>jump<sp/>to<sp/>L0.<sp/>It<sp/>will<sp/>be<sp/>always<sp/>taken,<sp/>but<sp/>compiler<sp/>thinks<sp/>that</highlight></codeline>
<codeline lineno="984"><highlight class="comment">//!<sp/>//<sp/>it<sp/>is<sp/>unlikely<sp/>taken<sp/>so<sp/>it<sp/>will<sp/>embed<sp/>state<sp/>change<sp/>code<sp/>somewhere.</highlight></codeline>
<codeline lineno="985"><highlight class="comment">//!<sp/>c.je(L0);</highlight></codeline>
<codeline lineno="986"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="987"><highlight class="comment">//!<sp/>//<sp/>Do<sp/>something.<sp/>The<sp/>variables<sp/>var0<sp/>and<sp/>var1<sp/>will<sp/>be<sp/>allocated<sp/>again.</highlight></codeline>
<codeline lineno="988"><highlight class="comment">//!<sp/>c.add(var0,<sp/>1);</highlight></codeline>
<codeline lineno="989"><highlight class="comment">//!<sp/>c.add(var1,<sp/>2);</highlight></codeline>
<codeline lineno="990"><highlight class="comment">//!<sp/>//<sp/>State:</highlight></codeline>
<codeline lineno="991"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="992"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="993"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="994"><highlight class="comment">//!<sp/>//<sp/>Bind<sp/>label<sp/>here,<sp/>the<sp/>state<sp/>is<sp/>not<sp/>changed.</highlight></codeline>
<codeline lineno="995"><highlight class="comment">//!<sp/>c.bind(L0);</highlight></codeline>
<codeline lineno="996"><highlight class="comment">//!<sp/>//<sp/>State:</highlight></codeline>
<codeline lineno="997"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="998"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="999"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1000"><highlight class="comment">//!<sp/>//<sp/>We<sp/>need<sp/>to<sp/>use<sp/>var0<sp/>and<sp/>var1,<sp/>because<sp/>if<sp/>compiler<sp/>detects<sp/>that<sp/>variables</highlight></codeline>
<codeline lineno="1001"><highlight class="comment">//!<sp/>//<sp/>are<sp/>out<sp/>of<sp/>scope<sp/>then<sp/>it<sp/>optimizes<sp/>the<sp/>state-change.</highlight></codeline>
<codeline lineno="1002"><highlight class="comment">//!<sp/>c.sub(var0,<sp/>var1);</highlight></codeline>
<codeline lineno="1003"><highlight class="comment">//!<sp/>//<sp/>State:</highlight></codeline>
<codeline lineno="1004"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="1005"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="1006"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1007"><highlight class="comment">//!<sp/>c.endFunc();</highlight></codeline>
<codeline lineno="1008"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="1009"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1010"><highlight class="comment">//!<sp/>The<sp/>output:</highlight></codeline>
<codeline lineno="1011"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1012"><highlight class="comment">//!<sp/>@verbatim</highlight></codeline>
<codeline lineno="1013"><highlight class="comment">//!<sp/>xor<sp/>eax,<sp/>eax<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>xor<sp/>var_0,<sp/>var_0</highlight></codeline>
<codeline lineno="1014"><highlight class="comment">//!<sp/>xor<sp/>ecx,<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>xor<sp/>var_1,<sp/>var_1</highlight></codeline>
<codeline lineno="1015"><highlight class="comment">//!<sp/>cmp<sp/>eax,<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>cmp<sp/>var_0,<sp/>var_1</highlight></codeline>
<codeline lineno="1016"><highlight class="comment">//!<sp/>mov<sp/>[esp<sp/>-<sp/>24],<sp/>eax<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>spill<sp/>var_0</highlight></codeline>
<codeline lineno="1017"><highlight class="comment">//!<sp/>mov<sp/>[esp<sp/>-<sp/>28],<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>spill<sp/>var_1</highlight></codeline>
<codeline lineno="1018"><highlight class="comment">//!<sp/>je<sp/>L0_Switch</highlight></codeline>
<codeline lineno="1019"><highlight class="comment">//!<sp/>mov<sp/>eax,<sp/>[esp<sp/>-<sp/>24]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>alloc<sp/>var_0</highlight></codeline>
<codeline lineno="1020"><highlight class="comment">//!<sp/>add<sp/>eax,<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>add<sp/>var_0,<sp/>1</highlight></codeline>
<codeline lineno="1021"><highlight class="comment">//!<sp/>mov<sp/>ecx,<sp/>[esp<sp/>-<sp/>28]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>alloc<sp/>var_1</highlight></codeline>
<codeline lineno="1022"><highlight class="comment">//!<sp/>add<sp/>ecx,<sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>add<sp/>var_1,<sp/>2</highlight></codeline>
<codeline lineno="1023"><highlight class="comment">//!<sp/>L0:</highlight></codeline>
<codeline lineno="1024"><highlight class="comment">//!<sp/>sub<sp/>eax,<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>sub<sp/>var_0,<sp/>var_1</highlight></codeline>
<codeline lineno="1025"><highlight class="comment">//!<sp/>ret</highlight></codeline>
<codeline lineno="1026"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1027"><highlight class="comment">//!<sp/>;<sp/>state-switch<sp/>begin</highlight></codeline>
<codeline lineno="1028"><highlight class="comment">//!<sp/>L0_Switch0:</highlight></codeline>
<codeline lineno="1029"><highlight class="comment">//!<sp/>mov<sp/>eax,<sp/>[esp<sp/>-<sp/>24]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>alloc<sp/>var_0</highlight></codeline>
<codeline lineno="1030"><highlight class="comment">//!<sp/>mov<sp/>ecx,<sp/>[esp<sp/>-<sp/>28]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>alloc<sp/>var_1</highlight></codeline>
<codeline lineno="1031"><highlight class="comment">//!<sp/>jmp<sp/>short<sp/>L0</highlight></codeline>
<codeline lineno="1032"><highlight class="comment">//!<sp/>;<sp/>state-switch<sp/>end</highlight></codeline>
<codeline lineno="1033"><highlight class="comment">//!<sp/>@endverbatim</highlight></codeline>
<codeline lineno="1034"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1035"><highlight class="comment">//!<sp/>You<sp/>can<sp/>see<sp/>that<sp/>the<sp/>state-switch<sp/>section<sp/>was<sp/>generated<sp/>(see<sp/>L0_Switch0).</highlight></codeline>
<codeline lineno="1036"><highlight class="comment">//!<sp/>The<sp/>compiler<sp/>is<sp/>unable<sp/>to<sp/>restore<sp/>state<sp/>immediately<sp/>when<sp/>emitting<sp/>the</highlight></codeline>
<codeline lineno="1037"><highlight class="comment">//!<sp/>forward<sp/>jump<sp/>(the<sp/>code<sp/>is<sp/>generated<sp/>from<sp/>first<sp/>to<sp/>last<sp/>instruction<sp/>and</highlight></codeline>
<codeline lineno="1038"><highlight class="comment">//!<sp/>the<sp/>target<sp/>state<sp/>is<sp/>simply<sp/>not<sp/>known<sp/>at<sp/>this<sp/>time).</highlight></codeline>
<codeline lineno="1039"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1040"><highlight class="comment">//!<sp/>To<sp/>tell<sp/>@c<sp/>Compiler<sp/>that<sp/>you<sp/>want<sp/>to<sp/>embed<sp/>state-switch<sp/>code<sp/>before<sp/>jump</highlight></codeline>
<codeline lineno="1041"><highlight class="comment">//!<sp/>it&apos;s<sp/>needed<sp/>to<sp/>create<sp/>backward<sp/>jump<sp/>(where<sp/>also<sp/>processor<sp/>expects<sp/>that<sp/>it</highlight></codeline>
<codeline lineno="1042"><highlight class="comment">//!<sp/>will<sp/>be<sp/>taken).<sp/>To<sp/>demonstrate<sp/>the<sp/>possibility<sp/>to<sp/>embed<sp/>state-switch<sp/>before</highlight></codeline>
<codeline lineno="1043"><highlight class="comment">//!<sp/>jump<sp/>we<sp/>use<sp/>slightly<sp/>modified<sp/>code:</highlight></codeline>
<codeline lineno="1044"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1045"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="1046"><highlight class="comment">//!<sp/>Compiler<sp/>c;</highlight></codeline>
<codeline lineno="1047"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1048"><highlight class="comment">//!<sp/>c.addFunc(kFuncConvHost,<sp/>FuncBuilder0&lt;FnVoid&gt;());</highlight></codeline>
<codeline lineno="1049"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1050"><highlight class="comment">//!<sp/>//<sp/>Labels.</highlight></codeline>
<codeline lineno="1051"><highlight class="comment">//!<sp/>Label<sp/>L0(c);</highlight></codeline>
<codeline lineno="1052"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1053"><highlight class="comment">//!<sp/>//<sp/>Variables.</highlight></codeline>
<codeline lineno="1054"><highlight class="comment">//!<sp/>GpVar<sp/>var0(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="1055"><highlight class="comment">//!<sp/>GpVar<sp/>var1(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="1056"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1057"><highlight class="comment">//!<sp/>//<sp/>Cleanup.<sp/>After<sp/>these<sp/>two<sp/>lines,<sp/>the<sp/>var0<sp/>and<sp/>var1<sp/>will<sp/>be<sp/>always<sp/>stored</highlight></codeline>
<codeline lineno="1058"><highlight class="comment">//!<sp/>//<sp/>in<sp/>registers.<sp/>Our<sp/>example<sp/>is<sp/>very<sp/>small,<sp/>but<sp/>in<sp/>larger<sp/>code<sp/>the<sp/>var0<sp/>can</highlight></codeline>
<codeline lineno="1059"><highlight class="comment">//!<sp/>//<sp/>be<sp/>spilled<sp/>by<sp/>xor(var1,<sp/>var1).</highlight></codeline>
<codeline lineno="1060"><highlight class="comment">//!<sp/>c.xor_(var0,<sp/>var0);</highlight></codeline>
<codeline lineno="1061"><highlight class="comment">//!<sp/>c.xor_(var1,<sp/>var1);</highlight></codeline>
<codeline lineno="1062"><highlight class="comment">//!<sp/>//<sp/>State:</highlight></codeline>
<codeline lineno="1063"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="1064"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="1065"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1066"><highlight class="comment">//!<sp/>//<sp/>We<sp/>manually<sp/>spill<sp/>these<sp/>variables.</highlight></codeline>
<codeline lineno="1067"><highlight class="comment">//!<sp/>c.spill(var0);</highlight></codeline>
<codeline lineno="1068"><highlight class="comment">//!<sp/>c.spill(var1);</highlight></codeline>
<codeline lineno="1069"><highlight class="comment">//!<sp/>//<sp/>State:</highlight></codeline>
<codeline lineno="1070"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var0<sp/>-<sp/>memory.</highlight></codeline>
<codeline lineno="1071"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var1<sp/>-<sp/>memory.</highlight></codeline>
<codeline lineno="1072"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1073"><highlight class="comment">//!<sp/>//<sp/>Bind<sp/>our<sp/>label<sp/>here.</highlight></codeline>
<codeline lineno="1074"><highlight class="comment">//!<sp/>c.bind(L0);</highlight></codeline>
<codeline lineno="1075"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1076"><highlight class="comment">//!<sp/>//<sp/>Do<sp/>something,<sp/>the<sp/>variables<sp/>will<sp/>be<sp/>allocated<sp/>again.</highlight></codeline>
<codeline lineno="1077"><highlight class="comment">//!<sp/>c.add(var0,<sp/>1);</highlight></codeline>
<codeline lineno="1078"><highlight class="comment">//!<sp/>c.add(var1,<sp/>2);</highlight></codeline>
<codeline lineno="1079"><highlight class="comment">//!<sp/>//<sp/>State:</highlight></codeline>
<codeline lineno="1080"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="1081"><highlight class="comment">//!<sp/>//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight></codeline>
<codeline lineno="1082"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1083"><highlight class="comment">//!<sp/>//<sp/>Backward<sp/>conditional<sp/>jump<sp/>to<sp/>L0.<sp/>The<sp/>default<sp/>behavior<sp/>is<sp/>that<sp/>it<sp/>is<sp/>taken</highlight></codeline>
<codeline lineno="1084"><highlight class="comment">//!<sp/>//<sp/>so<sp/>state-change<sp/>code<sp/>will<sp/>be<sp/>embedded<sp/>here.</highlight></codeline>
<codeline lineno="1085"><highlight class="comment">//!<sp/>c.je(L0);</highlight></codeline>
<codeline lineno="1086"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1087"><highlight class="comment">//!<sp/>c.endFunc();</highlight></codeline>
<codeline lineno="1088"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="1089"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1090"><highlight class="comment">//!<sp/>The<sp/>output:</highlight></codeline>
<codeline lineno="1091"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1092"><highlight class="comment">//!<sp/>@verbatim</highlight></codeline>
<codeline lineno="1093"><highlight class="comment">//!<sp/>xor<sp/>ecx,<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>xor<sp/>var_0,<sp/>var_0</highlight></codeline>
<codeline lineno="1094"><highlight class="comment">//!<sp/>xor<sp/>edx,<sp/>edx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>xor<sp/>var_1,<sp/>var_1</highlight></codeline>
<codeline lineno="1095"><highlight class="comment">//!<sp/>mov<sp/>[esp<sp/>-<sp/>24],<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>spill<sp/>var_0</highlight></codeline>
<codeline lineno="1096"><highlight class="comment">//!<sp/>mov<sp/>[esp<sp/>-<sp/>28],<sp/>edx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>spill<sp/>var_1</highlight></codeline>
<codeline lineno="1097"><highlight class="comment">//!<sp/>L2:</highlight></codeline>
<codeline lineno="1098"><highlight class="comment">//!<sp/>mov<sp/>ecx,<sp/>[esp<sp/>-<sp/>24]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>alloc<sp/>var_0</highlight></codeline>
<codeline lineno="1099"><highlight class="comment">//!<sp/>add<sp/>ecx,<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>add<sp/>var_0,<sp/>1</highlight></codeline>
<codeline lineno="1100"><highlight class="comment">//!<sp/>mov<sp/>edx,<sp/>[esp<sp/>-<sp/>28]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>alloc<sp/>var_1</highlight></codeline>
<codeline lineno="1101"><highlight class="comment">//!<sp/>add<sp/>edx,<sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>add<sp/>var_1,<sp/>2</highlight></codeline>
<codeline lineno="1102"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1103"><highlight class="comment">//!<sp/>;<sp/>state-switch<sp/>begin</highlight></codeline>
<codeline lineno="1104"><highlight class="comment">//!<sp/>mov<sp/>[esp<sp/>-<sp/>24],<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>spill<sp/>var_0</highlight></codeline>
<codeline lineno="1105"><highlight class="comment">//!<sp/>mov<sp/>[esp<sp/>-<sp/>28],<sp/>edx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>spill<sp/>var_1</highlight></codeline>
<codeline lineno="1106"><highlight class="comment">//!<sp/>;<sp/>state-switch<sp/>end</highlight></codeline>
<codeline lineno="1107"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1108"><highlight class="comment">//!<sp/>je<sp/>short<sp/>L2</highlight></codeline>
<codeline lineno="1109"><highlight class="comment">//!<sp/>ret</highlight></codeline>
<codeline lineno="1110"><highlight class="comment">//!<sp/>@endverbatim</highlight></codeline>
<codeline lineno="1111"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1112"><highlight class="comment">//!<sp/>Please<sp/>notice<sp/>where<sp/>the<sp/>state-switch<sp/>section<sp/>is<sp/>located.<sp/>The<sp/>@c<sp/>Compiler</highlight></codeline>
<codeline lineno="1113"><highlight class="comment">//!<sp/>decided<sp/>that<sp/>jump<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>taken<sp/>so<sp/>the<sp/>state<sp/>change<sp/>is<sp/>embedded</highlight></codeline>
<codeline lineno="1114"><highlight class="comment">//!<sp/>before<sp/>the<sp/>conditional<sp/>jump.<sp/>To<sp/>change<sp/>this<sp/>behavior<sp/>into<sp/>the<sp/>previous</highlight></codeline>
<codeline lineno="1115"><highlight class="comment">//!<sp/>case<sp/>it&apos;s<sp/>needed<sp/>to<sp/>add<sp/>an<sp/>option<sp/>(kInstOptionTaken/kInstOptionNotTaken).</highlight></codeline>
<codeline lineno="1116"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1117"><highlight class="comment">//!<sp/>Replacing<sp/>the<sp/>&lt;code&gt;c.je(L0)&lt;/code&gt;<sp/>by<sp/>&lt;code&gt;c.taken();<sp/>c.je(L0)&lt;/code&gt;</highlight></codeline>
<codeline lineno="1118"><highlight class="comment">//!<sp/>will<sp/>generate<sp/>code<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="1119"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1120"><highlight class="comment">//!<sp/>@verbatim</highlight></codeline>
<codeline lineno="1121"><highlight class="comment">//!<sp/>xor<sp/>ecx,<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>xor<sp/>var_0,<sp/>var_0</highlight></codeline>
<codeline lineno="1122"><highlight class="comment">//!<sp/>xor<sp/>edx,<sp/>edx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>xor<sp/>var_1,<sp/>var_1</highlight></codeline>
<codeline lineno="1123"><highlight class="comment">//!<sp/>mov<sp/>[esp<sp/>-<sp/>24],<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>spill<sp/>var_0</highlight></codeline>
<codeline lineno="1124"><highlight class="comment">//!<sp/>mov<sp/>[esp<sp/>-<sp/>28],<sp/>edx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>spill<sp/>var_1</highlight></codeline>
<codeline lineno="1125"><highlight class="comment">//!<sp/>L0:</highlight></codeline>
<codeline lineno="1126"><highlight class="comment">//!<sp/>mov<sp/>ecx,<sp/>[esp<sp/>-<sp/>24]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>alloc<sp/>var_0</highlight></codeline>
<codeline lineno="1127"><highlight class="comment">//!<sp/>add<sp/>ecx,<sp/>1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>add<sp/>var_0,<sp/>a</highlight></codeline>
<codeline lineno="1128"><highlight class="comment">//!<sp/>mov<sp/>edx,<sp/>[esp<sp/>-<sp/>28]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>alloc<sp/>var_1</highlight></codeline>
<codeline lineno="1129"><highlight class="comment">//!<sp/>add<sp/>edx,<sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>add<sp/>var_1,<sp/>2</highlight></codeline>
<codeline lineno="1130"><highlight class="comment">//!<sp/>je<sp/>L0_Switch,<sp/>2</highlight></codeline>
<codeline lineno="1131"><highlight class="comment">//!<sp/>ret</highlight></codeline>
<codeline lineno="1132"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1133"><highlight class="comment">//!<sp/>;<sp/>state-switch<sp/>begin</highlight></codeline>
<codeline lineno="1134"><highlight class="comment">//!<sp/>L0_Switch:</highlight></codeline>
<codeline lineno="1135"><highlight class="comment">//!<sp/>mov<sp/>[esp<sp/>-<sp/>24],<sp/>ecx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>spill<sp/>var_0</highlight></codeline>
<codeline lineno="1136"><highlight class="comment">//!<sp/>mov<sp/>[esp<sp/>-<sp/>28],<sp/>edx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;<sp/>spill<sp/>var_1</highlight></codeline>
<codeline lineno="1137"><highlight class="comment">//!<sp/>jmp<sp/>short<sp/>L0</highlight></codeline>
<codeline lineno="1138"><highlight class="comment">//!<sp/>;<sp/>state-switch<sp/>end</highlight></codeline>
<codeline lineno="1139"><highlight class="comment">//!<sp/>@endverbatim</highlight></codeline>
<codeline lineno="1140"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1141"><highlight class="comment">//!<sp/>This<sp/>section<sp/>provided<sp/>information<sp/>about<sp/>how<sp/>state-change<sp/>works.<sp/>The</highlight></codeline>
<codeline lineno="1142"><highlight class="comment">//!<sp/>behavior<sp/>is<sp/>deterministic<sp/>and<sp/>it<sp/>can<sp/>be<sp/>overridden.</highlight></codeline>
<codeline lineno="1143"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1144"><highlight class="comment">//!<sp/>@section<sp/>asmjit_compiler_AdvancedCodeGeneration<sp/>Advanced<sp/>Code<sp/>Generation</highlight></codeline>
<codeline lineno="1145"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1146"><highlight class="comment">//!<sp/>This<sp/>section<sp/>describes<sp/>advanced<sp/>method<sp/>of<sp/>code<sp/>generation<sp/>available<sp/>to</highlight></codeline>
<codeline lineno="1147"><highlight class="comment">//!<sp/>@c<sp/>Compiler<sp/>(but<sp/>also<sp/>to<sp/>@c<sp/>Assembler).<sp/>When<sp/>emitting<sp/>code<sp/>to<sp/>instruction</highlight></codeline>
<codeline lineno="1148"><highlight class="comment">//!<sp/>stream<sp/>the<sp/>methods<sp/>like<sp/>@c<sp/>mov(),<sp/>@c<sp/>add(),<sp/>@c<sp/>sub()<sp/>can<sp/>be<sp/>called<sp/>directly</highlight></codeline>
<codeline lineno="1149"><highlight class="comment">//!<sp/>(advantage<sp/>is<sp/>static-type<sp/>control<sp/>performed<sp/>also<sp/>by<sp/>C++<sp/>compiler)<sp/>or</highlight></codeline>
<codeline lineno="1150"><highlight class="comment">//!<sp/>indirectly<sp/>using<sp/>@c<sp/>emit()<sp/>method.<sp/>The<sp/>@c<sp/>emit()<sp/>method<sp/>needs<sp/>only</highlight></codeline>
<codeline lineno="1151"><highlight class="comment">//!<sp/>instruction<sp/>code<sp/>and<sp/>operands.</highlight></codeline>
<codeline lineno="1152"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1153"><highlight class="comment">//!<sp/>Example<sp/>of<sp/>code<sp/>generating<sp/>by<sp/>standard<sp/>type-safe<sp/>API:</highlight></codeline>
<codeline lineno="1154"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1155"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="1156"><highlight class="comment">//!<sp/>Compiler<sp/>c;</highlight></codeline>
<codeline lineno="1157"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1158"><highlight class="comment">//!<sp/>GpVar<sp/>var0(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="1159"><highlight class="comment">//!<sp/>GpVar<sp/>var1(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="1160"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1161"><highlight class="comment">//!<sp/>...</highlight></codeline>
<codeline lineno="1162"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1163"><highlight class="comment">//!<sp/>c.mov(var0,<sp/>0);</highlight></codeline>
<codeline lineno="1164"><highlight class="comment">//!<sp/>c.add(var0,<sp/>var1);</highlight></codeline>
<codeline lineno="1165"><highlight class="comment">//!<sp/>c.sub(var0,<sp/>var1);</highlight></codeline>
<codeline lineno="1166"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="1167"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1168"><highlight class="comment">//!<sp/>The<sp/>code<sp/>above<sp/>can<sp/>be<sp/>rewritten<sp/>as:</highlight></codeline>
<codeline lineno="1169"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1170"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="1171"><highlight class="comment">//!<sp/>Compiler<sp/>c;</highlight></codeline>
<codeline lineno="1172"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1173"><highlight class="comment">//!<sp/>GpVar<sp/>var0(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="1174"><highlight class="comment">//!<sp/>GpVar<sp/>var1(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="1175"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1176"><highlight class="comment">//!<sp/>...</highlight></codeline>
<codeline lineno="1177"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1178"><highlight class="comment">//!<sp/>c.emit(kInstMov,<sp/>var0,<sp/>0);</highlight></codeline>
<codeline lineno="1179"><highlight class="comment">//!<sp/>c.emit(kInstAdd,<sp/>var0,<sp/>var1);</highlight></codeline>
<codeline lineno="1180"><highlight class="comment">//!<sp/>c.emit(kInstSub,<sp/>var0,<sp/>var1);</highlight></codeline>
<codeline lineno="1181"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="1182"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1183"><highlight class="comment">//!<sp/>The<sp/>advantage<sp/>of<sp/>first<sp/>snippet<sp/>is<sp/>very<sp/>friendly<sp/>API<sp/>and<sp/>type-safe<sp/>control</highlight></codeline>
<codeline lineno="1184"><highlight class="comment">//!<sp/>that<sp/>is<sp/>controlled<sp/>by<sp/>the<sp/>C++<sp/>compiler.<sp/>The<sp/>advantage<sp/>of<sp/>second<sp/>snippet<sp/>is</highlight></codeline>
<codeline lineno="1185"><highlight class="comment">//!<sp/>availability<sp/>to<sp/>replace<sp/>or<sp/>generate<sp/>instruction<sp/>code<sp/>in<sp/>different<sp/>places.</highlight></codeline>
<codeline lineno="1186"><highlight class="comment">//!<sp/>See<sp/>the<sp/>next<sp/>example<sp/>how<sp/>the<sp/>@c<sp/>emit()<sp/>method<sp/>can<sp/>be<sp/>used<sp/>to<sp/>generate</highlight></codeline>
<codeline lineno="1187"><highlight class="comment">//!<sp/>abstract<sp/>code.</highlight></codeline>
<codeline lineno="1188"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1189"><highlight class="comment">//!<sp/>Use<sp/>case:</highlight></codeline>
<codeline lineno="1190"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1191"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="1192"><highlight class="comment">//!<sp/>bool<sp/>emitArithmetic(Compiler&amp;<sp/>c,<sp/>XmmVar&amp;<sp/>var0,<sp/>XmmVar&amp;<sp/>var1,<sp/>const<sp/>char*<sp/>op)</highlight></codeline>
<codeline lineno="1193"><highlight class="comment">//!<sp/>{</highlight></codeline>
<codeline lineno="1194"><highlight class="comment">//!<sp/><sp/><sp/>uint32_t<sp/>code<sp/>=<sp/>kInstNone;</highlight></codeline>
<codeline lineno="1195"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1196"><highlight class="comment">//!<sp/><sp/><sp/>if<sp/>(strcmp(op,<sp/>&quot;ADD&quot;)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1197"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>kInstAddss;</highlight></codeline>
<codeline lineno="1198"><highlight class="comment">//!<sp/><sp/><sp/>else<sp/>if<sp/>(strcmp(op,<sp/>&quot;SUBTRACT&quot;)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1199"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>kInstSubss;</highlight></codeline>
<codeline lineno="1200"><highlight class="comment">//!<sp/><sp/><sp/>else<sp/>if<sp/>(strcmp(op,<sp/>&quot;MULTIPLY&quot;)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1201"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>kInstMulss;</highlight></codeline>
<codeline lineno="1202"><highlight class="comment">//!<sp/><sp/><sp/>else<sp/>if<sp/>(strcmp(op,<sp/>&quot;DIVIDE&quot;)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1203"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>kInstDivss;</highlight></codeline>
<codeline lineno="1204"><highlight class="comment">//!<sp/><sp/><sp/>else</highlight></codeline>
<codeline lineno="1205"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/>//<sp/>Invalid<sp/>parameter?</highlight></codeline>
<codeline lineno="1206"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="1207"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1208"><highlight class="comment">//!<sp/><sp/><sp/>c.emit(code,<sp/>var0,<sp/>var1);</highlight></codeline>
<codeline lineno="1209"><highlight class="comment">//!<sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="1211"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1212"><highlight class="comment">//!<sp/>Other<sp/>use<sp/>cases<sp/>are<sp/>waiting<sp/>for<sp/>you!<sp/>Be<sp/>sure<sp/>that<sp/>instruction<sp/>you<sp/>are</highlight></codeline>
<codeline lineno="1213"><highlight class="comment">//!<sp/>emitting<sp/>is<sp/>correct<sp/>and<sp/>encodable,<sp/>because<sp/>if<sp/>not,<sp/>Assembler<sp/>will<sp/>set</highlight></codeline>
<codeline lineno="1214"><highlight class="comment">//!<sp/>status<sp/>code<sp/>to<sp/>@c<sp/>kErrorAssemblerUnknownInst.</highlight></codeline>
<codeline lineno="1215" refid="structasmjit_1_1x86x64_1_1X86X64Compiler" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound" tooltip="X86/X64 compiler.">X86X64Compiler</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref><sp/>{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound" tooltip="X86/X64 compiler.">X86X64Compiler</ref>)</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>@ref<sp/>X86X64Compiler<sp/>instance.</highlight></codeline>
<codeline lineno="1223"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound" tooltip="X86/X64 compiler.">X86X64Compiler</ref>(<ref refid="structasmjit_1_1BaseRuntime" kindref="compound" tooltip="Base runtime.">BaseRuntime</ref>*<sp/>runtime);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1224"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>X86X64Compiler<sp/>instance.</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a96590105a115514f8a02c1c2f792f" kindref="member" tooltip="Destroy the X86X64Compiler instance.">~X86X64Compiler</ref>();</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Inst<sp/>/<sp/>Emit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>InstNode.</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(uint32_t<sp/>code);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1233"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1234"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1235"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1236"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1238"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1239"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1240"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o3);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1241"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1242"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o4);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>a<sp/>new<sp/>@ref<sp/>InstNode.</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(uint32_t<sp/>code);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1246"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1247"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1249"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1251"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1253"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o3);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1254"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1255"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o4);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1258"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o0);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1260"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o1);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1261"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1262"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o2);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Func]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1268"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>X86X64FuncNode.</highlight></codeline>
<codeline lineno="1269"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound" tooltip="X86/X64 function node.">X86X64FuncNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad9246ac7123b213ad66e6d13984fdcc6" kindref="member" tooltip="Create a new X86X64FuncNode.">newFunc</ref>(uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref>&amp;<sp/>p);</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1271"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>a<sp/>new<sp/>function.</highlight></codeline>
<codeline lineno="1272"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1273"><highlight class="comment"><sp/><sp/>//!<sp/>@param<sp/>cconv<sp/>Calling<sp/>convention<sp/>to<sp/>use<sp/>(see<sp/>@c<sp/>kFuncConv<sp/>enum)</highlight></codeline>
<codeline lineno="1274"><highlight class="comment"><sp/><sp/>//!<sp/>@param<sp/>params<sp/>Function<sp/>arguments<sp/>prototype.</highlight></codeline>
<codeline lineno="1275"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1276"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>method<sp/>is<sp/>usually<sp/>used<sp/>as<sp/>a<sp/>first<sp/>step<sp/>when<sp/>generating<sp/>functions</highlight></codeline>
<codeline lineno="1277"><highlight class="comment"><sp/><sp/>//!<sp/>by<sp/>@c<sp/>Compiler.<sp/>First<sp/>parameter<sp/>@a<sp/>cconv<sp/>specifies<sp/>function<sp/>calling</highlight></codeline>
<codeline lineno="1278"><highlight class="comment"><sp/><sp/>//!<sp/>convention<sp/>to<sp/>use.<sp/>Second<sp/>parameter<sp/>@a<sp/>params<sp/>specifies<sp/>function</highlight></codeline>
<codeline lineno="1279"><highlight class="comment"><sp/><sp/>//!<sp/>arguments.<sp/>To<sp/>create<sp/>function<sp/>arguments<sp/>are<sp/>used<sp/>templates</highlight></codeline>
<codeline lineno="1280"><highlight class="comment"><sp/><sp/>//!<sp/>@c<sp/>BuildFunction0&lt;...&gt;,<sp/>@c<sp/>BuildFunction1&lt;...&gt;,<sp/>@c<sp/>BuildFunction2&lt;...&gt;,</highlight></codeline>
<codeline lineno="1281"><highlight class="comment"><sp/><sp/>//!<sp/>etc...</highlight></codeline>
<codeline lineno="1282"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1283"><highlight class="comment"><sp/><sp/>//!<sp/>Templates<sp/>with<sp/>BuildFunction<sp/>prefix<sp/>are<sp/>used<sp/>to<sp/>generate<sp/>argument<sp/>IDs</highlight></codeline>
<codeline lineno="1284"><highlight class="comment"><sp/><sp/>//!<sp/>based<sp/>on<sp/>real<sp/>C++<sp/>types.<sp/>See<sp/>next<sp/>example<sp/>how<sp/>to<sp/>generate<sp/>function<sp/>with</highlight></codeline>
<codeline lineno="1285"><highlight class="comment"><sp/><sp/>//!<sp/>two<sp/>32-bit<sp/>integer<sp/>arguments.</highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1287"><highlight class="comment"><sp/><sp/>//!<sp/>@code</highlight></codeline>
<codeline lineno="1288"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>Building<sp/>function<sp/>using<sp/>asmjit::Compiler<sp/>example.</highlight></codeline>
<codeline lineno="1289"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1290"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>Compiler<sp/>instance</highlight></codeline>
<codeline lineno="1291"><highlight class="comment"><sp/><sp/>//!<sp/>Compiler<sp/>c;</highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1293"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>Begin<sp/>of<sp/>function<sp/>(also<sp/>emits<sp/>function<sp/>@c<sp/>Prolog)</highlight></codeline>
<codeline lineno="1294"><highlight class="comment"><sp/><sp/>//!<sp/>c.addFunc(</highlight></codeline>
<codeline lineno="1295"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>//<sp/>Default<sp/>calling<sp/>convention<sp/>(32-bit<sp/>cdecl<sp/>or<sp/>64-bit<sp/>for<sp/>host<sp/>OS)</highlight></codeline>
<codeline lineno="1296"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>kFuncConvHost,</highlight></codeline>
<codeline lineno="1297"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>//<sp/>Using<sp/>function<sp/>builder<sp/>to<sp/>generate<sp/>arguments<sp/>list</highlight></codeline>
<codeline lineno="1298"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>BuildFunction2&lt;FnVoid,<sp/>int,<sp/>int&gt;());</highlight></codeline>
<codeline lineno="1299"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>End<sp/>of<sp/>function<sp/>(also<sp/>emits<sp/>function<sp/>@c<sp/>Epilog)</highlight></codeline>
<codeline lineno="1301"><highlight class="comment"><sp/><sp/>//!<sp/>c.endFunc();</highlight></codeline>
<codeline lineno="1302"><highlight class="comment"><sp/><sp/>//!<sp/>@endcode</highlight></codeline>
<codeline lineno="1303"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1304"><highlight class="comment"><sp/><sp/>//!<sp/>You<sp/>can<sp/>see<sp/>that<sp/>building<sp/>functions<sp/>is<sp/>really<sp/>easy.<sp/>Previous<sp/>code<sp/>snipped</highlight></codeline>
<codeline lineno="1305"><highlight class="comment"><sp/><sp/>//!<sp/>will<sp/>generate<sp/>code<sp/>for<sp/>function<sp/>with<sp/>two<sp/>32-bit<sp/>integer<sp/>arguments.<sp/>You</highlight></codeline>
<codeline lineno="1306"><highlight class="comment"><sp/><sp/>//!<sp/>can<sp/>access<sp/>arguments<sp/>by<sp/>@c<sp/>asmjit::Function::argument()<sp/>method.<sp/>Arguments</highlight></codeline>
<codeline lineno="1307"><highlight class="comment"><sp/><sp/>//!<sp/>are<sp/>indexed<sp/>from<sp/>0<sp/>(like<sp/>everything<sp/>in<sp/>C).</highlight></codeline>
<codeline lineno="1308"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1309"><highlight class="comment"><sp/><sp/>//!<sp/>@code</highlight></codeline>
<codeline lineno="1310"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>Accessing<sp/>function<sp/>arguments<sp/>through<sp/>asmjit::Function<sp/>example.</highlight></codeline>
<codeline lineno="1311"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1312"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>Compiler<sp/>instance</highlight></codeline>
<codeline lineno="1313"><highlight class="comment"><sp/><sp/>//!<sp/>Compiler<sp/>c;</highlight></codeline>
<codeline lineno="1314"><highlight class="comment"><sp/><sp/>//!<sp/>GpVar<sp/>a0(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="1315"><highlight class="comment"><sp/><sp/>//!<sp/>GpVar<sp/>a1(c,<sp/>kVarTypeInt32);</highlight></codeline>
<codeline lineno="1316"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1317"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>Begin<sp/>of<sp/>function<sp/>(also<sp/>emits<sp/>function<sp/>@c<sp/>Prolog)</highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/><sp/>//!<sp/>c.addFunc(</highlight></codeline>
<codeline lineno="1319"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>//<sp/>Default<sp/>calling<sp/>convention<sp/>(32-bit<sp/>cdecl<sp/>or<sp/>64-bit<sp/>for<sp/>host<sp/>OS)</highlight></codeline>
<codeline lineno="1320"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>kFuncConvHost,</highlight></codeline>
<codeline lineno="1321"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>//<sp/>Using<sp/>function<sp/>builder<sp/>to<sp/>generate<sp/>arguments<sp/>list</highlight></codeline>
<codeline lineno="1322"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>BuildFunction2&lt;FnVoid,<sp/>int,<sp/>int&gt;());</highlight></codeline>
<codeline lineno="1323"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1324"><highlight class="comment"><sp/><sp/>//!<sp/>c.setArg(0,<sp/>a0);</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"><sp/><sp/>//!<sp/>c.setArg(1,<sp/>a1);</highlight></codeline>
<codeline lineno="1326"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1327"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>Use<sp/>them.</highlight></codeline>
<codeline lineno="1328"><highlight class="comment"><sp/><sp/>//!<sp/>c.add(a0,<sp/>a1);</highlight></codeline>
<codeline lineno="1329"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1330"><highlight class="comment"><sp/><sp/>//!<sp/>//<sp/>End<sp/>of<sp/>function<sp/>-<sp/>emits<sp/>function<sp/>epilog<sp/>and<sp/>return<sp/>instruction.</highlight></codeline>
<codeline lineno="1331"><highlight class="comment"><sp/><sp/>//!<sp/>c.endFunc();</highlight></codeline>
<codeline lineno="1332"><highlight class="comment"><sp/><sp/>//!<sp/>@endcode</highlight></codeline>
<codeline lineno="1333"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1334"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>are<sp/>like<sp/>variables.<sp/>How<sp/>to<sp/>manipulate<sp/>with<sp/>variables<sp/>is</highlight></codeline>
<codeline lineno="1335"><highlight class="comment"><sp/><sp/>//!<sp/>documented<sp/>in<sp/>@c<sp/>asmjit::Compiler,<sp/>variables<sp/>section.</highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1337"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>To<sp/>get<sp/>current<sp/>function<sp/>use<sp/>@c<sp/>currentFunction()<sp/>method<sp/>or<sp/>save</highlight></codeline>
<codeline lineno="1338"><highlight class="comment"><sp/><sp/>//!<sp/>pointer<sp/>to<sp/>@c<sp/>asmjit::Function<sp/>returned<sp/>by<sp/>@c<sp/>asmjit::Compiler::addFunc&lt;&gt;</highlight></codeline>
<codeline lineno="1339"><highlight class="comment"><sp/><sp/>//!<sp/>method.<sp/>Recommended<sp/>is<sp/>to<sp/>save<sp/>the<sp/>pointer.</highlight></codeline>
<codeline lineno="1340"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1341"><highlight class="comment"><sp/><sp/>//!<sp/>@sa<sp/>@c<sp/>BuildFunction0,<sp/>@c<sp/>BuildFunction1,<sp/>@c<sp/>BuildFunction2,<sp/>...</highlight></codeline>
<codeline lineno="1342"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound" tooltip="X86/X64 function node.">X86X64FuncNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a37bc8aee85db0136f85f7f27123dd522" kindref="member" tooltip="Add a new function.">addFunc</ref>(uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref>&amp;<sp/>p);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1344"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>End<sp/>of<sp/>current<sp/>function.</highlight></codeline>
<codeline lineno="1345"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1EndNode" kindref="compound" tooltip="End of function/block node.">EndNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae1a5b508ee29fb5e6037595f986a16a4" kindref="member" tooltip="End of current function.">endFunc</ref>();</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1347"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>current<sp/>function<sp/>as<sp/>@ref<sp/>X86X64FuncNode.</highlight></codeline>
<codeline lineno="1348"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1349"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>method<sp/>can<sp/>be<sp/>called<sp/>within<sp/>@c<sp/>addFunc()<sp/>and<sp/>@c<sp/>endFunc()</highlight></codeline>
<codeline lineno="1350"><highlight class="comment"><sp/><sp/>//!<sp/>block<sp/>to<sp/>get<sp/>current<sp/>function<sp/>you<sp/>are<sp/>working<sp/>with.<sp/>It&apos;s<sp/>recommended</highlight></codeline>
<codeline lineno="1351"><highlight class="comment"><sp/><sp/>//!<sp/>to<sp/>store<sp/>@c<sp/>asmjit::Function<sp/>pointer<sp/>returned<sp/>by<sp/>@c<sp/>addFunc&lt;&gt;<sp/>method,</highlight></codeline>
<codeline lineno="1352"><highlight class="comment"><sp/><sp/>//!<sp/>because<sp/>this<sp/>allows<sp/>you<sp/>in<sp/>future<sp/>implement<sp/>function<sp/>sections<sp/>outside<sp/>of</highlight></codeline>
<codeline lineno="1353"><highlight class="comment"><sp/><sp/>//!<sp/>function<sp/>itself<sp/>(yeah,<sp/>this<sp/>is<sp/>possible!).</highlight></codeline>
<codeline lineno="1354" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9419277c77af58ddd9d4c813f847cc0f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound" tooltip="X86/X64 function node.">X86X64FuncNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9419277c77af58ddd9d4c813f847cc0f" kindref="member" tooltip="Get current function as X86X64FuncNode.">getFunc</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound" tooltip="X86/X64 function node.">X86X64FuncNode</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1afa054f0e028aa072a6b54a38e182812a" kindref="member" tooltip="Current function.">_func</ref>);<sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Ret]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1360"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>RetNode.</highlight></codeline>
<codeline lineno="1361"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1RetNode" kindref="compound" tooltip="Function return node.">RetNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a12952f38011b3b735e8948fa2f6a6bc8" kindref="member" tooltip="Create a new RetNode.">newRet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1362"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>a<sp/>new<sp/>@ref<sp/>RetNode.</highlight></codeline>
<codeline lineno="1363"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1RetNode" kindref="compound" tooltip="Function return node.">RetNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af3c42c808f44535e3e2eb4209e7ab642" kindref="member" tooltip="Add a new RetNode.">addRet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Call]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1369"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>X86X64CallNode.</highlight></codeline>
<codeline lineno="1370"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound" tooltip="X86/X64 function-call node.">X86X64CallNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd80bd82013272ecdae209cd41802dfa" kindref="member" tooltip="Create a new X86X64CallNode.">newCall</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/>uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref>&amp;<sp/>p);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1371"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>a<sp/>new<sp/>@ref<sp/>X86X64CallNode.</highlight></codeline>
<codeline lineno="1372"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound" tooltip="X86/X64 function-call node.">X86X64CallNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c211bbb8bac7d8cf10ec2410e38aca0" kindref="member" tooltip="Add a new X86X64CallNode.">addCall</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/>uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref>&amp;<sp/>p);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Vars]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1378"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>function<sp/>argument<sp/>to<sp/>@a<sp/>var.</highlight></codeline>
<codeline lineno="1379"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0772c01f808f117609a87f7b344f9694" kindref="member" tooltip="Set function argument to var.">setArg</ref>(uint32_t<sp/>argIndex,<sp/><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1381"><highlight class="comment"><sp/><sp/>//!<sp/>@overridden</highlight></codeline>
<codeline lineno="1382"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0962b154aaa99a436acbc67f29d0ac12" kindref="member">_newVar</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>*<sp/>var,<sp/>uint32_t<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1384"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>Gp<sp/>variable.</highlight></codeline>
<codeline lineno="1385" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a692e27df983960f8d7c8c19fbc694" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a692e27df983960f8d7c8c19fbc694" kindref="member" tooltip="Create a new Gp variable.">newGpVar</ref>(uint32_t<sp/>vType<sp/>=<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a773337143d44de47e460e5e280661e3e" kindref="member" tooltip="Variable is target intptr_t (not compatible with host intptr_t).">kVarTypeIntPtr</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vType<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(IntUtil::inInterval&lt;uint32_t&gt;(vType,<sp/>_kVarTypeIntStart,<sp/>_kVarTypeIntEnd));</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/>var(NoInit);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0962b154aaa99a436acbc67f29d0ac12" kindref="member">_newVar</ref>(&amp;var,<sp/>vType,<sp/>name);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1394"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>Mm<sp/>variable.</highlight></codeline>
<codeline lineno="1395" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae814d711f1f21a98b4488580d5d0ec6c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound" tooltip="Mm variable.">MmVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae814d711f1f21a98b4488580d5d0ec6c" kindref="member" tooltip="Create a new Mm variable.">newMmVar</ref>(uint32_t<sp/>vType<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vType<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(IntUtil::inInterval&lt;uint32_t&gt;(vType,<sp/>_kVarTypeMmStart,<sp/>_kVarTypeMmEnd));</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound" tooltip="Mm variable.">MmVar</ref><sp/>var(NoInit);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0962b154aaa99a436acbc67f29d0ac12" kindref="member">_newVar</ref>(&amp;var,<sp/>vType,<sp/>name);</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1404"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>Xmm<sp/>variable.</highlight></codeline>
<codeline lineno="1405" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a082f52511cc0a1ab45368e5c49007507" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a082f52511cc0a1ab45368e5c49007507" kindref="member" tooltip="Create a new Xmm variable.">newXmmVar</ref>(uint32_t<sp/>vType<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vType<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(IntUtil::inInterval&lt;uint32_t&gt;(vType,<sp/>_kVarTypeXmmStart,<sp/>_kVarTypeXmmEnd));</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref><sp/>var(NoInit);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0962b154aaa99a436acbc67f29d0ac12" kindref="member">_newVar</ref>(&amp;var,<sp/>vType,<sp/>name);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1414"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>Ymm<sp/>variable.</highlight></codeline>
<codeline lineno="1415" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a755ee1db53a664b32f78387fda8250" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a755ee1db53a664b32f78387fda8250" kindref="member" tooltip="Create a new Ymm variable.">newYmmVar</ref>(uint32_t<sp/>vType<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea63ec4833bed0aeaa88e1f41c7f45b86f" kindref="member" tooltip="Variable is Ymm (AVX).">kVarTypeYmm</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vType<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>);</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(IntUtil::inInterval&lt;uint32_t&gt;(vType,<sp/>_kVarTypeYmmStart,<sp/>_kVarTypeYmmEnd));</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref><sp/>var(NoInit);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0962b154aaa99a436acbc67f29d0ac12" kindref="member">_newVar</ref>(&amp;var,<sp/>vType,<sp/>name);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1424"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>memory<sp/>home<sp/>of<sp/>variable<sp/>@a<sp/>var.</highlight></codeline>
<codeline lineno="1425"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2255f7e21de773b532660deface8041" kindref="member" tooltip="Get memory home of variable var.">getMemoryHome</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>*<sp/>home,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>displacement<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1427"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>home<sp/>of<sp/>variable<sp/>@a<sp/>var.</highlight></codeline>
<codeline lineno="1428"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/><sp/>//!<sp/>Default<sp/>memory<sp/>home<sp/>location<sp/>is<sp/>on<sp/>stack<sp/>(ESP/RSP),<sp/>but<sp/>when<sp/>needed<sp/>the</highlight></codeline>
<codeline lineno="1430"><highlight class="comment"><sp/><sp/>//!<sp/>bebahior<sp/>can<sp/>be<sp/>changed<sp/>by<sp/>this<sp/>method.</highlight></codeline>
<codeline lineno="1431"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1432"><highlight class="comment"><sp/><sp/>//!<sp/>It<sp/>is<sp/>an<sp/>error<sp/>to<sp/>chaining<sp/>memory<sp/>home<sp/>locations.<sp/>For<sp/>example<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="1433"><highlight class="comment"><sp/><sp/>//!<sp/>code<sp/>is<sp/>invalid:</highlight></codeline>
<codeline lineno="1434"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1435"><highlight class="comment"><sp/><sp/>//!<sp/>@code</highlight></codeline>
<codeline lineno="1436"><highlight class="comment"><sp/><sp/>//!<sp/>Compiler<sp/>c;</highlight></codeline>
<codeline lineno="1437"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1438"><highlight class="comment"><sp/><sp/>//!<sp/>...</highlight></codeline>
<codeline lineno="1439"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1440"><highlight class="comment"><sp/><sp/>//!<sp/>GpVar<sp/>v0(c,<sp/>kVarTypeIntPtr);</highlight></codeline>
<codeline lineno="1441"><highlight class="comment"><sp/><sp/>//!<sp/>GpVar<sp/>v1(c,<sp/>kVarTypeIntPtr);</highlight></codeline>
<codeline lineno="1442"><highlight class="comment"><sp/><sp/>//!<sp/>GpVar<sp/>v2(c,<sp/>kVarTypeIntPtr);</highlight></codeline>
<codeline lineno="1443"><highlight class="comment"><sp/><sp/>//!<sp/>GpVar<sp/>v3(c,<sp/>kVarTypeIntPtr);</highlight></codeline>
<codeline lineno="1444"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1445"><highlight class="comment"><sp/><sp/>//!<sp/>c.setMemoryHome(v1,<sp/>v0,<sp/>0);<sp/>//<sp/>Allowed,<sp/>[v0+0]<sp/>is<sp/>memory<sp/>home<sp/>for<sp/>v1.</highlight></codeline>
<codeline lineno="1446"><highlight class="comment"><sp/><sp/>//!<sp/>c.setMemoryHome(v2,<sp/>v0,<sp/>4);<sp/>//<sp/>Allowed,<sp/>[v0+4]<sp/>is<sp/>memory<sp/>home<sp/>for<sp/>v2.</highlight></codeline>
<codeline lineno="1447"><highlight class="comment"><sp/><sp/>//!<sp/>c.setMemoryHome(v3,<sp/>v2);<sp/><sp/><sp/><sp/>//<sp/>CHAINING,<sp/>NOT<sp/>ALLOWED!</highlight></codeline>
<codeline lineno="1448"><highlight class="comment"><sp/><sp/>//!<sp/>@endcode</highlight></codeline>
<codeline lineno="1449"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a21f700b79f8aa21c42e7e4ff30955815" kindref="member" tooltip="Set memory home of variable var.">setMemoryHome</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>home,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>displacement<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Stack]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/><sp/>//!<sp/>@overridden</highlight></codeline>
<codeline lineno="1456"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d9fb7b8d7cb33e3b327bad6c28202b5" kindref="member">_newStack</ref>(<ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>*<sp/>mem,<sp/>uint32_t<sp/>size,<sp/>uint32_t<sp/>alignment,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1458"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>memory<sp/>chunk<sp/>allocated<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="1459" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71172afbc9428df19ef66c5d191ca35a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71172afbc9428df19ef66c5d191ca35a" kindref="member" tooltip="Create a new memory chunk allocated on the stack.">newStack</ref>(uint32_t<sp/>size,<sp/>uint32_t<sp/>alignment,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref><sp/>m(NoInit);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d9fb7b8d7cb33e3b327bad6c28202b5" kindref="member">_newStack</ref>(&amp;m,<sp/>size,<sp/>alignment,<sp/>name);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Embed]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1469"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>8-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1470" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad4464655c36cd55f4955dca238c52f83" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad4464655c36cd55f4955dca238c52f83" kindref="member" tooltip="Add 8-bit integer data to the instuction stream.">db</ref>(uint8_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>1);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1471"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>16-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1472" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3bdf68fd6842743327026df289fa9b2e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3bdf68fd6842743327026df289fa9b2e" kindref="member" tooltip="Add 16-bit integer data to the instuction stream.">dw</ref>(uint16_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>2);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1473"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>32-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1474" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6df3589e0c252fd17b2b4029b90adca7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6df3589e0c252fd17b2b4029b90adca7" kindref="member" tooltip="Add 32-bit integer data to the instuction stream.">dd</ref>(uint32_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>4);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1475"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>64-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1476" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a61c053a876f282c30e129f4134ab7372" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a61c053a876f282c30e129f4134ab7372" kindref="member" tooltip="Add 64-bit integer data to the instuction stream.">dq</ref>(uint64_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>8);<sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1478"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>8-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1479" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf1211770f6b58916375a85d7e3ef53c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf1211770f6b58916375a85d7e3ef53c" kindref="member" tooltip="Add 8-bit integer data to the instuction stream.">dint8</ref>(int8_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int8_t)));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1480"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>8-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1481" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82c2e70cdf9a27465b2549199867b8bd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82c2e70cdf9a27465b2549199867b8bd" kindref="member" tooltip="Add 8-bit integer data to the instuction stream.">duint8</ref>(uint8_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t)));<sp/>}</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1483"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>16-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1484" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1effc4b31d1e1ab9451a5495e9df6c00" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1effc4b31d1e1ab9451a5495e9df6c00" kindref="member" tooltip="Add 16-bit integer data to the instuction stream.">dint16</ref>(int16_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16_t)));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1485"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>16-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1486" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a98e0f0dc6d1dfdb9e42acbf488692e79" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a98e0f0dc6d1dfdb9e42acbf488692e79" kindref="member" tooltip="Add 16-bit integer data to the instuction stream.">duint16</ref>(uint16_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t)));<sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1488"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>32-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1489" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6f8bb23e9a8b63560c540d84de0c7eb2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6f8bb23e9a8b63560c540d84de0c7eb2" kindref="member" tooltip="Add 32-bit integer data to the instuction stream.">dint32</ref>(int32_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t)));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1490"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>32-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1491" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ea902788572d94f1d63eee7576bc13a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ea902788572d94f1d63eee7576bc13a" kindref="member" tooltip="Add 32-bit integer data to the instuction stream.">duint32</ref>(uint32_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t)));<sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1493"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>64-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1494" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a193b389ed59705a7f2f5005dbe83f338" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a193b389ed59705a7f2f5005dbe83f338" kindref="member" tooltip="Add 64-bit integer data to the instuction stream.">dint64</ref>(int64_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t)));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1495"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>64-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1496" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a334ced2272d029ec9048552ad5ec2270" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a334ced2272d029ec9048552ad5ec2270" kindref="member" tooltip="Add 64-bit integer data to the instuction stream.">duint64</ref>(uint64_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t)));<sp/>}</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1498"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>float<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1499" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76a5474b0fb62bba2cf29e38bec1516e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76a5474b0fb62bba2cf29e38bec1516e" kindref="member" tooltip="Add float data to the instuction stream.">dfloat</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1500"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>double<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1501" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4c6a2be22bef9c6f370023d6d9b1ad6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4c6a2be22bef9c6f370023d6d9b1ad6" kindref="member" tooltip="Add double data to the instuction stream.">ddouble</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)));<sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1503"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>pointer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1504" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae47eacd7a07027b46025c2dded2a4d14" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae47eacd7a07027b46025c2dded2a4d14" kindref="member" tooltip="Add pointer data to the instuction stream.">dptr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)));<sp/>}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1506"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>Mm<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1507" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf09a0d58c5ee3f8002be181db1ebfbd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf09a0d58c5ee3f8002be181db1ebfbd" kindref="member" tooltip="Add Mm data to the instuction stream.">dmm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionasmjit_1_1Vec64Data" kindref="compound" tooltip="64-bit vector register data.">MmData</ref>&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionasmjit_1_1Vec64Data" kindref="compound" tooltip="64-bit vector register data.">MmData</ref>)));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1508"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>Xmm<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1509" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a021bef6ff59c63b19d2d2b809d07f2fb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a021bef6ff59c63b19d2d2b809d07f2fb" kindref="member" tooltip="Add Xmm data to the instuction stream.">dxmm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionasmjit_1_1Vec128Data" kindref="compound" tooltip="128-bit vector register data.">XmmData</ref>&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionasmjit_1_1Vec128Data" kindref="compound" tooltip="128-bit vector register data.">XmmData</ref>)));<sp/>}</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1511"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>data<sp/>in<sp/>a<sp/>given<sp/>structure<sp/>instance<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="1512"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1513" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a340cced0bf25827c505ddd6527b080fe" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a340cced0bf25827c505ddd6527b080fe" kindref="member" tooltip="Add data in a given structure instance to the instuction stream.">dstruct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" kindref="member" tooltip="Embed data.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)));<sp/>}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Make]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/><sp/>//!<sp/>@overridden</highlight></codeline>
<codeline lineno="1520"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff8fecf22ca3f324379e2c06c16941cd" kindref="member">make</ref>();</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Serialize]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1526"><highlight class="comment"><sp/><sp/>//!<sp/>@overridden</highlight></codeline>
<codeline lineno="1527"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a930f6d27a016a7ddcd5ffa06f198056e" kindref="member">serialize</ref>(<ref refid="structasmjit_1_1BaseAssembler" kindref="compound" tooltip="Base assembler.">BaseAssembler</ref>&amp;<sp/>assembler);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Options]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1533"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Force<sp/>short<sp/>form<sp/>of<sp/>jmp/jcc/other<sp/>instruction.</highlight></codeline>
<codeline lineno="1534" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b0e3a386b1e52cb8b2e739fd67f6b0e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b0e3a386b1e52cb8b2e739fd67f6b0e" kindref="member" tooltip="Force short form of jmp/jcc/other instruction.">short_</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca3f497bb7cd655089b1e5470867cbc187" kindref="member" tooltip="Emit short form of the instruction.">kInstOptionShortForm</ref>;</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1539"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Force<sp/>long<sp/>form<sp/>of<sp/>jmp/jcc/other<sp/>instruction.</highlight></codeline>
<codeline lineno="1540" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe7ad9b26ae424e1b0c37768d1e2b7e4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe7ad9b26ae424e1b0c37768d1e2b7e4" kindref="member" tooltip="Force long form of jmp/jcc/other instruction.">long_</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca0914ab67e09d24f2e0c0d512b70c7f08" kindref="member" tooltip="Emit long form of the instruction.">kInstOptionLongForm</ref>;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1545"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Condition<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>taken.</highlight></codeline>
<codeline lineno="1546" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa645898777e8f4eceed896d118d08dec" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa645898777e8f4eceed896d118d08dec" kindref="member" tooltip="Condition is likely to be taken.">taken</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4df01d78f89add2e942ec79ad211a4f5" kindref="member" tooltip="Condition is likely to be taken (instruction).">kInstOptionTaken</ref>;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1551"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Condition<sp/>is<sp/>unlikely<sp/>to<sp/>be<sp/>taken.</highlight></codeline>
<codeline lineno="1552" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22dbcf0fb59edcf4de0101214c5e532d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22dbcf0fb59edcf4de0101214c5e532d" kindref="member" tooltip="Condition is unlikely to be taken.">notTaken</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4c436f33ba83c4df5948e49e01a5ef67" kindref="member" tooltip="Condition is unlikely to be taken (instruction).">kInstOptionNotTaken</ref>;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1557"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Lock<sp/>prefix.</highlight></codeline>
<codeline lineno="1558" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58414d7d73f2d245e6d469c3bd22b7d9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58414d7d73f2d245e6d469c3bd22b7d9" kindref="member" tooltip="Lock prefix.">lock</ref>()<sp/>{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa438db3f8e9ef167e318d3ae4b0043f71" kindref="member" tooltip="Emit instruction with LOCK prefix.">kInstOptionLock</ref>;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[X86<sp/>Instructions]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1567"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>with<sp/>carry.</highlight></codeline>
<codeline lineno="1568" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a23f394e50720250b658ad50f1a4a3719" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a23f394e50720250b658ad50f1a4a3719" kindref="member" tooltip="Add with carry.">adc</ref>,<sp/>kInstAdc,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1569"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1570" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9a5901641713c61e8ca96aa293e12593" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a23f394e50720250b658ad50f1a4a3719" kindref="member" tooltip="Add with carry.">adc</ref>,<sp/>kInstAdc,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1571"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1572" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a80cac8bec17bdf3dbf247d2bfb4949" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(adc,<sp/>kInstAdc,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1573"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1574" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7c16966ae671cb1c7e451c82b17a048" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(adc,<sp/>kInstAdc,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1575"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1576" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8cd80983c5c08bd6f4940894238f7662" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(adc,<sp/>kInstAdc,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1578"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add.</highlight></codeline>
<codeline lineno="1579" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a37c7e177895c7ffeaafc3536efcd7b40" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a37c7e177895c7ffeaafc3536efcd7b40" kindref="member" tooltip="Add.">add</ref>,<sp/>kInstAdd,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1580"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1581" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73b8b383a992e8da2ee123d2f1ae082e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(add,<sp/>kInstAdd,<sp/>GpVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1582"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1583" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a08b8f00c2cf9e40443480ffc4c1b223e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(add,<sp/>kInstAdd,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1584"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1585" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa2ec051f1e17c34153c2e9e3c6e645d7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(add,<sp/>kInstAdd,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1586"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1587" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa5ff93f4dce31944026061052d024d35" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(add,<sp/>kInstAdd,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1589"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And.</highlight></codeline>
<codeline lineno="1590" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3af459a9d9964da7610f817c0f82a1d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3af459a9d9964da7610f817c0f82a1d" kindref="member" tooltip="And.">and_</ref>,<sp/>kInstAnd,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1591"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1592" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac936ab35308a2a35824049ae57051e3a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(and_,<sp/>kInstAnd,<sp/>GpVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1593"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1594" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a426f13308d2365da9a27faca833d9909" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(and_,<sp/>kInstAnd,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1595"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1596" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a885f5046a66bc3485209d181ec350963" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(and_,<sp/>kInstAnd,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1597"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1598" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2938da08584a201c635b5fb91e77f222" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(and_,<sp/>kInstAnd,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1600"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>scan<sp/>forward.</highlight></codeline>
<codeline lineno="1601" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a418c282c528153dec1092963a78b6c60" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a418c282c528153dec1092963a78b6c60" kindref="member" tooltip="Bit scan forward.">bsf</ref>,<sp/>kInstBsf,<sp/>GpVar,<sp/>GpVar,<sp/>!o0.isGpb())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1602"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1603" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95d85dfd24bfb7109e192165ec1fd2e8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(bsf,<sp/>kInstBsf,<sp/>GpVar,<sp/>Mem,<sp/>!o0.isGpb())</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1605"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>scan<sp/>reverse.</highlight></codeline>
<codeline lineno="1606" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac202154b577e23342bc61454088663a2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac202154b577e23342bc61454088663a2" kindref="member" tooltip="Bit scan reverse.">bsr</ref>,<sp/>kInstBsr,<sp/>GpVar,<sp/>GpVar,<sp/>!o0.isGpb())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1607"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1608" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac71fab03aa5a95dae1d294fba7828706" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(bsr,<sp/>kInstBsr,<sp/>GpVar,<sp/>Mem,<sp/>!o0.isGpb())</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1610"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Byte<sp/>swap<sp/>(32-bit<sp/>or<sp/>64-bit<sp/>registers<sp/>only)<sp/>(i486).</highlight></codeline>
<codeline lineno="1611" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8816df859e5fce1302cea819853ead2f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8816df859e5fce1302cea819853ead2f" kindref="member" tooltip="Byte swap (32-bit or 64-bit registers only) (i486).">bswap</ref>,<sp/>kInstBswap,<sp/>GpVar,<sp/>o0.getSize()<sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1613"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>test.</highlight></codeline>
<codeline lineno="1614" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ec66bfb37b4cde8d0bc93f2ae5020bc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ec66bfb37b4cde8d0bc93f2ae5020bc" kindref="member" tooltip="Bit test.">bt</ref>,<sp/>kInstBt,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1615"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1616" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a739c607e0f84ecb4338595692d01bf4a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(bt,<sp/>kInstBt,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1617"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1618" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a360804ca332277edba328c55fe79f0da" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(bt,<sp/>kInstBt,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1619"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1620" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a142f546aa55847ee63741f3553a6d2cd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(bt,<sp/>kInstBt,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1622"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>test<sp/>and<sp/>complement.</highlight></codeline>
<codeline lineno="1623" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe9ceb332a5c597c4b4a6a016981c85f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe9ceb332a5c597c4b4a6a016981c85f" kindref="member" tooltip="Bit test and complement.">btc</ref>,<sp/>kInstBtc,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1624"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1625" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a02df1a8c03aff2c52b855d747d8b97e4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(btc,<sp/>kInstBtc,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1626"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1627" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade9e499fd02dc97e9e0b63a3b1955336" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(btc,<sp/>kInstBtc,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1628"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1629" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac04f0ba2c56c1e53f60328cef5c1d364" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(btc,<sp/>kInstBtc,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1631"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>test<sp/>and<sp/>reset.</highlight></codeline>
<codeline lineno="1632" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a00c644f2e672c460a49682d6abf63cd9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a00c644f2e672c460a49682d6abf63cd9" kindref="member" tooltip="Bit test and reset.">btr</ref>,<sp/>kInstBtr,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1633"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1634" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2c5f229a065c1b717f8802fec25d0a1f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(btr,<sp/>kInstBtr,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1635"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1636" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af7bb8330a30fec76bab67b7387384174" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(btr,<sp/>kInstBtr,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1637"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1638" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe49f37d64953216e6ef7e94280d3d38" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(btr,<sp/>kInstBtr,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1640"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>test<sp/>and<sp/>set.</highlight></codeline>
<codeline lineno="1641" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8a2e21156c4ed3401c37feb0430f377b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8a2e21156c4ed3401c37feb0430f377b" kindref="member" tooltip="Bit test and set.">bts</ref>,<sp/>kInstBts,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1642"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1643" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a598ab82900d310abb03d22351077f73e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(bts,<sp/>kInstBts,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1644"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1645" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7dbd6a93a071f7cab10e8e6345eafd88" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(bts,<sp/>kInstBts,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1646"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1647" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa2c9685ab3f6fa623ec2fca9ab75a591" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(bts,<sp/>kInstBts,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1649"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Call.</highlight></codeline>
<codeline lineno="1650" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa41fa68c7f7070da0aec2ae44f0b8e00" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound" tooltip="X86/X64 function-call node.">X86X64CallNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa41fa68c7f7070da0aec2ae44f0b8e00" kindref="member" tooltip="Call.">call</ref>(const<sp/>GpVar&amp;<sp/>dst,<sp/>uint32_t<sp/>conv,<sp/>const<sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref>&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c211bbb8bac7d8cf10ec2410e38aca0" kindref="member" tooltip="Add a new X86X64CallNode.">addCall</ref>(dst,<sp/>conv,<sp/>p);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1653"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1654" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a78c6bd8bcb63beda9bf841c9cc32e8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound" tooltip="X86/X64 function-call node.">X86X64CallNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a78c6bd8bcb63beda9bf841c9cc32e8" kindref="member">call</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>&amp;<sp/>dst,<sp/>uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref>&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c211bbb8bac7d8cf10ec2410e38aca0" kindref="member" tooltip="Add a new X86X64CallNode.">addCall</ref>(dst,<sp/>conv,<sp/>p);</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1657"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1658" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70739a1464211c7dd7b9064a8275aa90" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound" tooltip="X86/X64 function-call node.">X86X64CallNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70739a1464211c7dd7b9064a8275aa90" kindref="member">call</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/>dst,<sp/>uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref>&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c211bbb8bac7d8cf10ec2410e38aca0" kindref="member" tooltip="Add a new X86X64CallNode.">addCall</ref>(dst,<sp/>conv,<sp/>p);</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1661"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1662" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a056c7354058e6f44265dd666ca31fdb8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound" tooltip="X86/X64 function-call node.">X86X64CallNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a056c7354058e6f44265dd666ca31fdb8" kindref="member">call</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/>uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref>&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>((intptr_t)dst);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c211bbb8bac7d8cf10ec2410e38aca0" kindref="member" tooltip="Add a new X86X64CallNode.">addCall</ref>(imm,<sp/>conv,<sp/>p);</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1666"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1667" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf970107c41569a2abc54ef5489da64d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound" tooltip="X86/X64 function-call node.">X86X64CallNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf970107c41569a2abc54ef5489da64d" kindref="member">call</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/>uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref>&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c211bbb8bac7d8cf10ec2410e38aca0" kindref="member" tooltip="Add a new X86X64CallNode.">addCall</ref>(label,<sp/>conv,<sp/>p);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1671"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>carry<sp/>flag</highlight></codeline>
<codeline lineno="1672" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07b39ead4d18aacf700eff62c8eb4d40" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07b39ead4d18aacf700eff62c8eb4d40" kindref="member" tooltip="Clear carry flag.">clc</ref>,<sp/>kInstClc)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1673"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>direction<sp/>flag</highlight></codeline>
<codeline lineno="1674" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acd9b7abf95f9533e6b2c5b2882df311c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acd9b7abf95f9533e6b2c5b2882df311c" kindref="member" tooltip="Clear direction flag.">cld</ref>,<sp/>kInstCld)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1675"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Complement<sp/>carry<sp/>Flag.</highlight></codeline>
<codeline lineno="1676" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc5a4a77840e064776f3b12592c08a93" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc5a4a77840e064776f3b12592c08a93" kindref="member" tooltip="Complement carry Flag.">cmc</ref>,<sp/>kInstCmc)</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1678"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>byte<sp/>to<sp/>word<sp/>(AX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>AL).</highlight></codeline>
<codeline lineno="1679" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96bda354d73ef98d78b7a2443fd229eb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96bda354d73ef98d78b7a2443fd229eb" kindref="member" tooltip="Convert byte to word (AX &amp;lt;- Sign Extend AL).">cbw</ref>,<sp/>kInstCbw,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/><sp/></highlight><highlight class="comment">/*<sp/>al<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1680"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>word<sp/>to<sp/>dword<sp/>(DX:AX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>AX).</highlight></codeline>
<codeline lineno="1681" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e34e3ac2fda37c19c8677f363a15804" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e34e3ac2fda37c19c8677f363a15804" kindref="member" tooltip="Convert word to dword (DX:AX &amp;lt;- Sign Extend AX).">cwd</ref>,<sp/>kInstCwd,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/><sp/></highlight><highlight class="comment">/*<sp/>dx<sp/>*/</highlight><highlight class="normal">,<sp/>GpVar<sp/></highlight><highlight class="comment">/*<sp/>ax<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1682"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>word<sp/>to<sp/>dword<sp/>(EAX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>AX).</highlight></codeline>
<codeline lineno="1683" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d10570860aa6971169bc6a75ec4fd53" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d10570860aa6971169bc6a75ec4fd53" kindref="member" tooltip="Convert word to dword (EAX &amp;lt;- Sign Extend AX).">cwde</ref>,<sp/>kInstCwde,<sp/>GpVar<sp/></highlight><highlight class="comment">/*<sp/>eax<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1684"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>dword<sp/>to<sp/>qword<sp/>(EDX:EAX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>EAX).</highlight></codeline>
<codeline lineno="1685" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0349306595d0af510fa4e8d45d5a6b25" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0349306595d0af510fa4e8d45d5a6b25" kindref="member" tooltip="Convert dword to qword (EDX:EAX &amp;lt;- Sign Extend EAX).">cdq</ref>,<sp/>kInstCdq,<sp/>GpVar<sp/></highlight><highlight class="comment">/*<sp/>edx<sp/>*/</highlight><highlight class="normal">,<sp/>GpVar<sp/></highlight><highlight class="comment">/*<sp/>eax<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1687"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Conditional<sp/>move.</highlight></codeline>
<codeline lineno="1688" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a585af1881d98b46bb53c5e79a96e33c0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2cc(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a585af1881d98b46bb53c5e79a96e33c0" kindref="member" tooltip="Conditional move.">cmov</ref>,<sp/>kInstCmov,<sp/><ref refid="group__asmjit__x86x64_1gaa9be0c08ba25861309d0957d134c8c26" kindref="member" tooltip="Translate condition code cc to cmovcc instruction code.">condToCmovcc</ref>,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1689"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Conditional<sp/>move.</highlight></codeline>
<codeline lineno="1690" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7ff69d129d1b73da9b818f902cd8ccb1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2cc(cmov,<sp/>kInstCmov,<sp/>condToCmovcc,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1692"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>two<sp/>operands.</highlight></codeline>
<codeline lineno="1693" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a86ea5d8bd088a5129f671f0e1c20cae3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a86ea5d8bd088a5129f671f0e1c20cae3" kindref="member" tooltip="Compare two operands.">cmp</ref>,<sp/>kInstCmp,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1694"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1695" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaa6fad5ed68a004b7b2bf40d516e8c58" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cmp,<sp/>kInstCmp,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1696"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1697" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f32ff89caedafb8772f4e7b5a9bf9c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(cmp,<sp/>kInstCmp,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1698"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1699" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1553ea527761a2a647e94210c7cbd254" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cmp,<sp/>kInstCmp,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1700"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1701" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a949564caca1756d4456686b194d13ec8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(cmp,<sp/>kInstCmp,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1703"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>and<sp/>exchange<sp/>(i486).</highlight></codeline>
<codeline lineno="1704" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41202c94f73489c2ca3dde54346ab608" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41202c94f73489c2ca3dde54346ab608" kindref="member" tooltip="Compare and exchange (i486).">cmpxchg</ref>,<sp/>kInstCmpxchg,<sp/>GpVar<sp/></highlight><highlight class="comment">/*<sp/>eax<sp/>*/</highlight><highlight class="normal">,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1705"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1706" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79dfaf56f31dbf3d1326926159775c7e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(cmpxchg,<sp/>kInstCmpxchg,<sp/>GpVar<sp/></highlight><highlight class="comment">/*<sp/>eax<sp/>*/</highlight><highlight class="normal">,<sp/>Mem,<sp/>GpVar)</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1708"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compares<sp/>the<sp/>64-bit<sp/>value<sp/>in<sp/>EDX:EAX<sp/>with<sp/>the<sp/>memory<sp/>operand<sp/>(Pentium).</highlight></codeline>
<codeline lineno="1709" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fecdbc314a40bcdc9c1082d55c6308d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fecdbc314a40bcdc9c1082d55c6308d" kindref="member" tooltip="Compares the 64-bit value in EDX:EAX with the memory operand (Pentium).">cmpxchg8b</ref>(</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>GpVar&amp;<sp/>cmp_edx,<sp/>const<sp/>GpVar&amp;<sp/>cmp_eax,</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>GpVar&amp;<sp/>cmp_ecx,<sp/>const<sp/>GpVar&amp;<sp/>cmp_ebx,</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>Mem&amp;<sp/>dst)<sp/>{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(kInstCmpxchg8b,<sp/>cmp_edx,<sp/>cmp_eax,<sp/>cmp_ecx,<sp/>cmp_ebx,<sp/>dst);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1717"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>CPU<sp/>identification<sp/>(i486).</highlight></codeline>
<codeline lineno="1718" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a19c941a097527535d1e59ecc333cb7b5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a19c941a097527535d1e59ecc333cb7b5" kindref="member" tooltip="CPU identification (i486).">cpuid</ref>(</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>inout_eax,</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>out_ebx,</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>out_ecx,</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>out_edx)<sp/>{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destination<sp/>variables<sp/>must<sp/>be<sp/>different.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(inout_eax.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>!=<sp/>out_ebx.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_ebx.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>!=<sp/>out_ecx.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_ecx.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>!=<sp/>out_edx.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>());</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(kInstCpuid,<sp/>inout_eax,<sp/>out_ebx,<sp/>out_ecx,<sp/>out_edx);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1732"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Accumulate<sp/>crc32<sp/>value<sp/>(polynomial<sp/>0x11EDC6F41)<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="1733" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1d7d834d5e3f74ec03e461f60693207f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1d7d834d5e3f74ec03e461f60693207f" kindref="member" tooltip="Accumulate crc32 value (polynomial 0x11EDC6F41) (SSE4.2).">crc32</ref>,<sp/>kInstCrc32,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/>o0.<ref refid="structasmjit_1_1Operand_1a5dd129c65aac0057afdd4f844785437a" kindref="member" tooltip="Get whether the operand is register of type.">isRegType</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>)<sp/>||<sp/>o0.<ref refid="structasmjit_1_1Operand_1a5dd129c65aac0057afdd4f844785437a" kindref="member" tooltip="Get whether the operand is register of type.">isRegType</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>))</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1734"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1735" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af89a591f66886a62c70d1fc8785742f4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1d7d834d5e3f74ec03e461f60693207f" kindref="member" tooltip="Accumulate crc32 value (polynomial 0x11EDC6F41) (SSE4.2).">crc32</ref>,<sp/>kInstCrc32,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>o0.<ref refid="structasmjit_1_1Operand_1a5dd129c65aac0057afdd4f844785437a" kindref="member" tooltip="Get whether the operand is register of type.">isRegType</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>)<sp/>||<sp/>o0.<ref refid="structasmjit_1_1Operand_1a5dd129c65aac0057afdd4f844785437a" kindref="member" tooltip="Get whether the operand is register of type.">isRegType</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>))</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Decrement<sp/>by<sp/>1.</highlight></codeline>
<codeline lineno="1738" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec0851ea27c14395707d2fd6a2237fe6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec0851ea27c14395707d2fd6a2237fe6" kindref="member" tooltip="Decrement by 1.">dec</ref>,<sp/>kInstDec,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1739"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1740" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36fc55a484798fd2e3f12a126cbb3e7d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec0851ea27c14395707d2fd6a2237fe6" kindref="member" tooltip="Decrement by 1.">dec</ref>,<sp/>kInstDec,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Unsigned<sp/>divide<sp/>(o0:o1<sp/>&lt;-<sp/>o0:o1<sp/>/<sp/>o2).</highlight></codeline>
<codeline lineno="1743"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1744"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/>//!<sp/>Remainder<sp/>is<sp/>stored<sp/>in<sp/>@a<sp/>o0,<sp/>quotient<sp/>is<sp/>stored<sp/>in<sp/>@a<sp/>o1.</highlight></codeline>
<codeline lineno="1745" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a629ffef33b3354224ffc8c168738422a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a629ffef33b3354224ffc8c168738422a" kindref="member" tooltip="Unsigned divide (o0:o1 &amp;lt;- o0:o1 / o2).">div</ref>,<sp/>kInstDiv,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1746"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1747" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad091cb3328c660106f52bc91807e2f4b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(div,<sp/>kInstDiv,<sp/>GpVar,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>o0.getId()<sp/>!=<sp/>o1.getId())</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1749"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Signed<sp/>divide<sp/>(o0:o1<sp/>&lt;-<sp/>o0:o1<sp/>/<sp/>o2).</highlight></codeline>
<codeline lineno="1750"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1751"><highlight class="comment"><sp/><sp/>//!<sp/>Remainder<sp/>is<sp/>stored<sp/>in<sp/>@a<sp/>o0,<sp/>quotient<sp/>is<sp/>stored<sp/>in<sp/>@a<sp/>o1.</highlight></codeline>
<codeline lineno="1752" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1938b6615f97dc3c970552c35696753" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1938b6615f97dc3c970552c35696753" kindref="member" tooltip="Signed divide (o0:o1 &amp;lt;- o0:o1 / o2).">idiv</ref>,<sp/>kInstIdiv,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1753"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1754" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a532bf85f7fb4ce1b7d64286ec67909a4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(idiv,<sp/>kInstIdiv,<sp/>GpVar,<sp/>GpVar,<sp/>Mem,<sp/>o0.getId()<sp/>!=<sp/>o1.getId())</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1756"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Signed<sp/>multiply<sp/>(o0:o1<sp/>&lt;-<sp/>o1<sp/>*<sp/>o2).</highlight></codeline>
<codeline lineno="1757"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1758"><highlight class="comment"><sp/><sp/>//!<sp/>Hi<sp/>value<sp/>is<sp/>stored<sp/>in<sp/>@a<sp/>o0,<sp/>lo<sp/>value<sp/>is<sp/>stored<sp/>in<sp/>@a<sp/>o1.</highlight></codeline>
<codeline lineno="1759" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad8e31bc43c5825dbf9c2e46f068301b9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad8e31bc43c5825dbf9c2e46f068301b9" kindref="member" tooltip="Signed multiply (o0:o1 &amp;lt;- o1 * o2).">imul</ref>,<sp/>kInstImul,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1760"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1761" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adcc003810acb79e972dfb20cf5eb495e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(imul,<sp/>kInstImul,<sp/>GpVar,<sp/>GpVar,<sp/>Mem,<sp/>o0.getId()<sp/>!=<sp/>o1.getId())</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1763"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Signed<sp/>multiply.</highlight></codeline>
<codeline lineno="1764" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad31b4f2e1c1058d78ee7b1720c2baaaf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(imul,<sp/>kInstImul,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1765"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1766" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58a0b19a22837f0632013a2e34cc9c24" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(imul,<sp/>kInstImul,<sp/>GpVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1767"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1768" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1096fc97f7928ef9aa932bc2ebcacfbb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(imul,<sp/>kInstImul,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1770"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Signed<sp/>multiply.</highlight></codeline>
<codeline lineno="1771" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee585ee23326894f6834d9d9666359e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(imul,<sp/>kInstImul,<sp/>GpVar,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1772"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1773" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70ea5b8424ea5abeceeb57fc653d0810" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(imul,<sp/>kInstImul,<sp/>GpVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1775"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Increment<sp/>by<sp/>1.</highlight></codeline>
<codeline lineno="1776" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a75aa4bbf2d4bcd773e3614fcb9afdcb4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a75aa4bbf2d4bcd773e3614fcb9afdcb4" kindref="member" tooltip="Increment by 1.">inc</ref>,<sp/>kInstInc,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1777"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1778" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac55aa19c903aeee19bb91c6063da532d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(inc,<sp/>kInstInc,<sp/>Mem)</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1780"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Interrupt.</highlight></codeline>
<codeline lineno="1781" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e233f556c1269a06d7bf44311672ee3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e233f556c1269a06d7bf44311672ee3" kindref="member" tooltip="Interrupt.">int_</ref>,<sp/>kInstInt,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1782"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Interrupt<sp/>3<sp/>-<sp/>trap<sp/>to<sp/>debugger.</highlight></codeline>
<codeline lineno="1783" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4dd05feb7d3d80f69c4c952beb8a67fc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4dd05feb7d3d80f69c4c952beb8a67fc" kindref="member" tooltip="Interrupt 3 - trap to debugger.">int3</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e233f556c1269a06d7bf44311672ee3" kindref="member" tooltip="Interrupt.">int_</ref>(3);<sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1785"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Jump<sp/>to<sp/>label<sp/>@a<sp/>label<sp/>if<sp/>condition<sp/>@a<sp/>cc<sp/>is<sp/>met.</highlight></codeline>
<codeline lineno="1786" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a28bcac7a270da9ff6c1a615c343a50ba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1cc(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a28bcac7a270da9ff6c1a615c343a50ba" kindref="member" tooltip="Jump to label label if condition cc is met.">j</ref>,<sp/>kInstJ,<sp/><ref refid="group__asmjit__x86x64_1ga6c8d2f90a1fb96f9a6002c0b70458e5e" kindref="member" tooltip="Translate condition code cc to jcc instruction code.">condToJcc</ref>,<sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>)</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Jump.</highlight></codeline>
<codeline lineno="1789" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a389bceea77b5d3631dccc33df334a80b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a389bceea77b5d3631dccc33df334a80b" kindref="member" tooltip="Jump.">jmp</ref>,<sp/>kInstJmp,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1790"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1791" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2d7b5aad95e6d761a13800ef62976fc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(jmp,<sp/>kInstJmp,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1792"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1793" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76abad105294f6391ed6f53d4b3a5a6a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(jmp,<sp/>kInstJmp,<sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1794"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1795" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af088b3f2bb793af45cdbd006545d9b7b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(jmp,<sp/>kInstJmp,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1796"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1797" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab38d1e6f5782e17e30ccd2ad264ddd2c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/>jmp(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab38d1e6f5782e17e30ccd2ad264ddd2c" kindref="member">jmp</ref>(<ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>((intptr_t)dst));<sp/>}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1799"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>AH<sp/>from<sp/>flags.</highlight></codeline>
<codeline lineno="1800" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaa9f213911923fa6b20fc827e1fdda3f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaa9f213911923fa6b20fc827e1fdda3f" kindref="member" tooltip="Load AH from flags.">lahf</ref>,<sp/>kInstLahf,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>)</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Load<sp/>effective<sp/>address</highlight></codeline>
<codeline lineno="1803" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac878a2ddea722ad11aab623849f23c3f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac878a2ddea722ad11aab623849f23c3f" kindref="member" tooltip="Load effective address.">lea</ref>,<sp/>kInstLea,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1805"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move.</highlight></codeline>
<codeline lineno="1806" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aed8555f624e41277f2565916d27d7f61" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aed8555f624e41277f2565916d27d7f61" kindref="member" tooltip="Move.">mov</ref>,<sp/>kInstMov,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1807"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1808" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd5ff88498023b27dc25e1e7e3e4b660" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1809"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1810" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad76cfedc4ad88b6e4f2d849a274647dd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(mov,<sp/>kInstMov,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1811"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1812" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a91f8a28cb02dd1af0863230a003e3cd4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1813"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1814" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1dbfc8795631a2d5e06af41c600111e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(mov,<sp/>kInstMov,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1816"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>from<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="1817" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1accc9744ab150ebfe91de63b5737e46e9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1818"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1819" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7806aaa4062a67aaea42f5d93e53123" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/>Mem,<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1820"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>to<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="1821" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a09367e438bf4c5f187252f5cb9d6e4db" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref>,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1822"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1823" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adebf9a6cb73f735652bf2afadd70d664" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/>SegReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1825"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>(AL|AX|EAX|RAX<sp/>&lt;-<sp/>absolute<sp/>address<sp/>in<sp/>immediate).</highlight></codeline>
<codeline lineno="1826" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76078c748a233466a497590c36991878" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76078c748a233466a497590c36991878" kindref="member" tooltip="Move (AL|AX|EAX|RAX &amp;lt;- absolute address in immediate).">mov_ptr</ref>(const<sp/>GpVar&amp;<sp/>dst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>(static_cast&lt;int64_t&gt;((intptr_t)src));</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(kInstMovptr,<sp/>dst,<sp/>imm);</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1830"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>(absolute<sp/>address<sp/>in<sp/>immediate<sp/>&lt;-<sp/>AL|AX|EAX|RAX).</highlight></codeline>
<codeline lineno="1831" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf49d9f9cc6564349e7c916b4f402291" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1InstNode" kindref="compound" tooltip="Instruction node.">InstNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf49d9f9cc6564349e7c916b4f402291" kindref="member" tooltip="Move (absolute address in immediate &amp;lt;- AL|AX|EAX|RAX).">mov_ptr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>(static_cast&lt;int64_t&gt;((intptr_t)dst));</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(kInstMovptr,<sp/>imm,<sp/>src);</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1836"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>data<sp/>after<sp/>swapping<sp/>bytes<sp/>(SSE3<sp/>-<sp/>Atom).</highlight></codeline>
<codeline lineno="1837" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a3a0af2ca8d34b30ca6c675019ee7eb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a3a0af2ca8d34b30ca6c675019ee7eb" kindref="member" tooltip="Move data after swapping bytes (SSE3 - Atom).">movbe</ref>,<sp/>kInstMovbe,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>!o0.isGpb());</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1838"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1839" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2efa4881e7fef0a2f4a7684cd8a30222" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a3a0af2ca8d34b30ca6c675019ee7eb" kindref="member" tooltip="Move data after swapping bytes (SSE3 - Atom).">movbe</ref>,<sp/>kInstMovbe,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/>!o1.isGpb());</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1841"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>with<sp/>sign-extension.</highlight></codeline>
<codeline lineno="1842" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab22b913da837ea06b67d533e6c027d6e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab22b913da837ea06b67d533e6c027d6e" kindref="member" tooltip="Move with sign-extension.">movsx</ref>,<sp/>kInstMovsx,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1843"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1844" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae2c283292003b3ac03f24cb740594417" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab22b913da837ea06b67d533e6c027d6e" kindref="member" tooltip="Move with sign-extension.">movsx</ref>,<sp/>kInstMovsx,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1846"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>with<sp/>zero-extension.</highlight></codeline>
<codeline lineno="1847" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab64d4a04b00e2ec471d6850a5683efa3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab64d4a04b00e2ec471d6850a5683efa3" kindref="member" tooltip="Move with zero-extension.">movzx</ref>,<sp/>kInstMovzx,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1848"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1849" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0abca612bc68be735ea07fc87264af0e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movzx,<sp/>kInstMovzx,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1851"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unsigned<sp/>multiply<sp/>(o0:o1<sp/>&lt;-<sp/>o1<sp/>*<sp/>o2).</highlight></codeline>
<codeline lineno="1852" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a022a569528a2ba1cc8f5fc39eb916515" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a022a569528a2ba1cc8f5fc39eb916515" kindref="member" tooltip="Unsigned multiply (o0:o1 &amp;lt;- o1 * o2).">mul</ref>,<sp/>kInstMul,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1853"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1854" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a74f0e735cd136b611d8633e191b050ee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(mul,<sp/>kInstMul,<sp/>GpVar,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>o0.getId()<sp/>!=<sp/>o1.getId())</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1856"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Two&apos;s<sp/>complement<sp/>negation.</highlight></codeline>
<codeline lineno="1857" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1f33314a90b2369c68fb9baf97da5172" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1f33314a90b2369c68fb9baf97da5172" kindref="member" tooltip="Two&amp;#39;s complement negation.">neg</ref>,<sp/>kInstNeg,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1858"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1859" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9b942310868202770e788d907775c71" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(neg,<sp/>kInstNeg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1861"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>No<sp/>operation.</highlight></codeline>
<codeline lineno="1862" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a759f87aec703dc52478ec6f5dbbe56" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a759f87aec703dc52478ec6f5dbbe56" kindref="member" tooltip="No operation.">nop</ref>,<sp/>kInstNop)</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1864"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>One&apos;s<sp/>complement<sp/>negation.</highlight></codeline>
<codeline lineno="1865" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a110b5863ff3f5dd6e64fca2f9b2a1711" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a110b5863ff3f5dd6e64fca2f9b2a1711" kindref="member" tooltip="One&amp;#39;s complement negation.">not_</ref>,<sp/>kInstNot,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1866"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1867" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af29c45cd1d0655929a4246fbccbf4fcb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(not_,<sp/>kInstNot,<sp/>Mem)</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1869"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Or.</highlight></codeline>
<codeline lineno="1870" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a959eecceb2f5605298a79202787351c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a959eecceb2f5605298a79202787351c5" kindref="member" tooltip="Or.">or_</ref>,<sp/>kInstOr,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1871"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1872" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a250b78bf276194b17f61a19721f34faa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(or_,<sp/>kInstOr,<sp/>GpVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1873"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1874" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a53beaca170385683502d0d3b2fcb2f7b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(or_,<sp/>kInstOr,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1875"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1876" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a1e2378e6bc9af1e22e573d5fe86ca6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(or_,<sp/>kInstOr,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1877"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1878" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef3947bd84f6775526d5b2c24c5295b9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(or_,<sp/>kInstOr,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1880"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pop<sp/>a<sp/>value<sp/>from<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="1881" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae3afaceee4e7fdeb915b6fc69f5862fd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae3afaceee4e7fdeb915b6fc69f5862fd" kindref="member" tooltip="Pop a value from the stack.">pop</ref>,<sp/>kInstPop,<sp/>GpVar,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/><ref refid="structasmjit_1_1CodeGen_1acbfa512e3ec91bff2364d868d2da3280" kindref="member" tooltip="Get the default register size of the architecture (4 or 8 bytes).">_regSize</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1882"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1883" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42e846a5c857d869a8cad1aeebc54f60" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(pop,<sp/>kInstPop,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/><ref refid="structasmjit_1_1CodeGen_1acbfa512e3ec91bff2364d868d2da3280" kindref="member" tooltip="Get the default register size of the architecture (4 or 8 bytes).">_regSize</ref>)</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1885"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pop<sp/>stack<sp/>into<sp/>EFLAGS<sp/>Register<sp/>(32-bit<sp/>or<sp/>64-bit).</highlight></codeline>
<codeline lineno="1886" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e7f6a1d920445fe74d3440023eaef9f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e7f6a1d920445fe74d3440023eaef9f" kindref="member" tooltip="Pop stack into EFLAGS Register (32-bit or 64-bit).">popf</ref>,<sp/>kInstPopf)</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1888"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return<sp/>the<sp/>count<sp/>of<sp/>number<sp/>of<sp/>bits<sp/>set<sp/>to<sp/>1<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="1889" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a08b8da5cfdcd92d1995846512f788c2c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a08b8da5cfdcd92d1995846512f788c2c" kindref="member" tooltip="Return the count of number of bits set to 1 (SSE4.2).">popcnt</ref>,<sp/>kInstPopcnt,<sp/>GpVar,<sp/>GpVar,<sp/>!o0.isGpb()<sp/>&amp;&amp;<sp/>o0.getSize()<sp/>==<sp/>o1.getSize())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1890"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1891" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af5d0370a47ad314c3e51ace65493c9df" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(popcnt,<sp/>kInstPopcnt,<sp/>GpVar,<sp/>Mem,<sp/>!o0.isGpb())</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1893"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>word/dword/qword<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="1894" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae9943d65f3e4e083ac88c41acaaf7eba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae9943d65f3e4e083ac88c41acaaf7eba" kindref="member" tooltip="Push word/dword/qword on the stack.">push</ref>,<sp/>kInstPush,<sp/>GpVar,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/><ref refid="structasmjit_1_1CodeGen_1acbfa512e3ec91bff2364d868d2da3280" kindref="member" tooltip="Get the default register size of the architecture (4 or 8 bytes).">_regSize</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1895"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>word/dword/qword<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="1896" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af160c895f16ff86e6ab91e8d71c1f2f3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(push,<sp/>kInstPush,<sp/>Mem,o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/><ref refid="structasmjit_1_1CodeGen_1acbfa512e3ec91bff2364d868d2da3280" kindref="member" tooltip="Get the default register size of the architecture (4 or 8 bytes).">_regSize</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1897"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>segment<sp/>register<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="1898" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b0cc1373b49e323d28640c300802e4d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(push,<sp/>kInstPush,<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1899"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>word/dword/qword<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="1900" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aecbcc7699209991dd4f6b0ebc21e1814" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1i(push,<sp/>kInstPush,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1902"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>EFLAGS<sp/>register<sp/>(32-bit<sp/>or<sp/>64-bit)<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="1903" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a25bccbcb7d7bb922dae1a5f53826aa0a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a25bccbcb7d7bb922dae1a5f53826aa0a" kindref="member" tooltip="Push EFLAGS register (32-bit or 64-bit) on the stack.">pushf</ref>,<sp/>kInstPushf)</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1905"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="1906" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a2dfada44bd3affe98384715b5cd7e8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a2dfada44bd3affe98384715b5cd7e8" kindref="member" tooltip="Rotate bits left.">rcl</ref>,<sp/>kInstRcl,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1907"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1908" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b39457d4b129b99e609e69cc737338c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rcl,<sp/>kInstRcl,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1909"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="1910" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab5c3ef6c47da27123fe453032a9ab44e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rcl,<sp/>kInstRcl,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1911"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1912" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e3d509b7c29787a51eb5e3bc3110da9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rcl,<sp/>kInstRcl,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1914"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="1915" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac8ba27dad408fa2ef55408a0b667afdb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac8ba27dad408fa2ef55408a0b667afdb" kindref="member" tooltip="Rotate bits right.">rcr</ref>,<sp/>kInstRcr,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1916"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1917" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf8f40c87075c3ad2fa1274458c36c38" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rcr,<sp/>kInstRcr,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1918"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="1919" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad34df409f961716de40d02a1451b1e3b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rcr,<sp/>kInstRcr,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1920"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1921" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30004bb88a394ed3b4af706cc1bea407" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rcr,<sp/>kInstRcr,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1923"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Read<sp/>time-stamp<sp/>counter<sp/>(Pentium).</highlight></codeline>
<codeline lineno="1924" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95158998d232836a2a647291ef983f7f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95158998d232836a2a647291ef983f7f" kindref="member" tooltip="Read time-stamp counter (Pentium).">rdtsc</ref>,<sp/>kInstRdtsc,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1925"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Read<sp/>time-stamp<sp/>counter<sp/>and<sp/>processor<sp/>id<sp/>(Pentium).</highlight></codeline>
<codeline lineno="1926" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a34b0023317306a6f04e5e00c106f035e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a34b0023317306a6f04e5e00c106f035e" kindref="member" tooltip="Read time-stamp counter and processor id (Pentium).">rdtscp</ref>,<sp/>kInstRdtscp,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1928"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>ECX/RCX<sp/>bytes<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>AL.</highlight></codeline>
<codeline lineno="1929" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abdf78213f847c43f6df2c57507677bd7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abdf78213f847c43f6df2c57507677bd7" kindref="member" tooltip="Load ECX/RCX bytes from DS:[ESI/RSI] to AL.">rep_lodsb</ref>,<sp/>kInstRepLodsb,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1930"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>ECX/RCX<sp/>dwords<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>AL.</highlight></codeline>
<codeline lineno="1931" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a04da2a4f855dfb6fc9d04c4c58abf9bd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a04da2a4f855dfb6fc9d04c4c58abf9bd" kindref="member" tooltip="Load ECX/RCX dwords from DS:[ESI/RSI] to AL.">rep_lodsd</ref>,<sp/>kInstRepLodsd,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1932"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>ECX/RCX<sp/>words<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>AX.</highlight></codeline>
<codeline lineno="1933" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a20fca3e7b98ee5a103608e7319e56410" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a20fca3e7b98ee5a103608e7319e56410" kindref="member" tooltip="Load ECX/RCX words from DS:[ESI/RSI] to AX.">rep_lodsw</ref>,<sp/>kInstRepLodsw,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1935"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>ECX/RCX<sp/>bytes<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1936" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab058f17b0a38e119a87d44793e4a1f45" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab058f17b0a38e119a87d44793e4a1f45" kindref="member" tooltip="Move ECX/RCX bytes from DS:[ESI/RSI] to ES:[EDI/RDI].">rep_movsb</ref>,<sp/>kInstRepMovsb,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1937"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>ECX/RCX<sp/>dwords<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1938" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae6ae390867bb33d60680ac389b3166a2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae6ae390867bb33d60680ac389b3166a2" kindref="member" tooltip="Move ECX/RCX dwords from DS:[ESI/RSI] to ES:[EDI/RDI].">rep_movsd</ref>,<sp/>kInstRepMovsd,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1939"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>ECX/RCX<sp/>dwords<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1940" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab59b48b2b7a837340a4e0c60eb24edc4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab59b48b2b7a837340a4e0c60eb24edc4" kindref="member" tooltip="Move ECX/RCX dwords from DS:[ESI/RSI] to ES:[EDI/RDI].">rep_movsw</ref>,<sp/>kInstRepMovsw,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1942"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fill<sp/>ECX/RCX<sp/>bytes<sp/>at<sp/>ES:[EDI/RDI]<sp/>with<sp/>AL.</highlight></codeline>
<codeline lineno="1943" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abccebac50970ffa6a22bbce255663139" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abccebac50970ffa6a22bbce255663139" kindref="member" tooltip="Fill ECX/RCX bytes at ES:[EDI/RDI] with AL.">rep_stosb</ref>,<sp/>kInstRepStosb,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1944"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fill<sp/>ECX/RCX<sp/>dwords<sp/>at<sp/>ES:[EDI/RDI]<sp/>with<sp/>EAX.</highlight></codeline>
<codeline lineno="1945" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a38c5925f4924c4848791b17b9194548e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a38c5925f4924c4848791b17b9194548e" kindref="member" tooltip="Fill ECX/RCX dwords at ES:[EDI/RDI] with EAX.">rep_stosd</ref>,<sp/>kInstRepStosd,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1946"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fill<sp/>ECX/RCX<sp/>words<sp/>at<sp/>ES:[EDI/RDI]<sp/>with<sp/>AX.</highlight></codeline>
<codeline lineno="1947" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a35986a14629b60c439631224e208dde0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a35986a14629b60c439631224e208dde0" kindref="member" tooltip="Fill ECX/RCX words at ES:[EDI/RDI] with AX.">rep_stosw</ref>,<sp/>kInstRepStosw,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1949"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>bytes<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="1950" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a447f3343dbeec4bab2c79a7107c18061" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a447f3343dbeec4bab2c79a7107c18061" kindref="member" tooltip="Repeated find nonmatching bytes in ES:[EDI/RDI] and DS:[ESI/RDI].">repe_cmpsb</ref>,<sp/>kInstRepeCmpsb,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1951"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>dwords<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="1952" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a103de4fbee42f1ea20efcb5870652870" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a103de4fbee42f1ea20efcb5870652870" kindref="member" tooltip="Repeated find nonmatching dwords in ES:[EDI/RDI] and DS:[ESI/RDI].">repe_cmpsd</ref>,<sp/>kInstRepeCmpsd,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1953"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>words<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="1954" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a48cef50fe588742773bb3c5c2b567f43" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a48cef50fe588742773bb3c5c2b567f43" kindref="member" tooltip="Repeated find nonmatching words in ES:[EDI/RDI] and DS:[ESI/RDI].">repe_cmpsw</ref>,<sp/>kInstRepeCmpsw,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1956"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>non-AL<sp/>byte<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1957" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afb3d0053de0c2d73f687330e40bf14f3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afb3d0053de0c2d73f687330e40bf14f3" kindref="member" tooltip="Find non-AL byte starting at ES:[EDI/RDI].">repe_scasb</ref>,<sp/>kInstRepeScasb,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1958"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>non-EAX<sp/>dword<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1959" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a822d518388a764ab322f19a7dec64126" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a822d518388a764ab322f19a7dec64126" kindref="member" tooltip="Find non-EAX dword starting at ES:[EDI/RDI].">repe_scasd</ref>,<sp/>kInstRepeScasd,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1960"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>non-AX<sp/>word<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1961" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79023558ed6f653f7c8c78589c72508d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79023558ed6f653f7c8c78589c72508d" kindref="member" tooltip="Find non-AX word starting at ES:[EDI/RDI].">repe_scasw</ref>,<sp/>kInstRepeScasw,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1963"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>matching<sp/>bytes<sp/>in<sp/>[RDI]<sp/>and<sp/>[RSI].</highlight></codeline>
<codeline lineno="1964" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e28400f859dd93d61a5abb526399e99" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e28400f859dd93d61a5abb526399e99" kindref="member" tooltip="Find matching bytes in [RDI] and [RSI].">repne_cmpsb</ref>,<sp/>kInstRepneCmpsb,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1965"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>matching<sp/>dwords<sp/>in<sp/>[RDI]<sp/>and<sp/>[RSI].</highlight></codeline>
<codeline lineno="1966" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a517f13f63a07139903b0ea17f26b300b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a517f13f63a07139903b0ea17f26b300b" kindref="member" tooltip="Find matching dwords in [RDI] and [RSI].">repne_cmpsd</ref>,<sp/>kInstRepneCmpsd,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1967"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>matching<sp/>words<sp/>in<sp/>[RDI]<sp/>and<sp/>[RSI].</highlight></codeline>
<codeline lineno="1968" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf6e364fea49c0fa79060513111acb48" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf6e364fea49c0fa79060513111acb48" kindref="member" tooltip="Find matching words in [RDI] and [RSI].">repne_cmpsw</ref>,<sp/>kInstRepneCmpsw,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1970"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>AL,<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1971" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1114f419e06b204c6b7a3a1a0db4210" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1114f419e06b204c6b7a3a1a0db4210" kindref="member" tooltip="Find AL, starting at ES:[EDI/RDI].">repne_scasb</ref>,<sp/>kInstRepneScasb,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1972"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>EAX,<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1973" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c0a1845403a57b5dde04cada2606cf3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c0a1845403a57b5dde04cada2606cf3" kindref="member" tooltip="Find EAX, starting at ES:[EDI/RDI].">repne_scasd</ref>,<sp/>kInstRepneScasd,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1974"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>AX,<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1975" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7bb4ddfc466c439466cc89acd42aa4c4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7bb4ddfc466c439466cc89acd42aa4c4" kindref="member" tooltip="Find AX, starting at ES:[EDI/RDI].">repne_scasw</ref>,<sp/>kInstRepneScasw,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1977"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return.</highlight></codeline>
<codeline lineno="1978" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe1fd80625da5ff775c29584b4c2b167" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1RetNode" kindref="compound" tooltip="Function return node.">RetNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe1fd80625da5ff775c29584b4c2b167" kindref="member" tooltip="Return.">ret</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af3c42c808f44535e3e2eb4209e7ab642" kindref="member" tooltip="Add a new RetNode.">addRet</ref>(noOperand,<sp/>noOperand);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1979"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1980" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8b4bada2b56c3bd4980ee4422e598aa5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1RetNode" kindref="compound" tooltip="Function return node.">RetNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8b4bada2b56c3bd4980ee4422e598aa5" kindref="member">ret</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>o0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af3c42c808f44535e3e2eb4209e7ab642" kindref="member" tooltip="Add a new RetNode.">addRet</ref>(o0,<sp/>noOperand);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1981"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1982" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9bd4c07f92025b08710e69e882e44a3e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1RetNode" kindref="compound" tooltip="Function return node.">RetNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9bd4c07f92025b08710e69e882e44a3e" kindref="member">ret</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>o1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af3c42c808f44535e3e2eb4209e7ab642" kindref="member" tooltip="Add a new RetNode.">addRet</ref>(o0,<sp/>o1);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1983"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1984" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1fc9b7c1ce6b70c5b1705c0da580bdc8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1RetNode" kindref="compound" tooltip="Function return node.">RetNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1fc9b7c1ce6b70c5b1705c0da580bdc8" kindref="member">ret</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>o0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af3c42c808f44535e3e2eb4209e7ab642" kindref="member" tooltip="Add a new RetNode.">addRet</ref>(o0,<sp/>noOperand);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1985"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1986" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a24d82b5b3ada3a145d5e822b04c49250" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1RetNode" kindref="compound" tooltip="Function return node.">RetNode</ref>*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a24d82b5b3ada3a145d5e822b04c49250" kindref="member">ret</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>o1)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af3c42c808f44535e3e2eb4209e7ab642" kindref="member" tooltip="Add a new RetNode.">addRet</ref>(o0,<sp/>o1);<sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1988"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="1989" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afd118fe5cd77e8306fe495c9a8a94c34" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afd118fe5cd77e8306fe495c9a8a94c34" kindref="member" tooltip="Rotate bits left.">rol</ref>,<sp/>kInstRol,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1990"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1991" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3f89017c6e52bc3fb86701be9b0ab36" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afd118fe5cd77e8306fe495c9a8a94c34" kindref="member" tooltip="Rotate bits left.">rol</ref>,<sp/>kInstRol,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1992"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="1993" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8691b383fb7ea59ae39e0e2ce4d566b7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rol,<sp/>kInstRol,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1994"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1995" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf8c21582aeb5e633b7f7345241a671f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rol,<sp/>kInstRol,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1997"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="1998" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a424c7e5f81c7e4c5f0918dd4724b5545" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a424c7e5f81c7e4c5f0918dd4724b5545" kindref="member" tooltip="Rotate bits right.">ror</ref>,<sp/>kInstRor,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1999"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2000" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2616c3ecc3894bd7d8c7c529d9f8b63" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(ror,<sp/>kInstRor,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2001"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="2002" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9aded5fe8b3083a91c18aa11f877fbf9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(ror,<sp/>kInstRor,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2003"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2004" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac41b0da666e9fecccf734491609539d4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(ror,<sp/>kInstRor,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2006"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>@a<sp/>var<sp/>(allocated<sp/>in<sp/>AH/AX/EAX/RAX)<sp/>into<sp/>Flags.</highlight></codeline>
<codeline lineno="2007" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afd5aafa6ef08cbb306317328f5120a8c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afd5aafa6ef08cbb306317328f5120a8c" kindref="member" tooltip="Store var (allocated in AH/AX/EAX/RAX) into Flags.">sahf</ref>,<sp/>kInstSahf,<sp/>GpVar)</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2009"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Integer<sp/>subtraction<sp/>with<sp/>borrow.</highlight></codeline>
<codeline lineno="2010" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad153aee45b70221b7eddd5cd21fe5c72" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad153aee45b70221b7eddd5cd21fe5c72" kindref="member" tooltip="Integer subtraction with borrow.">sbb</ref>,<sp/>kInstSbb,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2011"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2012" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac5012ccf08c2c841f1186ae9d74854e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sbb,<sp/>kInstSbb,<sp/>GpVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2013"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2014" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22a206ced518ce641f02595f31ed49ed" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sbb,<sp/>kInstSbb,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2015"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2016" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a35e0eca979ec9e0f5de96535fcb71112" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sbb,<sp/>kInstSbb,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2017"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2018" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af85d642738ea9a2c6090edc91d2bcb6a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sbb,<sp/>kInstSbb,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2020"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="2021" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acdea1a4a8e06b8e37fc63fb2e2c68450" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acdea1a4a8e06b8e37fc63fb2e2c68450" kindref="member" tooltip="Shift bits left.">sal</ref>,<sp/>kInstSal,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2022"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2023" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aceac9fc0a731d558fdecb4b3112de8f6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sal,<sp/>kInstSal,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2024"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="2025" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa5075fdda83347c463c017246e978cad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sal,<sp/>kInstSal,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2026"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2027" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a85605fc008609698a4198ad2ddeebd17" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sal,<sp/>kInstSal,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2029"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="2030" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9cd5af9d4b531c900d3a568afe1f355a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9cd5af9d4b531c900d3a568afe1f355a" kindref="member" tooltip="Shift bits right.">sar</ref>,<sp/>kInstSar,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2031"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2032" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8667815306a2afb44685d6f1726b6300" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sar,<sp/>kInstSar,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2033"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="2034" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a2da1060c4fed40ad1e6a3836969725" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sar,<sp/>kInstSar,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2035"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2036" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5900f80db7fd4c0bd44ab196bf58cc77" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sar,<sp/>kInstSar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2038"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>byte<sp/>on<sp/>condition.</highlight></codeline>
<codeline lineno="2039" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8081167edd2724631baba1d793f94af5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1cc(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8081167edd2724631baba1d793f94af5" kindref="member" tooltip="Set byte on condition.">set</ref>,<sp/>kInstSet,<sp/><ref refid="group__asmjit__x86x64_1ga7360265365dd7ff27f275d5c50e3e4f6" kindref="member" tooltip="Translate condition code cc to setcc instruction code.">condToSetcc</ref>,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2040"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>byte<sp/>on<sp/>condition.</highlight></codeline>
<codeline lineno="2041" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5611b7858855c465d44212fd94763345" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1cc(set,<sp/>kInstSet,<sp/>condToSetcc,<sp/>Mem)</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2043"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="2044" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a824abd324b49960df327c6aa6212c258" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a824abd324b49960df327c6aa6212c258" kindref="member" tooltip="Shift bits left.">shl</ref>,<sp/>kInstShl,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2045"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2046" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a397160c5b3a44ef1281abb73ab79ee4b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(shl,<sp/>kInstShl,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2047"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="2048" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa40ef3b0624d684ed76f0d35dab45402" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(shl,<sp/>kInstShl,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2049"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2050" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ee1d956467bee1eac6202987577120d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(shl,<sp/>kInstShl,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2052"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="2053" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a09c677470aabfef0cdc269e4eed3d79e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a09c677470aabfef0cdc269e4eed3d79e" kindref="member" tooltip="Shift bits right.">shr</ref>,<sp/>kInstShr,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2054"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2055" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a464b16315eac00694b25b916c319f7b0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(shr,<sp/>kInstShr,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2056"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="2057" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af17bb5053a7484a1def1f2c73b647079" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(shr,<sp/>kInstShr,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2058"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2059" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2cb9140853a7e21288cc99c1a1b060d9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(shr,<sp/>kInstShr,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2061"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Double<sp/>precision<sp/>shift<sp/>left.</highlight></codeline>
<codeline lineno="2062" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1affc9d7c47a8f691eb8bb8b835e7b037f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1affc9d7c47a8f691eb8bb8b835e7b037f" kindref="member" tooltip="Double precision shift left.">shld</ref>,<sp/>kInstShld,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2063"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2064" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9fe2471b5857cc17bc71877f5885dbe5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(shld,<sp/>kInstShld,<sp/>Mem,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2065"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Double<sp/>precision<sp/>shift<sp/>left.</highlight></codeline>
<codeline lineno="2066" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee073f26f65fe7cbdbe30ba3b2346f44" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shld,<sp/>kInstShld,<sp/>GpVar,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2067"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2068" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73932825f517076f9e5e52caf32d6eeb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shld,<sp/>kInstShld,<sp/>Mem,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2070"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Double<sp/>precision<sp/>shift<sp/>right.</highlight></codeline>
<codeline lineno="2071" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acb0b4181ad36a987c77a266ddddc75f6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acb0b4181ad36a987c77a266ddddc75f6" kindref="member" tooltip="Double precision shift right.">shrd</ref>,<sp/>kInstShrd,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2072"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2073" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab60ad8101f11a716cd4dd60fdfb455dc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(shrd,<sp/>kInstShrd,<sp/>Mem,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2074"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Double<sp/>precision<sp/>shift<sp/>right.</highlight></codeline>
<codeline lineno="2075" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac6ce87aee95a884ba1ddee2820d89763" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shrd,<sp/>kInstShrd,<sp/>GpVar,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2076"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2077" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a688296e67c9a2156e8b74ff239c72684" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shrd,<sp/>kInstShrd,<sp/>Mem,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2079"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>carry<sp/>flag<sp/>to<sp/>1.</highlight></codeline>
<codeline lineno="2080" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4e03aab8be126bf9a83489cf4b1c31ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4e03aab8be126bf9a83489cf4b1c31ca" kindref="member" tooltip="Set carry flag to 1.">stc</ref>,<sp/>kInstStc)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2081"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>direction<sp/>flag<sp/>to<sp/>1.</highlight></codeline>
<codeline lineno="2082" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1addf3862a603b5d030b9ead7b1ec87c46" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1addf3862a603b5d030b9ead7b1ec87c46" kindref="member" tooltip="Set direction flag to 1.">std</ref>,<sp/>kInstStd)</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2084"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Subtract.</highlight></codeline>
<codeline lineno="2085" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8901a8f15109bcaf4b92486fb5a325b5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8901a8f15109bcaf4b92486fb5a325b5" kindref="member" tooltip="Subtract.">sub</ref>,<sp/>kInstSub,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2086"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2087" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb09251fe30f53ba7e62ea49cbb7abab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sub,<sp/>kInstSub,<sp/>GpVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2088"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2089" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2e48866584df04bc5253744a93127ae3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sub,<sp/>kInstSub,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2090"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2091" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa605eb4a95b8daf6ac7a95b40702c7e6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sub,<sp/>kInstSub,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2092"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2093" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aada75c0f706c139308c7be82d6161e83" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sub,<sp/>kInstSub,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2095"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Logical<sp/>compare.</highlight></codeline>
<codeline lineno="2096" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e02f05b1fcc68c09f1d341e9a479096" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e02f05b1fcc68c09f1d341e9a479096" kindref="member" tooltip="Logical compare.">test</ref>,<sp/>kInstTest,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2097"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2098" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71d2272e1bd11893470c04c4ef4110d2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(test,<sp/>kInstTest,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2099"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2100" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acb8ef2b1e91d9b101880564740e44b50" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(test,<sp/>kInstTest,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2101"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2102" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4e19a6ba0d34f04a2ec3fb5e8b047e05" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(test,<sp/>kInstTest,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2104"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Undefined<sp/>instruction<sp/>-<sp/>Raise<sp/>#UD<sp/>exception.</highlight></codeline>
<codeline lineno="2105" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a694e4377a1de4b9e8d55d029dce01e87" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a694e4377a1de4b9e8d55d029dce01e87" kindref="member" tooltip="Undefined instruction - Raise #UD exception.">ud2</ref>,<sp/>kInstUd2)</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2107"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Exchange<sp/>and<sp/>add.</highlight></codeline>
<codeline lineno="2108" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7655edcd17dcbddf08e4b303f0236723" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7655edcd17dcbddf08e4b303f0236723" kindref="member" tooltip="Exchange and add.">xadd</ref>,<sp/>kInstXadd,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2109"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2110" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a234b5b60f663341b4a14c5ec41a86f38" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xadd,<sp/>kInstXadd,<sp/>Mem,<sp/>GpVar)</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2112"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Exchange<sp/>register/memory<sp/>with<sp/>register.</highlight></codeline>
<codeline lineno="2113" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a700e4b7e566989bd923f4adf95d1a06d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a700e4b7e566989bd923f4adf95d1a06d" kindref="member" tooltip="Exchange register/memory with register.">xchg</ref>,<sp/>kInstXchg,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2114"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2115" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1add50d568b168526f329722d68e09a540" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xchg,<sp/>kInstXchg,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2116"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2117" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1c8753d74aecd3bd8641c84c637f4ed6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xchg,<sp/>kInstXchg,<sp/>GpVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2119"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xor.</highlight></codeline>
<codeline lineno="2120" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2df7dadf4877d4065242d611443b5d08" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2df7dadf4877d4065242d611443b5d08" kindref="member" tooltip="Xor.">xor_</ref>,<sp/>kInstXor,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2121"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2122" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a784e90b232c74afb59a0de575c195e1a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xor_,<sp/>kInstXor,<sp/>GpVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2123"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2124" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a56c139b47c10377943bb370e48c69ceb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(xor_,<sp/>kInstXor,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2125"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2126" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae5bd022a2d5b2755f7a8b8ac794fe4a5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xor_,<sp/>kInstXor,<sp/>Mem,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2127"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2128" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa287b3a0209495a176d8d92de16fa32" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(xor_,<sp/>kInstXor,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[MMX]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2134"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>dword<sp/>(MMX).</highlight></codeline>
<codeline lineno="2135" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adff48078c99c14e08fb2a1c6cc2fc7ff" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adff48078c99c14e08fb2a1c6cc2fc7ff" kindref="member" tooltip="Move dword (MMX).">movd</ref>,<sp/>kInstMovd,<sp/>Mem,<sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound" tooltip="Mm variable.">MmVar</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2136"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2137" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6a5d38fea0aff991ccf78476d2edbb9c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound" tooltip="Mm variable.">MmVar</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2138"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2139" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa4d85e5980febe458dabd9dd0c3bdf89" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound" tooltip="Mm variable.">MmVar</ref>,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2140"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2141" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa43842bfd88efc83f113e751a130a8fe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>MmVar,<sp/>GpVar)</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2143"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>qword<sp/>(MMX).</highlight></codeline>
<codeline lineno="2144" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a28523fac15a7623342cf0ecff2c0abd6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a28523fac15a7623342cf0ecff2c0abd6" kindref="member" tooltip="Move qword (MMX).">movq</ref>,<sp/>kInstMovq,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2145"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2146" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7f4bc547be76919a62059a27de0a5cd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>Mem,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2147"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2148" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae87e71e6433f824a25fe95893d76f839" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2150"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>signed<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="2151" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9c2a6fd08e47cc5095b73c01343bfb02" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9c2a6fd08e47cc5095b73c01343bfb02" kindref="member" tooltip="Pack with signed saturation (MMX).">packsswb</ref>,<sp/>kInstPacksswb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2152"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2153" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aace7b004cf9a43b1224c983c31d5609b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packsswb,<sp/>kInstPacksswb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2155"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>signed<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="2156" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a297321f1449b6cd1bd36038431672734" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a297321f1449b6cd1bd36038431672734" kindref="member" tooltip="Pack with signed saturation (MMX).">packssdw</ref>,<sp/>kInstPackssdw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2157"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2158" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8dc6e7e451db37d79accc4b6cf68cc14" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packssdw,<sp/>kInstPackssdw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2160"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>unsigned<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="2161" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2691f0fc9b9238f5065c45b7323a3ba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2691f0fc9b9238f5065c45b7323a3ba" kindref="member" tooltip="Pack with unsigned saturation (MMX).">packuswb</ref>,<sp/>kInstPackuswb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2162"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2163" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae64a52335db5b040d19e651620ce8c95" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packuswb,<sp/>kInstPackuswb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2165"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>byte<sp/>add<sp/>(MMX).</highlight></codeline>
<codeline lineno="2166" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff1aae5a24df592b694b0f329fe84ab9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff1aae5a24df592b694b0f329fe84ab9" kindref="member" tooltip="Packed byte add (MMX).">paddb</ref>,<sp/>kInstPaddb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2167"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2168" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4db41fd01a6da88af1948afaa785630d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddb,<sp/>kInstPaddb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2170"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>word<sp/>add<sp/>(MMX).</highlight></codeline>
<codeline lineno="2171" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70825a99a45af4c99b5e7f23f19a4d30" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70825a99a45af4c99b5e7f23f19a4d30" kindref="member" tooltip="Packed word add (MMX).">paddw</ref>,<sp/>kInstPaddw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2172"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2173" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7231c821a78c271e660a3188260f48e2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddw,<sp/>kInstPaddw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2175"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>dword<sp/>add<sp/>(MMX).</highlight></codeline>
<codeline lineno="2176" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae216028d44b3707deb0f121cdc6ae345" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae216028d44b3707deb0f121cdc6ae345" kindref="member" tooltip="Packed dword add (MMX).">paddd</ref>,<sp/>kInstPaddd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2177"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2178" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6ebfc0c64abbbc12af1ad5c1168e80f1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddd,<sp/>kInstPaddd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2180"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="2181" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a163dadbfea0e24ede3d65dcf505b81da" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a163dadbfea0e24ede3d65dcf505b81da" kindref="member" tooltip="Packed add with saturation (MMX).">paddsb</ref>,<sp/>kInstPaddsb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2182"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2183" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ceabf9eb86f7c535644a2fd23929336" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsb,<sp/>kInstPaddsb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2185"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="2186" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b49e8a86a5e7e30793248ea01096d04" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b49e8a86a5e7e30793248ea01096d04" kindref="member" tooltip="Packed add with saturation (MMX).">paddsw</ref>,<sp/>kInstPaddsw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2187"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2188" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaefbf007f1f49e517754707ae7b71a1d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsw,<sp/>kInstPaddsw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2190"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>unsigned<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="2191" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abceea02ce1ace3f819ea2947ce403a12" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abceea02ce1ace3f819ea2947ce403a12" kindref="member" tooltip="Packed add unsigned with saturation (MMX).">paddusb</ref>,<sp/>kInstPaddusb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2192"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2193" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d9f6aa74cfe134a3c20fc2772b9b5e1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusb,<sp/>kInstPaddusb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2195"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>unsigned<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="2196" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a647bec191f5f80435f1622a7123f6e65" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a647bec191f5f80435f1622a7123f6e65" kindref="member" tooltip="Packed add unsigned with saturation (MMX).">paddusw</ref>,<sp/>kInstPaddusw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2197"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2198" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f23bcd27b1087756f185a4b202883f5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusw,<sp/>kInstPaddusw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2200"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And<sp/>(MMX).</highlight></codeline>
<codeline lineno="2201" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6ce826d34c2ea3e1efd2359772677648" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6ce826d34c2ea3e1efd2359772677648" kindref="member" tooltip="And (MMX).">pand</ref>,<sp/>kInstPand,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2202"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2203" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a46bfba969ee39c413dc138c85a9e3ff9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pand,<sp/>kInstPand,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2205"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And-not<sp/>(MMX).</highlight></codeline>
<codeline lineno="2206" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d73e1e249f0ad89a42c2692ec5228c9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d73e1e249f0ad89a42c2692ec5228c9" kindref="member" tooltip="And-not (MMX).">pandn</ref>,<sp/>kInstPandn,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2207"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2208" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae87a4051dc72e483745ea366bd72b774" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pandn,<sp/>kInstPandn,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2210"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>bytes<sp/>for<sp/>equal<sp/>(MMX).</highlight></codeline>
<codeline lineno="2211" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc9eb9a90058e0b5fa38fba44d40eec3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc9eb9a90058e0b5fa38fba44d40eec3" kindref="member" tooltip="Packed compare bytes for equal (MMX).">pcmpeqb</ref>,<sp/>kInstPcmpeqb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2212"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2213" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa7bb031e4bb610232d4b6e7f832c920" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqb,<sp/>kInstPcmpeqb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2215"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>words<sp/>for<sp/>equal<sp/>(MMX).</highlight></codeline>
<codeline lineno="2216" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad3c69007a3c742b98bb6508a30f00f4f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad3c69007a3c742b98bb6508a30f00f4f" kindref="member" tooltip="Packed compare words for equal (MMX).">pcmpeqw</ref>,<sp/>kInstPcmpeqw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2217"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2218" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a900667c43073fa3a9d18c6d1d0cf698d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqw,<sp/>kInstPcmpeqw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2220"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>dwords<sp/>for<sp/>equal<sp/>(MMX).</highlight></codeline>
<codeline lineno="2221" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af95854364938495ff5446be077c1f607" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af95854364938495ff5446be077c1f607" kindref="member" tooltip="Packed compare dwords for equal (MMX).">pcmpeqd</ref>,<sp/>kInstPcmpeqd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2222"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2223" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a72f82722bc2d2cd5c4f8424990feb422" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqd,<sp/>kInstPcmpeqd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2225"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>bytes<sp/>for<sp/>greater<sp/>than<sp/>(MMX).</highlight></codeline>
<codeline lineno="2226" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6f8cb31d06c58ce2f5d7e3dc63bb7700" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6f8cb31d06c58ce2f5d7e3dc63bb7700" kindref="member" tooltip="Packed compare bytes for greater than (MMX).">pcmpgtb</ref>,<sp/>kInstPcmpgtb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2227"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2228" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b316f0192ceab2c848292408586b30e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtb,<sp/>kInstPcmpgtb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2230"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>words<sp/>for<sp/>greater<sp/>than<sp/>(MMX).</highlight></codeline>
<codeline lineno="2231" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3e3eb41ea42e9f01160f8ced0c32b2c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3e3eb41ea42e9f01160f8ced0c32b2c" kindref="member" tooltip="Packed compare words for greater than (MMX).">pcmpgtw</ref>,<sp/>kInstPcmpgtw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2232"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2233" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aac30639307fc3bbf9a55a15e607946b1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtw,<sp/>kInstPcmpgtw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2235"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>dwords<sp/>for<sp/>greater<sp/>than<sp/>(MMX).</highlight></codeline>
<codeline lineno="2236" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7e25db987d3ea45506a3c2af1108abfc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7e25db987d3ea45506a3c2af1108abfc" kindref="member" tooltip="Packed compare dwords for greater than (MMX).">pcmpgtd</ref>,<sp/>kInstPcmpgtd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2237"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2238" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3460ece4a261ead1539e3b65a072b825" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtd,<sp/>kInstPcmpgtd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2240"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>(MMX).</highlight></codeline>
<codeline lineno="2241" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76d65341e10ac3f47dc047dcad53d899" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76d65341e10ac3f47dc047dcad53d899" kindref="member" tooltip="Packed multiply high (MMX).">pmulhw</ref>,<sp/>kInstPmulhw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2242"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2243" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95fee473d06c70796da1a5330f8a0479" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhw,<sp/>kInstPmulhw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2245"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>low<sp/>(MMX).</highlight></codeline>
<codeline lineno="2246" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec19d8884baab3e37b85c83c765b6aa4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec19d8884baab3e37b85c83c765b6aa4" kindref="member" tooltip="Packed multiply low (MMX).">pmullw</ref>,<sp/>kInstPmullw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2247"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2248" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac407cc860c12d871535c98c1f807b21c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmullw,<sp/>kInstPmullw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2250"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bitwise<sp/>logical<sp/>or<sp/>(MMX).</highlight></codeline>
<codeline lineno="2251" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab9379a5f007cb59ddc83678265921b01" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab9379a5f007cb59ddc83678265921b01" kindref="member" tooltip="Bitwise logical or (MMX).">por</ref>,<sp/>kInstPor,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2252"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2253" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abeba91527b0a510d7ea2844589a83334" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(por,<sp/>kInstPor,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2255"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>and<sp/>add<sp/>(MMX).</highlight></codeline>
<codeline lineno="2256" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d8dae83c3ba875c0a256f4b1ec06779" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d8dae83c3ba875c0a256f4b1ec06779" kindref="member" tooltip="Packed multiply and add (MMX).">pmaddwd</ref>,<sp/>kInstPmaddwd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2257"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2258" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf6a94cb18051d2b6c7c2d1ef92cc4f6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddwd,<sp/>kInstPmaddwd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2260"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="2261" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab527554056a845fcce237de576b017ad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab527554056a845fcce237de576b017ad" kindref="member" tooltip="Packed shift left logical (MMX).">pslld</ref>,<sp/>kInstPslld,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2262"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2263" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab23eae2fd4311ab7fe5c0436a223cdd9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pslld,<sp/>kInstPslld,<sp/>MmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2264"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2265" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2bba6fd1ee16a4454f05a28a1c30b95" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(pslld,<sp/>kInstPslld,<sp/>MmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2267"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="2268" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3c62ba50ea82d5741c5dd10c02b4cc4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3c62ba50ea82d5741c5dd10c02b4cc4" kindref="member" tooltip="Packed shift left logical (MMX).">psllq</ref>,<sp/>kInstPsllq,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2269"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2270" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adfb50247643357ab8a5c0e7d6f4c66d5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllq,<sp/>kInstPsllq,<sp/>MmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2271"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2272" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96f88718aecbb2e63aa051c4033dca16" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psllq,<sp/>kInstPsllq,<sp/>MmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2274"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="2275" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0933a75305ce20d3327b08d3a201fa09" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0933a75305ce20d3327b08d3a201fa09" kindref="member" tooltip="Packed shift left logical (MMX).">psllw</ref>,<sp/>kInstPsllw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2276"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2277" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9fd47ea6a3de8c05d970925b7e0062bd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllw,<sp/>kInstPsllw,<sp/>MmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2278"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2279" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a99c044c077503a2f5221e9167ffb579c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psllw,<sp/>kInstPsllw,<sp/>MmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2281"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>arithmetic<sp/>(MMX).</highlight></codeline>
<codeline lineno="2282" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4df8619909c3ec93f7d32e4ad0a8b1d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4df8619909c3ec93f7d32e4ad0a8b1d" kindref="member" tooltip="Packed shift right arithmetic (MMX).">psrad</ref>,<sp/>kInstPsrad,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2283"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2284" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a462777045512e24a066edee1eaa53883" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrad,<sp/>kInstPsrad,<sp/>MmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2285"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2286" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9a442757d6928d1afd0b85f5edf1636" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrad,<sp/>kInstPsrad,<sp/>MmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2288"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>arithmetic<sp/>(MMX).</highlight></codeline>
<codeline lineno="2289" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd6796e6cd2ba2368235c7ba607f4fe6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd6796e6cd2ba2368235c7ba607f4fe6" kindref="member" tooltip="Packed shift right arithmetic (MMX).">psraw</ref>,<sp/>kInstPsraw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2290"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2291" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a59d21271b10cbb4a50c19a618255c842" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psraw,<sp/>kInstPsraw,<sp/>MmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2292"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2293" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30abc1a605fb64f4ebf3075dd7323bb8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psraw,<sp/>kInstPsraw,<sp/>MmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2295"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="2296" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4a67bfa12fcdd3ad926cd1c2eaecff6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4a67bfa12fcdd3ad926cd1c2eaecff6" kindref="member" tooltip="Packed shift right logical (MMX).">psrld</ref>,<sp/>kInstPsrld,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2297"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2298" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a61b800d6bf12c5103509c9a0ac44b180" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrld,<sp/>kInstPsrld,<sp/>MmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2299"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2300" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a18bc45fb4bda8c59bd58c4beffe3b35b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrld,<sp/>kInstPsrld,<sp/>MmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2302"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="2303" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7892cb8aae44f9f321e0c0b51fe7e6d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7892cb8aae44f9f321e0c0b51fe7e6d" kindref="member" tooltip="Packed shift right logical (MMX).">psrlq</ref>,<sp/>kInstPsrlq,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2304"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2305" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e37fcaa49449a47701169d2206ff655" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlq,<sp/>kInstPsrlq,<sp/>MmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2306"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2307" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2ef2a5bc7fd8bf254897f82ae7fcb2a4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrlq,<sp/>kInstPsrlq,<sp/>MmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2309"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="2310" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ace1fce8eae8280e58d068935fdf5f16c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ace1fce8eae8280e58d068935fdf5f16c" kindref="member" tooltip="Packed shift right logical (MMX).">psrlw</ref>,<sp/>kInstPsrlw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2311"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2312" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a154dc5378d5124d7704a5d9d17a20894" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlw,<sp/>kInstPsrlw,<sp/>MmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2313"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2314" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d87fb39e91ae26dec2e9d2dbd868446" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrlw,<sp/>kInstPsrlw,<sp/>MmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2316"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(MMX).</highlight></codeline>
<codeline lineno="2317" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2177ac53ea642d7424670cd66b9743f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2177ac53ea642d7424670cd66b9743f" kindref="member" tooltip="Packed subtract (MMX).">psubb</ref>,<sp/>kInstPsubb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2318"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2319" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b1a56d76bee14b5ebed9ea0032dd1d6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubb,<sp/>kInstPsubb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2321"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(MMX).</highlight></codeline>
<codeline lineno="2322" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7738bb1d39a09410244e4ecd6b1b763c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7738bb1d39a09410244e4ecd6b1b763c" kindref="member" tooltip="Packed subtract (MMX).">psubw</ref>,<sp/>kInstPsubw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2323"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2324" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0c378adfcb24a5c27cd639660688608" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubw,<sp/>kInstPsubw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2326"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(MMX).</highlight></codeline>
<codeline lineno="2327" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7a3590feb29acce2a142d250fbcd840" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7a3590feb29acce2a142d250fbcd840" kindref="member" tooltip="Packed subtract (MMX).">psubd</ref>,<sp/>kInstPsubd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2328"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2329" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0cd95bebe14d8783fb7529959599bd89" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubd,<sp/>kInstPsubd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2331"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="2332" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5fcc2e755a8122276a013375bccfc2f4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5fcc2e755a8122276a013375bccfc2f4" kindref="member" tooltip="Packed subtract with saturation (MMX).">psubsb</ref>,<sp/>kInstPsubsb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2333"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2334" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af45765e4a2bac45d3048f95516ea263b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsb,<sp/>kInstPsubsb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2336"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="2337" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a042f9291b10fa705ccd61c97e5dadcf6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a042f9291b10fa705ccd61c97e5dadcf6" kindref="member" tooltip="Packed subtract with saturation (MMX).">psubsw</ref>,<sp/>kInstPsubsw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2338"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2339" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeb276415f9346fe8b060c79beed066d2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsw,<sp/>kInstPsubsw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2341"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>unsigned<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="2342" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa903e49700c9df683321e2e743b32f7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa903e49700c9df683321e2e743b32f7" kindref="member" tooltip="Packed subtract with unsigned saturation (MMX).">psubusb</ref>,<sp/>kInstPsubusb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2343"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2344" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a44b9f8408cc3d75204bd1b4f6451fc00" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusb,<sp/>kInstPsubusb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2346"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>unsigned<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="2347" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a370b2c4b4d4908e89045c64242d4e651" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a370b2c4b4d4908e89045c64242d4e651" kindref="member" tooltip="Packed subtract with unsigned saturation (MMX).">psubusw</ref>,<sp/>kInstPsubusw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2348"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2349" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0ce80c356c8cb91abad15aa9404db5e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusw,<sp/>kInstPsubusw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2351"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="2352" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae3a751362da5d33d5f665e3d1089b89e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae3a751362da5d33d5f665e3d1089b89e" kindref="member" tooltip="Unpack high packed data (MMX).">punpckhbw</ref>,<sp/>kInstPunpckhbw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2353"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2354" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad83345ca713edc9b4034960d1b9a04bc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhbw,<sp/>kInstPunpckhbw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2356"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="2357" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aed6b631122a14893b4d6b14f12aa8b13" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aed6b631122a14893b4d6b14f12aa8b13" kindref="member" tooltip="Unpack high packed data (MMX).">punpckhwd</ref>,<sp/>kInstPunpckhwd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2358"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2359" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7fea33f780a1cdc47afe0f8ff41eeea0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhwd,<sp/>kInstPunpckhwd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2361"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="2362" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae56a6c0cdce4ee316ab55b1de0856f2b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae56a6c0cdce4ee316ab55b1de0856f2b" kindref="member" tooltip="Unpack high packed data (MMX).">punpckhdq</ref>,<sp/>kInstPunpckhdq,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2363"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2364" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7f08dedd3574e58d635052ec7680190f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhdq,<sp/>kInstPunpckhdq,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2366"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="2367" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1add56c3bbc5fad8cca1eb33f1d43ba004" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1add56c3bbc5fad8cca1eb33f1d43ba004" kindref="member" tooltip="Unpack high packed data (MMX).">punpcklbw</ref>,<sp/>kInstPunpcklbw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2368"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2369" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7e987336b9518128be2e705048bc5f68" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklbw,<sp/>kInstPunpcklbw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2371"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="2372" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a81c779685b1b397a0cacec96da3c4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a81c779685b1b397a0cacec96da3c4" kindref="member" tooltip="Unpack high packed data (MMX).">punpcklwd</ref>,<sp/>kInstPunpcklwd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2373"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2374" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73074ff40f269e8e26d199c37b14835d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklwd,<sp/>kInstPunpcklwd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2376"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="2377" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afbd0039138525c6c33a8386435e42832" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afbd0039138525c6c33a8386435e42832" kindref="member" tooltip="Unpack high packed data (MMX).">punpckldq</ref>,<sp/>kInstPunpckldq,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2378"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2379" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a227c02b427969d3b037272cd4bf584ce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckldq,<sp/>kInstPunpckldq,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2381"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xor<sp/>(MMX).</highlight></codeline>
<codeline lineno="2382" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d0e4475d4a99ff8076a1d2f04c992b6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d0e4475d4a99ff8076a1d2f04c992b6" kindref="member" tooltip="Xor (MMX).">pxor</ref>,<sp/>kInstPxor,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2383"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2384" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6b23d49fea6595ac4017303894a30630" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pxor,<sp/>kInstPxor,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2386"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Empty<sp/>MMX<sp/>state.</highlight></codeline>
<codeline lineno="2387" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef638b7e81a34c45769fa8de642a47d6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef638b7e81a34c45769fa8de642a47d6" kindref="member" tooltip="Empty MMX state.">emms</ref>,<sp/>kInstEmms)</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[3dNow]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2393"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>to<sp/>integer<sp/>convert<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2394" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff4d70df64ca8a99153a4f1bd2a4ce9c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff4d70df64ca8a99153a4f1bd2a4ce9c" kindref="member" tooltip="Packed SP-FP to integer convert (3dNow!).">pf2id</ref>,<sp/>kInstPf2id,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2395"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2396" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a25bd2ff91fe42bbd50c9680a2d5dedf3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pf2id,<sp/>kInstPf2id,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2398"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/><sp/>Packed<sp/>SP-FP<sp/>to<sp/>integer<sp/>word<sp/>convert<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2399" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4d2b7e95605bef887224eb3eb9be0b83" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4d2b7e95605bef887224eb3eb9be0b83" kindref="member" tooltip="Packed SP-FP to integer word convert (3dNow!).">pf2iw</ref>,<sp/>kInstPf2iw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2400"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2401" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3de2b3eee568e9b85fca4d81cd8511c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pf2iw,<sp/>kInstPf2iw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2403"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>accumulate<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2404" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0283b85ee9a80016d7535d2e73280db1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0283b85ee9a80016d7535d2e73280db1" kindref="member" tooltip="Packed SP-FP accumulate (3dNow!).">pfacc</ref>,<sp/>kInstPfacc,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2405"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2406" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4925b0fe8099979f3ec9044244ffcd48" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfacc,<sp/>kInstPfacc,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2408"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>addition<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2409" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeeadb11d9e0a862ba54c1599632b869b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeeadb11d9e0a862ba54c1599632b869b" kindref="member" tooltip="Packed SP-FP addition (3dNow!).">pfadd</ref>,<sp/>kInstPfadd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2410"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2411" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2bfe871fc56f2c377da766b0a49ff8d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfadd,<sp/>kInstPfadd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2413"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>compare<sp/>-<sp/>dst<sp/>==<sp/>src<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2414" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb3e965737a4e8684cc6995d722d9f4e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb3e965737a4e8684cc6995d722d9f4e" kindref="member" tooltip="Packed SP-FP compare - dst == src (3dNow!).">pfcmpeq</ref>,<sp/>kInstPfcmpeq,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2415"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2416" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a97befa742a4d900e1c03d98ed9cb74ef" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfcmpeq,<sp/>kInstPfcmpeq,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2418"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>compare<sp/>-<sp/>dst<sp/>&gt;=<sp/>src<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2419" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5480faef08410e0931cb1775cdaaacf6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5480faef08410e0931cb1775cdaaacf6" kindref="member" tooltip="Packed SP-FP compare - dst &amp;gt;= src (3dNow!).">pfcmpge</ref>,<sp/>kInstPfcmpge,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2420"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2421" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a75a4cc1cf69eb1f8fe4463a9101ab3d5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfcmpge,<sp/>kInstPfcmpge,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2423"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>compare<sp/>-<sp/>dst<sp/>&gt;<sp/>src<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2424" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1633ca57f38ff54ccefd62041407ba7c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1633ca57f38ff54ccefd62041407ba7c" kindref="member" tooltip="Packed SP-FP compare - dst &amp;gt; src (3dNow!).">pfcmpgt</ref>,<sp/>kInstPfcmpgt,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2425"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2426" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7e738093d7e6d5eb86ec80295ea64dd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfcmpgt,<sp/>kInstPfcmpgt,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2428"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>maximum<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2429" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a29ea44766aa89008eb0e5deadb26ff" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a29ea44766aa89008eb0e5deadb26ff" kindref="member" tooltip="Packed SP-FP maximum (3dNow!).">pfmax</ref>,<sp/>kInstPfmax,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2430"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2431" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a337b6a3e3de7993a1f53c988f61fb6d1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfmax,<sp/>kInstPfmax,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2433"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>minimum<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2434" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad8292c3e01712dfa89ebe1bb7fbe9e08" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad8292c3e01712dfa89ebe1bb7fbe9e08" kindref="member" tooltip="Packed SP-FP minimum (3dNow!).">pfmin</ref>,<sp/>kInstPfmin,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2435"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2436" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afb8871705f97b870c8891d76a92102ee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfmin,<sp/>kInstPfmin,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2438"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>multiply<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2439" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a17a505c01dada442c7890ea977abcd3d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a17a505c01dada442c7890ea977abcd3d" kindref="member" tooltip="Packed SP-FP multiply (3dNow!).">pfmul</ref>,<sp/>kInstPfmul,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2440"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2441" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a43ff88a006843bcb1770d8727771e855" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfmul,<sp/>kInstPfmul,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2443"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>negative<sp/>accumulate<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2444" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab213fd1cc5c4b31f5aa17b90f4135a96" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab213fd1cc5c4b31f5aa17b90f4135a96" kindref="member" tooltip="Packed SP-FP negative accumulate (3dNow!).">pfnacc</ref>,<sp/>kInstPfnacc,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2445"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2446" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd4809819b273a0c551ea9dbd69b0cb8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfnacc,<sp/>kInstPfnacc,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2448"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>mixed<sp/>accumulate<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2449" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab97d1ca63ee4ae0af8bba5bd7388fa98" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab97d1ca63ee4ae0af8bba5bd7388fa98" kindref="member" tooltip="Packed SP-FP mixed accumulate (3dNow!).">pfpnacc</ref>,<sp/>kInstPfpnacc,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2450"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2451" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a55fdd7166d1529b1b01ac4040f2561be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfpnacc,<sp/>kInstPfpnacc,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2453"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal<sp/>approximation<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2454" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac41a6aef4c747a1d07acb0d2779e06b4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac41a6aef4c747a1d07acb0d2779e06b4" kindref="member" tooltip="Packed SP-FP reciprocal approximation (3dNow!).">pfrcp</ref>,<sp/>kInstPfrcp,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2455"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2456" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6426a2eecd4236a3daa01f5c95fa816d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfrcp,<sp/>kInstPfrcp,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2458"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal,<sp/>first<sp/>iteration<sp/>step<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2459" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78dd5941dd2b41a05b17b94215541f0e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78dd5941dd2b41a05b17b94215541f0e" kindref="member" tooltip="Packed SP-FP reciprocal, first iteration step (3dNow!).">pfrcpit1</ref>,<sp/>kInstPfrcpit1,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2460"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2461" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae4e13dde8718880085cafcd7a9e7aec4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfrcpit1,<sp/>kInstPfrcpit1,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2463"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal,<sp/>second<sp/>iteration<sp/>step<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2464" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b1cd75dfe19d2b37b56000d74cd84a5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b1cd75dfe19d2b37b56000d74cd84a5" kindref="member" tooltip="Packed SP-FP reciprocal, second iteration step (3dNow!).">pfrcpit2</ref>,<sp/>kInstPfrcpit2,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2465"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2466" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad3689044b28ed9625d3c25ebac14bef" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfrcpit2,<sp/>kInstPfrcpit2,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2468"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal<sp/>square<sp/>root,<sp/>first<sp/>iteration<sp/>step<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2469" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8fc2f9ef8ffb5cfbacd227c4da908339" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8fc2f9ef8ffb5cfbacd227c4da908339" kindref="member" tooltip="Packed SP-FP reciprocal square root, first iteration step (3dNow!).">pfrsqit1</ref>,<sp/>kInstPfrsqit1,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2470"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2471" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae20da1202b2814c0bdfbb6de9de80835" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfrsqit1,<sp/>kInstPfrsqit1,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2473"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal<sp/>square<sp/>root<sp/>approximation<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2474" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0305ce60d80d0212e176a35bb760cb6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0305ce60d80d0212e176a35bb760cb6" kindref="member" tooltip="Packed SP-FP reciprocal square root approximation (3dNow!).">pfrsqrt</ref>,<sp/>kInstPfrsqrt,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2475"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2476" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae8bbc1b21a9624ab42dd2ea61a1d6948" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfrsqrt,<sp/>kInstPfrsqrt,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2478"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>subtract<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2479" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a688ff752f51b4de87718d2df03a6c629" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a688ff752f51b4de87718d2df03a6c629" kindref="member" tooltip="Packed SP-FP subtract (3dNow!).">pfsub</ref>,<sp/>kInstPfsub,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2480"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2481" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a926012d7605d7c5b823c0a663619cd22" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfsub,<sp/>kInstPfsub,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2483"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reverse<sp/>subtract<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2484" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a496f0eff6eb294c7f6625f58763082cf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a496f0eff6eb294c7f6625f58763082cf" kindref="member" tooltip="Packed SP-FP reverse subtract (3dNow!).">pfsubr</ref>,<sp/>kInstPfsubr,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2485"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2486" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a707b28d0a4d03c9cc87a22ab8f1c6280" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfsubr,<sp/>kInstPfsubr,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2488"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>dwords<sp/>to<sp/>SP-FP<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2489" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a564f6670117878d87e65d38304b9b669" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a564f6670117878d87e65d38304b9b669" kindref="member" tooltip="Packed dwords to SP-FP (3dNow!).">pi2fd</ref>,<sp/>kInstPi2fd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2490"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2491" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a006ccda1ae211182ebf7a66a73a5d49f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pi2fd,<sp/>kInstPi2fd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2493"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>words<sp/>to<sp/>SP-FP<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2494" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a164dc4066b06c540abdfe0e0f5d0a989" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a164dc4066b06c540abdfe0e0f5d0a989" kindref="member" tooltip="Packed words to SP-FP (3dNow!).">pi2fw</ref>,<sp/>kInstPi2fw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2495"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2496" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0473f122202aa26dfd848639d47802a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pi2fw,<sp/>kInstPi2fw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2498"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>swap<sp/>dword<sp/>(3dNow!)</highlight></codeline>
<codeline lineno="2499" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10884a9a77b73d51f82b96231256ed76" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10884a9a77b73d51f82b96231256ed76" kindref="member" tooltip="Packed swap dword (3dNow!)">pswapd</ref>,<sp/>kInstPswapd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2500"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2501" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa2123ab3d3f17aaf51453d5f4d7288d3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pswapd,<sp/>kInstPswapd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2503"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Prefetch<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2504" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a1ad214f2263bd8b0915a133fd74032" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a1ad214f2263bd8b0915a133fd74032" kindref="member" tooltip="Prefetch (3dNow!).">prefetch_3dnow</ref>,<sp/>kInstPrefetch3dNow,<sp/>Mem)</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2506"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Prefetch<sp/>and<sp/>set<sp/>cache<sp/>to<sp/>modified<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2507" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb54e0884308d2a9781771bc6cd6194e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb54e0884308d2a9781771bc6cd6194e" kindref="member" tooltip="Prefetch and set cache to modified (3dNow!).">prefetchw_3dnow</ref>,<sp/>kInstPrefetchw3dNow,<sp/>Mem)</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2509"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Faster<sp/>EMMS<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="2510" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a39ffd6f6a6f4b470fe002ef76180e802" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a39ffd6f6a6f4b470fe002ef76180e802" kindref="member" tooltip="Faster EMMS (3dNow!).">femms</ref>,<sp/>kInstFemms)</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SSE]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2516"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>add<sp/>(SSE).</highlight></codeline>
<codeline lineno="2517" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac85e5c64f0b5b9f4435cd653390ca8dc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac85e5c64f0b5b9f4435cd653390ca8dc" kindref="member" tooltip="Packed SP-FP add (SSE).">addps</ref>,<sp/>kInstAddps,<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2518"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2519" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a60feb051121edab0bcecacb114a32704" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addps,<sp/>kInstAddps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2521"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>add<sp/>(SSE).</highlight></codeline>
<codeline lineno="2522" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aba0f15c2c3b2e8466ae27fbf08cea262" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aba0f15c2c3b2e8466ae27fbf08cea262" kindref="member" tooltip="Scalar SP-FP add (SSE).">addss</ref>,<sp/>kInstAddss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2523"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2524" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa5bb6121b9039eaa8b010f21b51ffc54" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addss,<sp/>kInstAddss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2526"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And-not<sp/>For<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2527" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e3447dcb8b4873856b5cf2d8a0d616e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e3447dcb8b4873856b5cf2d8a0d616e" kindref="member" tooltip="And-not For SP-FP (SSE).">andnps</ref>,<sp/>kInstAndnps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2528"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2529" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1117ba895da3469729a5ffda6f656efc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(andnps,<sp/>kInstAndnps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2531"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And<sp/>for<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2532" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae4fa1c3a76a32a1347ddbb68f21de56a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae4fa1c3a76a32a1347ddbb68f21de56a" kindref="member" tooltip="And for SP-FP (SSE).">andps</ref>,<sp/>kInstAndps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2533"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2534" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaa2bd13989df0f4e89f1d098f786eff2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(andps,<sp/>kInstAndps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2536"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>compare<sp/>(SSE).</highlight></codeline>
<codeline lineno="2537" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae9f99a706f185191ba7e5c44c1e7ec10" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae9f99a706f185191ba7e5c44c1e7ec10" kindref="member" tooltip="Packed SP-FP compare (SSE).">cmpps</ref>,<sp/>kInstCmpps,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2538"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2539" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ee0da2a288f2391cc2464e876ac1414" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(cmpps,<sp/>kInstCmpps,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2541"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>scalar<sp/>SP-FP<sp/>Values<sp/>(SSE).</highlight></codeline>
<codeline lineno="2542" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41284ace24e95221b3436bdfeb469431" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41284ace24e95221b3436bdfeb469431" kindref="member" tooltip="Compare scalar SP-FP Values (SSE).">cmpss</ref>,<sp/>kInstCmpss,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2543"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2544" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96a498675cf7dc476b46c70d95e1bd7c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(cmpss,<sp/>kInstCmpss,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2546"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>ordered<sp/>SP-FP<sp/>compare<sp/>and<sp/>set<sp/>EFLAGS<sp/>(SSE).</highlight></codeline>
<codeline lineno="2547" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f265af8aa3b9cbeb748c9ab07f78345" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f265af8aa3b9cbeb748c9ab07f78345" kindref="member" tooltip="Scalar ordered SP-FP compare and set EFLAGS (SSE).">comiss</ref>,<sp/>kInstComiss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2548"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2549" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aacacfa4ba7240036e8e00b581067ba41" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(comiss,<sp/>kInstComiss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2551"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>signed<sp/>INT32<sp/>to<sp/>packed<sp/>SP-FP<sp/>conversion<sp/>(SSE).</highlight></codeline>
<codeline lineno="2552" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa6e14017cb7f65de4d4d1da225f031df" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa6e14017cb7f65de4d4d1da225f031df" kindref="member" tooltip="Packed signed INT32 to packed SP-FP conversion (SSE).">cvtpi2ps</ref>,<sp/>kInstCvtpi2ps,<sp/>XmmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2553"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2554" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9083630bc46f8f1f963d49deca43e534" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtpi2ps,<sp/>kInstCvtpi2ps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2556"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>to<sp/>packed<sp/>INT32<sp/>conversion<sp/>(SSE).</highlight></codeline>
<codeline lineno="2557" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a023326c36d12261ffd24011cd8eb996c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a023326c36d12261ffd24011cd8eb996c" kindref="member" tooltip="Packed SP-FP to packed INT32 conversion (SSE).">cvtps2pi</ref>,<sp/>kInstCvtps2pi,<sp/>MmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2558"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2559" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afff4316bcaaf1b4b5fc1fe31bbf10f69" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtps2pi,<sp/>kInstCvtps2pi,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2561"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>signed<sp/>INT32<sp/>to<sp/>SP-FP<sp/>conversion<sp/>(SSE).</highlight></codeline>
<codeline lineno="2562" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4d02801886a6ea95d25e0d51ce658a32" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4d02801886a6ea95d25e0d51ce658a32" kindref="member" tooltip="Scalar signed INT32 to SP-FP conversion (SSE).">cvtsi2ss</ref>,<sp/>kInstCvtsi2ss,<sp/>XmmVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2563"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2564" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae78d5394a6763b076d516a2c1a6f32f9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtsi2ss,<sp/>kInstCvtsi2ss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2566"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>to<sp/>Signed<sp/>INT32<sp/>conversion<sp/>(SSE).</highlight></codeline>
<codeline lineno="2567" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a743215648c239d85028f3cc98a116e7b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a743215648c239d85028f3cc98a116e7b" kindref="member" tooltip="Scalar SP-FP to Signed INT32 conversion (SSE).">cvtss2si</ref>,<sp/>kInstCvtss2si,<sp/>GpVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2568"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2569" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9ff3cdc5289b1bd6f12564d2f5f70b55" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtss2si,<sp/>kInstCvtss2si,<sp/>GpVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2571"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>to<sp/>packed<sp/>INT32<sp/>conversion<sp/>(truncate)<sp/>(SSE).</highlight></codeline>
<codeline lineno="2572" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ec275e00c4ac98155598bd5474d10fe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ec275e00c4ac98155598bd5474d10fe" kindref="member" tooltip="Packed SP-FP to packed INT32 conversion (truncate) (SSE).">cvttps2pi</ref>,<sp/>kInstCvttps2pi,<sp/>MmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2573"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2574" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4bd56f2d95771b82c56134b3ade44019" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttps2pi,<sp/>kInstCvttps2pi,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2576"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>to<sp/>signed<sp/>INT32<sp/>conversion<sp/>(truncate)<sp/>(SSE).</highlight></codeline>
<codeline lineno="2577" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad21e9bfcd6d8291a4df1057284c05edf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad21e9bfcd6d8291a4df1057284c05edf" kindref="member" tooltip="Scalar SP-FP to signed INT32 conversion (truncate) (SSE).">cvttss2si</ref>,<sp/>kInstCvttss2si,<sp/>GpVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2578"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2579" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a93ea80b2d4a6390e01b3bba78bc823" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttss2si,<sp/>kInstCvttss2si,<sp/>GpVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2581"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>divide<sp/>(SSE).</highlight></codeline>
<codeline lineno="2582" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a17452086b8be1de2e6e491f39b388928" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a17452086b8be1de2e6e491f39b388928" kindref="member" tooltip="Packed SP-FP divide (SSE).">divps</ref>,<sp/>kInstDivps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2583"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2584" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd5b4f0bfcf231302e26f0ae0bba0cf1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(divps,<sp/>kInstDivps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2586"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>divide<sp/>(SSE).</highlight></codeline>
<codeline lineno="2587" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a49eadf01b6cccc999e7627aa227868c0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a49eadf01b6cccc999e7627aa227868c0" kindref="member" tooltip="Scalar SP-FP divide (SSE).">divss</ref>,<sp/>kInstDivss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2588"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2589" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76ba48aea6d454659b26762467ecc028" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(divss,<sp/>kInstDivss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2591"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>streaming<sp/>SIMD<sp/>extension<sp/>control/status<sp/>(SSE).</highlight></codeline>
<codeline lineno="2592" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3dd1aea2975beeaf3344c0b250be22f4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3dd1aea2975beeaf3344c0b250be22f4" kindref="member" tooltip="Load streaming SIMD extension control/status (SSE).">ldmxcsr</ref>,<sp/>kInstLdmxcsr,<sp/>Mem)</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2594"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Byte<sp/>mask<sp/>write<sp/>(SSE).</highlight></codeline>
<codeline lineno="2595"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="2596"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>The<sp/>default<sp/>memory<sp/>location<sp/>is<sp/>specified<sp/>by<sp/>DS:EDI.</highlight></codeline>
<codeline lineno="2597" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1add30eb7d480e633fb899487d35b74b01" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1add30eb7d480e633fb899487d35b74b01" kindref="member" tooltip="Byte mask write (SSE).">maskmovq</ref>,<sp/>kInstMaskmovq,<sp/>MmVar,<sp/>MmVar)</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2599"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>maximum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2600" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6def903b8512e338dc0f1e3a8fad9221" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6def903b8512e338dc0f1e3a8fad9221" kindref="member" tooltip="Packed SP-FP maximum (SSE).">maxps</ref>,<sp/>kInstMaxps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2601"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2602" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab0fd5a23f14242b2bd6f32ef91d2e462" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(maxps,<sp/>kInstMaxps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2604"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>maximum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2605" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42bb2126854b3a46f52fba5e3622e8a6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42bb2126854b3a46f52fba5e3622e8a6" kindref="member" tooltip="Scalar SP-FP maximum (SSE).">maxss</ref>,<sp/>kInstMaxss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2606"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2607" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b85388b03b27f15ae9f9462041aa50a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(maxss,<sp/>kInstMaxss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2609"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>minimum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2610" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aac569d722b1f79bb02672f420a3ed455" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aac569d722b1f79bb02672f420a3ed455" kindref="member" tooltip="Packed SP-FP minimum (SSE).">minps</ref>,<sp/>kInstMinps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2611"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2612" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a649a2424178e170bc4f947c9249bb16f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(minps,<sp/>kInstMinps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2614"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>minimum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2615" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adad5abca1d9deee2853ce234378160d0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adad5abca1d9deee2853ce234378160d0" kindref="member" tooltip="Scalar SP-FP minimum (SSE).">minss</ref>,<sp/>kInstMinss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2616"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2617" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2699c27608c7e72109517efcfb713ad1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(minss,<sp/>kInstMinss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2619"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>aligned<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE).</highlight></codeline>
<codeline lineno="2620" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aae3e2d59ce2e1dc369ed1ac09674b7da" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aae3e2d59ce2e1dc369ed1ac09674b7da" kindref="member" tooltip="Move aligned packed SP-FP values (SSE).">movaps</ref>,<sp/>kInstMovaps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2621"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2622" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae2cfbf39e91dedc85c485e20ac9d5561" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movaps,<sp/>kInstMovaps,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2623"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>aligned<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE).</highlight></codeline>
<codeline lineno="2624" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a673581bad0129a8b9bd4fef2062a16f4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movaps,<sp/>kInstMovaps,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2626"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>dword.</highlight></codeline>
<codeline lineno="2627" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7f6c26e5add172df7e4a71684082b976" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>Mem,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2628"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2629" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae84331cac9eea860ca3e8dd01d0dd1d4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>GpVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2630"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2631" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a599090848c073d330f73099b22a65e6d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2632"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2633" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0e0585bc44c2e9c0d8ff45157b36b29" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>XmmVar,<sp/>GpVar)</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2635"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>qword<sp/>(SSE).</highlight></codeline>
<codeline lineno="2636" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa0c63c542745bf034d80a2f98d42434e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2637"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2638" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b337e24dc6d9e7063692c0bd5ff3122" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>Mem,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2639"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2640" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2a1651efe5a044511544d92addf3118" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2642"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>64<sp/>bits<sp/>non-temporal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2643" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6dceefbe1f4530c2e176c7fe9f25578d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6dceefbe1f4530c2e176c7fe9f25578d" kindref="member" tooltip="Move 64 bits non-temporal (SSE).">movntq</ref>,<sp/>kInstMovntq,<sp/>Mem,<sp/>MmVar)</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2645"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>High<sp/>to<sp/>low<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2646" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a241f3c486dc4e9e512ed16cefc9d59cc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a241f3c486dc4e9e512ed16cefc9d59cc" kindref="member" tooltip="High to low packed SP-FP (SSE).">movhlps</ref>,<sp/>kInstMovhlps,<sp/>XmmVar,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2648"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>high<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2649" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a47f6273514288c3774f600622ad3e925" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a47f6273514288c3774f600622ad3e925" kindref="member" tooltip="Move high packed SP-FP (SSE).">movhps</ref>,<sp/>kInstMovhps,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2650"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>high<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2651" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6073771299aff094bbd40e942b301474" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movhps,<sp/>kInstMovhps,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2653"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>low<sp/>to<sp/>high<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2654" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14a4df14f9f5a70a21ba9c0092db2ba1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14a4df14f9f5a70a21ba9c0092db2ba1" kindref="member" tooltip="Move low to high packed SP-FP (SSE).">movlhps</ref>,<sp/>kInstMovlhps,<sp/>XmmVar,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2656"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>low<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2657" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbabed7202fc355fa3f4ba7db303a6c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbabed7202fc355fa3f4ba7db303a6c5" kindref="member" tooltip="Move low packed SP-FP (SSE).">movlps</ref>,<sp/>kInstMovlps,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2658"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>low<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2659" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a583570fdf45bcaac5efad2d7cbdca60a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movlps,<sp/>kInstMovlps,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2661"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>aligned<sp/>four<sp/>packed<sp/>SP-FP<sp/>non-temporal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2662" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4affd26e96f61c063a32659b10ef78e1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4affd26e96f61c063a32659b10ef78e1" kindref="member" tooltip="Move aligned four packed SP-FP non-temporal (SSE).">movntps</ref>,<sp/>kInstMovntps,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2664"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>scalar<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2665" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a67a44e0d9c5846eb8a194d1c8f6591ba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a67a44e0d9c5846eb8a194d1c8f6591ba" kindref="member" tooltip="Move scalar SP-FP (SSE).">movss</ref>,<sp/>kInstMovss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2666"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2667" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a1e3331eeb2704003cafc71c5fa62d6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movss,<sp/>kInstMovss,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2668"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2669" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7f11aa7bc7c8be78c8c3ca9372fe18a3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movss,<sp/>kInstMovss,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2671"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>unaligned<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE).</highlight></codeline>
<codeline lineno="2672" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acdd03e3b8fe7fb856038f7c9497fafa1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acdd03e3b8fe7fb856038f7c9497fafa1" kindref="member" tooltip="Move unaligned packed SP-FP values (SSE).">movups</ref>,<sp/>kInstMovups,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2673"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2674" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3a78e57a2d45fb0c8e674d2fddc150b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movups,<sp/>kInstMovups,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2675"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2676" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07bdd4bafec6b38d7e7a701551efab97" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movups,<sp/>kInstMovups,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2678"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>multiply<sp/>(SSE).</highlight></codeline>
<codeline lineno="2679" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6636ca1b2589d57553496f3e7b21cbd0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6636ca1b2589d57553496f3e7b21cbd0" kindref="member" tooltip="Packed SP-FP multiply (SSE).">mulps</ref>,<sp/>kInstMulps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2680"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2681" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a81a0c3aac93c3f07428f47a0788feaad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mulps,<sp/>kInstMulps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2683"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>multiply<sp/>(SSE).</highlight></codeline>
<codeline lineno="2684" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abeeb8b7c0276c220725e93b1c8ba0698" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abeeb8b7c0276c220725e93b1c8ba0698" kindref="member" tooltip="Scalar SP-FP multiply (SSE).">mulss</ref>,<sp/>kInstMulss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2685"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2686" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeb50a4da8dbbb26f1b71c068e0f6baf3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mulss,<sp/>kInstMulss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2688"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Or<sp/>for<sp/>SP-FP<sp/>data<sp/>(SSE).</highlight></codeline>
<codeline lineno="2689" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a307aafbcb9740933febc98c9f9b3a5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a307aafbcb9740933febc98c9f9b3a5" kindref="member" tooltip="Or for SP-FP data (SSE).">orps</ref>,<sp/>kInstOrps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2690"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2691" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa63edef6ce15a10ca915ed4529483749" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(orps,<sp/>kInstOrps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2693"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>average<sp/>(SSE).</highlight></codeline>
<codeline lineno="2694" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afeb6936340cadd93686a216457347ac5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afeb6936340cadd93686a216457347ac5" kindref="member" tooltip="Packed average (SSE).">pavgb</ref>,<sp/>kInstPavgb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2695"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2696" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3c06a0cfaff61e8e4fe21bf4e9b39016" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgb,<sp/>kInstPavgb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2698"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>average<sp/>(SSE).</highlight></codeline>
<codeline lineno="2699" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2bd5c84f7525a2221f8c67742a462b6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2bd5c84f7525a2221f8c67742a462b6" kindref="member" tooltip="Packed average (SSE).">pavgw</ref>,<sp/>kInstPavgw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2700"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2701" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0722143d816ef1301e0cf1b68bb71bf9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgw,<sp/>kInstPavgw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2703"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>word<sp/>(SSE).</highlight></codeline>
<codeline lineno="2704" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1affc8688f59255a24b9099cd1cb3567e9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1affc8688f59255a24b9099cd1cb3567e9" kindref="member" tooltip="Extract word (SSE).">pextrw</ref>,<sp/>kInstPextrw,<sp/>GpVar,<sp/>MmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2706"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Insert<sp/>word<sp/>(SSE).</highlight></codeline>
<codeline lineno="2707" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872ec1da15e70eaedd580e987b37b926" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872ec1da15e70eaedd580e987b37b926" kindref="member" tooltip="Insert word (SSE).">pinsrw</ref>,<sp/>kInstPinsrw,<sp/>MmVar,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2708"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2709" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6c7e87247f484830afefeb770d647b82" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrw,<sp/>kInstPinsrw,<sp/>MmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2711"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>signed<sp/>integer<sp/>word<sp/>maximum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2712" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af08357c0362493c146b5a0a4d2023677" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af08357c0362493c146b5a0a4d2023677" kindref="member" tooltip="Packed signed integer word maximum (SSE).">pmaxsw</ref>,<sp/>kInstPmaxsw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2713"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2714" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af57a447dfc4fe8ee53c92848b96b0448" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxsw,<sp/>kInstPmaxsw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2716"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>unsigned<sp/>integer<sp/>byte<sp/>maximum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2717" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aae266aed351f6ba8583e32a189eee747" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aae266aed351f6ba8583e32a189eee747" kindref="member" tooltip="Packed unsigned integer byte maximum (SSE).">pmaxub</ref>,<sp/>kInstPmaxub,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2718"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2719" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a2b255ab90577e4ebfb5af164fe0c31" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxub,<sp/>kInstPmaxub,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2721"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>signed<sp/>integer<sp/>word<sp/>minimum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2722" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4267e08cc369f5a29f945bed3f895f73" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4267e08cc369f5a29f945bed3f895f73" kindref="member" tooltip="Packed signed integer word minimum (SSE).">pminsw</ref>,<sp/>kInstPminsw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2723"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2724" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66dd47d6ab84b33143a242572cf86cdd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminsw,<sp/>kInstPminsw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2726"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>unsigned<sp/>integer<sp/>byte<sp/>minimum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2727" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66253552ed74cea6f0a5e1c74b150926" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66253552ed74cea6f0a5e1c74b150926" kindref="member" tooltip="Packed unsigned integer byte minimum (SSE).">pminub</ref>,<sp/>kInstPminub,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2728"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2729" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a064b6a0fc4bab4e4a600bfd13517a626" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminub,<sp/>kInstPminub,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2731"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>byte<sp/>mask<sp/>to<sp/>integer<sp/>(SSE).</highlight></codeline>
<codeline lineno="2732" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f6a10214e53c9a8eab24cb5fa00e1aa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f6a10214e53c9a8eab24cb5fa00e1aa" kindref="member" tooltip="Move byte mask to integer (SSE).">pmovmskb</ref>,<sp/>kInstPmovmskb,<sp/>GpVar,<sp/>MmVar)</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2734"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>unsigned<sp/>(SSE).</highlight></codeline>
<codeline lineno="2735" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a3af827f33d4c5eb831d9008592e9b0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a3af827f33d4c5eb831d9008592e9b0" kindref="member" tooltip="Packed multiply high unsigned (SSE).">pmulhuw</ref>,<sp/>kInstPmulhuw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2736"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2737" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aea207c46c0c2c60e5a6a1a21e3d2129f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhuw,<sp/>kInstPmulhuw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2739"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sum<sp/>of<sp/>absolute<sp/>differences<sp/>(SSE).</highlight></codeline>
<codeline lineno="2740" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adc319ba98e4fce513c4e1f4486868ed1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adc319ba98e4fce513c4e1f4486868ed1" kindref="member" tooltip="Packed sum of absolute differences (SSE).">psadbw</ref>,<sp/>kInstPsadbw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2741"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2742" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a044a817ab9d34d32a7a905fd6c68af3d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psadbw,<sp/>kInstPsadbw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2744"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shuffle<sp/>word<sp/>(SSE).</highlight></codeline>
<codeline lineno="2745" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b642106c1ec24baf27191085a48b35a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b642106c1ec24baf27191085a48b35a" kindref="member" tooltip="Packed shuffle word (SSE).">pshufw</ref>,<sp/>kInstPshufw,<sp/>MmVar,<sp/>MmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2746"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2747" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa6bdc9feed5f82a4dcb51847b68fa44a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pshufw,<sp/>kInstPshufw,<sp/>MmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2749"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2750" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b6358f840370734c102ae86bbe01301" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b6358f840370734c102ae86bbe01301" kindref="member" tooltip="Packed SP-FP reciprocal (SSE).">rcpps</ref>,<sp/>kInstRcpps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2751"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2752" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4f9083467d0195dbebee5c3215928fed" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rcpps,<sp/>kInstRcpps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2754"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>reciprocal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2755" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a729375bf11b562666b03b867d7c3432d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a729375bf11b562666b03b867d7c3432d" kindref="member" tooltip="Scalar SP-FP reciprocal (SSE).">rcpss</ref>,<sp/>kInstRcpss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2756"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2757" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b6041f76f63b6cc7169332437db7d4f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rcpss,<sp/>kInstRcpss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2759"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Prefetch<sp/>(SSE).</highlight></codeline>
<codeline lineno="2760" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1a7396f787bde7f01626ed3a9bf9e9ac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1a7396f787bde7f01626ed3a9bf9e9ac" kindref="member" tooltip="Prefetch (SSE).">prefetch</ref>,<sp/>kInstPrefetch,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2762"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compute<sp/>sum<sp/>of<sp/>absolute<sp/>differences<sp/>(SSE).</highlight></codeline>
<codeline lineno="2763" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a503367e95dcfc2eb4e992f6c66371299" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psadbw,<sp/>kInstPsadbw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2764"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2765" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aabdeaf447da6cc9744a52346fce9a29f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psadbw,<sp/>kInstPsadbw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2767"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>Square<sp/>root<sp/>reciprocal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2768" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a401d62622ec374e10409f8225cc0ddad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a401d62622ec374e10409f8225cc0ddad" kindref="member" tooltip="Packed SP-FP Square root reciprocal (SSE).">rsqrtps</ref>,<sp/>kInstRsqrtps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2769"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2770" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f518e2e058c4febd6662e63ef795349" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rsqrtps,<sp/>kInstRsqrtps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2772"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>Square<sp/>root<sp/>reciprocal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2773" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a339d6ad906783f68bb32abbce6ba00aa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a339d6ad906783f68bb32abbce6ba00aa" kindref="member" tooltip="Scalar SP-FP Square root reciprocal (SSE).">rsqrtss</ref>,<sp/>kInstRsqrtss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2774"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2775" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf71a0f40a72f662a2e251160ca271c0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rsqrtss,<sp/>kInstRsqrtss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2777"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>fence<sp/>(SSE).</highlight></codeline>
<codeline lineno="2778" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a11af9f2436a11ba97cf8424934f91759" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a11af9f2436a11ba97cf8424934f91759" kindref="member" tooltip="Store fence (SSE).">sfence</ref>,<sp/>kInstSfence)</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2780"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shuffle<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2781" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b3d697649f0461ae485507aa700b223" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b3d697649f0461ae485507aa700b223" kindref="member" tooltip="Shuffle SP-FP (SSE).">shufps</ref>,<sp/>kInstShufps,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2782"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2783" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66b21a28a2e1cc970141d0f9a5411a30" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shufps,<sp/>kInstShufps,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2785"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>square<sp/>root<sp/>(SSE).</highlight></codeline>
<codeline lineno="2786" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b59bdecf44016c55f2e6654fdf0d021" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b59bdecf44016c55f2e6654fdf0d021" kindref="member" tooltip="Packed SP-FP square root (SSE).">sqrtps</ref>,<sp/>kInstSqrtps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2787"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2788" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af02dae9371074c14243778ae51b83792" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sqrtps,<sp/>kInstSqrtps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2790"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>square<sp/>root<sp/>(SSE).</highlight></codeline>
<codeline lineno="2791" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1cbe0a9cddd400e7c6c0fb1427545dd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1cbe0a9cddd400e7c6c0fb1427545dd" kindref="member" tooltip="Scalar SP-FP square root (SSE).">sqrtss</ref>,<sp/>kInstSqrtss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2792"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2793" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb0387ae83b6cca55d6ffba4c5c12fdf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sqrtss,<sp/>kInstSqrtss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2795"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>streaming<sp/>SIMD<sp/>extension<sp/>control/status<sp/>(SSE).</highlight></codeline>
<codeline lineno="2796" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7377730dd81095284e76a97786bc8d06" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7377730dd81095284e76a97786bc8d06" kindref="member" tooltip="Store streaming SIMD extension control/status (SSE).">stmxcsr</ref>,<sp/>kInstStmxcsr,<sp/>Mem)</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2798"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>subtract<sp/>(SSE).</highlight></codeline>
<codeline lineno="2799" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3f1f776c7d8bee98681e73057a1dd5fd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3f1f776c7d8bee98681e73057a1dd5fd" kindref="member" tooltip="Packed SP-FP subtract (SSE).">subps</ref>,<sp/>kInstSubps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2800"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2801" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a62994b5f37a188bc725b2a6846a0e187" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(subps,<sp/>kInstSubps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2803"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>subtract<sp/>(SSE).</highlight></codeline>
<codeline lineno="2804" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fa1d6b57ffbff8c6f19fe5618ebb095" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fa1d6b57ffbff8c6f19fe5618ebb095" kindref="member" tooltip="Scalar SP-FP subtract (SSE).">subss</ref>,<sp/>kInstSubss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2805"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2806" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1f25cfc03d86d3bbd974053b77099ec2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(subss,<sp/>kInstSubss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2808"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unordered<sp/>scalar<sp/>SP-FP<sp/>compare<sp/>and<sp/>set<sp/>EFLAGS<sp/>(SSE).</highlight></codeline>
<codeline lineno="2809" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57842af8fa7ba1b3e36130c740b698ad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57842af8fa7ba1b3e36130c740b698ad" kindref="member" tooltip="Unordered scalar SP-FP compare and set EFLAGS (SSE).">ucomiss</ref>,<sp/>kInstUcomiss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2810"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2811" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa25b258b06bc68b4170dd0f2aa34fea4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(ucomiss,<sp/>kInstUcomiss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2813"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>SP-FP<sp/>data<sp/>(SSE).</highlight></codeline>
<codeline lineno="2814" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a682eef3329befdfdb604bcdd8e6660d5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a682eef3329befdfdb604bcdd8e6660d5" kindref="member" tooltip="Unpack high packed SP-FP data (SSE).">unpckhps</ref>,<sp/>kInstUnpckhps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2815"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2816" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa8cf302002f6c50edfa705446e28333" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(unpckhps,<sp/>kInstUnpckhps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2818"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>low<sp/>packed<sp/>SP-FP<sp/>data<sp/>(SSE).</highlight></codeline>
<codeline lineno="2819" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab46d71e58038daa6241b784ee6b016f2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab46d71e58038daa6241b784ee6b016f2" kindref="member" tooltip="Unpack low packed SP-FP data (SSE).">unpcklps</ref>,<sp/>kInstUnpcklps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2820"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2821" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abf9b365a2ad26ca625a1bee939a2e538" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(unpcklps,<sp/>kInstUnpcklps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2823"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xor<sp/>for<sp/>SP-FP<sp/>data<sp/>(SSE).</highlight></codeline>
<codeline lineno="2824" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae69474d3cf97c67db980056d08c18d33" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae69474d3cf97c67db980056d08c18d33" kindref="member" tooltip="Xor for SP-FP data (SSE).">xorps</ref>,<sp/>kInstXorps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2825"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2826" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a34a52286d5d578337c9f7a57bc9e9910" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xorps,<sp/>kInstXorps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2828"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2829" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ba63ef015fd28dbaa37dc5ba01bd991" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ba63ef015fd28dbaa37dc5ba01bd991" kindref="member" tooltip="Packed DP-FP add (SSE2).">addpd</ref>,<sp/>kInstAddpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2830"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2831" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a43e266965f126f825dd1f7aca1fede4f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addpd,<sp/>kInstAddpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2833"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>DP-FP<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2834" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d5970c4014057b00080bd58b1b08b6b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d5970c4014057b00080bd58b1b08b6b" kindref="member" tooltip="Scalar DP-FP add (SSE2).">addsd</ref>,<sp/>kInstAddsd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2835"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2836" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6042e4dccc0e7846f39d57a500cce4ea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addsd,<sp/>kInstAddsd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2838"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And-not<sp/>for<sp/>DP-FP<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2839" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a84d1eb207883ddb33b68b51350443ac0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a84d1eb207883ddb33b68b51350443ac0" kindref="member" tooltip="And-not for DP-FP (SSE2).">andnpd</ref>,<sp/>kInstAndnpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2840"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2841" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2dc7b59a96149ad4cf3b43d07fe76b4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(andnpd,<sp/>kInstAndnpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2843"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And<sp/>for<sp/>DP-FP<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2844" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a095b6f856f02f87bcac85f61dacc0179" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a095b6f856f02f87bcac85f61dacc0179" kindref="member" tooltip="And for DP-FP (SSE2).">andpd</ref>,<sp/>kInstAndpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2845"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2846" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0edb3a8f3a37172ac36dbf5fe8b7036" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(andpd,<sp/>kInstAndpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2848"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Flush<sp/>cache<sp/>line<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2849" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab36c65eedc887fb2738bda33599c4706" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab36c65eedc887fb2738bda33599c4706" kindref="member" tooltip="Flush cache line (SSE2).">clflush</ref>,<sp/>kInstClflush,<sp/>Mem)</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2851"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>compare<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2852" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a516b0a27c81b92b75c5e24c038c64106" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a516b0a27c81b92b75c5e24c038c64106" kindref="member" tooltip="Packed DP-FP compare (SSE2).">cmppd</ref>,<sp/>kInstCmppd,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2853"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2854" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d07c01ebc53c145065b645c8ddf14be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(cmppd,<sp/>kInstCmppd,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2856"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>scalar<sp/>SP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2857" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af019986f1fe96ee9f667bfb05e0c5570" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af019986f1fe96ee9f667bfb05e0c5570" kindref="member" tooltip="Compare scalar SP-FP values (SSE2).">cmpsd</ref>,<sp/>kInstCmpsd,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2858"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2859" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abbd03059a613ffb7d80a434e85af2e0e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(cmpsd,<sp/>kInstCmpsd,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2861"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>ordered<sp/>DP-FP<sp/>compare<sp/>and<sp/>set<sp/>EFLAGS<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2862" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbcdee1ea8d0be154cb53816a9d8e5e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbcdee1ea8d0be154cb53816a9d8e5e7" kindref="member" tooltip="Scalar ordered DP-FP compare and set EFLAGS (SSE2).">comisd</ref>,<sp/>kInstComisd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2863"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2864" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4eac8e77d3d151797d633621319987ff" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(comisd,<sp/>kInstComisd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2866"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>Dword<sp/>integers<sp/>to<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2867" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf4cfe911acb2abf3874a3d94f2053a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf4cfe911acb2abf3874a3d94f2053a9" kindref="member" tooltip="Convert packed Dword integers to packed DP-FP values (SSE2).">cvtdq2pd</ref>,<sp/>kInstCvtdq2pd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2868"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2869" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1accfdd79c9d108b9686d326bb79b785f2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtdq2pd,<sp/>kInstCvtdq2pd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2871"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>Dword<sp/>integers<sp/>to<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2872" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad33522db0add8f99cbe2642a2ec3f78" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad33522db0add8f99cbe2642a2ec3f78" kindref="member" tooltip="Convert packed Dword integers to packed SP-FP values (SSE2).">cvtdq2ps</ref>,<sp/>kInstCvtdq2ps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2873"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2874" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2036c1a3b93170b325c9f0062ed75e3f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtdq2ps,<sp/>kInstCvtdq2ps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2876"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>DP-FP<sp/>values<sp/>to<sp/>packed<sp/>dword<sp/>integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2877" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9d4f3bca1d13960e0dcfea3bf5ddb3ed" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9d4f3bca1d13960e0dcfea3bf5ddb3ed" kindref="member" tooltip="Convert packed DP-FP values to packed dword integers (SSE2).">cvtpd2dq</ref>,<sp/>kInstCvtpd2dq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2878"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2879" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a32b34acdf4c6247eb795eb15c56f5614" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtpd2dq,<sp/>kInstCvtpd2dq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2881"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>DP-FP<sp/>values<sp/>to<sp/>packed<sp/>dword<sp/>integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2882" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a47a13f24ee14c156860d0588538cb5aa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a47a13f24ee14c156860d0588538cb5aa" kindref="member" tooltip="Convert packed DP-FP values to packed dword integers (SSE2).">cvtpd2pi</ref>,<sp/>kInstCvtpd2pi,<sp/>MmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2883"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2884" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe068c7af8e2fa4074f4b2aca253d81b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtpd2pi,<sp/>kInstCvtpd2pi,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2886"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>DP-FP<sp/>values<sp/>to<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2887" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a63df5ad4b651016e4481b0f17ea85c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a63df5ad4b651016e4481b0f17ea85c" kindref="member" tooltip="Convert packed DP-FP values to packed SP-FP values (SSE2).">cvtpd2ps</ref>,<sp/>kInstCvtpd2ps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2888"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2889" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a44ac1d63d42063c6aaf7c2275f20c023" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtpd2ps,<sp/>kInstCvtpd2ps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2891"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>dword<sp/>integers<sp/>to<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2892" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2a98c07bc4593dad9b95398e31cde61" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2a98c07bc4593dad9b95398e31cde61" kindref="member" tooltip="Convert packed dword integers to packed DP-FP values (SSE2).">cvtpi2pd</ref>,<sp/>kInstCvtpi2pd,<sp/>XmmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2893"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2894" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe04a4b92986116d85102efe736e3113" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtpi2pd,<sp/>kInstCvtpi2pd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2896"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>SP-FP<sp/>values<sp/>to<sp/>packed<sp/>dword<sp/>integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2897" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acda2bb660b30d030b53290cb867e1ccb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acda2bb660b30d030b53290cb867e1ccb" kindref="member" tooltip="Convert packed SP-FP values to packed dword integers (SSE2).">cvtps2dq</ref>,<sp/>kInstCvtps2dq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2898"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2899" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a18e2440b1b342db43fa4a63004ace3b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtps2dq,<sp/>kInstCvtps2dq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2901"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>SP-FP<sp/>values<sp/>to<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2902" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae6cceb27f7c80d9db150b6b88b594f3d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae6cceb27f7c80d9db150b6b88b594f3d" kindref="member" tooltip="Convert packed SP-FP values to packed DP-FP values (SSE2).">cvtps2pd</ref>,<sp/>kInstCvtps2pd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2903"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2904" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a61d517777d19ec79bc2431dc2547f443" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtps2pd,<sp/>kInstCvtps2pd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2906"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>scalar<sp/>DP-FP<sp/>value<sp/>to<sp/>dword<sp/>Integer<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2907" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb40598c2459e5a76d723d39f89234fd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb40598c2459e5a76d723d39f89234fd" kindref="member" tooltip="Convert scalar DP-FP value to dword Integer (SSE2).">cvtsd2si</ref>,<sp/>kInstCvtsd2si,<sp/>GpVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2908"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2909" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af07deb9f81a1b08735c282878667ea4b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtsd2si,<sp/>kInstCvtsd2si,<sp/>GpVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2911"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>scalar<sp/>DP-FP<sp/>value<sp/>to<sp/>scalar<sp/>SP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2912" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0c7c24f0abdb24a22d33c9f8bff1903d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0c7c24f0abdb24a22d33c9f8bff1903d" kindref="member" tooltip="Convert scalar DP-FP value to scalar SP-FP value (SSE2).">cvtsd2ss</ref>,<sp/>kInstCvtsd2ss,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2913"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2914" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30ae1b527a7daa8215745cc924a138a2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtsd2ss,<sp/>kInstCvtsd2ss,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2916"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>dword<sp/>integer<sp/>to<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2917" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad35ab7d8ffec802ce21b6a46bd200a31" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad35ab7d8ffec802ce21b6a46bd200a31" kindref="member" tooltip="Convert dword integer to scalar DP-FP value (SSE2).">cvtsi2sd</ref>,<sp/>kInstCvtsi2sd,<sp/>XmmVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2918"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2919" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a51ed83732d540114841a988c560e2749" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtsi2sd,<sp/>kInstCvtsi2sd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2921"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>scalar<sp/>SP-FP<sp/>value<sp/>to<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2922" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b843ba29233f20ed1ce92cff8687243" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b843ba29233f20ed1ce92cff8687243" kindref="member" tooltip="Convert scalar SP-FP value to scalar DP-FP value (SSE2).">cvtss2sd</ref>,<sp/>kInstCvtss2sd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2923"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2924" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4cb949dc10daadc0ccba923b93068764" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtss2sd,<sp/>kInstCvtss2sd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2926"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>with<sp/>truncation<sp/>packed<sp/>DP-FP<sp/>values<sp/>to<sp/>packed<sp/>dword<sp/>Integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2927" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5e7369e624cafc40201a89203db6db0b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5e7369e624cafc40201a89203db6db0b" kindref="member" tooltip="Convert with truncation packed DP-FP values to packed dword Integers (SSE2).">cvttpd2pi</ref>,<sp/>kInstCvttpd2pi,<sp/>MmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2928"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2929" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1a711d2d72290c625022791655b54db5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttpd2pi,<sp/>kInstCvttpd2pi,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2931"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>with<sp/>truncation<sp/>packed<sp/>DP-FP<sp/>values<sp/>to<sp/>packed<sp/>qword<sp/>Integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2932" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96374e752c1417d94697d7c04ff1b1f7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96374e752c1417d94697d7c04ff1b1f7" kindref="member" tooltip="Convert with truncation packed DP-FP values to packed qword Integers (SSE2).">cvttpd2dq</ref>,<sp/>kInstCvttpd2dq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2933"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2934" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa31d9a23d4fdbac92e7da1d69d78590d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttpd2dq,<sp/>kInstCvttpd2dq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2936"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>with<sp/>truncation<sp/>packed<sp/>SP-FP<sp/>values<sp/>to<sp/>packed<sp/>qword<sp/>Integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2937" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a31c142eb74f4814c2cc22eab3347b47e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a31c142eb74f4814c2cc22eab3347b47e" kindref="member" tooltip="Convert with truncation packed SP-FP values to packed qword Integers (SSE2).">cvttps2dq</ref>,<sp/>kInstCvttps2dq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2938"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2939" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0c64c6f078e0122344d5c1615dd4bce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttps2dq,<sp/>kInstCvttps2dq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2941"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>with<sp/>truncation<sp/>scalar<sp/>DP-FP<sp/>value<sp/>to<sp/>signed<sp/>dword<sp/>Integer<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2942" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5fdfae0506c84f79f838933cd352ac4b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5fdfae0506c84f79f838933cd352ac4b" kindref="member" tooltip="Convert with truncation scalar DP-FP value to signed dword Integer (SSE2).">cvttsd2si</ref>,<sp/>kInstCvttsd2si,<sp/>GpVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2943"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2944" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adc356ff240209e912c1e72a6be7d431c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttsd2si,<sp/>kInstCvttsd2si,<sp/>GpVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2946"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>divide<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2947" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab58e63fb78244e2c05515bb476ff18d7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab58e63fb78244e2c05515bb476ff18d7" kindref="member" tooltip="Packed DP-FP divide (SSE2).">divpd</ref>,<sp/>kInstDivpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2948"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2949" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0e6304fa57d5d46845c98aadc148b42e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(divpd,<sp/>kInstDivpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2951"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>DP-FP<sp/>divide<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2952" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a54907e1320b6ff940eda795bbcd74c45" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a54907e1320b6ff940eda795bbcd74c45" kindref="member" tooltip="Scalar DP-FP divide (SSE2).">divsd</ref>,<sp/>kInstDivsd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2953"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2954" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a097727fbd43217057f84c7046d85efe3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(divsd,<sp/>kInstDivsd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2956"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>fence<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2957" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a226eaf3b21ccf9340e13d6c61b03905a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a226eaf3b21ccf9340e13d6c61b03905a" kindref="member" tooltip="Load fence (SSE2).">lfence</ref>,<sp/>kInstLfence)</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2959"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>selected<sp/>bytes<sp/>of<sp/>oword<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2960"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="2961"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Target<sp/>is<sp/>DS:EDI.</highlight></codeline>
<codeline lineno="2962" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ee19007eaa233117507a24534743dcb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ee19007eaa233117507a24534743dcb" kindref="member" tooltip="Store selected bytes of oword (SSE2).">maskmovdqu</ref>,<sp/>kInstMaskmovdqu,<sp/>XmmVar,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2964"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return<sp/>maximum<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2965" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0beb29e9fbfd0d45bef92c9f69228ee8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0beb29e9fbfd0d45bef92c9f69228ee8" kindref="member" tooltip="Return maximum packed DP-FP values (SSE2).">maxpd</ref>,<sp/>kInstMaxpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2966"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2967" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e42b098bb087438e70f8d89a2d427c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(maxpd,<sp/>kInstMaxpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2969"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return<sp/>maximum<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2970" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8df8c8482b85f92c063903e3594c730e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8df8c8482b85f92c063903e3594c730e" kindref="member" tooltip="Return maximum scalar DP-FP value (SSE2).">maxsd</ref>,<sp/>kInstMaxsd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2971"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2972" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6f9e6804f08cbfdbd4709e8fa0e602d1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(maxsd,<sp/>kInstMaxsd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2974"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>fence<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2975" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad486e012879de99fc7c84868f7a86199" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad486e012879de99fc7c84868f7a86199" kindref="member" tooltip="Memory fence (SSE2).">mfence</ref>,<sp/>kInstMfence)</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2977"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return<sp/>minimum<sp/>packed<sp/>DP-FP<sp/>Values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2978" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a755b0a4280fd25357b0537cb035e40ff" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a755b0a4280fd25357b0537cb035e40ff" kindref="member" tooltip="Return minimum packed DP-FP Values (SSE2).">minpd</ref>,<sp/>kInstMinpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2979"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2980" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa75fae8fc93d39d81c87482ac8f83d73" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(minpd,<sp/>kInstMinpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2982"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return<sp/>minimum<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2983" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41dbe6942d6027a9b787e3aaa8fd93cb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41dbe6942d6027a9b787e3aaa8fd93cb" kindref="member" tooltip="Return minimum scalar DP-FP value (SSE2).">minsd</ref>,<sp/>kInstMinsd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2984"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2985" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a684580dd4e8a064d7ef5aa240b6dde36" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(minsd,<sp/>kInstMinsd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2987"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>aligned<sp/>oword<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2988" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9de8bc70ab57f2387ca1528e5c202e2d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9de8bc70ab57f2387ca1528e5c202e2d" kindref="member" tooltip="Move aligned oword (SSE2).">movdqa</ref>,<sp/>kInstMovdqa,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2989"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2990" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af576eb69c02417e9b9fbbe2b53bd30b9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movdqa,<sp/>kInstMovdqa,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2991"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2992" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57fd5fccf4f3192a3f3f1b02be5e3dc4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movdqa,<sp/>kInstMovdqa,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2994"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>unaligned<sp/>oword<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2995" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95bb3f9b0804d2929e05e1db20428bca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95bb3f9b0804d2929e05e1db20428bca" kindref="member" tooltip="Move unaligned oword (SSE2).">movdqu</ref>,<sp/>kInstMovdqu,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2996"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2997" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b00a75772f90ad513bc42546e4db916" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movdqu,<sp/>kInstMovdqu,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2998"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2999" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac51985511a2d932c9c0a597790b3f034" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movdqu,<sp/>kInstMovdqu,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3001"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>packed<sp/>SP-FP<sp/>sign<sp/>mask<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3002" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbd1c70b1a16e4ce065ab05b3c0cf448" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbd1c70b1a16e4ce065ab05b3c0cf448" kindref="member" tooltip="Extract packed SP-FP sign mask (SSE2).">movmskps</ref>,<sp/>kInstMovmskps,<sp/>GpVar,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3004"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>packed<sp/>DP-FP<sp/>sign<sp/>mask<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3005" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3a5ce3724031be149cf52d398d0a493" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3a5ce3724031be149cf52d398d0a493" kindref="member" tooltip="Extract packed DP-FP sign mask (SSE2).">movmskpd</ref>,<sp/>kInstMovmskpd,<sp/>GpVar,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3007"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3008" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2276367eb8c7495102de3a889a4c3431" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2276367eb8c7495102de3a889a4c3431" kindref="member" tooltip="Move scalar DP-FP value (SSE2).">movsd</ref>,<sp/>kInstMovsd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3009"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3010" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acd1959207b4f2222af5928f112fd151b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movsd,<sp/>kInstMovsd,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3011"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3012" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a095708809b78b9f3d7b95fe403cd4d09" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movsd,<sp/>kInstMovsd,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3014"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>aligned<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3015" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8291d5e858f3395a9df8fd9966d2f1c7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8291d5e858f3395a9df8fd9966d2f1c7" kindref="member" tooltip="Move aligned packed DP-FP values (SSE2).">movapd</ref>,<sp/>kInstMovapd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3016"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3017" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a60b69318598e315545a99d56f23a96f3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movapd,<sp/>kInstMovapd,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3018"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3019" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6ed76da8a6ddb2052c2cd8ba61d437eb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movapd,<sp/>kInstMovapd,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3021"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>qword<sp/>from<sp/>Xmm<sp/>to<sp/>Mm<sp/>register<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3022" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a03a45ece0f311de5b7cc834804822461" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a03a45ece0f311de5b7cc834804822461" kindref="member" tooltip="Move qword from Xmm to Mm register (SSE2).">movdq2q</ref>,<sp/>kInstMovdq2q,<sp/>MmVar,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3024"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>qword<sp/>from<sp/>Mm<sp/>to<sp/>Xmm<sp/>register<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3025" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a23e7450f5ef9c7b9199585831e2980e9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a23e7450f5ef9c7b9199585831e2980e9" kindref="member" tooltip="Move qword from Mm to Xmm register (SSE2).">movq2dq</ref>,<sp/>kInstMovq2dq,<sp/>XmmVar,<sp/>MmVar)</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3027"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>high<sp/>packed<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3028" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872667f5b79bb5130b600fcd3be07096" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872667f5b79bb5130b600fcd3be07096" kindref="member" tooltip="Move high packed DP-FP value (SSE2).">movhpd</ref>,<sp/>kInstMovhpd,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3029"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3030" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a63a0be291a2a0aabc6eb065be80c53ec" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movhpd,<sp/>kInstMovhpd,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3032"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>low<sp/>packed<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3033" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad4509ecae6b6a457c3ad1db95786d5f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad4509ecae6b6a457c3ad1db95786d5f" kindref="member" tooltip="Move low packed DP-FP value (SSE2).">movlpd</ref>,<sp/>kInstMovlpd,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3034"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3035" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9580ec5a76bb06e875e60d18f9910fb5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movlpd,<sp/>kInstMovlpd,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3037"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>oword<sp/>using<sp/>non-temporal<sp/>hint<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3038" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78ad704d7a38d8e9405428f4dfe63df7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78ad704d7a38d8e9405428f4dfe63df7" kindref="member" tooltip="Store oword using non-temporal hint (SSE2).">movntdq</ref>,<sp/>kInstMovntdq,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3040"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>dword<sp/>using<sp/>non-temporal<sp/>hint<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3041" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afee1c53925e55fafed0578fc4bb7e834" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afee1c53925e55fafed0578fc4bb7e834" kindref="member" tooltip="Store dword using non-temporal hint (SSE2).">movnti</ref>,<sp/>kInstMovnti,<sp/>Mem,<sp/>GpVar)</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3043"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>packed<sp/>DP-FP<sp/>values<sp/>using<sp/>non-temporal<sp/>hint<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3044" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd542f72e71c8a17edf7818970a67e5c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd542f72e71c8a17edf7818970a67e5c" kindref="member" tooltip="Store packed DP-FP values using non-temporal hint (SSE2).">movntpd</ref>,<sp/>kInstMovntpd,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3046"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>unaligned<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3047" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10e33f492b9edb8bf5e9ef3be9d20971" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10e33f492b9edb8bf5e9ef3be9d20971" kindref="member" tooltip="Move unaligned packed DP-FP values (SSE2).">movupd</ref>,<sp/>kInstMovupd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3048"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3049" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3131c7c6d85edb8680815836740a1dbb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movupd,<sp/>kInstMovupd,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3050"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3051" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abf4f581d3e9a4fb3fdff98d484ea2fcd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movupd,<sp/>kInstMovupd,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3053"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>multiply<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3054" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a80f116dbba09e6de96bb1d0ac06eccc0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a80f116dbba09e6de96bb1d0ac06eccc0" kindref="member" tooltip="Packed DP-FP multiply (SSE2).">mulpd</ref>,<sp/>kInstMulpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3055"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3056" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d6cf7bf2aa5a9916e4d3b5d16217f0b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mulpd,<sp/>kInstMulpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3058"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>DP-FP<sp/>multiply<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3059" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad76b17624ec02f8c4d30a1b1c3ff83cd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad76b17624ec02f8c4d30a1b1c3ff83cd" kindref="member" tooltip="Scalar DP-FP multiply (SSE2).">mulsd</ref>,<sp/>kInstMulsd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3060"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3061" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a05f4f867dc76c239092719950cd0d4a7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mulsd,<sp/>kInstMulsd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3063"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Or<sp/>for<sp/>DP-FP<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3064" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab46fa215a727039025e67e8578c1c12c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab46fa215a727039025e67e8578c1c12c" kindref="member" tooltip="Or for DP-FP data (SSE2).">orpd</ref>,<sp/>kInstOrpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3065"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3066" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3c06f674813de696548fe5ebe34423ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(orpd,<sp/>kInstOrpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3068"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>signed<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3069" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b2a6485608fa2761b51f854db70d77c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packsswb,<sp/>kInstPacksswb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3070"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3071" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af9994752da38ff1da2ae23867323141c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packsswb,<sp/>kInstPacksswb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3073"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>signed<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3074" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a192c3feda976ab72c8d4a25d5877be26" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packssdw,<sp/>kInstPackssdw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3075"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3076" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad06db1cae84aad9cb8c6f5c5aadd134b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packssdw,<sp/>kInstPackssdw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3078"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>unsigned<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3079" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d8dc7a9712b031668e9b2b22cd4332c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packuswb,<sp/>kInstPackuswb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3080"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3081" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab5a67020fd092f35e0f22150cc5f7c82" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packuswb,<sp/>kInstPackuswb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3083"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>byte<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3084" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa998103f1b35abdb149b43bc79c0b675" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddb,<sp/>kInstPaddb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3085"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3086" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afcb84e9b9b7ca2cb0d3aea97d896e17e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddb,<sp/>kInstPaddb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3088"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>word<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3089" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07356f5171ad009d0f32c481e1697520" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddw,<sp/>kInstPaddw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3090"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3091" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af8d57c7c941767b78cfc3c5671397da8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddw,<sp/>kInstPaddw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3093"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>dword<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3094" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a850c812efa58d4a6c115c88d651babd4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddd,<sp/>kInstPaddd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3095"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3096" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaee88720feb3dcd9dbb402ea401cfe46" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddd,<sp/>kInstPaddd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3098"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>qword<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3099" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa8932f7b42f4bd96195f89d97059fea7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa8932f7b42f4bd96195f89d97059fea7" kindref="member" tooltip="Packed qword add (SSE2).">paddq</ref>,<sp/>kInstPaddq,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3100"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3101" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afc21acec62b986d5ef117e9e461117a8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddq,<sp/>kInstPaddq,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3103"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>qword<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3104" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a26b05a3a7d8daf864c3465d550b86692" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddq,<sp/>kInstPaddq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3105"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3106" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a4308783997b673606e81ee30ed65d5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddq,<sp/>kInstPaddq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3108"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3109" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d8d240ae1fd2c8ee3879d191ad9c262" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsb,<sp/>kInstPaddsb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3110"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3111" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac20f67e26ab125a8d6a8292786a6caeb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsb,<sp/>kInstPaddsb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3113"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3114" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a987d76a698cd1e6bdebf85c946e2b0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsw,<sp/>kInstPaddsw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3115"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3116" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a124056a2105f1852f6baaf8082fe6114" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsw,<sp/>kInstPaddsw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3118"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>unsigned<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3119" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1455bd24b3758567ec7b14a18577fba2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusb,<sp/>kInstPaddusb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3120"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3121" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a478c58425e5ff800b11b72c091538d36" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusb,<sp/>kInstPaddusb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3123"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>unsigned<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3124" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afde1f3adf3fb0f567b0268ad7d113188" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusw,<sp/>kInstPaddusw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3125"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3126" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aab1d6f9bb70ff1d2dd2737146f4a27b5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusw,<sp/>kInstPaddusw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3128"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3129" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8fb3b791650941c9fd214f00f1544975" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pand,<sp/>kInstPand,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3130"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3131" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa0e87e29a731c957bd38d5495014c000" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pand,<sp/>kInstPand,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3133"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And-not<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3134" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b9d26b60aa197f39e38491d764b2a90" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pandn,<sp/>kInstPandn,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3135"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3136" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a813e1472f0b7b057e33c789cfc3fe40a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pandn,<sp/>kInstPandn,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3138"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Spin<sp/>loop<sp/>hint<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3139" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7e978aa22481a4b94e55cc426a4eb41" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7e978aa22481a4b94e55cc426a4eb41" kindref="member" tooltip="Spin loop hint (SSE2).">pause</ref>,<sp/>kInstPause)</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3141"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>average<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3142" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af800899e5efb8a15d64602c08e5994e8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgb,<sp/>kInstPavgb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3143"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3144" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab0fa374e3188fe7ef86ccde1de7b06e1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgb,<sp/>kInstPavgb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3146"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>average<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3147" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f91ab72aba3f8a1839f62364dd7c9c3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgw,<sp/>kInstPavgw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3148"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3149" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaca852d618ea8599fbc2511b2d393569" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgw,<sp/>kInstPavgw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3151"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>bytes<sp/>for<sp/>equal<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3152" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2908aa3a4f86a060b8dbe63fc9554fa7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqb,<sp/>kInstPcmpeqb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3153"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3154" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a27f21cab457477fe8638ac7a4b3c3f9f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqb,<sp/>kInstPcmpeqb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3156"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>words<sp/>for<sp/>equal<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3157" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b926c5e2c8dfa06f55e52fb6fcac8eb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqw,<sp/>kInstPcmpeqw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3158"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3159" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeb9af5acfbf6887754255b703a9cae7a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqw,<sp/>kInstPcmpeqw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3161"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>dwords<sp/>for<sp/>equal<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3162" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1bd1c40a568a3223137331b186eff32e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqd,<sp/>kInstPcmpeqd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3163"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3164" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6207e1097eb762d37197b927372ff979" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqd,<sp/>kInstPcmpeqd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3166"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>bytes<sp/>for<sp/>greater<sp/>than<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3167" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abdddb1b371306c496bab741bcef11aed" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtb,<sp/>kInstPcmpgtb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3168"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3169" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adc8d34367462938af55a947b9c057bff" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtb,<sp/>kInstPcmpgtb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3171"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>words<sp/>for<sp/>greater<sp/>than<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3172" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a53079ab2f1d0b60153d3c1417d3a3796" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtw,<sp/>kInstPcmpgtw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3173"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3174" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78eaa406fd9d22abc9e808bdc3d1c759" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtw,<sp/>kInstPcmpgtw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3176"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>dwords<sp/>for<sp/>greater<sp/>than<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3177" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a0341f35ba8c3112537d7b311d0ab68" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtd,<sp/>kInstPcmpgtd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3178"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3179" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a91cc0c65ef57f0e15772e7da55772cf9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtd,<sp/>kInstPcmpgtd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3180"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3181"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>word<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3182" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a00d998f39c05e5d4e981d7276ee14e9e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pextrw,<sp/>kInstPextrw,<sp/>GpVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3184"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Insert<sp/>word<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3185" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaba0aea9069dabb42bc3f11d6b7a3868" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrw,<sp/>kInstPinsrw,<sp/>XmmVar,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3186"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3187" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a823a97270349b1362c9956edd6bd4b05" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrw,<sp/>kInstPinsrw,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3189"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>signed<sp/>integer<sp/>word<sp/>maximum<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3190" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac36bba7bb44deb9b50c73a1cbe376522" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxsw,<sp/>kInstPmaxsw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3191"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3192" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30e490ba7932bd8b1f35f9878aec0df5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxsw,<sp/>kInstPmaxsw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3194"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>unsigned<sp/>integer<sp/>byte<sp/>maximum<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3195" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab30c5c4012638ed37ebf145cd70f10b4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxub,<sp/>kInstPmaxub,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3196"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3197" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af66a9eeeb8054d2ecf7de89c9ab7de58" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxub,<sp/>kInstPmaxub,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3199"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>signed<sp/>integer<sp/>word<sp/>minimum<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3200" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6d924c37268f2f1660c9e68b451f3743" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminsw,<sp/>kInstPminsw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3201"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3202" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d92e81a51e1cd4a64692f93598e8d37" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminsw,<sp/>kInstPminsw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3204"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>unsigned<sp/>integer<sp/>byte<sp/>minimum<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3205" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4aca95a7719b8447f22966f355c2ea51" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminub,<sp/>kInstPminub,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3206"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3207" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3469486084b213fb9b08b901896553ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminub,<sp/>kInstPminub,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3209"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>byte<sp/>mask<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3210" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1eaaab2b1e7a80a1225cbd64df36c059" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovmskb,<sp/>kInstPmovmskb,<sp/>GpVar,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3212"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3213" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41c9ceb3056688ecb9e0abf711d5ce5e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhw,<sp/>kInstPmulhw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3214"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3215" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b8219c0c763c2503f88061b4a3d684c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhw,<sp/>kInstPmulhw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3217"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>Unsigned<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3218" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f9eb59359a568c5898f07d744e38369" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhuw,<sp/>kInstPmulhuw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3219"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3220" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a624d0494fa2db9e376b4d6bac888e7ff" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhuw,<sp/>kInstPmulhuw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3222"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>low<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3223" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3ab8d65d0400a6f50816983eb352e87" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmullw,<sp/>kInstPmullw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3224"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3225" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9e292a606faecdd0f75908e9f3883b84" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmullw,<sp/>kInstPmullw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3227"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>to<sp/>QWORD<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3228" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82afe0b6f0cd014baa318cf100f4cb5d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82afe0b6f0cd014baa318cf100f4cb5d" kindref="member" tooltip="Packed multiply to QWORD (SSE2).">pmuludq</ref>,<sp/>kInstPmuludq,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3229"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3230" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57687ddaa6dd32af0052d68d60549a1d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmuludq,<sp/>kInstPmuludq,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3232"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>to<sp/>QWORD<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3233" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a811e0b5d0c6d10802fd0f5c037dc2cf7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmuludq,<sp/>kInstPmuludq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3234"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3235" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a03a67b7b7ffe99d33da3c74829504b6b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmuludq,<sp/>kInstPmuludq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3237"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Or<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3238" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9c2b97a8699560440ca64f865d8dae9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(por,<sp/>kInstPor,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3239"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3240" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f41588cddf9f270d7026c0e191d63aa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(por,<sp/>kInstPor,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3242"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3243" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b659c81a6cc813dc39c2cf547043929" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pslld,<sp/>kInstPslld,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3244"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3245" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0c4f39ca31bb5587146630b2f33a19f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pslld,<sp/>kInstPslld,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3246"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3247" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a399882ec1d945beaa40a0e2e512d4d24" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(pslld,<sp/>kInstPslld,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3249"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3250" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4ec43ee93b58d905b6b80ff6af018c3e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllq,<sp/>kInstPsllq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3251"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3252" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a85d16e39c25b5bfee4f4d560b48e6fde" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllq,<sp/>kInstPsllq,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3253"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3254" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96bcfeb3fc20407f7d5d379a211425c7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psllq,<sp/>kInstPsllq,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3256"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3257" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5121769d0da3d26d99870b6bdf889638" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllw,<sp/>kInstPsllw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3258"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3259" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a39cefba51eaf7ed745c636649f627bb0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllw,<sp/>kInstPsllw,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3260"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3261" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a88314968afef79d8ec2f825270a1c059" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psllw,<sp/>kInstPsllw,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3263"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3264" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abff003feadda880d6121dc3a34be98f2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abff003feadda880d6121dc3a34be98f2" kindref="member" tooltip="Packed shift left logical (SSE2).">pslldq</ref>,<sp/>kInstPslldq,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3266"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>arithmetic<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3267" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3b977b24a759c5727dd370051c1de710" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrad,<sp/>kInstPsrad,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3268"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3269" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a380bafd61ae577e800a705f8fff80749" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrad,<sp/>kInstPsrad,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3270"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3271" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b50e4c531ea7c2dbb7332158659c007" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrad,<sp/>kInstPsrad,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3273"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>arithmetic<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3274" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad6c139fc500364825976c2007b54623c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psraw,<sp/>kInstPsraw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3275"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3276" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf7633f9bf5d0b7a92e0f68c0d4011f6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psraw,<sp/>kInstPsraw,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3277"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3278" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae3ba4d1d1307e2897bf661a4bb2fdfe8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psraw,<sp/>kInstPsraw,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3280"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3281" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7903df69e45d5b211988509b46382832" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubb,<sp/>kInstPsubb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3282"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3283" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7fefeba370b4517c49ef2df6c6b8713" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubb,<sp/>kInstPsubb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3285"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3286" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec2f517ea23aff784404053dd66706bf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubw,<sp/>kInstPsubw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3287"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3288" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9b36f9d8c36dcef067ab17a716687ad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubw,<sp/>kInstPsubw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3290"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3291" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac21ec2acf7c2456907cbc2814152dd33" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubd,<sp/>kInstPsubd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3292"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3293" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad93bd4211ae540d7a47e58a067e7383c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubd,<sp/>kInstPsubd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3295"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3296" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe806ad48033f0c35fd7d96c61dfae1f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe806ad48033f0c35fd7d96c61dfae1f" kindref="member" tooltip="Packed subtract (SSE2).">psubq</ref>,<sp/>kInstPsubq,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3297"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3298" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af972fca8c6ae533e0242d3c415eebfc0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubq,<sp/>kInstPsubq,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3300"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3301" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f93930ae658bebf5e7cb05e2145729a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubq,<sp/>kInstPsubq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3302"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3303" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6d6b497c86305996461736e53af76080" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubq,<sp/>kInstPsubq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3305"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>and<sp/>Add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3306" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a672a0cdbe29c54ec79e07bc4d450fc40" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddwd,<sp/>kInstPmaddwd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3307"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3308" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a04a53e008a10e022858f75dc196f2231" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddwd,<sp/>kInstPmaddwd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3309"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3310"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shuffle<sp/>packed<sp/>dwords<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3311" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa538f45f981234f6b885f2c44766c183" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa538f45f981234f6b885f2c44766c183" kindref="member" tooltip="Shuffle packed dwords (SSE2).">pshufd</ref>,<sp/>kInstPshufd,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3312"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3313" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af6bf94bea2b6d36eaac390f0d5425cd5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pshufd,<sp/>kInstPshufd,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3315"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shuffle<sp/>packed<sp/>high<sp/>words<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3316" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a605eacfb7d5c64c495b8695195428a00" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a605eacfb7d5c64c495b8695195428a00" kindref="member" tooltip="Shuffle packed high words (SSE2).">pshufhw</ref>,<sp/>kInstPshufhw,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3317"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3318" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a65e42900e882bd64fef0d26aeea2b919" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pshufhw,<sp/>kInstPshufhw,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3320"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shuffle<sp/>packed<sp/>low<sp/>words<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3321" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa0a5785cb30354745f931b97c19a35a3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa0a5785cb30354745f931b97c19a35a3" kindref="member" tooltip="Shuffle packed low words (SSE2).">pshuflw</ref>,<sp/>kInstPshuflw,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3322"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3323" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae9c3ebe0dec1287017b210f8a22a38e5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pshuflw,<sp/>kInstPshuflw,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3325"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3326" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adebfe6062db925170b7a6a09ddc7f9d9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrld,<sp/>kInstPsrld,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3327"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3328" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0140e2cb501e904a97b273477922768d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrld,<sp/>kInstPsrld,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3329"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3330" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a709d77fa11b070ef978fe5b249dab48e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrld,<sp/>kInstPsrld,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3332"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3333" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8cd0031d0cc2a79b7662c686a5d8b295" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlq,<sp/>kInstPsrlq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3334"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3335" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6d292a6be0f3846dbc8f18ec6a6d5fcb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlq,<sp/>kInstPsrlq,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3336"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3337" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73db1e8873f4045a4137d4fb20d73d2c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrlq,<sp/>kInstPsrlq,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3339"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Oword<sp/>shift<sp/>right<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3340" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ec2275bc3af5431f3acd0bd8cedd92e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ec2275bc3af5431f3acd0bd8cedd92e" kindref="member" tooltip="Oword shift right logical (SSE2).">psrldq</ref>,<sp/>kInstPsrldq,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3342"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3343" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae0bbbd93c6af33ba6434c43c1a5951a6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlw,<sp/>kInstPsrlw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3344"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3345" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a889da08fec1e4c6951bb0435956d5001" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlw,<sp/>kInstPsrlw,<sp/>XmmVar,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3346"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3347" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6aed53cb2ae18fbc3aa40253b0be7c03" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrlw,<sp/>kInstPsrlw,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3349"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3350" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade11414de46653767d88f217d2c94cbc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsb,<sp/>kInstPsubsb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3351"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3352" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade520c48c0a3dd58dc95e453ec4b421a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsb,<sp/>kInstPsubsb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3354"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3355" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae03dddecb8da09d740ae5fe1b91c5b07" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsw,<sp/>kInstPsubsw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3356"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3357" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee2aaf88386848e26b48566f16554153" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsw,<sp/>kInstPsubsw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3359"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>unsigned<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3360" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af39f51ba392767f20b3ebf5c1b94e67d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusb,<sp/>kInstPsubusb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3361"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3362" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc087f34e07058f2afdc8c346971ef43" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusb,<sp/>kInstPsubusb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3364"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>unsigned<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3365" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b9a29055d8c1c758207849dae286e01" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusw,<sp/>kInstPsubusw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3366"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3367" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9eb382adaacfc58a889e7c83cfdf1fe8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusw,<sp/>kInstPsubusw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3368"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3369"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3370" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2dad9e369b62515f1abe39e4246d615d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhbw,<sp/>kInstPunpckhbw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3371"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3372" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af4e1d066690ef481bebe0e9979dbc462" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhbw,<sp/>kInstPunpckhbw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3374"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3375" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a93d5a36236672c13e8abd6631109b794" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhwd,<sp/>kInstPunpckhwd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3376"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3377" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a856633d5dbbe6e7d889ef40a062d7fdb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhwd,<sp/>kInstPunpckhwd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3379"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3380" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e841d8108c9d491647f0d923f645fe7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhdq,<sp/>kInstPunpckhdq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3381"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3382" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a08a90a3a3169593eb0f427def134be3e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhdq,<sp/>kInstPunpckhdq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3384"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3385" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab4d5d5fe0a46aef9d0c406de165cbea7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab4d5d5fe0a46aef9d0c406de165cbea7" kindref="member" tooltip="Unpack high data (SSE2).">punpckhqdq</ref>,<sp/>kInstPunpckhqdq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3386"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3387" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a569d93dd9d18e08eb68f4d459d6e3b33" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhqdq,<sp/>kInstPunpckhqdq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3389"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>low<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3390" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade88b981a8358728a5dc1c34739be7cc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklbw,<sp/>kInstPunpcklbw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3391"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3392" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2d94eefd06a8c1225f97ef165cc42e2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklbw,<sp/>kInstPunpcklbw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3394"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>low<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3395" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae23513151b115100f3e0e527fc01d41b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklwd,<sp/>kInstPunpcklwd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3396"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3397" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adbabdc9b4ae89fd78b9ee28c27701dcf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklwd,<sp/>kInstPunpcklwd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3399"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>low<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3400" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a539016ca7705022105bf6d096f061fc1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckldq,<sp/>kInstPunpckldq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3401"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3402" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad0e39280395ad193388af0c3fde9a02" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckldq,<sp/>kInstPunpckldq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3404"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>low<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3405" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78a6be35927a6231e229a2ae60abd25a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78a6be35927a6231e229a2ae60abd25a" kindref="member" tooltip="Unpack low data (SSE2).">punpcklqdq</ref>,<sp/>kInstPunpcklqdq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3406"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3407" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aea0dbe6e0943f81525056f828c729b0e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklqdq,<sp/>kInstPunpcklqdq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3409"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xor<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3410" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae8a3a30b5e982f19f8d6cfea605d49a4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pxor,<sp/>kInstPxor,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3411"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3412" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4ba565fad8b5f0615f975fd5e936349e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pxor,<sp/>kInstPxor,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3414"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shuffle<sp/>DP-FP<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3415" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a77ddd2a6fe77507f596e604944d5199b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a77ddd2a6fe77507f596e604944d5199b" kindref="member" tooltip="Shuffle DP-FP (SSE2).">shufpd</ref>,<sp/>kInstShufpd,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3416"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3417" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a92fc8a986a0c452e9e246e5d704eab9d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shufpd,<sp/>kInstShufpd,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3419"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compute<sp/>square<sp/>roots<sp/>of<sp/>packed<sp/>DP-FP<sp/>Values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3420" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae128fa9d55ed83818201eede9aad2981" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae128fa9d55ed83818201eede9aad2981" kindref="member" tooltip="Compute square roots of packed DP-FP Values (SSE2).">sqrtpd</ref>,<sp/>kInstSqrtpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3421"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3422" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e65f28bfb97c52042fe339551b0f617" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sqrtpd,<sp/>kInstSqrtpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3424"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compute<sp/>square<sp/>root<sp/>of<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3425" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a13307df348f7327bdc573f13f71cc1d7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a13307df348f7327bdc573f13f71cc1d7" kindref="member" tooltip="Compute square root of scalar DP-FP value (SSE2).">sqrtsd</ref>,<sp/>kInstSqrtsd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3426"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3427" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acea5450b0d92222d2de3e2f159925594" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sqrtsd,<sp/>kInstSqrtsd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3429"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3430" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f7183ac22890fb305344b8d2faf142f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f7183ac22890fb305344b8d2faf142f" kindref="member" tooltip="Packed DP-FP subtract (SSE2).">subpd</ref>,<sp/>kInstSubpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3431"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3432" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab54bd6b0f6787b089ae5dc30c68043ee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(subpd,<sp/>kInstSubpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3434"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>DP-FP<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3435" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a336b6ba66a81446c4269a6184ff89e3f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a336b6ba66a81446c4269a6184ff89e3f" kindref="member" tooltip="Scalar DP-FP subtract (SSE2).">subsd</ref>,<sp/>kInstSubsd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3436"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3437" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1585c2df9420e439b827c8b131db1329" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(subsd,<sp/>kInstSubsd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3439"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>unordered<sp/>DP-FP<sp/>compare<sp/>and<sp/>set<sp/>EFLAGS<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3440" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a24df0e3292803f105a10f05ed09a071b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a24df0e3292803f105a10f05ed09a071b" kindref="member" tooltip="Scalar unordered DP-FP compare and set EFLAGS (SSE2).">ucomisd</ref>,<sp/>kInstUcomisd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3441"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3442" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abc889767f90ab098b0417833007ce51b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(ucomisd,<sp/>kInstUcomisd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3444"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>and<sp/>interleave<sp/>high<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3445" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a32783d720c7f68453ba447c39bca6aaa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a32783d720c7f68453ba447c39bca6aaa" kindref="member" tooltip="Unpack and interleave high packed DP-FP values (SSE2).">unpckhpd</ref>,<sp/>kInstUnpckhpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3446"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3447" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abaf2c69e2e7a2e3fd84bb1a9e6aba0e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(unpckhpd,<sp/>kInstUnpckhpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3449"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>and<sp/>interleave<sp/>low<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3450" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae5a5e5d1aea8d64e21c5acd8f6863865" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae5a5e5d1aea8d64e21c5acd8f6863865" kindref="member" tooltip="Unpack and interleave low packed DP-FP values (SSE2).">unpcklpd</ref>,<sp/>kInstUnpcklpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3451"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3452" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae45dc0bfdae9360263bb38f559ee3490" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(unpcklpd,<sp/>kInstUnpcklpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3454"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Or<sp/>for<sp/>DP-FP<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="3455" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adbbf2d39655fdae2404029872d2caabc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adbbf2d39655fdae2404029872d2caabc" kindref="member" tooltip="Or for DP-FP data (SSE2).">xorpd</ref>,<sp/>kInstXorpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3456"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3457" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a9c954f85f1b0bec7308582c89cfed5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xorpd,<sp/>kInstXorpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"></highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SSE3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3463"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>add/subtract<sp/>(SSE3).</highlight></codeline>
<codeline lineno="3464" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f635858f805d754465d37e778a1e8cb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f635858f805d754465d37e778a1e8cb" kindref="member" tooltip="Packed DP-FP add/subtract (SSE3).">addsubpd</ref>,<sp/>kInstAddsubpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3465"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3466" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36b01e4cd81127b3078f8c5600fdcf25" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addsubpd,<sp/>kInstAddsubpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3468"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>add/subtract<sp/>(SSE3).</highlight></codeline>
<codeline lineno="3469" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade964d2387cd311cd45684468a80041a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade964d2387cd311cd45684468a80041a" kindref="member" tooltip="Packed SP-FP add/subtract (SSE3).">addsubps</ref>,<sp/>kInstAddsubps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3470"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3471" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac331393450d4930b78c07a948803955c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addsubps,<sp/>kInstAddsubps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"></highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//!<sp/>@brief<sp/>Store<sp/>integer<sp/>with<sp/>truncation<sp/>(SSE3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>INST_1x(fisttp,<sp/>kInstFisttp,<sp/>Mem)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3476"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>horizontal<sp/>add<sp/>(SSE3).</highlight></codeline>
<codeline lineno="3477" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0107e8a0d40a189a824308317dc388f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0107e8a0d40a189a824308317dc388f" kindref="member" tooltip="Packed DP-FP horizontal add (SSE3).">haddpd</ref>,<sp/>kInstHaddpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3478"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3479" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad4782b0a4f138c62f05a60bf783ae62" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(haddpd,<sp/>kInstHaddpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3481"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>horizontal<sp/>add<sp/>(SSE3).</highlight></codeline>
<codeline lineno="3482" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a238fa4b58a0f24834cd3cca9dc5a35a6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a238fa4b58a0f24834cd3cca9dc5a35a6" kindref="member" tooltip="Packed SP-FP horizontal add (SSE3).">haddps</ref>,<sp/>kInstHaddps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3483"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3484" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73932cdf49f5a333ddff598fc727f014" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(haddps,<sp/>kInstHaddps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3486"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>horizontal<sp/>subtract<sp/>(SSE3).</highlight></codeline>
<codeline lineno="3487" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b4f635b03dbdf7ef00db798f36a879b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b4f635b03dbdf7ef00db798f36a879b" kindref="member" tooltip="Packed DP-FP horizontal subtract (SSE3).">hsubpd</ref>,<sp/>kInstHsubpd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3488"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3489" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57c5a8c09b768baf8f69c25c53b95e18" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(hsubpd,<sp/>kInstHsubpd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3491"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>horizontal<sp/>subtract<sp/>(SSE3).</highlight></codeline>
<codeline lineno="3492" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9fb59a2617d897b4694b4444e19b59c3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9fb59a2617d897b4694b4444e19b59c3" kindref="member" tooltip="Packed SP-FP horizontal subtract (SSE3).">hsubps</ref>,<sp/>kInstHsubps,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3493"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3494" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0cb75f7eb9002475f4382cafcd7ce514" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(hsubps,<sp/>kInstHsubps,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3496"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>unaligned<sp/>Integer<sp/>128<sp/>Bits<sp/>(SSE3).</highlight></codeline>
<codeline lineno="3497" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fefdb388bfc4c98a1b7c7377c023e5d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fefdb388bfc4c98a1b7c7377c023e5d" kindref="member" tooltip="Load unaligned Integer 128 Bits (SSE3).">lddqu</ref>,<sp/>kInstLddqu,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"></highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//!<sp/>@brief<sp/>Setup<sp/>monitor<sp/>address<sp/>(SSE3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>INST_0x(monitor,<sp/>kInstMonitor)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3502"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>one<sp/>DP-FP<sp/>and<sp/>duplicate<sp/>(SSE3).</highlight></codeline>
<codeline lineno="3503" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a301bdc0ed6c2b2a89be2e87db19055d5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a301bdc0ed6c2b2a89be2e87db19055d5" kindref="member" tooltip="Move one DP-FP and duplicate (SSE3).">movddup</ref>,<sp/>kInstMovddup,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3504"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3505" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a671c1253d50bd0f723cfa10e0b79e04f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movddup,<sp/>kInstMovddup,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3507"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>packed<sp/>SP-FP<sp/>high<sp/>and<sp/>duplicate<sp/>(SSE3).</highlight></codeline>
<codeline lineno="3508" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5df362143c05b815b98d089d90d0bed6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5df362143c05b815b98d089d90d0bed6" kindref="member" tooltip="Move packed SP-FP high and duplicate (SSE3).">movshdup</ref>,<sp/>kInstMovshdup,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3509"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3510" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee38b085944f30c0916b266ccd55aa13" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movshdup,<sp/>kInstMovshdup,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3512"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>packed<sp/>SP-FP<sp/>low<sp/>and<sp/>duplicate<sp/>(SSE3).</highlight></codeline>
<codeline lineno="3513" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6b9cf87e3d7f89517f0ecab7b7ecc313" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6b9cf87e3d7f89517f0ecab7b7ecc313" kindref="member" tooltip="Move packed SP-FP low and duplicate (SSE3).">movsldup</ref>,<sp/>kInstMovsldup,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3514"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3515" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbc2de939efcd8ffd8f898d75b069b15" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movsldup,<sp/>kInstMovsldup,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>//!<sp/>@brief<sp/>Monitor<sp/>wait<sp/>(SSE3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>INST_0x(mwait,<sp/>kInstMwait)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"></highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SSSE3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3524"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3525" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a543dbb502031ccfefee72a8624a74b00" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a543dbb502031ccfefee72a8624a74b00" kindref="member" tooltip="Packed sign (SSSE3).">psignb</ref>,<sp/>kInstPsignb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3526"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3527" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aea0e12f40fef985dee95b284bfada73b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignb,<sp/>kInstPsignb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3529"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3530" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a781fb6bd528aea76140dc6327b0f4f4c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignb,<sp/>kInstPsignb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3531"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3532" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66762afea764f334ee98d533c1c19a62" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignb,<sp/>kInstPsignb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3534"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3535" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0eebaa7b636b99f63e0c860999cc083" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0eebaa7b636b99f63e0c860999cc083" kindref="member" tooltip="Packed sign (SSSE3).">psignw</ref>,<sp/>kInstPsignw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3536"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3537" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae83cec96d78a90e5ef89a159f5fa73aa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignw,<sp/>kInstPsignw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3539"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3540" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa514c43428a9e706f0f71ed92ce1abf6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignw,<sp/>kInstPsignw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3541"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3542" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae0beb3c3d10eec47d93d46b6c301e8e9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignw,<sp/>kInstPsignw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3544"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3545" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2d4a964759906046b12caf08bd1d252" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2d4a964759906046b12caf08bd1d252" kindref="member" tooltip="Packed sign (SSSE3).">psignd</ref>,<sp/>kInstPsignd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3546"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3547" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a65e14e06accdb35341675180637b2a96" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignd,<sp/>kInstPsignd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3549"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3550" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a723fe97ab5ad341f98e4b88263019e92" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignd,<sp/>kInstPsignd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3551"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3552" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aacfd2d2419aea77562ac1fc1985ecdb2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignd,<sp/>kInstPsignd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3554"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3555" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb5c597d6a794309e3ba3168673a2dc1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb5c597d6a794309e3ba3168673a2dc1" kindref="member" tooltip="Packed horizontal add (SSSE3).">phaddw</ref>,<sp/>kInstPhaddw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3556"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3557" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1acbf35e8d82ec3ff5678c5bc9187ef2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddw,<sp/>kInstPhaddw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3559"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3560" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a487dd46e394f5a5d3dc1c99df32ecc05" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddw,<sp/>kInstPhaddw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3561"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3562" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2c0abaf336426c12e5396f2daf9a3a96" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddw,<sp/>kInstPhaddw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3564"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3565" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4859edae455912b388e219958e1d99a8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4859edae455912b388e219958e1d99a8" kindref="member" tooltip="Packed horizontal add (SSSE3).">phaddd</ref>,<sp/>kInstPhaddd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3566"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3567" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2506f0550f90c4df91f23e21b762270d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddd,<sp/>kInstPhaddd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3569"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3570" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8a7826322a19abf67bd2434d94618a38" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddd,<sp/>kInstPhaddd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3571"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3572" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adfb9235a9c86491c12be95d6240db2c0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddd,<sp/>kInstPhaddd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3574"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>and<sp/>saturate<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3575" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a93cbc4de8f5c322326995962bec15df6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a93cbc4de8f5c322326995962bec15df6" kindref="member" tooltip="Packed horizontal add and saturate (SSSE3).">phaddsw</ref>,<sp/>kInstPhaddsw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3576"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3577" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa6e4db4492b2d51af1b0c664aafc5587" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddsw,<sp/>kInstPhaddsw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3579"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>and<sp/>saturate<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3580" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a239a3795ba53dde47d9831e53dc4fc20" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddsw,<sp/>kInstPhaddsw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3581"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3582" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ae108357eeafc535cce30c9cbdabcb9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddsw,<sp/>kInstPhaddsw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3584"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3585" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a236170eaf8b1b37c87a914b46093c14d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a236170eaf8b1b37c87a914b46093c14d" kindref="member" tooltip="Packed horizontal subtract (SSSE3).">phsubw</ref>,<sp/>kInstPhsubw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3586"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3587" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa96c4ad9172b352c3caf0c3c05dcb0be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubw,<sp/>kInstPhsubw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3589"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3590" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1a422e9979272ba479e20f0e9a579c1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubw,<sp/>kInstPhsubw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3591"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3592" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3145b6e322e29634c6f82fe94b2f3f1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubw,<sp/>kInstPhsubw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3594"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3595" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf526b8177758f640a676055bc03be55" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf526b8177758f640a676055bc03be55" kindref="member" tooltip="Packed horizontal subtract (SSSE3).">phsubd</ref>,<sp/>kInstPhsubd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3596"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3597" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a6a32c8a120d3e21a8d25498de7c532" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubd,<sp/>kInstPhsubd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3599"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3600" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8dc0323ae09577588debec62db2c7757" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubd,<sp/>kInstPhsubd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3601"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3602" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58ec2e0d4025659788917ba270af50e2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubd,<sp/>kInstPhsubd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3604"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>and<sp/>saturate<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3605" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3105d636489ee37e359d876786b34ea2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3105d636489ee37e359d876786b34ea2" kindref="member" tooltip="Packed horizontal subtract and saturate (SSSE3).">phsubsw</ref>,<sp/>kInstPhsubsw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3606"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3607" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82d55f7f6c2ceb850849154055f5b577" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubsw,<sp/>kInstPhsubsw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3609"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>and<sp/>saturate<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3610" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9a89732cbf917fa291322ac0e97683b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubsw,<sp/>kInstPhsubsw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3611"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3612" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76b1120079df2495187bf79b93b93836" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubsw,<sp/>kInstPhsubsw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3614"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>and<sp/>add<sp/>packed<sp/>signed<sp/>and<sp/>unsigned<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3615" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9e8de443f4187d245027db7144ff4a65" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9e8de443f4187d245027db7144ff4a65" kindref="member" tooltip="Multiply and add packed signed and unsigned bytes (SSSE3).">pmaddubsw</ref>,<sp/>kInstPmaddubsw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3616"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3617" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2fa17f572bbd2ea826b89f72959239a4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddubsw,<sp/>kInstPmaddubsw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3619"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>and<sp/>add<sp/>packed<sp/>signed<sp/>and<sp/>unsigned<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3620" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a59d1160663dd1e97f3286d811d27a8f9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddubsw,<sp/>kInstPmaddubsw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3621"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3622" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1d0f58a01f00b7c5c2da05f7b1183841" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddubsw,<sp/>kInstPmaddubsw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3624"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3625" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1514f9677fab11d16da654ee7d1d3346" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1514f9677fab11d16da654ee7d1d3346" kindref="member" tooltip="Packed absolute value (SSSE3).">pabsb</ref>,<sp/>kInstPabsb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3626"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3627" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a490158e08df05253e0f5210a240feb8e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsb,<sp/>kInstPabsb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3629"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3630" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aebe2259e59bb0efc2413bf48fe345a92" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsb,<sp/>kInstPabsb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3631"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3632" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6feeb3fd9abc8762bab46e13778293bb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsb,<sp/>kInstPabsb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3634"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3635" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a184158e02c49f238c4e4edb4aed2a8e5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a184158e02c49f238c4e4edb4aed2a8e5" kindref="member" tooltip="Packed absolute value (SSSE3).">pabsw</ref>,<sp/>kInstPabsw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3636"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3637" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aba883d9f1378ebf18da6bf27c43f76f1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsw,<sp/>kInstPabsw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3639"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3640" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a464c2331aef41f3965c082e9dc5ee99d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsw,<sp/>kInstPabsw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3641"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3642" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f4c6039c90dd50d29988902daff49de" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsw,<sp/>kInstPabsw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3644"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3645" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af9f9c430de2c82299f552238e093f771" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af9f9c430de2c82299f552238e093f771" kindref="member" tooltip="Packed absolute value (SSSE3).">pabsd</ref>,<sp/>kInstPabsd,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3646"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3647" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab469386d8f1bb909c332c481338b7b68" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsd,<sp/>kInstPabsd,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3649"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3650" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abcb9b42a0d0db8dfa26325569f806714" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsd,<sp/>kInstPabsd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3651"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3652" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad78e2fc2cd99aeef58191797318db674" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsd,<sp/>kInstPabsd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3654"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>with<sp/>round<sp/>and<sp/>scale<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3655" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad6ee51af75f6188140db45d313713236" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad6ee51af75f6188140db45d313713236" kindref="member" tooltip="Packed multiply high with round and scale (SSSE3).">pmulhrsw</ref>,<sp/>kInstPmulhrsw,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3656"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3657" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad05fc1e0553c74f0cb2478acb8e2c007" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhrsw,<sp/>kInstPmulhrsw,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3659"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>with<sp/>round<sp/>and<sp/>scale<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3660" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad0355ef40d3d7f4e309d7f4aa3aebc0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhrsw,<sp/>kInstPmulhrsw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3661"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3662" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1783b608f85f7606f155fc02496d52fc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhrsw,<sp/>kInstPmulhrsw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3664"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shuffle<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3665" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa28b1960fb27aabca1c8f70fc1bda1e3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa28b1960fb27aabca1c8f70fc1bda1e3" kindref="member" tooltip="Packed shuffle bytes (SSSE3).">pshufb</ref>,<sp/>kInstPshufb,<sp/>MmVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3666"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3667" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a90e415a1917e803dfcef7869120eb711" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pshufb,<sp/>kInstPshufb,<sp/>MmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3669"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shuffle<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3670" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2c14b3e6c5ee5fe7cf062c8e491e9f2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pshufb,<sp/>kInstPshufb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3671"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3672" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2059be959ce7ec0f66ae1051caf17e0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pshufb,<sp/>kInstPshufb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3674"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shuffle<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3675" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a67186dbeb85350309a630c760e580a68" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a67186dbeb85350309a630c760e580a68" kindref="member" tooltip="Packed shuffle bytes (SSSE3).">palignr</ref>,<sp/>kInstPalignr,<sp/>MmVar,<sp/>MmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3676"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3677" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad1ed86055ff3330ad93fdb64ce46c2b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(palignr,<sp/>kInstPalignr,<sp/>MmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3679"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shuffle<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3680" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a9f7f6d9a72a6144b70df2209b20473" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(palignr,<sp/>kInstPalignr,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3681"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3682" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a11879ca122f5934de63fa0ef7435b80c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(palignr,<sp/>kInstPalignr,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SSE4.1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3688"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Blend<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3689" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872bb9410d7b35ee74128be9855ae932" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872bb9410d7b35ee74128be9855ae932" kindref="member" tooltip="Blend packed DP-FP values (SSE4.1).">blendpd</ref>,<sp/>kInstBlendpd,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3690"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3691" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afcc40a7e124fc2b4c94f8ba26f4e6a2e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(blendpd,<sp/>kInstBlendpd,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3693"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Blend<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3694" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e6105636f75c06a62d3a0cc7c679b85" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e6105636f75c06a62d3a0cc7c679b85" kindref="member" tooltip="Blend packed SP-FP values (SSE4.1).">blendps</ref>,<sp/>kInstBlendps,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3695"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3696" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6698adc7fc8c9580dc16fb26a76f1e63" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(blendps,<sp/>kInstBlendps,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3698"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>blend<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3699" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a912a0773bd30b5eeb2f70f52d83ca22d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a912a0773bd30b5eeb2f70f52d83ca22d" kindref="member" tooltip="Variable blend packed DP-FP values (SSE4.1).">blendvpd</ref>,<sp/>kInstBlendvpd,<sp/>XmmVar,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3700"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3701" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42029e45f201adac20b125a92a4875cf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(blendvpd,<sp/>kInstBlendvpd,<sp/>XmmVar,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3703"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>blend<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3704" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a919a687afa8776351d506f8a575af495" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a919a687afa8776351d506f8a575af495" kindref="member" tooltip="Variable blend packed SP-FP values (SSE4.1).">blendvps</ref>,<sp/>kInstBlendvps,<sp/>XmmVar,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3705"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3706" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a213659ebac73d53d4197ff555bd184ed" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(blendvps,<sp/>kInstBlendvps,<sp/>XmmVar,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3708"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Dot<sp/>product<sp/>of<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3709" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aadd7b19c764c76ab332b51f35bb855c8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aadd7b19c764c76ab332b51f35bb855c8" kindref="member" tooltip="Dot product of packed DP-FP values (SSE4.1).">dppd</ref>,<sp/>kInstDppd,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3710"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3711" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5442e4966bb0fcd68ee9eeda01445cf1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(dppd,<sp/>kInstDppd,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3713"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Dot<sp/>product<sp/>of<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3714" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f2f8bd38f40af0f70eaf28eab16afc6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f2f8bd38f40af0f70eaf28eab16afc6" kindref="member" tooltip="Dot product of packed SP-FP values (SSE4.1).">dpps</ref>,<sp/>kInstDpps,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3715"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3716" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14cdee0e8c97555ca0a895659f2badf7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(dpps,<sp/>kInstDpps,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3718"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>packed<sp/>SP-FP<sp/>value<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3719" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2a434a5fb4e968d794950f04a72d92e9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2a434a5fb4e968d794950f04a72d92e9" kindref="member" tooltip="Extract packed SP-FP value (SSE4.1).">extractps</ref>,<sp/>kInstExtractps,<sp/>GpVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3720"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3721" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad91c5223001a916b5261aac267d91692" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(extractps,<sp/>kInstExtractps,<sp/>Mem,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3723"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>oword<sp/>non-temporal<sp/>aligned<sp/>hint<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3724" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aecf1a375dc5616e7ef76ecb54ed74291" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aecf1a375dc5616e7ef76ecb54ed74291" kindref="member" tooltip="Load oword non-temporal aligned hint (SSE4.1).">movntdqa</ref>,<sp/>kInstMovntdqa,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3726"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compute<sp/>multiple<sp/>packed<sp/>sums<sp/>of<sp/>absolute<sp/>difference<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3727" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10ea4efa8e2e65da6ba7e8d7c97c7f93" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10ea4efa8e2e65da6ba7e8d7c97c7f93" kindref="member" tooltip="Compute multiple packed sums of absolute difference (SSE4.1).">mpsadbw</ref>,<sp/>kInstMpsadbw,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3728"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3729" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7f837e54d1b906d01d339dbf8945bdf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(mpsadbw,<sp/>kInstMpsadbw,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3731"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>unsigned<sp/>saturation<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3732" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71c597675c1c98df1306626f5f9f0cc6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71c597675c1c98df1306626f5f9f0cc6" kindref="member" tooltip="Pack with unsigned saturation (SSE4.1).">packusdw</ref>,<sp/>kInstPackusdw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3733"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3734" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abad2fdd9e8a2021037e9c83e4dfc8f76" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packusdw,<sp/>kInstPackusdw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3736"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>blend<sp/>packed<sp/>bytes<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3737" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae0e27a3dd4e9fe686f9b27939a60ae63" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae0e27a3dd4e9fe686f9b27939a60ae63" kindref="member" tooltip="Variable blend packed bytes (SSE4.1).">pblendvb</ref>,<sp/>kInstPblendvb,<sp/>XmmVar,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3738"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3739" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a853b11ae3c88257f88bf87e7f85e01c6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(pblendvb,<sp/>kInstPblendvb,<sp/>XmmVar,<sp/>Mem,<sp/>XmmVar)</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3741"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Blend<sp/>packed<sp/>words<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3742" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c396e1ec13cd719703a5c2298748f35" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c396e1ec13cd719703a5c2298748f35" kindref="member" tooltip="Blend packed words (SSE4.1).">pblendw</ref>,<sp/>kInstPblendw,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3743"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3744" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af7d5eb1e949cdf42eaf72e6b51c3fb4e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pblendw,<sp/>kInstPblendw,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3746"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>packed<sp/>qword<sp/>Data<sp/>for<sp/>Equal<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3747" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2bdd09b4a8d7bd690b30a93a4a25ba57" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2bdd09b4a8d7bd690b30a93a4a25ba57" kindref="member" tooltip="Compare packed qword Data for Equal (SSE4.1).">pcmpeqq</ref>,<sp/>kInstPcmpeqq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3748"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3749" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6009f460f752e9bf9eb16238bef99fc6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqq,<sp/>kInstPcmpeqq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3751"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>byte<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3752" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb2dc64741f0f16973dddb73e711c69a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb2dc64741f0f16973dddb73e711c69a" kindref="member" tooltip="Extract byte (SSE4.1).">pextrb</ref>,<sp/>kInstPextrb,<sp/>GpVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3753"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3754" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e3584b6fc96a93469bd1f57fecf0379" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pextrb,<sp/>kInstPextrb,<sp/>Mem,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3756"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>dword<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3757" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6e2554083be9e7fd46cb214dbc74cfee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6e2554083be9e7fd46cb214dbc74cfee" kindref="member" tooltip="Extract dword (SSE4.1).">pextrd</ref>,<sp/>kInstPextrd,<sp/>GpVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3758"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3759" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07c2b396125f44aab8abcdd97902cb1d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pextrd,<sp/>kInstPextrd,<sp/>Mem,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3761"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>qword<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3762" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1835103ea4b6b3c045e4a1c5d4519fbf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1835103ea4b6b3c045e4a1c5d4519fbf" kindref="member" tooltip="Extract qword (SSE4.1).">pextrq</ref>,<sp/>kInstPextrq,<sp/>GpVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3763"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3764" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c3d3efbe7d9fc4dc64ba98289c6d062" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pextrq,<sp/>kInstPextrq,<sp/>Mem,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3766"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>word<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3767" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a52e7f8e8049bf85d17878431e0f7cf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pextrw,<sp/>kInstPextrw,<sp/>Mem,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3769"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>word<sp/>minimum<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3770" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f68713843df8685372d449f79dcb6d0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f68713843df8685372d449f79dcb6d0" kindref="member" tooltip="Packed horizontal word minimum (SSE4.1).">phminposuw</ref>,<sp/>kInstPhminposuw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3771"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3772" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8f93e4617ef90ae34f81cbdb341bf500" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phminposuw,<sp/>kInstPhminposuw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3774"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Insert<sp/>byte<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3775" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a46cc69d3d6df5e19630dddb412d5380b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a46cc69d3d6df5e19630dddb412d5380b" kindref="member" tooltip="Insert byte (SSE4.1).">pinsrb</ref>,<sp/>kInstPinsrb,<sp/>XmmVar,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3776"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3777" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a91cf75fd1d0a0dbe4e5acb499b221277" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrb,<sp/>kInstPinsrb,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3779"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Insert<sp/>dword<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3780" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70c5529b92de7b476037a39a665ee646" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70c5529b92de7b476037a39a665ee646" kindref="member" tooltip="Insert dword (SSE4.1).">pinsrd</ref>,<sp/>kInstPinsrd,<sp/>XmmVar,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3781"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3782" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a416b6df44088e0f7b2df865be22eb4d9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrd,<sp/>kInstPinsrd,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3784"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Insert<sp/>qword<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3785" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0348d0a2e18972309b8b7f11cb47a405" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0348d0a2e18972309b8b7f11cb47a405" kindref="member" tooltip="Insert qword (SSE4.1).">pinsrq</ref>,<sp/>kInstPinsrq,<sp/>XmmVar,<sp/>GpVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3786"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3787" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab881761824ccb2f6d24e4c2b2256d3e3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrq,<sp/>kInstPinsrq,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3789"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Maximum<sp/>of<sp/>packed<sp/>word<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3790" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a555272214bb7ec1d58b74e9bbf99a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a555272214bb7ec1d58b74e9bbf99a9" kindref="member" tooltip="Maximum of packed word integers (SSE4.1).">pmaxuw</ref>,<sp/>kInstPmaxuw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3791"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3792" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7e875e86391aac23ac16b01000215e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxuw,<sp/>kInstPmaxuw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3794"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Maximum<sp/>of<sp/>packed<sp/>signed<sp/>byte<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3795" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57390eaf1fcc6b3b19eda6db43aa85cb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57390eaf1fcc6b3b19eda6db43aa85cb" kindref="member" tooltip="Maximum of packed signed byte integers (SSE4.1).">pmaxsb</ref>,<sp/>kInstPmaxsb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3796"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3797" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aab5733851395fc271259034ea6f36b0d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxsb,<sp/>kInstPmaxsb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3799"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Maximum<sp/>of<sp/>packed<sp/>signed<sp/>dword<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3800" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af05d268c11e604ee2d78f88a79a2c9f4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af05d268c11e604ee2d78f88a79a2c9f4" kindref="member" tooltip="Maximum of packed signed dword integers (SSE4.1).">pmaxsd</ref>,<sp/>kInstPmaxsd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3801"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3802" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a83c7e8d8a8675ace91e9b5e1eae8e5ba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxsd,<sp/>kInstPmaxsd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3804"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Maximum<sp/>of<sp/>packed<sp/>unsigned<sp/>dword<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3805" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af45a1bb00ff0148e301f9bb22a9ee325" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af45a1bb00ff0148e301f9bb22a9ee325" kindref="member" tooltip="Maximum of packed unsigned dword integers (SSE4.1).">pmaxud</ref>,<sp/>kInstPmaxud,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3806"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3807" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adedbcffe724a807a0c0592cea0cef9e4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxud,kInstPmaxud<sp/>,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3809"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Minimum<sp/>of<sp/>packed<sp/>signed<sp/>byte<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3810" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a567dcb6823d382d9d400d1848694fca3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a567dcb6823d382d9d400d1848694fca3" kindref="member" tooltip="Minimum of packed signed byte integers (SSE4.1).">pminsb</ref>,<sp/>kInstPminsb,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3811"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3812" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab8c02452eb84aaffc56fa480e5d92625" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminsb,<sp/>kInstPminsb,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3814"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Minimum<sp/>of<sp/>packed<sp/>word<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3815" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a690ff0dea1897abeb9dc498c3e7c6303" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a690ff0dea1897abeb9dc498c3e7c6303" kindref="member" tooltip="Minimum of packed word integers (SSE4.1).">pminuw</ref>,<sp/>kInstPminuw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3816"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3817" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a286eff68500c2652dfec7d923b266ba7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminuw,<sp/>kInstPminuw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3819"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Minimum<sp/>of<sp/>packed<sp/>dword<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3820" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a25d47a334fcd97439f5d29696e1c39a3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a25d47a334fcd97439f5d29696e1c39a3" kindref="member" tooltip="Minimum of packed dword integers (SSE4.1).">pminud</ref>,<sp/>kInstPminud,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3821"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3822" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a60201d5ace2305836b0238d005208b1e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminud,<sp/>kInstPminud,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3824"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Minimum<sp/>of<sp/>packed<sp/>dword<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3825" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6beb0ee57a43bdbb16aa02a58270c2b3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6beb0ee57a43bdbb16aa02a58270c2b3" kindref="member" tooltip="Minimum of packed dword integers (SSE4.1).">pminsd</ref>,<sp/>kInstPminsd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3826"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3827" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a328d39da3d3d91a815db85557578945b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminsd,<sp/>kInstPminsd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3829"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>sign<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3830" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aacdbda97e2648642a9bcc2b5d952c0b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aacdbda97e2648642a9bcc2b5d952c0b8" kindref="member" tooltip="Packed move with sign extend (SSE4.1).">pmovsxbw</ref>,<sp/>kInstPmovsxbw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3831"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3832" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae47d7a5127de3e67c91a5d5efa4be3ed" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxbw,<sp/>kInstPmovsxbw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3834"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>sign<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3835" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef5ec0d1a4f4b4f51bd4b7b19a2a925a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef5ec0d1a4f4b4f51bd4b7b19a2a925a" kindref="member" tooltip="Packed move with sign extend (SSE4.1).">pmovsxbd</ref>,<sp/>kInstPmovsxbd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3836"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3837" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1b0881130f81bdc2e3267889ea547cb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxbd,<sp/>kInstPmovsxbd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3839"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>sign<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3840" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42a78877d9a7007d50bbb5519302e229" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42a78877d9a7007d50bbb5519302e229" kindref="member" tooltip="Packed move with sign extend (SSE4.1).">pmovsxbq</ref>,<sp/>kInstPmovsxbq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3841"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3842" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a229c1187ce592f0581cf73988149d5d6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxbq,<sp/>kInstPmovsxbq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3844"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>sign<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3845" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a306400d99b7fa336a9835cf1fafabfcc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a306400d99b7fa336a9835cf1fafabfcc" kindref="member" tooltip="Packed move with sign extend (SSE4.1).">pmovsxwd</ref>,<sp/>kInstPmovsxwd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3846"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3847" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3464fa8c6f5a92d04579f84689c7c0a0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxwd,<sp/>kInstPmovsxwd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3849"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3850" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab7a24ce229193cb0b08c8480639ba376" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab7a24ce229193cb0b08c8480639ba376" kindref="member" tooltip="(SSE4.1).">pmovsxwq</ref>,<sp/>kInstPmovsxwq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3851"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3852" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa1e6b316d0d928b42ebdebe47de58ab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxwq,<sp/>kInstPmovsxwq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3854"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3855" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f5891c47cb5e5823714cef2e67d08cc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f5891c47cb5e5823714cef2e67d08cc" kindref="member" tooltip="(SSE4.1).">pmovsxdq</ref>,<sp/>kInstPmovsxdq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3856"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3857" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a59082639e09883f5c406435cd01a7f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxdq,<sp/>kInstPmovsxdq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3859"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>zero<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3860" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76c9b0fd9bb0830d71919c51ed1e1ed3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76c9b0fd9bb0830d71919c51ed1e1ed3" kindref="member" tooltip="Packed move with zero extend (SSE4.1).">pmovzxbw</ref>,<sp/>kInstPmovzxbw,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3861"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3862" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a83e306467378ddf0338f575ef7442f4f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxbw,<sp/>kInstPmovzxbw,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3864"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>zero<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3865" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3957d6ee7bd6af30ac092499bc342f12" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3957d6ee7bd6af30ac092499bc342f12" kindref="member" tooltip="Packed move with zero extend (SSE4.1).">pmovzxbd</ref>,<sp/>kInstPmovzxbd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3866"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3867" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b4714ce4ce65953271160edb4143e38" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxbd,<sp/>kInstPmovzxbd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3869"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>zero<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3870" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae22ccf66b1053922f0e9ce9c3e10af6a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae22ccf66b1053922f0e9ce9c3e10af6a" kindref="member" tooltip="Packed move with zero extend (SSE4.1).">pmovzxbq</ref>,<sp/>kInstPmovzxbq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3871"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3872" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14dbd3cf6ea5faf8d63fa172450b1094" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxbq,<sp/>kInstPmovzxbq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3874"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>zero<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3875" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a279d779f1e4923ed8f8fdb698aa57cfa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a279d779f1e4923ed8f8fdb698aa57cfa" kindref="member" tooltip="Packed move with zero extend (SSE4.1).">pmovzxwd</ref>,<sp/>kInstPmovzxwd,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3876"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3877" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adceb9c2c647453407b4638768438c2ed" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxwd,<sp/>kInstPmovzxwd,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3879"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3880" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f3fb9957fdf82b3bf30a753e3b377b4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f3fb9957fdf82b3bf30a753e3b377b4" kindref="member" tooltip="(SSE4.1).">pmovzxwq</ref>,<sp/>kInstPmovzxwq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3881"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3882" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adec44f72d067988332fd759f95ab76d4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxwq,<sp/>kInstPmovzxwq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3884"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3885" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a538827b3bccc807c060a8094e8cddc85" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a538827b3bccc807c060a8094e8cddc85" kindref="member" tooltip="(SSE4.1).">pmovzxdq</ref>,<sp/>kInstPmovzxdq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3886"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3887" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae1f547c39f1535b76f16e0b829c8a48d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxdq,<sp/>kInstPmovzxdq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3889"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>packed<sp/>signed<sp/>dword<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3890" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af78537b1358b267180a5d2379a8530a6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af78537b1358b267180a5d2379a8530a6" kindref="member" tooltip="Multiply packed signed dword integers (SSE4.1).">pmuldq</ref>,<sp/>kInstPmuldq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3891"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3892" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1a6f4e247c05e546329bfdc2df3732ab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmuldq,<sp/>kInstPmuldq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3894"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>packed<sp/>signed<sp/>integers<sp/>and<sp/>store<sp/>low<sp/>result<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3895" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac01f83e45189eb6510e2a8dd708b9a27" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac01f83e45189eb6510e2a8dd708b9a27" kindref="member" tooltip="Multiply packed signed integers and store low result (SSE4.1).">pmulld</ref>,<sp/>kInstPmulld,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3896"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3897" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ca2a133a52a90ee2b79b80bcbe4a31a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulld,<sp/>kInstPmulld,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3899"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Logical<sp/>compare<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3900" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a005a5e6bb339f2076d98e8e094206a35" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a005a5e6bb339f2076d98e8e094206a35" kindref="member" tooltip="Logical compare (SSE4.1).">ptest</ref>,<sp/>kInstPtest,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3901"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3902" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7fae782f0fcffd7d02551c075bc5218" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(ptest,<sp/>kInstPtest,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3904"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Round<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3905" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6520da409d717efe86511ce36cc72084" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6520da409d717efe86511ce36cc72084" kindref="member" tooltip="Round packed SP-FP values (SSE4.1).">roundps</ref>,<sp/>kInstRoundps,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3906"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3907" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a362a94075420dbccdc84e39ef5120b67" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(roundps,<sp/>kInstRoundps,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3909"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Round<sp/>scalar<sp/>SP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3910" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a88cd0fbe99a0eb7a9e79338d058f766d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a88cd0fbe99a0eb7a9e79338d058f766d" kindref="member" tooltip="Round scalar SP-FP values (SSE4.1).">roundss</ref>,<sp/>kInstRoundss,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3911"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3912" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad1f23b30e3ca88ae3bba9efe71456332" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(roundss,<sp/>kInstRoundss,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3914"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Round<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3915" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab67fffb8a9c1af4bc43e7bb438aa2307" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab67fffb8a9c1af4bc43e7bb438aa2307" kindref="member" tooltip="Round packed DP-FP values (SSE4.1).">roundpd</ref>,<sp/>kInstRoundpd,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3916"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3917" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a887dcd9e796963ce2858bd34872a2670" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(roundpd,<sp/>kInstRoundpd,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3919"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Round<sp/>scalar<sp/>DP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3920" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a55aaa72b80f109a5031e15de7376a70c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a55aaa72b80f109a5031e15de7376a70c" kindref="member" tooltip="Round scalar DP-FP values (SSE4.1).">roundsd</ref>,<sp/>kInstRoundsd,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3921"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3922" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8778e2e5acf712a5af3542d350531a36" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(roundsd,<sp/>kInstRoundsd,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SSE4.2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3928"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>explicit<sp/>length<sp/>strings,<sp/>return<sp/>index<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="3929" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82d9428176a4fc7c8f2224d65af1bffc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82d9428176a4fc7c8f2224d65af1bffc" kindref="member" tooltip="Packed compare explicit length strings, return index (SSE4.2).">pcmpestri</ref>,<sp/>kInstPcmpestri,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3930"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3931" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4eb88dc71db1fec4b86bce45512264fd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pcmpestri,<sp/>kInstPcmpestri,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3933"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>explicit<sp/>length<sp/>strings,<sp/>return<sp/>mask<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="3934" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ed7d9b2fadb69f122a23a738766004b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ed7d9b2fadb69f122a23a738766004b" kindref="member" tooltip="Packed compare explicit length strings, return mask (SSE4.2).">pcmpestrm</ref>,<sp/>kInstPcmpestrm,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3935"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3936" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a15b1b7e460d8ba86fbd1cb283a71839f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pcmpestrm,<sp/>kInstPcmpestrm,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3938"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>implicit<sp/>length<sp/>strings,<sp/>return<sp/>index<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="3939" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad9cd74795243b85a27830e8abcb10dab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad9cd74795243b85a27830e8abcb10dab" kindref="member" tooltip="Packed compare implicit length strings, return index (SSE4.2).">pcmpistri</ref>,<sp/>kInstPcmpistri,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3940"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3941" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7b181a491c9ebe8780bf0059a211178" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pcmpistri,<sp/>kInstPcmpistri,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3943"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>implicit<sp/>length<sp/>strings,<sp/>return<sp/>mask<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="3944" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad4aca140114667dc4cc53eb20934f5e3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad4aca140114667dc4cc53eb20934f5e3" kindref="member" tooltip="Packed compare implicit length strings, return mask (SSE4.2).">pcmpistrm</ref>,<sp/>kInstPcmpistrm,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3945"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3946" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af7915e9e50f2f6a6ada795f27375ef75" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pcmpistrm,<sp/>kInstPcmpistrm,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3948"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>packed<sp/>data<sp/>for<sp/>greater<sp/>than<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="3949" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa90432fba89d55ae23eab1a62b97e1e3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa90432fba89d55ae23eab1a62b97e1e3" kindref="member" tooltip="Compare packed data for greater than (SSE4.2).">pcmpgtq</ref>,<sp/>kInstPcmpgtq,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3950"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3951" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6cb4e7b285ea7d77ee6277e256fb255b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtq,<sp/>kInstPcmpgtq,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[AESNI]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3957"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>a<sp/>single<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>decryption<sp/>flow.</highlight></codeline>
<codeline lineno="3958" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a491a77840021294403438f5654e9be49" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a491a77840021294403438f5654e9be49" kindref="member" tooltip="Perform a single round of the AES decryption flow.">aesdec</ref>,<sp/>kInstAesdec,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3959"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3960" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa157569aa6c3ac5d75d601655c5f2ae5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(aesdec,<sp/>kInstAesdec,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3962"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>the<sp/>last<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>decryption<sp/>flow.</highlight></codeline>
<codeline lineno="3963" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a361aa644c40abe73d28d3546649c9427" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a361aa644c40abe73d28d3546649c9427" kindref="member" tooltip="Perform the last round of the AES decryption flow.">aesdeclast</ref>,<sp/>kInstAesdeclast,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3964"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3965" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab5831db70f119449997ee59328f7bf7c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(aesdeclast,<sp/>kInstAesdeclast,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3967"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>a<sp/>single<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>encryption<sp/>flow.</highlight></codeline>
<codeline lineno="3968" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79ea3fe4b28a1cab55a80bd73cd87532" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79ea3fe4b28a1cab55a80bd73cd87532" kindref="member" tooltip="Perform a single round of the AES encryption flow.">aesenc</ref>,<sp/>kInstAesenc,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3969"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3970" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad24fa249a4e58fe15a9a93dd11338835" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(aesenc,<sp/>kInstAesenc,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3972"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>the<sp/>last<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>encryption<sp/>flow.</highlight></codeline>
<codeline lineno="3973" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96096517869da941ff009efe2ff9094a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96096517869da941ff009efe2ff9094a" kindref="member" tooltip="Perform the last round of the AES encryption flow.">aesenclast</ref>,<sp/>kInstAesenclast,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3974"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3975" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a399af2c3c64893ec9200449ef69933b0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(aesenclast,<sp/>kInstAesenclast,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3977"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>the<sp/>InvMixColumns<sp/>transformation.</highlight></codeline>
<codeline lineno="3978" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a608d404fc477cc28fb483b8befde80c9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a608d404fc477cc28fb483b8befde80c9" kindref="member" tooltip="Perform the InvMixColumns transformation.">aesimc</ref>,<sp/>kInstAesimc,<sp/>XmmVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3979"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3980" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b9132ccdbe5357c25c3e9394822e5e5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(aesimc,<sp/>kInstAesimc,<sp/>XmmVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3982"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Assist<sp/>in<sp/>expanding<sp/>the<sp/>AES<sp/>cipher<sp/>key.</highlight></codeline>
<codeline lineno="3983" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0dc7cdda47edf2ec1a52c84d32a54fa8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0dc7cdda47edf2ec1a52c84d32a54fa8" kindref="member" tooltip="Assist in expanding the AES cipher key.">aeskeygenassist</ref>,<sp/>kInstAeskeygenassist,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3984"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3985" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa59e7703b2dc15c870a7bc23a638a873" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(aeskeygenassist,<sp/>kInstAeskeygenassist,<sp/>XmmVar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[PCLMULQDQ]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3991"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Carry-less<sp/>multiplication<sp/>quadword.</highlight></codeline>
<codeline lineno="3992" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abc2d90b80095e7a91244f7e19f8e22f2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abc2d90b80095e7a91244f7e19f8e22f2" kindref="member" tooltip="Carry-less multiplication quadword.">pclmulqdq</ref>,<sp/>kInstPclmulqdq,<sp/>XmmVar,<sp/>XmmVar,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3993"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3994" refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a862e79f5255a8b2e25493b6bd04ccff1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pclmulqdq,<sp/>kInstPclmulqdq,<sp/>XmmVar,<sp/>Mem,<sp/>Imm);</highlight></codeline>
<codeline lineno="3995"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3997"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="3998"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3999"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x86x64<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4003"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)</highlight></codeline>
<codeline lineno="4007"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4008"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x86<sp/>{</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4011"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_x86x64</highlight></codeline>
<codeline lineno="4012"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="4013"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Compiler<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>X86X64Compiler<sp/>{</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(Compiler)</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"></highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4020"><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>@ref<sp/>Compiler<sp/>instance.</highlight></codeline>
<codeline lineno="4022"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Compiler(<ref refid="structasmjit_1_1BaseRuntime" kindref="compound" tooltip="Base runtime.">BaseRuntime</ref>*<sp/>runtime);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4023"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>Compiler<sp/>instance.</highlight></codeline>
<codeline lineno="4024"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>~Compiler();</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Options]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4030"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4031"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b0e3a386b1e52cb8b2e739fd67f6b0e" kindref="member" tooltip="Force short form of jmp/jcc/other instruction.">short_</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca3f497bb7cd655089b1e5470867cbc187" kindref="member" tooltip="Emit short form of the instruction.">kInstOptionShortForm</ref>;</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4036"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4037"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe7ad9b26ae424e1b0c37768d1e2b7e4" kindref="member" tooltip="Force long form of jmp/jcc/other instruction.">long_</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca0914ab67e09d24f2e0c0d512b70c7f08" kindref="member" tooltip="Emit long form of the instruction.">kInstOptionLongForm</ref>;</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4042"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4043"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa645898777e8f4eceed896d118d08dec" kindref="member" tooltip="Condition is likely to be taken.">taken</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4df01d78f89add2e942ec79ad211a4f5" kindref="member" tooltip="Condition is likely to be taken (instruction).">kInstOptionTaken</ref>;</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4048"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4049"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22dbcf0fb59edcf4de0101214c5e532d" kindref="member" tooltip="Condition is unlikely to be taken.">notTaken</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4c436f33ba83c4df5948e49e01a5ef67" kindref="member" tooltip="Condition is unlikely to be taken (instruction).">kInstOptionNotTaken</ref>;</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4054"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4055"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58414d7d73f2d245e6d469c3bd22b7d9" kindref="member" tooltip="Lock prefix.">lock</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa438db3f8e9ef167e318d3ae4b0043f71" kindref="member" tooltip="Emit instruction with LOCK prefix.">kInstOptionLock</ref>;</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"></highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[X86-Only<sp/>Instructions]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4063"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4064"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Decimal<sp/>adjust<sp/>AL<sp/>after<sp/>addition<sp/>(32-bit).</highlight></codeline>
<codeline lineno="4065"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(daa,<sp/>kInstDaa,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4066"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Decimal<sp/>adjust<sp/>AL<sp/>after<sp/>subtraction<sp/>(32-bit).</highlight></codeline>
<codeline lineno="4067"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(das,<sp/>kInstDas,<sp/>GpVar)</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Pop<sp/>all<sp/>Gp<sp/>registers<sp/>(EDI|ESI|EBP|EBX|EDX|ECX|EAX).</highlight></codeline>
<codeline lineno="4070"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(popa,<sp/>kInstPopa)</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Push<sp/>all<sp/>Gp<sp/>registers<sp/>(EAX|ECX|EDX|EBX|original<sp/>ESP|EBP|ESI|EDI).</highlight></codeline>
<codeline lineno="4073"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(pusha,<sp/>kInstPusha)</highlight></codeline>
<codeline lineno="4074"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4076"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="4077"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4078"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x86<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal"></highlight></codeline>
<codeline lineno="4081"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86</highlight></codeline>
<codeline lineno="4082"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x64]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"></highlight></codeline>
<codeline lineno="4087"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="4088"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x64<sp/>{</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4092"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_x86x64</highlight></codeline>
<codeline lineno="4093"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="4094"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Compiler<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>X86X64Compiler<sp/>{</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(Compiler)</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"></highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>@ref<sp/>Compiler<sp/>instance.</highlight></codeline>
<codeline lineno="4103"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Compiler(<ref refid="structasmjit_1_1BaseRuntime" kindref="compound" tooltip="Base runtime.">BaseRuntime</ref>*<sp/>runtime);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4104"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>Compiler<sp/>instance.</highlight></codeline>
<codeline lineno="4105"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>~Compiler();</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Options]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4111"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4112"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b0e3a386b1e52cb8b2e739fd67f6b0e" kindref="member" tooltip="Force short form of jmp/jcc/other instruction.">short_</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca3f497bb7cd655089b1e5470867cbc187" kindref="member" tooltip="Emit short form of the instruction.">kInstOptionShortForm</ref>;</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4117"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4118"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe7ad9b26ae424e1b0c37768d1e2b7e4" kindref="member" tooltip="Force long form of jmp/jcc/other instruction.">long_</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca0914ab67e09d24f2e0c0d512b70c7f08" kindref="member" tooltip="Emit long form of the instruction.">kInstOptionLongForm</ref>;</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4123"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4124"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa645898777e8f4eceed896d118d08dec" kindref="member" tooltip="Condition is likely to be taken.">taken</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4df01d78f89add2e942ec79ad211a4f5" kindref="member" tooltip="Condition is likely to be taken (instruction).">kInstOptionTaken</ref>;</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4129"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4130"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22dbcf0fb59edcf4de0101214c5e532d" kindref="member" tooltip="Condition is unlikely to be taken.">notTaken</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4c436f33ba83c4df5948e49e01a5ef67" kindref="member" tooltip="Condition is unlikely to be taken (instruction).">kInstOptionNotTaken</ref>;</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4135"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4136"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Compiler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58414d7d73f2d245e6d469c3bd22b7d9" kindref="member" tooltip="Lock prefix.">lock</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa438db3f8e9ef167e318d3ae4b0043f71" kindref="member" tooltip="Emit instruction with LOCK prefix.">kInstOptionLock</ref>;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4141"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Force<sp/>rex<sp/>prefix.</highlight></codeline>
<codeline lineno="4142"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Compiler&amp;<sp/>rex()<sp/>{</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa14adbf0db0a92c197f83b863ee3dcda7" kindref="member" tooltip="Force REX prefix to be emitted.">kInstOptionRex</ref>;</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[X64-Only<sp/>Instructions]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4151"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>dword<sp/>to<sp/>qword<sp/>(RAX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>EAX).</highlight></codeline>
<codeline lineno="4152"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(cdqe,<sp/>kInstCdqe,<sp/>GpVar<sp/></highlight><highlight class="comment">/*<sp/>eax<sp/>*/</highlight><highlight class="normal">)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4153"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>qword<sp/>to<sp/>oword<sp/>(RDX:RAX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>RAX).</highlight></codeline>
<codeline lineno="4154"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cqo,<sp/>kInstCdq,<sp/>GpVar<sp/></highlight><highlight class="comment">/*<sp/>rdx<sp/>*/</highlight><highlight class="normal">,<sp/>GpVar<sp/></highlight><highlight class="comment">/*<sp/>rax<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4156"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compares<sp/>the<sp/>128-bit<sp/>value<sp/>in<sp/>RDX:RAX<sp/>with<sp/>the<sp/>memory<sp/>operand<sp/>(X64).</highlight></codeline>
<codeline lineno="4157"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>InstNode*<sp/>cmpxchg16b(</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>GpVar&amp;<sp/>cmp_edx,<sp/>const<sp/>GpVar&amp;<sp/>cmp_eax,</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>GpVar&amp;<sp/>cmp_ecx,<sp/>const<sp/>GpVar&amp;<sp/>cmp_ebx,</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>Mem&amp;<sp/>dst)<sp/>{</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">emit</ref>(kInstCmpxchg16b,<sp/>cmp_edx,<sp/>cmp_eax,<sp/>cmp_ecx,<sp/>cmp_ebx,<sp/>dst);</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4165"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>dword<sp/>to<sp/>qword<sp/>with<sp/>sign-extension.</highlight></codeline>
<codeline lineno="4166"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movsxd,<sp/>kInstMovsxd,<sp/>GpVar,<sp/>GpVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4167"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4168"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movsxd,<sp/>kInstMovsxd,<sp/>GpVar,<sp/>Mem)</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4170"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>ECX/RCX<sp/>Qdwords<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>RAX.</highlight></codeline>
<codeline lineno="4171"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(rep_lodsq,<sp/>kInstRepLodsq,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4173"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>ECX/RCX<sp/>Qdwords<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="4174"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(rep_movsq,<sp/>kInstRepMovsq,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4176"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fill<sp/>ECX/RCX<sp/>Qdwords<sp/>at<sp/>ES:[EDI/RDI]<sp/>with<sp/>RAX.</highlight></codeline>
<codeline lineno="4177"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(rep_stosq,<sp/>kInstRepStosq,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4179"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>Qdwords<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="4180"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(repe_cmpsq,<sp/>kInstRepeCmpsq,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4182"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>non-RAX<sp/>QWORD<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="4183"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(repe_scasq,<sp/>kInstRepeScasq,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4185"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>matching<sp/>Qdwords<sp/>in<sp/>[RDI]<sp/>and<sp/>[RSI].</highlight></codeline>
<codeline lineno="4186"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(repne_cmpsq,<sp/>kInstRepneCmpsq,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4188"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>RAX,<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="4189"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x_(repne_scasq,<sp/>kInstRepneScasq,<sp/>GpVar,<sp/>GpVar,<sp/>GpVar,<sp/>o0.getId()<sp/>!=<sp/>o1.getId()<sp/>&amp;&amp;<sp/>o1.getId()<sp/>!=<sp/>o2.getId())</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/>using<sp/>X86X64Compiler::movq;</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4193"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4194"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>GpVar,<sp/>MmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4195"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4196"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>MmVar,<sp/>GpVar)</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4198"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4199"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>GpVar,<sp/>XmmVar)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4200"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4201"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>XmmVar,<sp/>GpVar)</highlight></codeline>
<codeline lineno="4202"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4204"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="4205"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4206"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x64<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="4210"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[CodeGen-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4213"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INST_0x</highlight></codeline>
<codeline lineno="4216"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4217"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INST_1x</highlight></codeline>
<codeline lineno="4218"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_1x_</highlight></codeline>
<codeline lineno="4219"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_1i</highlight></codeline>
<codeline lineno="4220"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_1i_</highlight></codeline>
<codeline lineno="4221"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_1cc</highlight></codeline>
<codeline lineno="4222"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INST_2x</highlight></codeline>
<codeline lineno="4224"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_2x_</highlight></codeline>
<codeline lineno="4225"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_2i</highlight></codeline>
<codeline lineno="4226"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_2i_</highlight></codeline>
<codeline lineno="4227"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_2cc</highlight></codeline>
<codeline lineno="4228"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INST_3x</highlight></codeline>
<codeline lineno="4230"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_3x_</highlight></codeline>
<codeline lineno="4231"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_3i</highlight></codeline>
<codeline lineno="4232"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_3i_</highlight></codeline>
<codeline lineno="4233"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_ASMJIT_X86_X86COMPILER_H</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h"/>
  </compounddef>
</doxygen>
