<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="assembler_8h" kind="file">
    <compoundname>assembler.h</compoundname>
    <includes refid="codegen_8h" local="yes">../base/codegen.h</includes>
    <includes refid="defs_8h" local="yes">../base/defs.h</includes>
    <includes refid="error_8h" local="yes">../base/error.h</includes>
    <includes refid="logger_8h" local="yes">../base/logger.h</includes>
    <includes refid="podlist_8h" local="yes">../base/podlist.h</includes>
    <includes refid="podvector_8h" local="yes">../base/podvector.h</includes>
    <includes refid="runtime_8h" local="yes">../base/runtime.h</includes>
    <includes refid="zone_8h" local="yes">../base/zone.h</includes>
    <includes refid="apibegin_8h" local="yes">../base/apibegin.h</includes>
    <includes refid="apiend_8h" local="yes">../base/apiend.h</includes>
    <includedby refid="base_8h" local="yes">base.h</includedby>
    <includedby refid="compiler_8h" local="yes">compiler.h</includedby>
    <includedby refid="assembler_8cpp" local="yes">assembler.cpp</includedby>
    <includedby refid="compiler_8cpp" local="yes">compiler.cpp</includedby>
    <includedby refid="runtime_8cpp" local="yes">runtime.cpp</includedby>
    <includedby refid="x86assembler_8h" local="yes">x86assembler.h</includedby>
    <includedby refid="x86defs_8h" local="yes">x86defs.h</includedby>
    <incdepgraph>
      <node id="219">
        <label>../base/globals.h</label>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="227">
        <label>../base/apiend.h</label>
      </node>
      <node id="225">
        <label>stdarg.h</label>
      </node>
      <node id="216">
        <label>../base/codegen.h</label>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="229">
        <label>stdint.h</label>
      </node>
      <node id="223">
        <label>stdlib.h</label>
      </node>
      <node id="231">
        <label>../base/error.h</label>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="234">
        <label>../base/zone.h</label>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="226">
        <label>../base/apibegin.h</label>
        <childnode refid="220" relation="include">
        </childnode>
      </node>
      <node id="232">
        <label>../base/logger.h</label>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="215">
        <label>assembler.h</label>
        <link refid="assembler.h"/>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="217">
        <label>../base/defs.h</label>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="230">
        <label>limits.h</label>
      </node>
      <node id="235">
        <label>../base/podlist.h</label>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="236">
        <label>../base/podvector.h</label>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="228">
        <label>new</label>
      </node>
      <node id="221">
        <label>config.h</label>
      </node>
      <node id="218">
        <label>../base/intutil.h</label>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="233">
        <label>../base/runtime.h</label>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
      <node id="220">
        <label>../build.h</label>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
      </node>
      <node id="222">
        <label>stdio.h</label>
      </node>
      <node id="224">
        <label>string.h</label>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="245">
        <label>testopcode.cpp</label>
      </node>
      <node id="258">
        <label>x86context_p.h</label>
      </node>
      <node id="264">
        <label>runtime.cpp</label>
      </node>
      <node id="240">
        <label>asmjit.h</label>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
      </node>
      <node id="247">
        <label>testdummy.cpp</label>
      </node>
      <node id="237">
        <label>assembler.h</label>
        <link refid="assembler.h"/>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
      </node>
      <node id="263">
        <label>assembler.cpp</label>
      </node>
      <node id="253">
        <label>x86.h</label>
      </node>
      <node id="261">
        <label>x86compiler.h</label>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
      </node>
      <node id="255">
        <label>compiler.cpp</label>
      </node>
      <node id="239">
        <label>testsizeof.cpp</label>
      </node>
      <node id="238">
        <label>base.h</label>
        <childnode refid="239" relation="include">
        </childnode>
        <childnode refid="240" relation="include">
        </childnode>
        <childnode refid="249" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
      </node>
      <node id="251">
        <label>winremoteruntime.h</label>
        <childnode refid="252" relation="include">
        </childnode>
      </node>
      <node id="243">
        <label>testx86.cpp</label>
      </node>
      <node id="262">
        <label>x86func.h</label>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
      </node>
      <node id="244">
        <label>genopcode.h</label>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
      </node>
      <node id="256">
        <label>context_p.h</label>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="257" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
      </node>
      <node id="242">
        <label>genblend.h</label>
        <childnode refid="241" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
      </node>
      <node id="257">
        <label>context.cpp</label>
      </node>
      <node id="260">
        <label>x86assembler.h</label>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
      </node>
      <node id="250">
        <label>winremoteruntime.cpp</label>
      </node>
      <node id="248">
        <label>testmem.cpp</label>
      </node>
      <node id="249">
        <label>host.h</label>
        <childnode refid="240" relation="include">
        </childnode>
      </node>
      <node id="252">
        <label>contrib.h</label>
      </node>
      <node id="241">
        <label>benchx86.cpp</label>
      </node>
      <node id="246">
        <label>testcpu.cpp</label>
      </node>
      <node id="254">
        <label>compiler.h</label>
        <childnode refid="238" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
      </node>
      <node id="259">
        <label>x86defs.h</label>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structasmjit_1_1LabelLink" prot="public">asmjit::LabelLink</innerclass>
    <innerclass refid="structasmjit_1_1LabelData" prot="public">asmjit::LabelData</innerclass>
    <innerclass refid="structasmjit_1_1RelocData" prot="public">asmjit::RelocData</innerclass>
    <innerclass refid="structasmjit_1_1BaseAssembler" prot="public">asmjit::BaseAssembler</innerclass>
    <innernamespace refid="namespaceasmjit">asmjit</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMJIT_BASE_ASSEMBLER_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_ASMJIT_BASE_ASSEMBLER_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/codegen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/defs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/error.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/logger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/podlist.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/podvector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/runtime.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/zone.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="26"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_base</highlight></codeline>
<codeline lineno="27"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::LabelLink]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment">//!<sp/>@brief<sp/>Data<sp/>structure<sp/>used<sp/>to<sp/>link<sp/>linked-labels.</highlight></codeline>
<codeline lineno="34" refid="structasmjit_1_1LabelLink" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1LabelLink" kindref="compound" tooltip="Data structure used to link linked-labels.">LabelLink</ref><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Previous<sp/>link.</highlight></codeline>
<codeline lineno="36" refid="structasmjit_1_1LabelLink_1aa70a89483ab7974c8d6f38be988fe902" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1LabelLink" kindref="compound" tooltip="Data structure used to link linked-labels.">LabelLink</ref>*<sp/><ref refid="structasmjit_1_1LabelLink_1aa70a89483ab7974c8d6f38be988fe902" kindref="member" tooltip="Previous link.">prev</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Offset.</highlight></codeline>
<codeline lineno="38" refid="structasmjit_1_1LabelLink_1a940ddce5fddbe2b004e2f1b537637565" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>intptr_t<sp/><ref refid="structasmjit_1_1LabelLink_1a940ddce5fddbe2b004e2f1b537637565" kindref="member" tooltip="Offset.">offset</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Inlined<sp/>displacement.</highlight></codeline>
<codeline lineno="40" refid="structasmjit_1_1LabelLink_1a915938949a8bfafa490b84dd7f10e7c0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>intptr_t<sp/><ref refid="structasmjit_1_1LabelLink_1a915938949a8bfafa490b84dd7f10e7c0" kindref="member" tooltip="Inlined displacement.">displacement</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>RelocId<sp/>if<sp/>link<sp/>must<sp/>be<sp/>absolute<sp/>when<sp/>relocated.</highlight></codeline>
<codeline lineno="42" refid="structasmjit_1_1LabelLink_1aea5469d1188995df1db42cddbe6fbbac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>intptr_t<sp/><ref refid="structasmjit_1_1LabelLink_1aea5469d1188995df1db42cddbe6fbbac" kindref="member" tooltip="RelocId if link must be absolute when relocated.">relocId</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::LabelData]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment">//!<sp/>@brief<sp/>Label<sp/>data.</highlight></codeline>
<codeline lineno="50" refid="structasmjit_1_1LabelData" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1LabelData" kindref="compound" tooltip="Label data.">LabelData</ref><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Label<sp/>offset.</highlight></codeline>
<codeline lineno="52" refid="structasmjit_1_1LabelData_1ab0829525938be864c64e750e1fd8536b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>intptr_t<sp/><ref refid="structasmjit_1_1LabelData_1ab0829525938be864c64e750e1fd8536b" kindref="member" tooltip="Label offset.">offset</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Label<sp/>links<sp/>chain.</highlight></codeline>
<codeline lineno="54" refid="structasmjit_1_1LabelData_1a09d4b779d9d2d893004b9a0a401f172a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1LabelLink" kindref="compound" tooltip="Data structure used to link linked-labels.">LabelLink</ref>*<sp/><ref refid="structasmjit_1_1LabelData_1a09d4b779d9d2d893004b9a0a401f172a" kindref="member" tooltip="Label links chain.">links</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::RelocData]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">//!<sp/>@brief<sp/>Code<sp/>relocation<sp/>data<sp/>(relative<sp/>vs<sp/>absolute<sp/>addresses).</highlight></codeline>
<codeline lineno="62"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="63"><highlight class="comment">//!<sp/>X86/X64:</highlight></codeline>
<codeline lineno="64"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="65"><highlight class="comment">//!<sp/>X86<sp/>architecture<sp/>uses<sp/>32-bit<sp/>absolute<sp/>addressing<sp/>model<sp/>by<sp/>memory<sp/>operands,</highlight></codeline>
<codeline lineno="66"><highlight class="comment">//!<sp/>but<sp/>64-bit<sp/>mode<sp/>uses<sp/>relative<sp/>addressing<sp/>model<sp/>(RIP<sp/>+<sp/>displacement).<sp/>In</highlight></codeline>
<codeline lineno="67"><highlight class="comment">//!<sp/>code<sp/>we<sp/>are<sp/>always<sp/>using<sp/>relative<sp/>addressing<sp/>model<sp/>for<sp/>referencing<sp/>labels</highlight></codeline>
<codeline lineno="68"><highlight class="comment">//!<sp/>and<sp/>embedded<sp/>data.<sp/>In<sp/>32-bit<sp/>mode<sp/>we<sp/>must<sp/>patch<sp/>all<sp/>references<sp/>to<sp/>absolute</highlight></codeline>
<codeline lineno="69"><highlight class="comment">//!<sp/>address<sp/>before<sp/>we<sp/>can<sp/>call<sp/>generated<sp/>function.</highlight></codeline>
<codeline lineno="70" refid="structasmjit_1_1RelocData" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1RelocData" kindref="compound" tooltip="Code relocation data (relative vs absolute addresses).">RelocData</ref><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Type<sp/>of<sp/>relocation.</highlight></codeline>
<codeline lineno="72" refid="structasmjit_1_1RelocData_1afbce897c4d90417dc696484b31e49680" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1RelocData_1afbce897c4d90417dc696484b31e49680" kindref="member" tooltip="Type of relocation.">type</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Size<sp/>of<sp/>relocation<sp/>(4<sp/>or<sp/>8<sp/>bytes).</highlight></codeline>
<codeline lineno="74" refid="structasmjit_1_1RelocData_1aed928308840f333cb6f0b9832bc2a19a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1RelocData_1aed928308840f333cb6f0b9832bc2a19a" kindref="member" tooltip="Size of relocation (4 or 8 bytes).">size</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Offset<sp/>from<sp/>code<sp/>begin<sp/>address.</highlight></codeline>
<codeline lineno="77" refid="structasmjit_1_1RelocData_1affb24f7e31034cb5e5dbe1c0a004e64d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/><ref refid="structasmjit_1_1RelocData_1affb24f7e31034cb5e5dbe1c0a004e64d" kindref="member" tooltip="Offset from code begin address.">from</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Relative<sp/>displacement<sp/>from<sp/>code<sp/>begin<sp/>address<sp/>(not<sp/>to<sp/>@c<sp/>offset)</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/>//!<sp/>or<sp/>absolute<sp/>address.</highlight></codeline>
<codeline lineno="81" refid="structasmjit_1_1RelocData_1a43f882f9050e3c6ac797de4918ca0361" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/><ref refid="structasmjit_1_1RelocData_1a43f882f9050e3c6ac797de4918ca0361" kindref="member" tooltip="Relative displacement from code begin address (not to offset) or absolute address.">data</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseAssembler]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">//!<sp/>@brief<sp/>Base<sp/>assembler.</highlight></codeline>
<codeline lineno="89"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="90"><highlight class="comment">//!<sp/>This<sp/>class<sp/>implements<sp/>core<sp/>setialization<sp/>API<sp/>only.<sp/>The<sp/>platform<sp/>specific</highlight></codeline>
<codeline lineno="91"><highlight class="comment">//!<sp/>methods<sp/>and<sp/>intrinsics<sp/>is<sp/>implemented<sp/>by<sp/>derived<sp/>classes.</highlight></codeline>
<codeline lineno="92"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="93"><highlight class="comment">//!<sp/>@sa<sp/>BaseCompiler.</highlight></codeline>
<codeline lineno="94" refid="structasmjit_1_1BaseAssembler" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseAssembler" kindref="compound" tooltip="Base assembler.">BaseAssembler</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CodeGen" kindref="compound" tooltip="Abstract class inherited by Assembler and Compiler.">CodeGen</ref><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(<ref refid="structasmjit_1_1BaseAssembler" kindref="compound" tooltip="Base assembler.">BaseAssembler</ref>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>BaseAssembler<sp/>instance.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1BaseAssembler" kindref="compound" tooltip="Base assembler.">BaseAssembler</ref>(<ref refid="structasmjit_1_1BaseRuntime" kindref="compound" tooltip="Base runtime.">BaseRuntime</ref>*<sp/>runtime);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Destroy<sp/>the<sp/>@ref<sp/>BaseAssembler<sp/>instance.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a04edcae62e921dd125c9c67d4d042d8e" kindref="member" tooltip="Destroy the BaseAssembler instance.">~BaseAssembler</ref>();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Clear<sp/>/<sp/>Reset]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>everything,<sp/>but<sp/>not<sp/>deallocate<sp/>buffers.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a9473ddc146797832aac3aa21e1948f8b" kindref="member" tooltip="Clear everything, but not deallocate buffers.">clear</ref>();</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>everything<sp/>(means<sp/>also<sp/>to<sp/>free<sp/>all<sp/>buffers).</highlight></codeline>
<codeline lineno="113"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a44e1d6769b5e0110570bde93e6780b99" kindref="member" tooltip="Reset everything (means also to free all buffers).">reset</ref>();</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Called<sp/>by<sp/>clear()<sp/>and<sp/>reset()<sp/>to<sp/>clear<sp/>all<sp/>data<sp/>related<sp/>to<sp/>derived</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/>//!<sp/>class<sp/>implementation.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a88b0276f3f05f55665f2d919bb1660bb" kindref="member" tooltip="Called by clear() and reset() to clear all data related to derived class implementation.">_purge</ref>();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Buffer]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>capacity<sp/>of<sp/>the<sp/>code<sp/>buffer.</highlight></codeline>
<codeline lineno="123" refid="structasmjit_1_1BaseAssembler_1a014dad0a0895bc1180cc8dea1bdcbac9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a014dad0a0895bc1180cc8dea1bdcbac9" kindref="member" tooltip="Get capacity of the code buffer.">getCapacity</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>number<sp/>of<sp/>remaining<sp/>bytes<sp/>(space<sp/>between<sp/>cursor<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/>//!<sp/>end<sp/>of<sp/>the<sp/>buffer).</highlight></codeline>
<codeline lineno="129" refid="structasmjit_1_1BaseAssembler_1abdaca957b0afeb3188d4f67a4f4bab8c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1abdaca957b0afeb3188d4f67a4f4bab8c" kindref="member" tooltip="Get the number of remaining bytes (space between cursor and the end of the buffer).">getRemainingSpace</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1ad9d44d8890ff85a6d2a8a4703c4294c5" kindref="member" tooltip="The current position in code _buffer.">_cursor</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>buffer.</highlight></codeline>
<codeline lineno="134" refid="structasmjit_1_1BaseAssembler_1afd7f176edcad814fa49cf1b8f73cff50" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint8_t*<sp/><ref refid="structasmjit_1_1BaseAssembler_1afd7f176edcad814fa49cf1b8f73cff50" kindref="member" tooltip="Get buffer.">getBuffer</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>end<sp/>of<sp/>the<sp/>buffer<sp/>(points<sp/>to<sp/>the<sp/>first<sp/>byte<sp/>that<sp/>is<sp/>outside).</highlight></codeline>
<codeline lineno="139" refid="structasmjit_1_1BaseAssembler_1a70fc306a275e245593310256eda49e9b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint8_t*<sp/><ref refid="structasmjit_1_1BaseAssembler_1a70fc306a275e245593310256eda49e9b" kindref="member" tooltip="Get the end of the buffer (points to the first byte that is outside).">getEnd</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>current<sp/>position<sp/>in<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="144" refid="structasmjit_1_1BaseAssembler_1a68d96442996aead68a55393b6fa21703" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint8_t*<sp/><ref refid="structasmjit_1_1BaseAssembler_1a68d96442996aead68a55393b6fa21703" kindref="member" tooltip="Get the current position in the buffer.">getCursor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1ad9d44d8890ff85a6d2a8a4703c4294c5" kindref="member" tooltip="The current position in code _buffer.">_cursor</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>the<sp/>current<sp/>position<sp/>in<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="149" refid="structasmjit_1_1BaseAssembler_1abad761abd9733070f7fc6085082ebdeb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1abad761abd9733070f7fc6085082ebdeb" kindref="member" tooltip="Set the current position in the buffer.">setCursor</ref>(uint8_t*<sp/>cursor)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(cursor<sp/>&gt;=<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>&amp;&amp;<sp/>cursor<sp/>&lt;=<sp/><ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseAssembler_1ad9d44d8890ff85a6d2a8a4703c4294c5" kindref="member" tooltip="The current position in code _buffer.">_cursor</ref><sp/>=<sp/>cursor;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>current<sp/>offset<sp/>in<sp/>the<sp/>buffer<sp/>(&lt;code&gt;_cursor<sp/>-<sp/>_buffer&lt;/code&gt;).</highlight></codeline>
<codeline lineno="155" refid="structasmjit_1_1BaseAssembler_1a3f019fb35781fb3f45b791387828ada3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a3f019fb35781fb3f45b791387828ada3" kindref="member" tooltip="Get the current offset in the buffer (_cursor - _buffer).">getOffset</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1ad9d44d8890ff85a6d2a8a4703c4294c5" kindref="member" tooltip="The current position in code _buffer.">_cursor</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>the<sp/>current<sp/>offset<sp/>in<sp/>the<sp/>buffer<sp/>to<sp/>@a<sp/>offset<sp/>and<sp/>get<sp/>the</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>//!<sp/>previous<sp/>offset<sp/>value.</highlight></codeline>
<codeline lineno="161" refid="structasmjit_1_1BaseAssembler_1accf0e32f66a2a9f6ad01c0a037c84950" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1accf0e32f66a2a9f6ad01c0a037c84950" kindref="member" tooltip="Set the current offset in the buffer to offset and get the previous offset value.">setOffset</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(offset<sp/>&lt;<sp/><ref refid="structasmjit_1_1BaseAssembler_1a014dad0a0895bc1180cc8dea1bdcbac9" kindref="member" tooltip="Get capacity of the code buffer.">getCapacity</ref>());</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>oldOffset<sp/>=<sp/>(size_t)(<ref refid="structasmjit_1_1BaseAssembler_1ad9d44d8890ff85a6d2a8a4703c4294c5" kindref="member" tooltip="The current position in code _buffer.">_cursor</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseAssembler_1ad9d44d8890ff85a6d2a8a4703c4294c5" kindref="member" tooltip="The current position in code _buffer.">_cursor</ref><sp/>=<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>offset;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>oldOffset;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Grow<sp/>the<sp/>internal<sp/>buffer.</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/>//!<sp/>The<sp/>internal<sp/>buffer<sp/>will<sp/>grow<sp/>at<sp/>least<sp/>by<sp/>@a<sp/>n<sp/>bytes<sp/>so<sp/>@a<sp/>n<sp/>bytes</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/>//!<sp/>can<sp/>be<sp/>added<sp/>to<sp/>it.<sp/>If<sp/>@a<sp/>n<sp/>is<sp/>zero<sp/>or<sp/>&lt;code&gt;getOffset()<sp/>+<sp/>n&lt;/code&gt;</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/>//!<sp/>is<sp/>not<sp/>greater<sp/>than<sp/>the<sp/>current<sp/>capacity<sp/>of<sp/>the<sp/>buffer<sp/>this<sp/>function</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/>//!<sp/>won&apos;t<sp/>do<sp/>anything.</highlight></codeline>
<codeline lineno="175"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a927cad7e8b3831394b39c870a4c04ad0" kindref="member" tooltip="Grow the internal buffer.">_grow</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reserve<sp/>the<sp/>internal<sp/>buffer<sp/>to<sp/>at<sp/>least<sp/>@a<sp/>n<sp/>bytes.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a5c0f2e4a9e73a9738b8703ad5b0f67b1" kindref="member" tooltip="Reserve the internal buffer to at least n bytes.">_reserve</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>byte<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="181" refid="structasmjit_1_1BaseAssembler_1a7a36a0a0a374d2bd504d4f2b76eaac3b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint8_t<sp/><ref refid="structasmjit_1_1BaseAssembler_1a7a36a0a0a374d2bd504d4f2b76eaac3b" kindref="member" tooltip="Set byte at position pos.">getByteAt</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>1<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>word<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="187" refid="structasmjit_1_1BaseAssembler_1aa7d786dfbbf2e2ccc88b9185014d7101" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint16_t<sp/><ref refid="structasmjit_1_1BaseAssembler_1aa7d786dfbbf2e2ccc88b9185014d7101" kindref="member" tooltip="Set word at position pos.">getWordAt</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>2<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint16_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>dword<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="193" refid="structasmjit_1_1BaseAssembler_1ac424a1e029f09a6557914970cdebbad7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseAssembler_1ac424a1e029f09a6557914970cdebbad7" kindref="member" tooltip="Set dword at position pos.">getDWordAt</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>4<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>qword<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="199" refid="structasmjit_1_1BaseAssembler_1a02181697b851e272e0d50f7171580614" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint64_t<sp/><ref refid="structasmjit_1_1BaseAssembler_1a02181697b851e272e0d50f7171580614" kindref="member" tooltip="Set qword at position pos.">getQWordAt</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>8<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint64_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>int32_t<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="205" refid="structasmjit_1_1BaseAssembler_1a353f3e0228cb6c544ecd0a05e07cc077" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int32_t<sp/><ref refid="structasmjit_1_1BaseAssembler_1a353f3e0228cb6c544ecd0a05e07cc077" kindref="member" tooltip="Set int32_t at position pos.">getInt32At</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>4<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">int32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>uint32_t<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="211" refid="structasmjit_1_1BaseAssembler_1adcd890caadc41802d19ef1e430136f94" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseAssembler_1adcd890caadc41802d19ef1e430136f94" kindref="member" tooltip="Set uint32_t at position pos.">getUInt32At</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>4<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>byte<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="217" refid="structasmjit_1_1BaseAssembler_1a519af6a96788ff18e0f07739f8ff2f82" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a519af6a96788ff18e0f07739f8ff2f82" kindref="member" tooltip="Set byte at position pos.">setByteAt</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/>uint8_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>1<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>word<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="223" refid="structasmjit_1_1BaseAssembler_1a87539f4f474e101ae2bbc7e7b814ef48" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a87539f4f474e101ae2bbc7e7b814ef48" kindref="member" tooltip="Set word at position pos.">setWordAt</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/>uint16_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>2<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint16_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>dword<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="229" refid="structasmjit_1_1BaseAssembler_1ac582f476927910ba8f35d1a2a3be4d9d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1ac582f476927910ba8f35d1a2a3be4d9d" kindref="member" tooltip="Set dword at position pos.">setDWordAt</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/>uint32_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>4<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>qword<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="235" refid="structasmjit_1_1BaseAssembler_1ac21727fcd69969a4995c05841c7a1375" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1ac21727fcd69969a4995c05841c7a1375" kindref="member" tooltip="Set qword at position pos.">setQWordAt</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/>uint64_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>8<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint64_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>int32_t<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="241" refid="structasmjit_1_1BaseAssembler_1aa4f6f950c09dfe97306c4370279093cb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1aa4f6f950c09dfe97306c4370279093cb" kindref="member" tooltip="Set int32_t at position pos.">setInt32At</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/>int32_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>4<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">int32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>uint32_t<sp/>at<sp/>position<sp/>@a<sp/>pos.</highlight></codeline>
<codeline lineno="247" refid="structasmjit_1_1BaseAssembler_1a07c171719b88c0e4a9afd7dd0b1bcad4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a07c171719b88c0e4a9afd7dd0b1bcad4" kindref="member" tooltip="Set uint32_t at position pos.">setUInt32At</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos,<sp/>uint32_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(pos<sp/>+<sp/>4<sp/>&lt;=<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)(<ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref><sp/>-<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref><sp/>+<sp/>pos)<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[GetCodeSize]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>current<sp/>offset<sp/>in<sp/>buffer<sp/>(same<sp/>as<sp/>&lt;code&gt;getOffset()<sp/>+<sp/>getTramplineSize()&lt;/code&gt;).</highlight></codeline>
<codeline lineno="257" refid="structasmjit_1_1BaseAssembler_1acea24f6a20a4abb52af3d0cdfb2b3d9d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1acea24f6a20a4abb52af3d0cdfb2b3d9d" kindref="member" tooltip="Get current offset in buffer (same as getOffset() + getTramplineSize()).">getCodeSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a3f019fb35781fb3f45b791387828ada3" kindref="member" tooltip="Get the current offset in the buffer (_cursor - _buffer).">getOffset</ref>()<sp/>+<sp/><ref refid="structasmjit_1_1BaseAssembler_1aa3140d2eaa3c02f1bb2759b0ec85c2e6" kindref="member" tooltip="Get size of all possible trampolines needed to successfuly generate relative jumps to absolute addres...">getTrampolineSize</ref>();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[GetTrampolineSize]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>size<sp/>of<sp/>all<sp/>possible<sp/>trampolines<sp/>needed<sp/>to<sp/>successfuly<sp/>generate</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/>//!<sp/>relative<sp/>jumps<sp/>to<sp/>absolute<sp/>addresses.<sp/>This<sp/>value<sp/>is<sp/>only<sp/>non-zero<sp/>if<sp/>jmp</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/>//!<sp/>of<sp/>call<sp/>instructions<sp/>were<sp/>used<sp/>with<sp/>immediate<sp/>operand<sp/>(this<sp/>means<sp/>jumping</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/>//!<sp/>or<sp/>calling<sp/>an<sp/>absolute<sp/>address<sp/>directly).</highlight></codeline>
<codeline lineno="269" refid="structasmjit_1_1BaseAssembler_1aa3140d2eaa3c02f1bb2759b0ec85c2e6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1aa3140d2eaa3c02f1bb2759b0ec85c2e6" kindref="member" tooltip="Get size of all possible trampolines needed to successfuly generate relative jumps to absolute addres...">getTrampolineSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1abf44fdf0fdc0436b8fc7aa2b5bbbff7a" kindref="member" tooltip="Size of possible trampolines.">_trampolineSize</ref>;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Label]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>count<sp/>of<sp/>labels<sp/>created.</highlight></codeline>
<codeline lineno="278" refid="structasmjit_1_1BaseAssembler_1a1f798b95035873c7395546c6f21e764f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a1f798b95035873c7395546c6f21e764f" kindref="member" tooltip="Get count of labels created.">getLabelsCount</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a0d432a605983c347cf9c7aade8652918" kindref="member" tooltip="Labels data.">_labels</ref>.<ref refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" kindref="member" tooltip="Get length.">getLength</ref>();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>@a<sp/>label<sp/>is<sp/>created.</highlight></codeline>
<codeline lineno="283" refid="structasmjit_1_1BaseAssembler_1a2e915489f3e3d70912ec69aebc405479" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a2e915489f3e3d70912ec69aebc405479" kindref="member" tooltip="Get whether label is created.">isLabelCreated</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(label.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>())<sp/>&lt;<sp/><ref refid="structasmjit_1_1BaseAssembler_1a0d432a605983c347cf9c7aade8652918" kindref="member" tooltip="Labels data.">_labels</ref>.<ref refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" kindref="member" tooltip="Get length.">getLength</ref>();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>@ref<sp/>LabelData<sp/>by<sp/>@a<sp/>label.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1LabelData" kindref="compound" tooltip="Label data.">LabelData</ref>*<sp/>getLabelData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getLabelDataById(label.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>());</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>@ref<sp/>LabelData<sp/>by<sp/>@a<sp/>id.</highlight></codeline>
<codeline lineno="297"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>LabelData*<sp/>getLabelDataById(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/><ref refid="structasmjit_1_1BaseAssembler_1a0d432a605983c347cf9c7aade8652918" kindref="member" tooltip="Labels data.">_labels</ref>.<ref refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" kindref="member" tooltip="Get length.">getLength</ref>());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">LabelData*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;<ref refid="structasmjit_1_1BaseAssembler_1a0d432a605983c347cf9c7aade8652918" kindref="member" tooltip="Labels data.">_labels</ref>[id]);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>labels<sp/>for<sp/>other<sp/>code<sp/>generator<sp/>(@ref<sp/>Compiler).</highlight></codeline>
<codeline lineno="307"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/>_registerIndexedLabels(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>and<sp/>initialize<sp/>a<sp/>new<sp/>label.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/>_newLabel(Label*<sp/>dst);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>New<sp/>LabelLink<sp/>instance.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>LabelLink*<sp/>_newLabelLink();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>and<sp/>return<sp/>new<sp/>label.</highlight></codeline>
<codeline lineno="320" refid="structasmjit_1_1BaseAssembler_1ac4ff0a9995f59f13d62c015acae7ac89" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref><sp/><ref refid="structasmjit_1_1BaseAssembler_1ac4ff0a9995f59f13d62c015acae7ac89" kindref="member" tooltip="Create and return new label.">newLabel</ref>()<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref><sp/>result(NoInit);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>_newLabel(&amp;result);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bind<sp/>label<sp/>to<sp/>the<sp/>current<sp/>offset<sp/>(virtual).</highlight></codeline>
<codeline lineno="327"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1ad3a5c64efbaa7dca4166a45630f304f7" kindref="member" tooltip="Bind label to the current offset (virtual).">_bind</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bind<sp/>label<sp/>to<sp/>the<sp/>current<sp/>offset<sp/>(virtual).</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Label<sp/>can<sp/>be<sp/>bound<sp/>only<sp/>once!</highlight></codeline>
<codeline lineno="332" refid="structasmjit_1_1BaseAssembler_1aa84ba41d616921d8ca7f3087023afce1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1aa84ba41d616921d8ca7f3087023afce1" kindref="member" tooltip="Bind label to the current offset (virtual).">bind</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseAssembler_1ad3a5c64efbaa7dca4166a45630f304f7" kindref="member" tooltip="Bind label to the current offset (virtual).">_bind</ref>(label);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Embed]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Embed<sp/>data<sp/>into<sp/>the<sp/>code<sp/>buffer.</highlight></codeline>
<codeline lineno="341"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>uint32_t<sp/>size);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Align]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Align<sp/>target<sp/>buffer<sp/>to<sp/>@a<sp/>m<sp/>bytes.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/>//!<sp/>Typical<sp/>usage<sp/>of<sp/>this<sp/>is<sp/>to<sp/>align<sp/>labels<sp/>at<sp/>start<sp/>of<sp/>the<sp/>inner<sp/>loops.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/>//!<sp/>Inserts<sp/>@c<sp/>nop()<sp/>instructions<sp/>or<sp/>CPU<sp/>optimized<sp/>NOPs.</highlight></codeline>
<codeline lineno="352" refid="structasmjit_1_1BaseAssembler_1a7834000ab163eeb416824504c728655e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a7834000ab163eeb416824504c728655e" kindref="member" tooltip="Align target buffer to m bytes.">align</ref>(uint32_t<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1aceb100955bcb01645a1975369cd8ab3d" kindref="member" tooltip="Align target buffer to m bytes (virtual).">_align</ref>(m);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Align<sp/>target<sp/>buffer<sp/>to<sp/>@a<sp/>m<sp/>bytes<sp/>(virtual).</highlight></codeline>
<codeline lineno="357"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1aceb100955bcb01645a1975369cd8ab3d" kindref="member" tooltip="Align target buffer to m bytes (virtual).">_align</ref>(uint32_t<sp/>m)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Reloc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Simplifed<sp/>version<sp/>of<sp/>@c<sp/>relocCode()<sp/>method<sp/>designed<sp/>for<sp/>JIT.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="366" refid="structasmjit_1_1BaseAssembler_1aca29847661b4757f3739cda1eff70e95" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1aca29847661b4757f3739cda1eff70e95" kindref="member" tooltip="Simplifed version of relocCode() method designed for JIT.">relocCode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1aa05de560f2701e803832407978d63194" kindref="member" tooltip="Reloc code (virtual).">_relocCode</ref>(dst,<sp/>static_cast&lt;Ptr&gt;((uintptr_t)dst));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Relocate<sp/>code<sp/>to<sp/>a<sp/>given<sp/>address<sp/>@a<sp/>dst.</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/>//!<sp/>@param<sp/>dst<sp/>Where<sp/>the<sp/>relocated<sp/>code<sp/>should<sp/>me<sp/>stored.<sp/>The<sp/>pointer<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/>//!<sp/>address<sp/>returned<sp/>by<sp/>virtual<sp/>memory<sp/>allocator<sp/>or<sp/>your<sp/>own<sp/>address<sp/>if<sp/>you</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/><sp/>//!<sp/>want<sp/>only<sp/>to<sp/>store<sp/>the<sp/>code<sp/>for<sp/>later<sp/>reuse<sp/>(or<sp/>load,<sp/>etc...).</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/><sp/>//!<sp/>@param<sp/>addressBase<sp/>Base<sp/>address<sp/>used<sp/>for<sp/>relocation.<sp/>When<sp/>using<sp/>JIT<sp/>code</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/>//!<sp/>generation,<sp/>this<sp/>will<sp/>be<sp/>the<sp/>same<sp/>as<sp/>@a<sp/>dst,<sp/>only<sp/>casted<sp/>to<sp/>system</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/>//!<sp/>integer<sp/>type.<sp/>But<sp/>when<sp/>generating<sp/>code<sp/>for<sp/>remote<sp/>process<sp/>then<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/>//!<sp/>can<sp/>be<sp/>different.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/>//!<sp/>@retval<sp/>The<sp/>bytes<sp/>used.<sp/>Code-generator<sp/>can<sp/>create<sp/>trampolines<sp/>which<sp/>are</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/>//!<sp/>used<sp/>when<sp/>calling<sp/>other<sp/>functions<sp/>inside<sp/>the<sp/>JIT<sp/>code.<sp/>However,<sp/>these</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/>//!<sp/>trampolines<sp/>can<sp/>be<sp/>unused<sp/>so<sp/>the<sp/>relocCode()<sp/>returns<sp/>the<sp/>exact<sp/>size<sp/>needed</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/>//!<sp/>for<sp/>the<sp/>function.</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/>//!<sp/>A<sp/>given<sp/>buffer<sp/>will<sp/>be<sp/>overwritten,<sp/>to<sp/>get<sp/>number<sp/>of<sp/>bytes<sp/>required<sp/>use</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/>//!<sp/>@c<sp/>getCodeSize().</highlight></codeline>
<codeline lineno="387" refid="structasmjit_1_1BaseAssembler_1a24f2b63ad71b926c53b267e56582c0fb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a24f2b63ad71b926c53b267e56582c0fb" kindref="member" tooltip="Relocate code to a given address dst.">relocCode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>base)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1aa05de560f2701e803832407978d63194" kindref="member" tooltip="Reloc code (virtual).">_relocCode</ref>(dst,<sp/>base);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reloc<sp/>code<sp/>(virtual).</highlight></codeline>
<codeline lineno="392"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1aa05de560f2701e803832407978d63194" kindref="member" tooltip="Reloc code (virtual).">_relocCode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>base)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Make]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1BaseAssembler_1ace12d41f06c429a957dc4bd4dd14df3e" kindref="member" tooltip="Make is a convenience method to make and relocate the current code into the associated runtime...">make</ref>();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Emit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Emit<sp/>an<sp/>instruction.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a60de9faf6ee0db06d416085299149969" kindref="member" tooltip="Emit an instruction.">emit</ref>(uint32_t<sp/>code);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="407"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a60de9faf6ee0db06d416085299149969" kindref="member" tooltip="Emit an instruction.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="409"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a60de9faf6ee0db06d416085299149969" kindref="member" tooltip="Emit an instruction.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="411"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a60de9faf6ee0db06d416085299149969" kindref="member" tooltip="Emit an instruction.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="413" refid="structasmjit_1_1BaseAssembler_1aba3894dfb3dc0297a897d0388a4c7fe9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1aba3894dfb3dc0297a897d0388a4c7fe9" kindref="member">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o3)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1acfe8b34d536e58e0197bb9de6d0409f9" kindref="member" tooltip="Emit an instruction (virtual).">_emit</ref>(code,<sp/>o0,<sp/>o1,<sp/>o2,<sp/>o3);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Emit<sp/>an<sp/>instruction<sp/>with<sp/>integer<sp/>immediate<sp/>operand.</highlight></codeline>
<codeline lineno="418"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a60de9faf6ee0db06d416085299149969" kindref="member" tooltip="Emit an instruction.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o0);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="420"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a60de9faf6ee0db06d416085299149969" kindref="member" tooltip="Emit an instruction.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o1);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="422"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a60de9faf6ee0db06d416085299149969" kindref="member" tooltip="Emit an instruction.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o2);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="424"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1a60de9faf6ee0db06d416085299149969" kindref="member" tooltip="Emit an instruction.">emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o3);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Emit<sp/>an<sp/>instruction<sp/>(virtual).</highlight></codeline>
<codeline lineno="427"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1acfe8b34d536e58e0197bb9de6d0409f9" kindref="member" tooltip="Emit an instruction (virtual).">_emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o3)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Buffer<sp/>where<sp/>the<sp/>code<sp/>is<sp/>emitted<sp/>(either<sp/>live<sp/>or<sp/>temporary).</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>is<sp/>actually<sp/>the<sp/>base<sp/>pointer<sp/>of<sp/>the<sp/>buffer,<sp/>to<sp/>get<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/>//!<sp/>position<sp/>(cursor)<sp/>look<sp/>at<sp/>the<sp/>@c<sp/>_cursor<sp/>member.</highlight></codeline>
<codeline lineno="437" refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t*<sp/><ref refid="structasmjit_1_1BaseAssembler_1a76e3f3c869dd14619eb27b5989b2bcf4" kindref="member" tooltip="Buffer where the code is emitted (either live or temporary).">_buffer</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>The<sp/>end<sp/>of<sp/>the<sp/>buffer<sp/>(points<sp/>to<sp/>the<sp/>first<sp/>invalid<sp/>byte).</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>//!<sp/>The<sp/>end<sp/>of<sp/>the<sp/>buffer<sp/>is<sp/>calculated<sp/>as<sp/>&lt;code&gt;_buffer<sp/>+<sp/>size&lt;/code&gt;.</highlight></codeline>
<codeline lineno="441" refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t*<sp/><ref refid="structasmjit_1_1BaseAssembler_1afa99ede2f1e862ef77cbe5e8e34fafd4" kindref="member" tooltip="The end of the buffer (points to the first invalid byte).">_end</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>The<sp/>current<sp/>position<sp/>in<sp/>code<sp/>@c<sp/>_buffer.</highlight></codeline>
<codeline lineno="443" refid="structasmjit_1_1BaseAssembler_1ad9d44d8890ff85a6d2a8a4703c4294c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t*<sp/><ref refid="structasmjit_1_1BaseAssembler_1ad9d44d8890ff85a6d2a8a4703c4294c5" kindref="member" tooltip="The current position in code _buffer.">_cursor</ref>;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Size<sp/>of<sp/>possible<sp/>trampolines.</highlight></codeline>
<codeline lineno="446" refid="structasmjit_1_1BaseAssembler_1abf44fdf0fdc0436b8fc7aa2b5bbbff7a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseAssembler_1abf44fdf0fdc0436b8fc7aa2b5bbbff7a" kindref="member" tooltip="Size of possible trampolines.">_trampolineSize</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Inline<sp/>comment<sp/>that<sp/>will<sp/>be<sp/>logged<sp/>by<sp/>the<sp/>next<sp/>instruction<sp/>and</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/><sp/>//!<sp/>set<sp/>to<sp/>NULL.</highlight></codeline>
<codeline lineno="450" refid="structasmjit_1_1BaseAssembler_1a7e1d16799822fbe74887cbe830046af5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1BaseAssembler_1a7e1d16799822fbe74887cbe830046af5" kindref="member" tooltip="Inline comment that will be logged by the next instruction and set to NULL.">_comment</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Linked<sp/>list<sp/>of<sp/>unused<sp/>links<sp/>(@c<sp/>LabelLink*<sp/>structures)</highlight></codeline>
<codeline lineno="452" refid="structasmjit_1_1BaseAssembler_1acd0096db6e6bcef8bb582bbe716db1f3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1LabelLink" kindref="compound" tooltip="Data structure used to link linked-labels.">LabelLink</ref>*<sp/><ref refid="structasmjit_1_1BaseAssembler_1acd0096db6e6bcef8bb582bbe716db1f3" kindref="member" tooltip="Linked list of unused links (LabelLink* structures)">_unusedLinks</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Labels<sp/>data.</highlight></codeline>
<codeline lineno="455" refid="structasmjit_1_1BaseAssembler_1a0d432a605983c347cf9c7aade8652918" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1PodVector" kindref="compound">PodVector&lt;LabelData&gt;</ref><sp/><ref refid="structasmjit_1_1BaseAssembler_1a0d432a605983c347cf9c7aade8652918" kindref="member" tooltip="Labels data.">_labels</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Relocations<sp/>data.</highlight></codeline>
<codeline lineno="457" refid="structasmjit_1_1BaseAssembler_1affeabe44cabed328b9dcc6a0096e97d5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1PodVector" kindref="compound">PodVector&lt;RelocData&gt;</ref><sp/><ref refid="structasmjit_1_1BaseAssembler_1affeabe44cabed328b9dcc6a0096e97d5" kindref="member" tooltip="Relocations data.">_relocData</ref>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">};</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="460"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="461"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Defined-Later]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="structasmjit_1_1Label_1a49bb35be18aae2cd1d75de225c354edd" refkind="member"><highlight class="normal">ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" kindref="member" tooltip="Create new, unassociated label.">Label::Label</ref>(BaseAssembler&amp;<sp/>a)<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>a._newLabel(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_ASMJIT_BASE_ASSEMBLER_H</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/base/assembler.h"/>
  </compounddef>
</doxygen>
