<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="x86compiler_8cpp" kind="file">
    <compoundname>x86compiler.cpp</compoundname>
    <includes refid="build_8h" local="yes">../build.h</includes>
    <incdepgraph>
      <node id="2198">
        <label>../base/globals.h</label>
        <childnode refid="2191" relation="include">
        </childnode>
        <childnode refid="2199" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
      </node>
      <node id="2200">
        <label>../base/apiend.h</label>
      </node>
      <node id="2201">
        <label>stdarg.h</label>
      </node>
      <node id="2203">
        <label>stdint.h</label>
      </node>
      <node id="2194">
        <label>stdlib.h</label>
      </node>
      <node id="2199">
        <label>../base/apibegin.h</label>
        <childnode refid="2191" relation="include">
        </childnode>
      </node>
      <node id="2196">
        <label>../base/defs.h</label>
        <childnode refid="2197" relation="include">
        </childnode>
        <childnode refid="2199" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
      </node>
      <node id="2204">
        <label>limits.h</label>
      </node>
      <node id="2202">
        <label>new</label>
      </node>
      <node id="2190">
        <label>x86compiler.cpp</label>
        <link refid="x86compiler.cpp"/>
        <childnode refid="2191" relation="include">
        </childnode>
      </node>
      <node id="2192">
        <label>config.h</label>
      </node>
      <node id="2197">
        <label>../base/intutil.h</label>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2199" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
      </node>
      <node id="2191">
        <label>../build.h</label>
        <childnode refid="2192" relation="include">
        </childnode>
        <childnode refid="2193" relation="include">
        </childnode>
        <childnode refid="2194" relation="include">
        </childnode>
        <childnode refid="2195" relation="include">
        </childnode>
        <childnode refid="2202" relation="include">
        </childnode>
        <childnode refid="2203" relation="include">
        </childnode>
        <childnode refid="2204" relation="include">
        </childnode>
      </node>
      <node id="2193">
        <label>stdio.h</label>
      </node>
      <node id="2195">
        <label>string.h</label>
        <childnode refid="2196" relation="include">
        </childnode>
        <childnode refid="2198" relation="include">
        </childnode>
        <childnode refid="2201" relation="include">
        </childnode>
        <childnode refid="2199" relation="include">
        </childnode>
        <childnode refid="2200" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="x86compiler_8cpp_1a4885b81a3643f489bcb59697d21cb21d" prot="public" static="no">
        <name>ASMJIT_EXPORTS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.cpp" line="8" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.cpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Export]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASMJIT_EXPORTS</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../build.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)<sp/>||<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/intutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86assembler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86compiler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86context_p.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x86x64<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64CallNode<sp/>-<sp/>Prototype]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1ae173bd09522689cd98a3dfd8b07c5e31" kindref="member" tooltip="Set function prototype.">X86X64CallNode::setPrototype</ref>(uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncPrototype&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1aa686f5f373cfd59ba4c8854f700475f2" kindref="member" tooltip="X86 declaration.">_x86Decl</ref>.<ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1acd36f14135ae05941744899d5f08b7d7" kindref="member" tooltip="Set function prototype.">setPrototype</ref>(conv,<sp/>p);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64CallNode<sp/>-<sp/>Arg<sp/>/<sp/>Ret]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a5857c00821fd51bf5df7761ac7dcb281" kindref="member" tooltip="Set argument at i to op.">X86X64CallNode::_setArg</ref>(uint32_t<sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((i<sp/>&amp;<sp/>~kFuncArgHi)<sp/>&gt;=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1aa686f5f373cfd59ba4c8854f700475f2" kindref="member" tooltip="X86 declaration.">_x86Decl</ref>.<ref refid="structasmjit_1_1FuncDecl_1a256dfc25b9980a7571c13c4dd6d31e8e" kindref="member" tooltip="Get count of function arguments.">getArgCount</ref>())</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CallNode_1aaaee075a448df1205c0440fdf7ce6485" kindref="member" tooltip="Arguments.">_args</ref>[i]<sp/>=<sp/>op;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode_1a4648cf2ff956eed15037f8848075e819" kindref="member" tooltip="Set return at i to op.">X86X64CallNode::_setRet</ref>(uint32_t<sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/>2)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CallNode_1ae448fd3373867a476abeae2ac8cea2d4" kindref="member" tooltip="Return.">_ret</ref>[i]<sp/>=<sp/>op;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Compiler<sp/>-<sp/>Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">X86X64Compiler::X86X64Compiler(BaseRuntime*<sp/>runtime)<sp/>:<sp/>BaseCompiler(runtime)<sp/>{}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a96590105a115514f8a02c1c2f792f" kindref="member" tooltip="Destroy the X86X64Compiler instance.">X86X64Compiler::~X86X64Compiler</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Compiler<sp/>-<sp/>Inst]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>compiler<sp/>instruction<sp/>item<sp/>size<sp/>without<sp/>operands<sp/>assigned.</highlight></codeline>
<codeline lineno="67"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>X86X64Compiler_getInstSize(uint32_t<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(code,<sp/>_kInstJbegin,<sp/>_kInstJend))<sp/>?<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(JumpNode)<sp/>:<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(InstNode);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>InstNode*<sp/>X86X64Compiler_newInst(X86X64Compiler*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p,<sp/>uint32_t<sp/>code,<sp/>uint32_t<sp/>options,<sp/>Operand*<sp/>opList,<sp/>uint32_t<sp/>opCount)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(code,<sp/>_kInstJbegin,<sp/>_kInstJend))<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>JumpNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(p)<sp/>JumpNode(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>code,<sp/>options,<sp/>opList,<sp/>opCount);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>TargetNode*<sp/>jTarget<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getTargetById(opList[0].getId());</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;addFlags(code<sp/>==<sp/>kInstJmp<sp/>?<sp/>kNodeFlagIsJmp<sp/>|<sp/>kNodeFlagIsTaken<sp/>:<sp/>kNodeFlagIsJcc);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;_target<sp/>=<sp/>jTarget;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;_jumpNext<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">JumpNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(jTarget-&gt;_from);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>jTarget-&gt;_from<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>jTarget-&gt;addNumRefs();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>&apos;jmp&apos;<sp/>is<sp/>always<sp/>taken,<sp/>conditional<sp/>jump<sp/>can<sp/>contain<sp/>hint,<sp/>we<sp/>detect<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>kInstJmp)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;addFlags(kNodeFlagIsTaken);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(options<sp/>&amp;<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4df01d78f89add2e942ec79ad211a4f5" kindref="member" tooltip="Condition is likely to be taken (instruction).">kInstOptionTaken</ref>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;addFlags(kNodeFlagIsTaken);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;addOptions(options);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">(p)<sp/>InstNode(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>code,<sp/>options,<sp/>opList,<sp/>opCount);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;addOptions(options);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">X86X64Compiler::newInst</ref>(uint32_t<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>X86X64Compiler_getInstSize(code);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>InstNode*<sp/>inst<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(size));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inst<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Compiler_newInst(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>inst,<sp/>code,<sp/><ref refid="structasmjit_1_1CodeGen_1aab3bc0b503327c62bc7d952d41365705" kindref="member" tooltip="Get options and clear them.">getOptionsAndClear</ref>(),<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">X86X64Compiler::newInst</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>X86X64Compiler_getInstSize(code);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>InstNode*<sp/>inst<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(size<sp/>+<sp/>1<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Operand)));</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inst<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>Operand*<sp/>opList<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">Operand*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inst)<sp/>+<sp/>size);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[0]<sp/>=<sp/>o0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Compiler_newInst(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>inst,<sp/>code,<sp/><ref refid="structasmjit_1_1CodeGen_1aab3bc0b503327c62bc7d952d41365705" kindref="member" tooltip="Get options and clear them.">getOptionsAndClear</ref>(),<sp/>opList,<sp/>1);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">X86X64Compiler::newInst</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o1)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>X86X64Compiler_getInstSize(code);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>InstNode*<sp/>inst<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(size<sp/>+<sp/>2<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Operand)));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inst<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>Operand*<sp/>opList<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">Operand*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inst)<sp/>+<sp/>size);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[0]<sp/>=<sp/>o0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[1]<sp/>=<sp/>o1;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Compiler_newInst(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>inst,<sp/>code,<sp/><ref refid="structasmjit_1_1CodeGen_1aab3bc0b503327c62bc7d952d41365705" kindref="member" tooltip="Get options and clear them.">getOptionsAndClear</ref>(),<sp/>opList,<sp/>2);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">X86X64Compiler::newInst</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o2)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>X86X64Compiler_getInstSize(code);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>InstNode*<sp/>inst<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(size<sp/>+<sp/>3<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Operand)));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inst<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>Operand*<sp/>opList<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">Operand*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inst)<sp/>+<sp/>size);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[0]<sp/>=<sp/>o0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[1]<sp/>=<sp/>o1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[2]<sp/>=<sp/>o2;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Compiler_newInst(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>inst,<sp/>code,<sp/><ref refid="structasmjit_1_1CodeGen_1aab3bc0b503327c62bc7d952d41365705" kindref="member" tooltip="Get options and clear them.">getOptionsAndClear</ref>(),<sp/>opList,<sp/>3);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">X86X64Compiler::newInst</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o3)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>X86X64Compiler_getInstSize(code);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>InstNode*<sp/>inst<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(size<sp/>+<sp/>4<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Operand)));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inst<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>Operand*<sp/>opList<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">Operand*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inst)<sp/>+<sp/>size);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[0]<sp/>=<sp/>o0;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[1]<sp/>=<sp/>o1;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[2]<sp/>=<sp/>o2;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[3]<sp/>=<sp/>o3;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Compiler_newInst(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>inst,<sp/>code,<sp/><ref refid="structasmjit_1_1CodeGen_1aab3bc0b503327c62bc7d952d41365705" kindref="member" tooltip="Get options and clear them.">getOptionsAndClear</ref>(),<sp/>opList,<sp/>4);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">X86X64Compiler::newInst</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o4)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>X86X64Compiler_getInstSize(code);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>InstNode*<sp/>inst<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(size<sp/>+<sp/>5<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Operand)));</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inst<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>Operand*<sp/>opList<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">Operand*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(inst)<sp/>+<sp/>size);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[0]<sp/>=<sp/>o0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[1]<sp/>=<sp/>o1;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[2]<sp/>=<sp/>o2;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[3]<sp/>=<sp/>o3;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>opList[4]<sp/>=<sp/>o4;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Compiler_newInst(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>inst,<sp/>code,<sp/><ref refid="structasmjit_1_1CodeGen_1aab3bc0b503327c62bc7d952d41365705" kindref="member" tooltip="Get options and clear them.">getOptionsAndClear</ref>(),<sp/>opList,<sp/>5);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">X86X64Compiler::emit</ref>(uint32_t<sp/>code)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(code);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">X86X64Compiler::emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(code,<sp/>o0);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">X86X64Compiler::emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o1){</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(code,<sp/>o0,<sp/>o1);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">X86X64Compiler::emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o2)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(code,<sp/>o0,<sp/>o1,<sp/>o2);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">X86X64Compiler::emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o3){</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(code,<sp/>o0,<sp/>o1,<sp/>o2,<sp/>o3);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">X86X64Compiler::emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o4)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(code,<sp/>o0,<sp/>o1,<sp/>o2,<sp/>o3,<sp/>o4);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">X86X64Compiler::emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o0_)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>Imm<sp/>o0(o0_);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(code,<sp/>o0);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">X86X64Compiler::emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o1_)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>Imm<sp/>o1(o1_);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(code,<sp/>o0,<sp/>o1);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">InstNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member" tooltip="Add a new InstNode.">X86X64Compiler::emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o2_)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>Imm<sp/>o2(o2_);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" kindref="member" tooltip="Create a new InstNode.">newInst</ref>(code,<sp/>o0,<sp/>o1,<sp/>o2);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Compiler<sp/>-<sp/>Func]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">X86X64FuncNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad9246ac7123b213ad66e6d13984fdcc6" kindref="member" tooltip="Create a new X86X64FuncNode.">X86X64Compiler::newFunc</ref>(uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncPrototype&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>X86X64FuncNode*<sp/>func<sp/>=<sp/>newNode&lt;X86X64FuncNode&gt;();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>Error<sp/>error;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>helper<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>func-&gt;_entryNode<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a90c68e8beae42497baf524842a472154" kindref="member" tooltip="Create a new TargetNode.">newTarget</ref>();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>func-&gt;_exitNode<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a90c68e8beae42497baf524842a472154" kindref="member" tooltip="Create a new TargetNode.">newTarget</ref>();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>func-&gt;_end<sp/>=<sp/>newNode&lt;EndNode&gt;();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;_entryNode<sp/>==<sp/>NULL<sp/>||<sp/>func-&gt;_exitNode<sp/>==<sp/>NULL<sp/>||<sp/>func-&gt;_end<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Emit<sp/>push/pop<sp/>sequence<sp/>by<sp/>default.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>func-&gt;_funcHints<sp/>|=<sp/>IntUtil::mask(<ref refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffab728a139b384786e1183e880eb722ceb" kindref="member" tooltip="Use push/pop sequences instead of mov sequences in function prolog and epilog.">kFuncHintPushPop</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>prototype.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((error<sp/>=<sp/>func-&gt;_x86Decl.setPrototype(conv,<sp/>p))<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(error);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>arguments<sp/>stack<sp/>size.<sp/>Since<sp/>function<sp/>requires<sp/>_argStackSize<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set,<sp/>we<sp/>have<sp/>to<sp/>copy<sp/>it<sp/>from<sp/>X86X64FuncDecl.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>func-&gt;_argStackSize<sp/>=<sp/>func-&gt;_x86Decl.getArgStackSize();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>func-&gt;_redZoneSize<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(func-&gt;_x86Decl.getRedZoneSize());</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>func-&gt;_spillZoneSize<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(func-&gt;_x86Decl.getSpillZoneSize());</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Expected/Required<sp/>stack<sp/>alignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>func-&gt;_expectedStackAlignment<sp/>=<sp/><ref refid="structasmjit_1_1CodeGen_1a3d7daab958f99527363d5d97a0d32a0d" kindref="member" tooltip="Get runtime.">getRuntime</ref>()-&gt;<ref refid="structasmjit_1_1BaseRuntime_1a63d5b09d80dc8fd313043e42ebb876a0" kindref="member" tooltip="Get stack alignment of target runtime.">getStackAlignment</ref>();</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>func-&gt;_requiredStackAlignment<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>space<sp/>for<sp/>function<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>func-&gt;_argList<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;getArgCount()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;_argList<sp/>=<sp/><ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1aff1f5ac43e4a8c42a7dbc5cf8e0b7a47" kindref="member" tooltip="Like alloc(), but returns T*.">allocT</ref>&lt;VarData*&gt;(func-&gt;getArgCount()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VarData*));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;_argList<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>::memset(func-&gt;_argList,<sp/>0,<sp/>func-&gt;getArgCount()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VarData*));</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">X86X64FuncNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a37bc8aee85db0136f85f7f27123dd522" kindref="member" tooltip="Add a new function.">X86X64Compiler::addFunc</ref>(uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncPrototype&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>X86X64FuncNode*<sp/>func<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad9246ac7123b213ad66e6d13984fdcc6" kindref="member" tooltip="Create a new X86X64FuncNode.">newFunc</ref>(conv,<sp/>p);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(<ref refid="structasmjit_1_1BaseCompiler_1afa054f0e028aa072a6b54a38e182812a" kindref="member" tooltip="Current function.">_func</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1afa054f0e028aa072a6b54a38e182812a" kindref="member" tooltip="Current function.">_func</ref><sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(func);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(func-&gt;getEntryNode());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func;</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">EndNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae1a5b508ee29fb5e6037595f986a16a4" kindref="member" tooltip="End of current function.">X86X64Compiler::endFunc</ref>()<sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>X86X64FuncNode*<sp/>func<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9419277c77af58ddd9d4c813f847cc0f" kindref="member" tooltip="Get current function as X86X64FuncNode.">getFunc</ref>();</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(func<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(func-&gt;getExitNode());</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(func-&gt;getEnd());</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>func-&gt;addFuncFlags(kFuncFlagIsFinished);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1afa054f0e028aa072a6b54a38e182812a" kindref="member" tooltip="Current function.">_func</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>func-&gt;<ref refid="structasmjit_1_1FuncNode_1a90f96c6a5d681318e1ce80b7c9cfe84d" kindref="member" tooltip="Get function EndNode.">getEnd</ref>();</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Compiler<sp/>-<sp/>Ret]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal">RetNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a12952f38011b3b735e8948fa2f6a6bc8" kindref="member" tooltip="Create a new RetNode.">X86X64Compiler::newRet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o1)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>RetNode*<sp/>node<sp/>=<sp/>newNode&lt;RetNode&gt;(o0,<sp/>o1);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">RetNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af3c42c808f44535e3e2eb4209e7ab642" kindref="member" tooltip="Add a new RetNode.">X86X64Compiler::addRet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o1)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>RetNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a12952f38011b3b735e8948fa2f6a6bc8" kindref="member" tooltip="Create a new RetNode.">newRet</ref>(o0,<sp/>o1);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RetNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Compiler<sp/>-<sp/>Call]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">X86X64CallNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd80bd82013272ecdae209cd41802dfa" kindref="member" tooltip="Create a new X86X64CallNode.">X86X64Compiler::newCall</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/>uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncPrototype&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>X86X64CallNode*<sp/>node<sp/>=<sp/>newNode&lt;X86X64CallNode&gt;(o0);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>Error<sp/>error;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>uint32_t<sp/>nArgs;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((error<sp/>=<sp/>node-&gt;_x86Decl.setPrototype(conv,<sp/>p))<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(error);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>no<sp/>arguments<sp/>skip<sp/>the<sp/>allocation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nArgs<sp/>=<sp/>p.getArgCount())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>node-&gt;_args<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Operand*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(nArgs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Operand)));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;_args<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>::memset(node-&gt;_args,<sp/>0,<sp/>nArgs<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Operand));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal">X86X64CallNode*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c211bbb8bac7d8cf10ec2410e38aca0" kindref="member" tooltip="Add a new X86X64CallNode.">X86X64Compiler::addCall</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand&amp;<sp/>o0,<sp/>uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncPrototype&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>X86X64CallNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd80bd82013272ecdae209cd41802dfa" kindref="member" tooltip="Create a new X86X64CallNode.">newCall</ref>(o0,<sp/>conv,<sp/>p);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">X86X64CallNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Compiler<sp/>-<sp/>Vars]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal">Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0772c01f808f117609a87f7b344f9694" kindref="member" tooltip="Set function argument to var.">X86X64Compiler::setArg</ref>(uint32_t<sp/>argIndex,<sp/>BaseVar&amp;<sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>X86X64FuncNode*<sp/>func<sp/>=<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9419277c77af58ddd9d4c813f847cc0f" kindref="member" tooltip="Get current function as X86X64FuncNode.">getFunc</ref>();</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afacf36f8ebff7fdd3f8cff8688b86d399e" kindref="member" tooltip="Invalid argument.">kErrorInvalidArgument</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="structasmjit_1_1BaseCompiler_1a47d45c3cb329b30627222ecbbb033490" kindref="member" tooltip="Get whether variable var is created.">isVarCreated</ref>(var))</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa78799e101ad4020abb524d7ebef96902" kindref="member" tooltip="Invalid state.">kErrorInvalidState</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>getVd(var);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>func-&gt;setArg(argIndex,<sp/>vd);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal">Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0962b154aaa99a436acbc67f29d0ac12" kindref="member">X86X64Compiler::_newVar</ref>(BaseVar*<sp/>var,<sp/>uint32_t<sp/>vType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vType<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>vType<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a628212c11a148a6d4e63f2828f78a1cc" kindref="member" tooltip="Variable mapping (translates incoming kVarType into target).">_targetVarMapping</ref>[vType];</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VarInfo&amp;<sp/>vInfo<sp/>=<sp/>_varInfo[vType];</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>_newVd(vType,<sp/>vInfo.getSize(),<sp/>vInfo.getClass(),<sp/>name);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">X86Var*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(var)-&gt;<ref refid="structasmjit_1_1BaseCompiler_1a66ebed2ec94250d109a0cea4d9cb7cbc" kindref="member" tooltip="Clear everything and reset all buffers.">reset</ref>();</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CodeGen_1a44e04ba3f82ffa90550d7227603e643d" kindref="member" tooltip="Get last error code.">getError</ref>();</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>var-&gt;_init_packed_op_sz_w0_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cbad24fc6aeac580335e62f8a11e8a2043f" kindref="member" tooltip="Operand is a variable.">kOperandTypeVar</ref>,<sp/>vd-&gt;getSize(),<sp/>vInfo.getReg()<sp/>&lt;&lt;<sp/>8,<sp/>vd-&gt;getId());</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>var-&gt;_vreg.vType<sp/>=<sp/>vType;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Compiler<sp/>-<sp/>Stack]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d9fb7b8d7cb33e3b327bad6c28202b5" kindref="member">X86X64Compiler::_newStack</ref>(BaseMem*<sp/>mem,<sp/>uint32_t<sp/>size,<sp/>uint32_t<sp/>alignment,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afacf36f8ebff7fdd3f8cff8688b86d399e" kindref="member" tooltip="Invalid argument.">kErrorInvalidArgument</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alignment<sp/>&gt;<sp/>64)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>alignment<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>_newVd(<ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a1e19eaa393e8cb9865b1acd0d728d7bb" kindref="member" tooltip="Invalid variable type.">kVarTypeInvalid</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a9ee1beb9a4b48c08d666811d3776ed65" kindref="member" tooltip="Invalid register class.">kRegClassInvalid</ref>,<sp/>name);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Mem*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mem)-&gt;<ref refid="structasmjit_1_1BaseCompiler_1a66ebed2ec94250d109a0cea4d9cb7cbc" kindref="member" tooltip="Clear everything and reset all buffers.">reset</ref>();</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CodeGen_1a44e04ba3f82ffa90550d7227603e643d" kindref="member" tooltip="Get last error code.">getError</ref>();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>vd-&gt;_isStack<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>vd-&gt;_alignment<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(alignment);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Mem*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mem)-&gt;_init(<ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>vd-&gt;getId(),<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal">}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Compiler<sp/>-<sp/>Make]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Assembler&gt;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>X86X64Compiler_make(X86X64Compiler*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>Assembler<sp/>assembler(self-&gt;_runtime);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>BaseLogger*<sp/>logger<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_logger;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logger)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>assembler.setLogger(logger);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>assembler._features<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_features;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(self-&gt;serialize(assembler)<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(assembler.getError()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;setError(assembler.getError());</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>result<sp/>=<sp/>assembler.make();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logger)<sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>logger-&gt;logFormat(kLoggerStyleComment,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;***<sp/>COMPILER<sp/>SUCCESS<sp/>-<sp/>Wrote<sp/>%u<sp/>bytes,<sp/>code:<sp/>%u,<sp/>trampolines:<sp/>%u.\n\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;unsigned<sp/>int&gt;(assembler.getCodeSize()),</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;unsigned<sp/>int&gt;(assembler.getOffset()),</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;unsigned<sp/>int&gt;(assembler.getTrampolineSize()));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff8fecf22ca3f324379e2c06c16941cd" kindref="member">X86X64Compiler::make</ref>()<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)<sp/>&amp;&amp;<sp/>!defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="523"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Compiler_make&lt;x86::Assembler&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>!defined(ASMJIT_BUILD_X86)<sp/>&amp;&amp;<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Compiler_make&lt;x64::Assembler&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="527"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1CodeGen_1a26c78e4494d88ab9805496e023d3baa0" kindref="member" tooltip="Target architecture.">_arch</ref><sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>)</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Compiler_make&lt;x86::Assembler&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Compiler_make&lt;x64::Assembler&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86<sp/>&amp;&amp;<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Compiler<sp/>-<sp/>Assemble]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal">Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a930f6d27a016a7ddcd5ffa06f198056e" kindref="member">X86X64Compiler::serialize</ref>(BaseAssembler&amp;<sp/>assembler)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>X86X64Context<sp/>context(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>Error<sp/>error<sp/>=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>start;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>function<sp/>and<sp/>use<sp/>the<sp/>context<sp/>to<sp/>translate/emit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>start<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;getType()<sp/>==<sp/>kNodeTypeFunc)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">X86X64FuncNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(start)-&gt;getEnd();</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>context.compile(static_cast&lt;X86X64FuncNode*&gt;(start));</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Error;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1a3db24572d64989296c96d4049d0545b8" kindref="member" tooltip="Get next node in the compiler stream.">getNext</ref>();</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>node-&gt;getType()<sp/>!=<sp/>kNodeTypeFunc);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>error<sp/>=<sp/>context.serialize(&amp;assembler,<sp/>start,<sp/>node);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Error;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>context.cleanup();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">_Error:</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>context.cleanup();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x86x64<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)</highlight></codeline>
<codeline lineno="584"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x86<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal">Compiler::Compiler(BaseRuntime*<sp/>runtime)<sp/>:<sp/>X86X64Compiler(runtime)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a26c78e4494d88ab9805496e023d3baa0" kindref="member" tooltip="Target architecture.">_arch</ref><sp/>=<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1acbfa512e3ec91bff2364d868d2da3280" kindref="member" tooltip="Get the default register size of the architecture (4 or 8 bytes).">_regSize</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>_targetVarMapping<sp/>=<sp/>_varMapping;</highlight></codeline>
<codeline lineno="592"><highlight class="normal">}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal">Compiler::~Compiler()<sp/>{}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x86<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86</highlight></codeline>
<codeline lineno="600"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x64]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="606"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x64<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">Compiler::Compiler(BaseRuntime*<sp/>runtime)<sp/>:<sp/>X86X64Compiler(runtime)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a26c78e4494d88ab9805496e023d3baa0" kindref="member" tooltip="Target architecture.">_arch</ref><sp/>=<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98ac570137deb519c20e131c51ed65d2426" kindref="member" tooltip="X64 architecture, also called AMD64.">kArchX64</ref>;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1acbfa512e3ec91bff2364d868d2da3280" kindref="member" tooltip="Get the default register size of the architecture (4 or 8 bytes).">_regSize</ref><sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>_targetVarMapping<sp/>=<sp/>_varMapping;</highlight></codeline>
<codeline lineno="614"><highlight class="normal">}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal">Compiler::~Compiler()<sp/>{}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x64<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="622"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86<sp/>||<sp/>ASMJIT_BUILD_X64</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.cpp"/>
  </compounddef>
</doxygen>
