<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="namespaceasmjit_1_1x86x64" kind="namespace">
    <compoundname>asmjit::x86x64</compoundname>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86X64Assembler" prot="public">asmjit::x86x64::X86X64Assembler</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1VarInst" prot="public">asmjit::x86x64::VarInst</innerclass>
    <innerclass refid="unionasmjit_1_1x86x64_1_1StateCell" prot="public">asmjit::x86x64::StateCell</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1VarState" prot="public">asmjit::x86x64::VarState</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" prot="public">asmjit::x86x64::X86X64FuncNode</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86X64CallNode" prot="public">asmjit::x86x64::X86X64CallNode</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86X64Compiler" prot="public">asmjit::x86x64::X86X64Compiler</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86X64Context" prot="public">asmjit::x86x64::X86X64Context</innerclass>
    <innerclass refid="unionasmjit_1_1x86x64_1_1CpuId" prot="public">asmjit::x86x64::CpuId</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1Cpu" prot="public">asmjit::x86x64::Cpu</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1InstInfo" prot="public">asmjit::x86x64::InstInfo</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1VarInfo" prot="public">asmjit::x86x64::VarInfo</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1RegCount" prot="public">asmjit::x86x64::RegCount</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1RegMask" prot="public">asmjit::x86x64::RegMask</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86Reg" prot="public">asmjit::x86x64::X86Reg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1GpReg" prot="public">asmjit::x86x64::GpReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1FpReg" prot="public">asmjit::x86x64::FpReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1MmReg" prot="public">asmjit::x86x64::MmReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1XmmReg" prot="public">asmjit::x86x64::XmmReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1YmmReg" prot="public">asmjit::x86x64::YmmReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1SegReg" prot="public">asmjit::x86x64::SegReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1Mem" prot="public">asmjit::x86x64::Mem</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86Var" prot="public">asmjit::x86x64::X86Var</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1GpVar" prot="public">asmjit::x86x64::GpVar</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1FpVar" prot="public">asmjit::x86x64::FpVar</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1MmVar" prot="public">asmjit::x86x64::MmVar</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1XmmVar" prot="public">asmjit::x86x64::XmmVar</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1YmmVar" prot="public">asmjit::x86x64::YmmVar</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl" prot="public">asmjit::x86x64::X86X64FuncDecl</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga6cd332deefac315f70e5a513038ab461" prot="public" static="no">
        <name>kVarAttr</name>
        <enumvalue id="group__asmjit__x86x64_1gga6cd332deefac315f70e5a513038ab461a0927b46c19826bd742616c1eeaab901e" prot="public">
          <name>kVarAttrGpbLo</name>
          <initializer> 0x10000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga6cd332deefac315f70e5a513038ab461aac863d8d6119a42b1095a1ab0cf3b8b1" prot="public">
          <name>kVarAttrGpbHi</name>
          <initializer> 0x20000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 VarAttr flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="214" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga2e2003ff81acf82b29172c8c8dc68b12" prot="public" static="no">
        <name>kCpuFeature</name>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a559604d4b1c5d8b11200b2c519d44709" prot="public">
          <name>kCpuFeatureMultithreading</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Cpu has multithreading. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12aed06d2dddd46606ef756dbafd87d8ed7" prot="public">
          <name>kCpuFeatureExecuteDisableBit</name>
          <briefdescription>
<para>Cpu has execute disable bit. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a939385734116895b4c56cfa0fd0f9e3d" prot="public">
          <name>kCpuFeatureRdtsc</name>
          <briefdescription>
<para>Cpu has RDTSC. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a6cc7ea12d6268cdafd23b22f17e0778f" prot="public">
          <name>kCpuFeatureRdtscp</name>
          <briefdescription>
<para>Cpu has RDTSCP. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a77ae1355d75ab52e7613935c14dd846c" prot="public">
          <name>kCpuFeatureCmov</name>
          <briefdescription>
<para>Cpu has CMOV. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a4b863841c3c70b7ea119715177c4ecb7" prot="public">
          <name>kCpuFeatureCmpXchg8B</name>
          <briefdescription>
<para>Cpu has CMPXCHG8B. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a84cfd9e8a465268571b75e7f06fb6e0f" prot="public">
          <name>kCpuFeatureCmpXchg16B</name>
          <briefdescription>
<para>Cpu has CMPXCHG16B (x64). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a0b40eb8b23adae4cb74a59bd65f7eb19" prot="public">
          <name>kCpuFeatureClflush</name>
          <briefdescription>
<para>Cpu has CLFUSH. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12ab0e9efe2d38eeb553269d2de80726027" prot="public">
          <name>kCpuFeaturePrefetch</name>
          <briefdescription>
<para>Cpu has PREFETCH. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a4a77822c89742d567d38e4ba19f4a11d" prot="public">
          <name>kCpuFeatureLahfSahf</name>
          <briefdescription>
<para>Cpu has LAHF/SAHF. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a0b0b6dc58adb4dd649b3aca6e217b0d1" prot="public">
          <name>kCpuFeatureFxsr</name>
          <briefdescription>
<para>Cpu has FXSAVE/FXRSTOR. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a609f1466700f4c644c5aa4f0327f54f8" prot="public">
          <name>kCpuFeatureFfxsr</name>
          <briefdescription>
<para>Cpu has FXSAVE/FXRSTOR optimizations. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a8b2a2d2e4729619c2403abcd8da48a5b" prot="public">
          <name>kCpuFeatureMmx</name>
          <briefdescription>
<para>Cpu has MMX. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a87debfa17ac513a932ff94f7953bdfc4" prot="public">
          <name>kCpuFeatureMmxExt</name>
          <briefdescription>
<para>Cpu has extended MMX. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a1a287b89b7e835d3e719e2f8bf8d2520" prot="public">
          <name>kCpuFeature3dNow</name>
          <briefdescription>
<para>Cpu has 3dNow! </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a6e9ecae9decb57390735cc1ad2a4b160" prot="public">
          <name>kCpuFeature3dNowExt</name>
          <briefdescription>
<para>Cpu has enchanced 3dNow! </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12aad2120f83453b6d51a33bea935cdcdcc" prot="public">
          <name>kCpuFeatureSse</name>
          <briefdescription>
<para>Cpu has SSE. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a9d090d4fc00bb41bed251a57033c81b8" prot="public">
          <name>kCpuFeatureSse2</name>
          <briefdescription>
<para>Cpu has SSE2. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a4bf8f84a96633e79f91864797078cc28" prot="public">
          <name>kCpuFeatureSse3</name>
          <briefdescription>
<para>Cpu has SSE3. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a282de73f5cbdca0102ed347d9e9b8442" prot="public">
          <name>kCpuFeatureSsse3</name>
          <briefdescription>
<para>Cpu has Supplemental SSE3 (SSSE3). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12ae8d1530bfe7455cdeb4c76d888248b69" prot="public">
          <name>kCpuFeatureSse4A</name>
          <briefdescription>
<para>Cpu has SSE4.A. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a50fd175be091a46cd26859d3aca3dd78" prot="public">
          <name>kCpuFeatureSse41</name>
          <briefdescription>
<para>Cpu has SSE4.1. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12aec78414fcf3f3376ac00db79d1bc5051" prot="public">
          <name>kCpuFeatureSse42</name>
          <briefdescription>
<para>Cpu has SSE4.2. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12ac786ef180be789e6dda8304dc7e13c29" prot="public">
          <name>kCpuFeatureMsse</name>
          <briefdescription>
<para>Cpu has Misaligned SSE (MSSE). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a68583b5d689f9cec52926a3923725e5f" prot="public">
          <name>kCpuFeatureMonitorMWait</name>
          <briefdescription>
<para>Cpu has MONITOR and MWAIT. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a442cfd4864f19970a008b60850b90b12" prot="public">
          <name>kCpuFeatureMovbe</name>
          <briefdescription>
<para>Cpu has MOVBE. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a7d3f3baeab17b7715a28f775bbd24e5b" prot="public">
          <name>kCpuFeaturePopcnt</name>
          <briefdescription>
<para>Cpu has POPCNT. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a7a71c5fed1747f386b86e51a75701f25" prot="public">
          <name>kCpuFeatureLzcnt</name>
          <briefdescription>
<para>Cpu has LZCNT. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12ac8b5be5dc60103a6f0c4916f7675f49e" prot="public">
          <name>kCpuFeatureAesni</name>
          <briefdescription>
<para>Cpu has AESNI. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a0ac548e4bb98069d810d6797472c45cf" prot="public">
          <name>kCpuFeaturePclmulqdq</name>
          <briefdescription>
<para>Cpu has PCLMULQDQ. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a4c5d259ea54da844d5116429a63b4576" prot="public">
          <name>kCpuFeatureRdrand</name>
          <briefdescription>
<para>Cpu has RDRAND. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a0984092714c3e456c48b75678cc8cf3d" prot="public">
          <name>kCpuFeatureAvx</name>
          <briefdescription>
<para>Cpu has AVX. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a20471fce5a2688bca84aa58d6d8d63f4" prot="public">
          <name>kCpuFeatureAvx2</name>
          <briefdescription>
<para>Cpu has AVX2. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a9f25e33d3e522ea3651313a3c7e67daa" prot="public">
          <name>kCpuFeatureF16C</name>
          <briefdescription>
<para>Cpu has F16C. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a11f57658cf3e0a328693d84a4985011c" prot="public">
          <name>kCpuFeatureFma3</name>
          <briefdescription>
<para>Cpu has FMA3. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a8c959115cf213cec414ec206f078a0bb" prot="public">
          <name>kCpuFeatureFma4</name>
          <briefdescription>
<para>Cpu has FMA4. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12ab01c4287d37bd5fc1931d9e36eb5421e" prot="public">
          <name>kCpuFeatureXop</name>
          <briefdescription>
<para>Cpu has XOP. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a2d091365c412a2178719762bda183084" prot="public">
          <name>kCpuFeatureBmi</name>
          <briefdescription>
<para>Cpu has BMI. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a05da42f7c43a8e00a7ea03266d1b6c64" prot="public">
          <name>kCpuFeatureBmi2</name>
          <briefdescription>
<para>Cpu has BMI2. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a87c5d98ffb05fc3822f28784f0725d32" prot="public">
          <name>kCpuFeatureHle</name>
          <briefdescription>
<para>Cpu has HLE. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a20360639916f2bc5f47fa80e896106aa" prot="public">
          <name>kCpuFeatureRtm</name>
          <briefdescription>
<para>Cpu has RTM. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12aeb1e7c642d4d6f292be34e036a7b3816" prot="public">
          <name>kCpuFeatureFsGsBase</name>
          <briefdescription>
<para>Cpu has FSGSBASE. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12ab270032aca7f1e49d3f1c5721ec3cafb" prot="public">
          <name>kCpuFeatureRepMovsbStosbExt</name>
          <briefdescription>
<para>Cpu has enhanced REP MOVSB/STOSB. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2e2003ff81acf82b29172c8c8dc68b12a9ddefe91de744b786e2c9446f1b7cdee" prot="public">
          <name>kCpuFeatureCount</name>
          <briefdescription>
<para>Count of X86/X64 Cpu features. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86 CPU features. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86cpu.h" line="29" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86cpu.h" bodystart="29" bodyend="119"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1gafa35b8475e40a1d0d2e0d1de442578eb" prot="public" static="no">
        <name>kRegClass</name>
        <enumvalue id="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578ebae14f8090017d61ea34f01c8f355096fa" prot="public">
          <name>kRegClassFp</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>X86/X64 Fp register class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" prot="public">
          <name>kRegClassMm</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>X86/X64 Mm register class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" prot="public">
          <name>kRegClassXy</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>X86/X64 Xmm/Ymm register class. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba439b8f1c6f3216f72ccb85f90410f61b" prot="public">
          <name>kRegClassCount</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Count of X86/X64 register classes. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 variable class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="103" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="103" bodyend="115"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga49cd81f45663e5bb3161d03c51e38429" prot="public" static="no">
        <name>kRegCount</name>
        <enumvalue id="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ae822edf24ff7b052c18a6535f1a6d1a5" prot="public">
          <name>kRegCountFp</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>Count of Fp registers (8). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ac38cb5c433e088c7070177aa364ab296" prot="public">
          <name>kRegCountMm</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>Count of Mm registers (8). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429afc5e788aea55e9c0b94fb5b51bb80467" prot="public">
          <name>kRegCountSeg</name>
          <initializer> 6</initializer>
          <briefdescription>
<para>Count of segment registers (6). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 registers count. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="122" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="122" bodyend="129"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga5e994ba992c6c8d421eb8065435b06ef" prot="public" static="no">
        <name>kRegType</name>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" prot="public">
          <name>kRegTypeGpbLo</name>
          <initializer> 0x01</initializer>
          <briefdescription>
<para>Gpb-lo register (AL, BL, CL, DL, ...). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa6e8dd55fd3b4ef24cd301f03b3d7257d" prot="public">
          <name>kRegTypeGpbHi</name>
          <initializer> 0x02</initializer>
          <briefdescription>
<para>Gpb-hi register (AH, BH, CH, DH only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa403ba0f2fbf686d01791a4c119400318" prot="public">
          <name>kRegTypePatchedGpbHi</name>
          <initializer> kRegTypeGpbLo | kRegTypeGpbHi</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7088b937cbaa2114610046a308697d2e" prot="public">
          <name>kRegTypeGpw</name>
          <initializer> 0x10</initializer>
          <briefdescription>
<para>Gpw register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" prot="public">
          <name>kRegTypeGpd</name>
          <initializer> 0x20</initializer>
          <briefdescription>
<para>Gpd register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" prot="public">
          <name>kRegTypeGpq</name>
          <initializer> 0x30</initializer>
          <briefdescription>
<para>Gpq register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efad8dab38a7bb9b84c468bdac1022c6a00" prot="public">
          <name>kRegTypeFp</name>
          <initializer> 0x50</initializer>
          <briefdescription>
<para>Fp register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa9a46e468cd5c58fac3670afc952eb814" prot="public">
          <name>kRegTypeMm</name>
          <initializer> 0x60</initializer>
          <briefdescription>
<para>Mm register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaacea326fc6b0daaa36cc5e706d6656a5" prot="public">
          <name>kRegTypeXmm</name>
          <initializer> 0x70</initializer>
          <briefdescription>
<para>Xmm register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa962f5931b1817196fa1c7bd908e02fbd" prot="public">
          <name>kRegTypeYmm</name>
          <initializer> 0x80</initializer>
          <briefdescription>
<para>Ymm register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7480e5e2a26dd8e5a21c436e70afd66f" prot="public">
          <name>kRegTypeZmm</name>
          <initializer> 0x90</initializer>
          <briefdescription>
<para>Zmm register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa75716d897e72ab0aee0b6bcdc3cde8d8" prot="public">
          <name>kRegTypeSeg</name>
          <initializer> 0xF0</initializer>
          <briefdescription>
<para>Segment register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 register types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="136" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="136" bodyend="168"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga8c39346e0695453a5cd38ead0d62931a" prot="public" static="no">
        <name>kRegIndex</name>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" prot="public">
          <name>kRegIndexAx</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Index of AL/AH/AX/EAX/RAX registers. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" prot="public">
          <name>kRegIndexCx</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Index of CL/CH/CX/ECX/RCX registers. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" prot="public">
          <name>kRegIndexDx</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>Index of DL/DH/DX/EDX/RDX registers. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa64bdbf966add3a3fb3785d2b055abb3e" prot="public">
          <name>kRegIndexBx</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>Index of BL/BH/BX/EBX/RBX registers. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa72a26d71150e372bcac7bb7023dcb628" prot="public">
          <name>kRegIndexSp</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Index of SPL/SP/ESP/RSP registers. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae08e3d836183e8be188e68df5e2db1b6" prot="public">
          <name>kRegIndexBp</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>Index of BPL/BP/EBP/RBP registers. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0d713e0bcf536538a2b3f097c81a9e7f" prot="public">
          <name>kRegIndexSi</name>
          <initializer> 6</initializer>
          <briefdescription>
<para>Index of SIL/SI/ESI/RSI registers. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa2128d2d1988f757b6de2583d0bda1fdb" prot="public">
          <name>kRegIndexDi</name>
          <initializer> 7</initializer>
          <briefdescription>
<para>Index of DIL/DI/EDI/RDI registers. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa787fdf9bd450392c616e6024c9c558f3" prot="public">
          <name>kRegIndexR8</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>Index of R8B/R8W/R8D/R8 registers (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa39e8936f70cc4d72a8a37fc5f0d85abc" prot="public">
          <name>kRegIndexR9</name>
          <initializer> 9</initializer>
          <briefdescription>
<para>Index of R9B/R9W/R9D/R9 registers (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa3e6307284b66ec89ae73fe11a81badba" prot="public">
          <name>kRegIndexR10</name>
          <initializer> 10</initializer>
          <briefdescription>
<para>Index of R10B/R10W/R10D/R10 registers (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aabdb30b6756b7e6c97c89777c0827c75d" prot="public">
          <name>kRegIndexR11</name>
          <initializer> 11</initializer>
          <briefdescription>
<para>Index of R11B/R11W/R11D/R11 registers (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa7874db6409f9f1dad031eeb3c2f06088" prot="public">
          <name>kRegIndexR12</name>
          <initializer> 12</initializer>
          <briefdescription>
<para>Index of R12B/R12W/R12D/R12 registers (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aac7dd86659395b16631005fb682fbea5a" prot="public">
          <name>kRegIndexR13</name>
          <initializer> 13</initializer>
          <briefdescription>
<para>Index of R13B/R13W/R13D/R13 registers (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa684c53ef312ee81f68546ada877b14c6" prot="public">
          <name>kRegIndexR14</name>
          <initializer> 14</initializer>
          <briefdescription>
<para>Index of R14B/R14W/R14D/R14 registers (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaeae3936886c893849fa249b80617162a" prot="public">
          <name>kRegIndexR15</name>
          <initializer> 15</initializer>
          <briefdescription>
<para>Index of R15B/R15W/R15D/R15 registers (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa42e860a3f993239a51b62ef823adcb0c" prot="public">
          <name>kRegIndexFp0</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Index of FP0 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaeddbcb349fc17c4919994df81da82141" prot="public">
          <name>kRegIndexFp1</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Index of FP1 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaee0984170102a563902034a75c4050d3" prot="public">
          <name>kRegIndexFp2</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>Index of FP2 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aab98ccb78cd069afe969a353f1b8e32fd" prot="public">
          <name>kRegIndexFp3</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>Index of FP3 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa9ad8158d61270684676ec19eeb4cd4ae" prot="public">
          <name>kRegIndexFp4</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Index of FP4 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa28d29fd895ad82a813739c9a2a854e9f" prot="public">
          <name>kRegIndexFp5</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>Index of FP5 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae8c6e7846a834419dbdc23cc6b078511" prot="public">
          <name>kRegIndexFp6</name>
          <initializer> 6</initializer>
          <briefdescription>
<para>Index of FP6 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa9cf2cb48000143b7777563d60c5c9411" prot="public">
          <name>kRegIndexFp7</name>
          <initializer> 7</initializer>
          <briefdescription>
<para>Index of FP7 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa8f7d148cd10217411d3c9668d8e8410e" prot="public">
          <name>kRegIndexMm0</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Index of MM0 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa801a694729a758532b3a9f96a5cadc41" prot="public">
          <name>kRegIndexMm1</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Index of MM1 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa936b012e08e9438f4c9392884206355f" prot="public">
          <name>kRegIndexMm2</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>Index of MM2 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aadc9ed5ae2adfd3ee51ee94a947716dc6" prot="public">
          <name>kRegIndexMm3</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>Index of MM3 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa54b2bbb32580e1ac66e7284325e875b5" prot="public">
          <name>kRegIndexMm4</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Index of MM4 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaf57c3a8060084e04a8a9a32c0845a49b" prot="public">
          <name>kRegIndexMm5</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>Index of MM5 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaac0fa69297314eb3d5bbfb1b399f747c" prot="public">
          <name>kRegIndexMm6</name>
          <initializer> 6</initializer>
          <briefdescription>
<para>Index of MM6 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aac2510768c43cbabe29ef86c18c5ea73c" prot="public">
          <name>kRegIndexMm7</name>
          <initializer> 7</initializer>
          <briefdescription>
<para>Index of MM7 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa1406e1cc6aa02b2aee90c5532c9ec7fa" prot="public">
          <name>kRegIndexXmm0</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Index of XMM0 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa5abf32999e7833239c687271355e5186" prot="public">
          <name>kRegIndexXmm1</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Index of XMM1 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa4f04f98d197f3a5bce0e5ade2f31f3a9" prot="public">
          <name>kRegIndexXmm2</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>Index of XMM2 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa16ce168ed617f43f3e549fbcc18de4a7" prot="public">
          <name>kRegIndexXmm3</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>Index of XMM3 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0a1def3a1186fa70d7a9f1ddf616afa1" prot="public">
          <name>kRegIndexXmm4</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Index of XMM4 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa7c82c77c9ef9c69e1ba7aa209122f148" prot="public">
          <name>kRegIndexXmm5</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>Index of XMM5 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0322211f21d3ebf16fe75f83cebdb8a1" prot="public">
          <name>kRegIndexXmm6</name>
          <initializer> 6</initializer>
          <briefdescription>
<para>Index of XMM6 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa465bfd319a7f4735ebbd896b8e3d70b8" prot="public">
          <name>kRegIndexXmm7</name>
          <initializer> 7</initializer>
          <briefdescription>
<para>Index of XMM7 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aab61d89fe6485c405259baa75f4f50418" prot="public">
          <name>kRegIndexXmm8</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>Index of XMM8 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa935b30e03b338422e042c08a301570c1" prot="public">
          <name>kRegIndexXmm9</name>
          <initializer> 9</initializer>
          <briefdescription>
<para>Index of XMM9 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aabe27d0ffa7617ed5aa9db3c89445a1be" prot="public">
          <name>kRegIndexXmm10</name>
          <initializer> 10</initializer>
          <briefdescription>
<para>Index of XMM10 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0d35481462b075d0ffd242877ead0662" prot="public">
          <name>kRegIndexXmm11</name>
          <initializer> 11</initializer>
          <briefdescription>
<para>Index of XMM11 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa6ac109d5341e4a4e03933deacf3fa70b" prot="public">
          <name>kRegIndexXmm12</name>
          <initializer> 12</initializer>
          <briefdescription>
<para>Index of XMM12 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa65870ddc820c3f0889db5fd314c68ff1" prot="public">
          <name>kRegIndexXmm13</name>
          <initializer> 13</initializer>
          <briefdescription>
<para>Index of XMM13 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa89e8235ec32b8001b0f8ffecead0f16e" prot="public">
          <name>kRegIndexXmm14</name>
          <initializer> 14</initializer>
          <briefdescription>
<para>Index of XMM14 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa5978f33baf84ec2816726eb710c89342" prot="public">
          <name>kRegIndexXmm15</name>
          <initializer> 15</initializer>
          <briefdescription>
<para>Index of XMM15 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa7dfcc1d2916ec54ee427eefa420d8a01" prot="public">
          <name>kRegIndexYmm0</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Index of YMM0 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa73d92593b45406cf271b1016a40a3efd" prot="public">
          <name>kRegIndexYmm1</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Index of YMM1 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa59050702664e57bcfcfe73e37ada77cc" prot="public">
          <name>kRegIndexYmm2</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>Index of YMM2 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae0fedc9d3a46b434e55731ba822e77f2" prot="public">
          <name>kRegIndexYmm3</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>Index of YMM3 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa4cbe3200d50062e1c9b15911c972bcf1" prot="public">
          <name>kRegIndexYmm4</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Index of YMM4 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa21ff34064e63a50b6035ab9d022a46df" prot="public">
          <name>kRegIndexYmm5</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>Index of YMM5 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aadc887369dd74881259f716ae9970a835" prot="public">
          <name>kRegIndexYmm6</name>
          <initializer> 6</initializer>
          <briefdescription>
<para>Index of YMM6 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa54dad7ffe2a17cc906e3420b218e4261" prot="public">
          <name>kRegIndexYmm7</name>
          <initializer> 7</initializer>
          <briefdescription>
<para>Index of YMM7 register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaebf22309f16e4bb640367c3f81f67eec" prot="public">
          <name>kRegIndexYmm8</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>Index of YMM8 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa1656a9ddd7eb2653d1522a56862e3129" prot="public">
          <name>kRegIndexYmm9</name>
          <initializer> 9</initializer>
          <briefdescription>
<para>Index of YMM9 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaf22d353f4194c21363350caa17f1655b" prot="public">
          <name>kRegIndexYmm10</name>
          <initializer> 10</initializer>
          <briefdescription>
<para>Index of YMM10 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aacc8ce95b5e93e3e6d6be1f7bddfc1bd0" prot="public">
          <name>kRegIndexYmm11</name>
          <initializer> 11</initializer>
          <briefdescription>
<para>Index of YMM11 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aab3199d2e3d9a3ee45790d317c0a80ec9" prot="public">
          <name>kRegIndexYmm12</name>
          <initializer> 12</initializer>
          <briefdescription>
<para>Index of YMM12 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aadb66bb7fb78d371a8d49d7c752033dac" prot="public">
          <name>kRegIndexYmm13</name>
          <initializer> 13</initializer>
          <briefdescription>
<para>Index of YMM13 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaa11574b23843f48da6dc7483939b99d9" prot="public">
          <name>kRegIndexYmm14</name>
          <initializer> 14</initializer>
          <briefdescription>
<para>Index of YMM14 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa023ba6a6a3d015ca820723825b0b8db7" prot="public">
          <name>kRegIndexYmm15</name>
          <initializer> 15</initializer>
          <briefdescription>
<para>Index of YMM15 register (64-bit only). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 register indices. </para>        </briefdescription>
        <detaileddescription>
<para>These codes are real, don&apos;t miss with <computeroutput>REG</computeroutput> enum! and don&apos;t use these values if you are not writing AsmJit code. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="178" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="178" bodyend="311"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga4f85c6db0bbcbba6cfd2e06f3318dd64" prot="public" static="no">
        <name>kSeg</name>
        <enumvalue id="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a6dfbfee0e2063f5623c892e4b1eb40f2" prot="public">
          <name>kSegDefault</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>No segment. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a66701fd7e7c8a501cf98a7912aecf65b" prot="public">
          <name>kSegEs</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Es segment. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a494414df2b04066d2da5b876e563a97e" prot="public">
          <name>kSegCs</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>Cs segment. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64ade5c6d613f514abf76a9b331ff469b8e" prot="public">
          <name>kSegSs</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>Ss segment. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a23cad746bf90afaa68d81d8a1c603618" prot="public">
          <name>kSegDs</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Ds segment. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a2d392d6222e53ec87d7450d4133229b3" prot="public">
          <name>kSegFs</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>Fs segment. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64aa5e01734c1d00ccca51c07b715c8945d" prot="public">
          <name>kSegGs</name>
          <initializer> 6</initializer>
          <briefdescription>
<para>Gs segment. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 segment codes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="318" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="318" bodyend="333"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga3c765af5d5e1b534ef7acc3abe5dffc1" prot="public" static="no">
        <name>kMemVSib</name>
        <enumvalue id="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" prot="public">
          <name>kMemVSibGpz</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Memory operand uses Gp or no index register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1afa311617da5fb69bb65ee3b8d1488251" prot="public">
          <name>kMemVSibXmm</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Memory operand uses Xmm or no index register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1a7aecfb975b3f5e594e2a9ee86cba691d" prot="public">
          <name>kMemVSibYmm</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>Memory operand uses Ymm or no index register. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 index register legacy and AVX2 (VSIB) support. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="340" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="340" bodyend="347"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1gabf63254a461d9eafea12de012bef9321" prot="public" static="no">
        <name>kMemFlags</name>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321a8cdcdc5c64fd784a1e0faa40310c981a" prot="public">
          <name>kMemSegBits</name>
          <initializer> 0x7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321a8e9202ace82ec2d0e898e9810a94e242" prot="public">
          <name>kMemSegIndex</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321a14030be1c911af694a94bdf37ca9383d" prot="public">
          <name>kMemSegMask</name>
          <initializer> kMemSegBits &lt;&lt; kMemSegIndex</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321a001906690edc507256310a759ddbca20" prot="public">
          <name>kMemGpdBits</name>
          <initializer> 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321a5689cfeabf4c458b0af47bf980f5f598" prot="public">
          <name>kMemGpdIndex</name>
          <initializer> 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321a75362bae42b904ddf00033c91d1301c6" prot="public">
          <name>kMemGpdMask</name>
          <initializer> kMemGpdBits &lt;&lt; kMemGpdIndex</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321ac69330160ad4bb82478b62efc067a010" prot="public">
          <name>kMemVSibBits</name>
          <initializer> 0x3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321a4fc4fa9f22ba1033cb702d2a47998720" prot="public">
          <name>kMemVSibIndex</name>
          <initializer> 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321aa85fc3e74f83699b86003acd45f42ac4" prot="public">
          <name>kMemVSibMask</name>
          <initializer> kMemVSibBits &lt;&lt; kMemVSibIndex</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321aec4fe3670ceea75031b308be3dd66988" prot="public">
          <name>kMemShiftBits</name>
          <initializer> 0x3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321ac4a54feff84b8a0700fc6aa6c0c35ca5" prot="public">
          <name>kMemShiftIndex</name>
          <initializer> 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggabf63254a461d9eafea12de012bef9321ad1c12c6bad473ef24698539ff641a0e6" prot="public">
          <name>kMemShiftMask</name>
          <initializer> kMemShiftBits &lt;&lt; kMemShiftIndex</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="356" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="356" bodyend="372"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga0e547d047bb0f359f5d7efce8690d340" prot="public" static="no">
        <name>kPrefetchHint</name>
        <enumvalue id="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340a718a33d2793c91a9ec1ad0bec36a8c57" prot="public">
          <name>kPrefetchNta</name>
          <initializer> 0</initializer>
          <briefdescription>
<para>Prefetch using NT hint. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340a62c9d414885b5f001b93eaa4d5ddf3fa" prot="public">
          <name>kPrefetchT0</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>Prefetch to L0 cache. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340ae3b546599f8ef4d05e2baf00447cc70c" prot="public">
          <name>kPrefetchT1</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>Prefetch to L1 cache. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340ada01c663811ff302a35b3b8344d167bb" prot="public">
          <name>kPrefetchT2</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>Prefetch to L2 cache. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 Prefetch hints. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="379" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="379" bodyend="388"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga54f95be4cce9c100426921500e04529a" prot="public" static="no">
        <name>kFPSW</name>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aac599d823ceb8abc45dfa9e8c80285204" prot="public">
          <name>kFPSW_Invalid</name>
          <initializer> 0x0001</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aa912246a43f2871fd68db5c5a58df2661" prot="public">
          <name>kFPSW_Denormalized</name>
          <initializer> 0x0002</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aa2df83690d155d84ec2a15a4faeeed88e" prot="public">
          <name>kFPSW_DivByZero</name>
          <initializer> 0x0004</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aabbc3aab582ab7c89d2370698c0c7adcc" prot="public">
          <name>kFPSW_Overflow</name>
          <initializer> 0x0008</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aaa647766eb6de52475ad53630b639bac1" prot="public">
          <name>kFPSW_Underflow</name>
          <initializer> 0x0010</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aaa27a0a6355b6669731a17c225d138933" prot="public">
          <name>kFPSW_Precision</name>
          <initializer> 0x0020</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aa845eb771ee44449ef75f38d9f44b049b" prot="public">
          <name>kFPSW_StackFault</name>
          <initializer> 0x0040</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aa8a23d9755d25221fa33912347289ea64" prot="public">
          <name>kFPSW_Interrupt</name>
          <initializer> 0x0080</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aaa5593c3bf5d1e949c966c7e667c6a2b0" prot="public">
          <name>kFPSW_C0</name>
          <initializer> 0x0100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aa52412ce65bb6c211be58e1b709a3e27e" prot="public">
          <name>kFPSW_C1</name>
          <initializer> 0x0200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aaacb2fcbf41944146e80de2d91e02fe5b" prot="public">
          <name>kFPSW_C2</name>
          <initializer> 0x0400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aa36c18e61bd69db158ccb2832148c5f76" prot="public">
          <name>kFPSW_Top</name>
          <initializer> 0x3800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aae17f53e381e045174ee54da793b66e05" prot="public">
          <name>kFPSW_C3</name>
          <initializer> 0x4000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga54f95be4cce9c100426921500e04529aa04fc56a3495d71f2c16ca83d4011b197" prot="public">
          <name>kFPSW_Busy</name>
          <initializer> 0x8000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 FPU status Word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="395" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="395" bodyend="410"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1gae85e885c907841dd63a93df6bf5f2910" prot="public" static="no">
        <name>kFPCW</name>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910a8ed3a68c5b99bccc3cdfa9cb82c5be6d" prot="public">
          <name>kFPCW_EM_Mask</name>
          <initializer> 0x003F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910ad6325fa7ee3ad9f0a8e48fa640bf1d38" prot="public">
          <name>kFPCW_EM_Invalid</name>
          <initializer> 0x0001</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910a62c836ef9400d4750826593ac1c46f9f" prot="public">
          <name>kFPCW_EM_Denormal</name>
          <initializer> 0x0002</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910a1bf58a7f699753edbd1543fd4a533386" prot="public">
          <name>kFPCW_EM_DivByZero</name>
          <initializer> 0x0004</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910a1d15eafe1763c3961d513c24eba5a7ab" prot="public">
          <name>kFPCW_EM_Overflow</name>
          <initializer> 0x0008</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910a7c7a456a0ae760cd3fb97859ba65e454" prot="public">
          <name>kFPCW_EM_Underflow</name>
          <initializer> 0x0010</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910a81d258691fb97248b4236f3e8aee8078" prot="public">
          <name>kFPCW_EM_Inexact</name>
          <initializer> 0x0020</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910a14b9d946ada77eb84ab5ea1fdfe9ed3e" prot="public">
          <name>kFPCW_PC_Mask</name>
          <initializer> 0x0300</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910ae90165668571beadfbf103d2582bc941" prot="public">
          <name>kFPCW_PC_Float</name>
          <initializer> 0x0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910ae4df4f8f3538f2378d99583dfe575625" prot="public">
          <name>kFPCW_PC_Reserved</name>
          <initializer> 0x0100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910aaed1fa42e04379d7b377a6cab9b7e8e9" prot="public">
          <name>kFPCW_PC_Double</name>
          <initializer> 0x0200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910afef5026e70779f477141681145bb9a11" prot="public">
          <name>kFPCW_PC_Extended</name>
          <initializer> 0x0300</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910a563efe3b64b6ed13cf40b113a809757b" prot="public">
          <name>kFPCW_RC_Mask</name>
          <initializer> 0x0C00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910aeaafe6f92e507c00ca3a23fcc02feec6" prot="public">
          <name>kFPCW_RC_Nearest</name>
          <initializer> 0x0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910a95caa6fefd320c7d32c3f7d24d77da6d" prot="public">
          <name>kFPCW_RC_Down</name>
          <initializer> 0x0400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910afcd8150ce4f08b22fb08ead33a603860" prot="public">
          <name>kFPCW_RC_Up</name>
          <initializer> 0x0800</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910a0016d1a4d7f81f274e223f8fe91c003c" prot="public">
          <name>kFPCW_RC_Truncate</name>
          <initializer> 0x0C00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910afc2ce59610c1b2f183f89c4c66cd4403" prot="public">
          <name>kFPCW_IC_Mask</name>
          <initializer> 0x1000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910ac6d51baf32c3c7cbcdb3222ff2d00224" prot="public">
          <name>kFPCW_IC_Projective</name>
          <initializer> 0x0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae85e885c907841dd63a93df6bf5f2910a2e5a387c533ac9805ca1fe67b5a9ba9c" prot="public">
          <name>kFPCW_IC_Affine</name>
          <initializer> 0x1000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 FPU control Word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="417" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="417" bodyend="441"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1gae77eaf11cadf05f2b892e45fcd239a8b" prot="public" static="no">
        <name>kInstCode</name>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab07cb7e66db642db9816e7856e9e1dce" prot="public">
          <name>kInstAdc</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba457cb4c13ddfb5163eab9e9e6f7651f0" prot="public">
          <name>kInstAdd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba518be145b17a9b276a782dc927d4cfa6" prot="public">
          <name>kInstAddpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad2d9740c143c7c7a7e07a229afe67815" prot="public">
          <name>kInstAddps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba73a69b0ace546e231138a6a22e67bd0f" prot="public">
          <name>kInstAddsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba68c6dd1662b97cb40c900663cb3f20d4" prot="public">
          <name>kInstAddss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba01a9212354b5a4de651ceba81af6b545" prot="public">
          <name>kInstAddsubpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab29f8a92cb5e07d3f41ed7ad05791151" prot="public">
          <name>kInstAddsubps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7e8033dfcccb6e3d26ca01680f070042" prot="public">
          <name>kInstAesdec</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bada2d24c687e7b22a0f63872e099ce894" prot="public">
          <name>kInstAesdeclast</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baeeb8966749672ff159b2287bd945b189" prot="public">
          <name>kInstAesenc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baee2d64f8256468331083b5525fef5205" prot="public">
          <name>kInstAesenclast</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacacd6843339072a02d616deec10db19b" prot="public">
          <name>kInstAesimc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba970fe9ed08c5eebd78633299e1c7c97a" prot="public">
          <name>kInstAeskeygenassist</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac0ce033102d40418de2beae2e2b98b40" prot="public">
          <name>kInstAnd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf779e5c10ca6e963a50465f7784cc840" prot="public">
          <name>kInstAndn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba36b77976a6fe7e65bd993e54792779d4" prot="public">
          <name>kInstAndnpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacd8b974981a85c8c6c27cd2ae419ad35" prot="public">
          <name>kInstAndnps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1b54a25b2c99a816056c3913af44f1b1" prot="public">
          <name>kInstAndpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9d454e697ba539f5e5e6c8171ac533b4" prot="public">
          <name>kInstAndps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8721349c87436771d9989e5dd49db49d" prot="public">
          <name>kInstBextr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba907fe6ba716f4777d4e58114b65c38be" prot="public">
          <name>kInstBlendpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3d4c60fcfaf02baeaa211ea60b11dbeb" prot="public">
          <name>kInstBlendps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4433d49d284d22cae9517e61e4ab0cc8" prot="public">
          <name>kInstBlendvpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baed461114d0bef33352cac257a32cbe5d" prot="public">
          <name>kInstBlendvps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad45be0d4a7b70ab25477bee7185b806e" prot="public">
          <name>kInstBlsi</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3866238b8571d67c945747f0644f087e" prot="public">
          <name>kInstBlsmsk</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2a5ac5c47824a5fc81b04ae4411d690b" prot="public">
          <name>kInstBlsr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab38d6ae2660b99143d0431d3567e73ec" prot="public">
          <name>kInstBsf</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba662c32f865aefdbb5c32bae333bb601c" prot="public">
          <name>kInstBsr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba58ded907e324e5de0003e3a440797a56" prot="public">
          <name>kInstBswap</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba44b82aa7961119caabe9f3c4194c9398" prot="public">
          <name>kInstBt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bace4afe3a80c1261683e147c0edfb346e" prot="public">
          <name>kInstBtc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9510ad44c8b1b38710387f849bbac2a4" prot="public">
          <name>kInstBtr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9ebc9e47da62b7d637a877ca66d6828e" prot="public">
          <name>kInstBts</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba639a425a9d99c6882d57b9b867f1616c" prot="public">
          <name>kInstBzhi</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba08e25dd7210261a265e2f5f52156002d" prot="public">
          <name>kInstCall</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baaeb292e34478cfea333f3303e0cd03e5" prot="public">
          <name>kInstCbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa2972118ad8a7017b2f3cb9568285663" prot="public">
          <name>kInstCdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba22f045bfbc19e42ab38b3284bf68b01a" prot="public">
          <name>kInstCdqe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac61835b23d25ce0d2edb182310b1dbb2" prot="public">
          <name>kInstClc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badbd84c23c680e1fc5c7d1a32d2799924" prot="public">
          <name>kInstCld</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8b9a00d58e7f834c1048abfa02c34ecf" prot="public">
          <name>kInstClflush</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baad86a707f35a5c4b1ff0785d7028cb29" prot="public">
          <name>kInstCmc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafbc2a02b92a1feeec3bf56968eca7cd9" prot="public">
          <name>kInstCmova</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa1119aa512f14a269820d7e2250e078c" prot="public">
          <name>kInstCmovae</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba29e834e3e781d48943851116f38b12f5" prot="public">
          <name>kInstCmovb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babb949200403ed00e41a18d134b842183" prot="public">
          <name>kInstCmovbe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae2a720fbdac6b350189d73567eb8b10c" prot="public">
          <name>kInstCmovc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba57a8c8b45c7274fcb79a1d2c01aceeaa" prot="public">
          <name>kInstCmove</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba749787d93dfa6f29569ce462931708c1" prot="public">
          <name>kInstCmovg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacf70bbb035394c1a5b8d39b503db4885" prot="public">
          <name>kInstCmovge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa2f99add94887edf71e703fbdfa4f386" prot="public">
          <name>kInstCmovl</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8f732de7444508104ca681b84a67abbe" prot="public">
          <name>kInstCmovle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad7735d924ee1e2bd0ac8c447c2665716" prot="public">
          <name>kInstCmovna</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba768940a50affe983adae0e02760d1609" prot="public">
          <name>kInstCmovnae</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac192f19a2fca4166f5ddd7cdc6ec3dc1" prot="public">
          <name>kInstCmovnb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7063cc51d36599f89feaffc4eb180ef8" prot="public">
          <name>kInstCmovnbe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7f53a0a23f2f24d9e96a140fc7ef2f97" prot="public">
          <name>kInstCmovnc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babca0c913cd6e57f0dceca10b13e722b1" prot="public">
          <name>kInstCmovne</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba10cfb0cd95e8dd0ae8cac29d1c273202" prot="public">
          <name>kInstCmovng</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1199c1c1b135e3cd65a9d94238dd06e0" prot="public">
          <name>kInstCmovnge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae751192eafbe02ce99f11041cf61372f" prot="public">
          <name>kInstCmovnl</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba61e1e935a88a6ae3af78b5cc02c16273" prot="public">
          <name>kInstCmovnle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba78f1c0a3367f7c5ab67178b0b89c3f64" prot="public">
          <name>kInstCmovno</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba77e87629e4a93a5057436ab754ccedfc" prot="public">
          <name>kInstCmovnp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba358f3f8058967b5dee526aec6ae39abc" prot="public">
          <name>kInstCmovns</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba88e7aa81976d18ba2d08911060ff2379" prot="public">
          <name>kInstCmovnz</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba71f0b653485a7a4661b1d072c0454f13" prot="public">
          <name>kInstCmovo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac7dc74e9d180c193611ed7b5fc7528c7" prot="public">
          <name>kInstCmovp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba51f08d10b29e848781d0cfdf53a7996f" prot="public">
          <name>kInstCmovpe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1da4d1ea07c0179291edaa43d4b85c6a" prot="public">
          <name>kInstCmovpo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab51e6ad5df378d3547eca6bfece4d755" prot="public">
          <name>kInstCmovs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6589ecaa304acf61788611a97bf9fd3f" prot="public">
          <name>kInstCmovz</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0125c16a8e8c17ff041d1de0340b4cec" prot="public">
          <name>kInstCmp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafbed343da4b5ed7673fe00756c3247d2" prot="public">
          <name>kInstCmppd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3c9d5d95e2113370506e510c52ee2a03" prot="public">
          <name>kInstCmpps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae075b84dfa033261ab4ddd2df216d061" prot="public">
          <name>kInstCmpsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8eaafb5d3c04e2f4c8a79024f57c43ee" prot="public">
          <name>kInstCmpss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad276275794739932dd1a4c1f6c3e239d" prot="public">
          <name>kInstCmpxchg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafc3dbcc07f7538ce179a7e6c379e901f" prot="public">
          <name>kInstCmpxchg16b</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baad3aaa2eeaf22b397cfc89529a2c807a" prot="public">
          <name>kInstCmpxchg8b</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba59ef7ed0370637017b5b179fbfa2b67e" prot="public">
          <name>kInstComisd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafc57c8968c101fa3103d455d32d87d9e" prot="public">
          <name>kInstComiss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba42a7c61f79050ab3a7f2f702f37cac47" prot="public">
          <name>kInstCpuid</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3acf6b7c8fa957d4b25f6ac346eea9c2" prot="public">
          <name>kInstCqo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5b66ec14ecaf4a46579a003f2d7ca761" prot="public">
          <name>kInstCrc32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5030a56787d3e035d57ea8e4b8194c3a" prot="public">
          <name>kInstCvtdq2pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad85af89ca31ddef03db74df56efdefe0" prot="public">
          <name>kInstCvtdq2ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacf7cbd26e3c05f7bb13db3f096bf8e9d" prot="public">
          <name>kInstCvtpd2dq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae978b40ce883bb69d92b8ee2d859a1bd" prot="public">
          <name>kInstCvtpd2pi</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba68661bf7f0fff1476a3a5a1a4fa1fdc6" prot="public">
          <name>kInstCvtpd2ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baed0511368d4f5901836245d3a1078dc7" prot="public">
          <name>kInstCvtpi2pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab1e08524c71d623cf91c70d609a672f9" prot="public">
          <name>kInstCvtpi2ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba04daf5c278a4f828352178b2b77e37b0" prot="public">
          <name>kInstCvtps2dq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba909fda2bb0a3166a400d6e54051f093b" prot="public">
          <name>kInstCvtps2pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf8511be01f7f4698b9672d126052827e" prot="public">
          <name>kInstCvtps2pi</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2e10ee55db52388648ada1c1bf7b7f46" prot="public">
          <name>kInstCvtsd2si</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba794bb042e8c1aa14303f395cc6f6990c" prot="public">
          <name>kInstCvtsd2ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac4aeb28e6f33a7544209b316c62d8f14" prot="public">
          <name>kInstCvtsi2sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babf4229965dd83300933e4142180f770e" prot="public">
          <name>kInstCvtsi2ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2dc6da3be5700b3fbea22fccb8923bf1" prot="public">
          <name>kInstCvtss2sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7a47705b5da46b0e7115204560b18708" prot="public">
          <name>kInstCvtss2si</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba89b5134063f9d8d6a7832f6520a8a060" prot="public">
          <name>kInstCvttpd2dq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab68d9cf93ffd5c030c10e4ce0ef32e52" prot="public">
          <name>kInstCvttpd2pi</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba49ff61072e7b4790dbe4c94d3151a43c" prot="public">
          <name>kInstCvttps2dq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae99d4f91c07bb29b81ab52652e3b1242" prot="public">
          <name>kInstCvttps2pi</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba114d45d62e3f769319658ef3c8878708" prot="public">
          <name>kInstCvttsd2si</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babbafd613cc5f3c103ee03c38df55aa6b" prot="public">
          <name>kInstCvttss2si</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8d420f1f37254502d3bc2b051e76af83" prot="public">
          <name>kInstCwd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf17b578a9a9c17150125ffd29e4ed5ce" prot="public">
          <name>kInstCwde</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2de57e2621aca57656c48ae7338d0a5e" prot="public">
          <name>kInstDaa</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baba7ba8e8bc16271fe46f654b0bca5e6b" prot="public">
          <name>kInstDas</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba19cd1a21b90112786356df513a32e722" prot="public">
          <name>kInstDec</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2e25d1f6730ad1981276bf92095d32c0" prot="public">
          <name>kInstDiv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba91d86ecd5375d238074e4727a9c01c06" prot="public">
          <name>kInstDivpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7e09590209b674662b707ef76457cc0b" prot="public">
          <name>kInstDivps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baafb18866d10ed8757bb82080092b433b" prot="public">
          <name>kInstDivsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa5ef76ff2c820cee03bbb3f0e3e83577" prot="public">
          <name>kInstDivss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba26047686e2e464e56ab5650fe17caca4" prot="public">
          <name>kInstDppd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badb25e3cfc4b6d09a11d3b2e7cf6e5618" prot="public">
          <name>kInstDpps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba302de055f330d6de41c13b7548002f9a" prot="public">
          <name>kInstEmms</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2607b5d8d0812ca61e510cac148a08b7" prot="public">
          <name>kInstEnter</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8b9ec3265d935871fb51d144db7dc81d" prot="public">
          <name>kInstExtractps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7058b3aa6f5aef6b6c1832adaface314" prot="public">
          <name>kInstF2xm1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba718a5e512babf812070a3f6671b38292" prot="public">
          <name>kInstFabs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badb0f89afad7930ad025473e020942be3" prot="public">
          <name>kInstFadd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babeaa189a90cca534d428e77db2cbc9bb" prot="public">
          <name>kInstFaddp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0f5697fc66fe1e353205e59e0ef7d324" prot="public">
          <name>kInstFbld</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa8b3168a597ed8a8516b1f4aa7bc0793" prot="public">
          <name>kInstFbstp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba43657758b2964cabc2122ce16213902e" prot="public">
          <name>kInstFchs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1b860e5d72287d619acb1442ba192268" prot="public">
          <name>kInstFclex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6daef8e69fd744a97da35ea1419e60f9" prot="public">
          <name>kInstFcmovb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab9257894b4fd82dd985f85ddeb7749e5" prot="public">
          <name>kInstFcmovbe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa8a4e423d48580aaabf1cf60b266b8d0" prot="public">
          <name>kInstFcmove</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa49b48f98310048e7c8caeb09bd211cc" prot="public">
          <name>kInstFcmovnb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba12d5c462566ddff696728b5897c0f26b" prot="public">
          <name>kInstFcmovnbe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4df6533ead3f9d42d3f83bc91793467d" prot="public">
          <name>kInstFcmovne</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6eadf1bf33b5c53fea7f99b3586fd0bd" prot="public">
          <name>kInstFcmovnu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babbffaca3354cda841393dd3dcb895106" prot="public">
          <name>kInstFcmovu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad320999f3626ed4491ecbd62eecafaee" prot="public">
          <name>kInstFcom</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf0aee15c33d1a45125b9dd11cf94ad69" prot="public">
          <name>kInstFcomi</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba917fb06690b4cb4ec1ab19cd38f2dd28" prot="public">
          <name>kInstFcomip</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba739445e1853352a76a8f6b31ad37011a" prot="public">
          <name>kInstFcomp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac1775fc9e3ec5f6324da41dae26598ba" prot="public">
          <name>kInstFcompp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba94df067de043f37abd980f6310588ef2" prot="public">
          <name>kInstFcos</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba362d2aa60a8bd4340da2c6cd0cac91ed" prot="public">
          <name>kInstFdecstp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac4ae4a2ad9314f0ab7938871d405a66c" prot="public">
          <name>kInstFdiv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf359177b925f869c97553df5b3e9d0d3" prot="public">
          <name>kInstFdivp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1f07f6578f03e6789bbe3669e59fa783" prot="public">
          <name>kInstFdivr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba017de2b603713c7db9c30d7cc2c04f43" prot="public">
          <name>kInstFdivrp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5ce538408d09ecb9065e77b2e747d9ff" prot="public">
          <name>kInstFemms</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab100eed8212af094b528a71f1f27e3dc" prot="public">
          <name>kInstFfree</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba415b5f3db2740fe3d5a498b6dcfc3b07" prot="public">
          <name>kInstFiadd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baba51588c5dc0d35f4ad69326fb324d16" prot="public">
          <name>kInstFicom</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba59e1fe04504d3fd6cee30f64d3142f98" prot="public">
          <name>kInstFicomp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba582be1bdcc35536207b40c45b9465241" prot="public">
          <name>kInstFidiv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baff153e370e0e4180914a6ffb4af559d3" prot="public">
          <name>kInstFidivr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba96e2e402c3509d762a8a15e56b89dbcc" prot="public">
          <name>kInstFild</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafa8e5aeaf56184e4539b3b0f0c9117fa" prot="public">
          <name>kInstFimul</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3fcc542a1630bcb8112da25fb63394dd" prot="public">
          <name>kInstFincstp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac0ab232ed47b85494925c1dc3e3f31b2" prot="public">
          <name>kInstFinit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba96a7dab628b0f55d732388b358e2a19e" prot="public">
          <name>kInstFist</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3088fdda0b36f6ba56430b18988e8a5f" prot="public">
          <name>kInstFistp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba86b9f9ce2d2bb91940044310d4aa642a" prot="public">
          <name>kInstFisttp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3e73120df8fc92683600b9f33d2e654f" prot="public">
          <name>kInstFisub</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7d4900230a8076c66ef2fb8175fd2f33" prot="public">
          <name>kInstFisubr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa90b5212de41eb57371d4960ec47fd45" prot="public">
          <name>kInstFld</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac9632444cb67f000d9bcc792088aab8a" prot="public">
          <name>kInstFld1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2e78092fc52ebaea58547ac663f26534" prot="public">
          <name>kInstFldcw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae058c802fa5ed6c130a567a9f85b35f3" prot="public">
          <name>kInstFldenv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacac3550725f0c0afde914dc9d6017ee0" prot="public">
          <name>kInstFldl2e</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2d5ada3f8460a537dc8cfd042cdb9349" prot="public">
          <name>kInstFldl2t</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badc485b404132659285120444dd30609c" prot="public">
          <name>kInstFldlg2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9e23ae38bf6105de3871593f6c5cfc1e" prot="public">
          <name>kInstFldln2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5095f4c50eb346453f83a3eb507af8ec" prot="public">
          <name>kInstFldpi</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf740d59d4cac79f4cf2b254250265583" prot="public">
          <name>kInstFldz</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba95090bc7e3b633d158b03adc0a11d955" prot="public">
          <name>kInstFmul</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9f0850edf496f608273a86099af39ec7" prot="public">
          <name>kInstFmulp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8dc969666648b0df9efe79e499d35a60" prot="public">
          <name>kInstFnclex</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae0945830872b7dae55a948dabefd28c2" prot="public">
          <name>kInstFninit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac50fd310572e98b21d88b95d60e0e358" prot="public">
          <name>kInstFnop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2afa30d33485603fe6538bdeb3a0d3a5" prot="public">
          <name>kInstFnsave</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba313dffe45b5c992213e384bb2b8c086b" prot="public">
          <name>kInstFnstcw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad20210b3338d82eb165c518af7c4f574" prot="public">
          <name>kInstFnstenv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba40036a48678fdf750fb730ec75831ddc" prot="public">
          <name>kInstFnstsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3d43a6f501799d187a948524d5964d1e" prot="public">
          <name>kInstFpatan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba30046d81d7aa165d9f5650adcfa6dbab" prot="public">
          <name>kInstFprem</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac879f39efb38e4594b0f99f3911ca22f" prot="public">
          <name>kInstFprem1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6b88eeb4b820cbb49d58a96bf4f06a78" prot="public">
          <name>kInstFptan</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2b1bcf9c27172d188be76efd7f1b8ea4" prot="public">
          <name>kInstFrndint</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba62acbf4dcdd0326aa9efe41052a07956" prot="public">
          <name>kInstFrstor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae68869ae0e99edac026db9ff5caef403" prot="public">
          <name>kInstFsave</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa0974b1b5479ca37f1c1daa0e8f981e1" prot="public">
          <name>kInstFscale</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0ecf6f024eb06949203d0ae4d6373c60" prot="public">
          <name>kInstFsin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba482636c71bdf92e6e5115c2268b3c927" prot="public">
          <name>kInstFsincos</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf2ad74e89903897509cab575dd0825da" prot="public">
          <name>kInstFsqrt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf21d733fc1629726603303c0ec092768" prot="public">
          <name>kInstFst</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badc43469a1639f06c13d2294538b30138" prot="public">
          <name>kInstFstcw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3c3d8f89f83e6688fc08e9529776722e" prot="public">
          <name>kInstFstenv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baea4725378ade11b15177afa1addf8197" prot="public">
          <name>kInstFstp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac0b6adcf05554e1214d9f3c45be5acec" prot="public">
          <name>kInstFstsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba36baf00f2e7a26daf8a882136f2e81b9" prot="public">
          <name>kInstFsub</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7fcffd38093f750c170232ef4f9abadb" prot="public">
          <name>kInstFsubp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2b18ae32f6a0ff85148cd9a825987dc2" prot="public">
          <name>kInstFsubr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3bfb35b338b60eab50f2f639d778211f" prot="public">
          <name>kInstFsubrp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac39e9967816af9625f32e1ff8af9b720" prot="public">
          <name>kInstFtst</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba082703165a68032591fb1fb4ef2978af" prot="public">
          <name>kInstFucom</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba836271142049912e76e5c14b331e6593" prot="public">
          <name>kInstFucomi</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac686abe59f8dd7f6777f67e71a481c3f" prot="public">
          <name>kInstFucomip</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba52b90c53abfe33805b375315821505ec" prot="public">
          <name>kInstFucomp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafd4100986138c682877db4af7090f7ef" prot="public">
          <name>kInstFucompp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae07dd1183376f1ca26e17a2c089f09e6" prot="public">
          <name>kInstFwait</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babd7dc10b7956f94df8a2ad1c63165c56" prot="public">
          <name>kInstFxam</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6bb6d5a076deb03a1b7a0a00cb1e7601" prot="public">
          <name>kInstFxch</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0b4547580762e716aa99d11d6ea987e1" prot="public">
          <name>kInstFxrstor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba69de783aabdee74a58e72b952ab01a63" prot="public">
          <name>kInstFxsave</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac15dd38bdfc9a3582f38d52975dfbdc2" prot="public">
          <name>kInstFxtract</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba01d41592399113a359a673840341e90c" prot="public">
          <name>kInstFyl2x</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba06063f2ff52b178843fd56ce31ce019c" prot="public">
          <name>kInstFyl2xp1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0819d4424b13ac99e62f0da68363b60e" prot="public">
          <name>kInstHaddpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba76035567eba4d56023fed58f6eb597f6" prot="public">
          <name>kInstHaddps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba52a03d3a4420270494922973dd8182d7" prot="public">
          <name>kInstHsubpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa76ae33ccda8a733702d478c94af8c2b" prot="public">
          <name>kInstHsubps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba94838f7dc4f611927e0cc667e1e5802d" prot="public">
          <name>kInstIdiv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba194a70c85cf508c184f44dedd6b4eb5a" prot="public">
          <name>kInstImul</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba23a13708ce1496b3cca37314aaf58720" prot="public">
          <name>kInstInc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba37a5badad9b063eff0d939d6db6d3613" prot="public">
          <name>kInstInt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6d21141167863acef8fb0fe931881de0" prot="public">
          <name>kInstJa</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba306795d5889c82f76847cb471533e124" prot="public">
          <name>kInstJae</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba322ae9cb3f4d7c305c345602084ff368" prot="public">
          <name>kInstJb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba568c083e64836353ccba4cd1c9571789" prot="public">
          <name>kInstJbe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba239c5cfc9ebdb35366ec877ca298846f" prot="public">
          <name>kInstJc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4a8b033f200cf67b6500fe20a243b5b0" prot="public">
          <name>kInstJe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab39078f99ccdfefd352336fc75fed2a0" prot="public">
          <name>kInstJg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba689896db4e31b1195845e59e94781a5c" prot="public">
          <name>kInstJge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba094bd895a36f7dd80eafb219d3e319d4" prot="public">
          <name>kInstJl</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baad274012cea176851cf7f75fe7c3decc" prot="public">
          <name>kInstJle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba120b3eae1bdb984672bb75e56f399fc6" prot="public">
          <name>kInstJna</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2fa9ce2ad6f55a6b3dd7b54f19ce5606" prot="public">
          <name>kInstJnae</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae827f4820a7d2d525d7a9f270163d10c" prot="public">
          <name>kInstJnb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba60157e9c7d6641f1b6b5535b8814adad" prot="public">
          <name>kInstJnbe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba046ab9d2910f27f16cdb9df001365e2c" prot="public">
          <name>kInstJnc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bada997ae95616dd00fbbd04fb242e7b82" prot="public">
          <name>kInstJne</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baab5315dc42787be7ac262061df9ce498" prot="public">
          <name>kInstJng</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9db6dd7ecd16da44e400ac02d4d268d4" prot="public">
          <name>kInstJnge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad3a236dc27fbf51db35d8db665e60190" prot="public">
          <name>kInstJnl</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4b40d9c90e1b087b54a8ec532e4032d9" prot="public">
          <name>kInstJnle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba50f78b8c52183b97f048cb5dec1b091c" prot="public">
          <name>kInstJno</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babece79c01104b5aaa771f829f2cbc536" prot="public">
          <name>kInstJnp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6fa7fd23dc8b58d857f88f12a8aadf7c" prot="public">
          <name>kInstJns</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa82d9cf1911388e9819e8afd091c229f" prot="public">
          <name>kInstJnz</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba73e82b859528ee106cccce76e9820548" prot="public">
          <name>kInstJo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba70a1e117967b93339caba91e7b5d49f3" prot="public">
          <name>kInstJp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7089868df6a5d695b34c3b5dfa559593" prot="public">
          <name>kInstJpe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baad93f5823c6b62c8691549fae730c7f3" prot="public">
          <name>kInstJpo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babfd781425fa5b67505f77bfeffbcb0ee" prot="public">
          <name>kInstJs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf0d2d9d718495c97d964c94bea7b46d2" prot="public">
          <name>kInstJz</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafd9552b25483e8f56abce240b2e2f015" prot="public">
          <name>kInstJmp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab3cb0f3c2f2b913cf3ccfd1f5591bd57" prot="public">
          <name>kInstLahf</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badb0be9dbccf161b40fab25fda1d577b0" prot="public">
          <name>kInstLddqu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba75efd489fb028d6a51b33b3214a40530" prot="public">
          <name>kInstLdmxcsr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba051b5653267caf68a427cfd641db5c08" prot="public">
          <name>kInstLea</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba66fc9fc9f2f0234ad3cc2d673eaf1bec" prot="public">
          <name>kInstLeave</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba95b7de577a6dd09227a3867ae3052904" prot="public">
          <name>kInstLfence</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4b517eaa8022772f50663096b2d5ef7d" prot="public">
          <name>kInstLzcnt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad2bb7bfac379ab4a54104eda36a4b292" prot="public">
          <name>kInstMaskmovdqu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9da3fbe97e06aa3a9907696bd3627cea" prot="public">
          <name>kInstMaskmovq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacad0982c22dbcfa75a9a0a1f0c1f97d9" prot="public">
          <name>kInstMaxpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa2309ebf21915b7fa7cc7ff9a6515a7b" prot="public">
          <name>kInstMaxps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7636cd057b00da9e96579b5a745911dc" prot="public">
          <name>kInstMaxsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba41b2901aee43ffcae466c669db0b0fef" prot="public">
          <name>kInstMaxss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac1c0532baf1f32919dcecdf71143d019" prot="public">
          <name>kInstMfence</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2aed740ab7008c82d0c3364575869ca2" prot="public">
          <name>kInstMinpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba982c3c6b8f79b257c1ffa06a71178b47" prot="public">
          <name>kInstMinps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba81bb8014e52760d75d67f7b6043940d5" prot="public">
          <name>kInstMinsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9a2636ea9ce61412a266b3a35409f0bb" prot="public">
          <name>kInstMinss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6937feacb198d96d25463c02c12f780e" prot="public">
          <name>kInstMonitor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9b289036cb1be62e3b4999cab848ee8e" prot="public">
          <name>kInstMov</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba94d8ca44b69d7a6dcff81ea58b47fd42" prot="public">
          <name>kInstMovapd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba78cc597ad591b9c7a28ccda9db111636" prot="public">
          <name>kInstMovaps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab002cddf437d636d0c2aa8ef7232125e" prot="public">
          <name>kInstMovbe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baaca011dfe7d3f0e1aa1fd9fa0828d7d7" prot="public">
          <name>kInstMovd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babdc9dc9eee5a1a27cf9dccf1a9112d69" prot="public">
          <name>kInstMovddup</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baeee6eb23f6df38e3dc1a931806b1631a" prot="public">
          <name>kInstMovdq2q</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae338618460215270b49d4833f2cb1d14" prot="public">
          <name>kInstMovdqa</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba186e3dd24ac7e36ad7c27cbd95b5faa1" prot="public">
          <name>kInstMovdqu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa52b0bb952a7c9791af17590a35f6100" prot="public">
          <name>kInstMovhlps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5adf7bc7547d59ed1c33bb39c2bcec06" prot="public">
          <name>kInstMovhpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba991e35bda3bf43653c80ec3a48fecc54" prot="public">
          <name>kInstMovhps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4430771a24f3e66560291be69857daa2" prot="public">
          <name>kInstMovlhps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baaec7875b679afafd8935d4e90c69d49f" prot="public">
          <name>kInstMovlpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5aadf62bc1a361914c49948b80e40747" prot="public">
          <name>kInstMovlps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba52e0fd363dff9c1752e7e9a8a3080340" prot="public">
          <name>kInstMovmskpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bade872306596182cbff753afb2843282e" prot="public">
          <name>kInstMovmskps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba69de8b4ac304237f3a3b7cde5e53ea39" prot="public">
          <name>kInstMovntdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0a636ec06daed22cea3f28dd4721795c" prot="public">
          <name>kInstMovntdqa</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab16f53e59fc00ddb043869d02c375616" prot="public">
          <name>kInstMovnti</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5f93939f6a54666541d1d66732247f5e" prot="public">
          <name>kInstMovntpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa2758d4d18cf76f3e724ec9a2563a174" prot="public">
          <name>kInstMovntps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba67d5befc9480bf182b0df7cb7cba7370" prot="public">
          <name>kInstMovntq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba301a7b171dafe36f4be09ee11380e419" prot="public">
          <name>kInstMovptr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba89d9d83e32c5ca4e01f49f4d0a944553" prot="public">
          <name>kInstMovq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4df6d4f172a9e2863aa96cd0657257ff" prot="public">
          <name>kInstMovq2dq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba00ab01d695ef09384bddb5fb12bb1529" prot="public">
          <name>kInstMovsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8139a56fd0e1fd4a3e3aef90d8d1947c" prot="public">
          <name>kInstMovshdup</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baea7cd925d37e3447563e66888a386549" prot="public">
          <name>kInstMovsldup</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba98502e049abf5c59f1ccc74c47362c9f" prot="public">
          <name>kInstMovss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa2e9edcf5662c9f49dc304edf534e836" prot="public">
          <name>kInstMovsx</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8acc1aad472cb565f4ddfc819373fdc3" prot="public">
          <name>kInstMovsxd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba585a87f74bf519a422316f2db678064f" prot="public">
          <name>kInstMovupd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba449aa788382f8680d381cb316697a472" prot="public">
          <name>kInstMovups</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae5e0d61bd38e3c099f58ac90b4604921" prot="public">
          <name>kInstMovzx</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba74098e80f0d2d4aafe31c8476fde8c14" prot="public">
          <name>kInstMpsadbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba451517752cc2acc394e76dc31dcd7df6" prot="public">
          <name>kInstMul</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9afe11187b90291363fa2a35e14c74e5" prot="public">
          <name>kInstMulpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8231b5e8cab17bb724b15dcb4c88cda5" prot="public">
          <name>kInstMulps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba21d0ddd9ee8dccbbf81979525c402874" prot="public">
          <name>kInstMulsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf45dc8c0f30e6a53bdf04454db531e64" prot="public">
          <name>kInstMulss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafc89beb80f86907a42cb119843fc8891" prot="public">
          <name>kInstMulx</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba973c709d49a3be9539478dedde1936d6" prot="public">
          <name>kInstMwait</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba19e3d45f0821d7dd5d4cd3078b514fdd" prot="public">
          <name>kInstNeg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1edff8dc06ca65b54155c68b6db622b2" prot="public">
          <name>kInstNop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba08ed8074a2dd28a7d6dedb364b3c6cfb" prot="public">
          <name>kInstNot</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9ace94c251ca5749364a13e70fe6d38f" prot="public">
          <name>kInstOr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba38fcf185638fe843853d81d4667d4213" prot="public">
          <name>kInstOrpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf407fcee4008e3208577eb687e68adbb" prot="public">
          <name>kInstOrps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6585728cb8bf95e6dd5f75cb3131a277" prot="public">
          <name>kInstPabsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba65e78a333e77b6939ce039182672a1d5" prot="public">
          <name>kInstPabsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2c98310522327e142a680ba35b23ea9e" prot="public">
          <name>kInstPabsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba43f1ac40a7896abb83188c731dff2d1e" prot="public">
          <name>kInstPackssdw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6eef17f8ec483b96abd8cc44c68bfefb" prot="public">
          <name>kInstPacksswb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba763bf9d30bcc8e84244462ef0051bf26" prot="public">
          <name>kInstPackusdw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba25048edf909d584cc364351308f0677a" prot="public">
          <name>kInstPackuswb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacd7c114776f045bfd9237ca4612ebc28" prot="public">
          <name>kInstPaddb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac03099f2b9cf39fc6bfb2b0eb939219c" prot="public">
          <name>kInstPaddd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba36b1d344870f5922ec5809694b6875c1" prot="public">
          <name>kInstPaddq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac682ff44e0f9e02b2e935feeba512a1e" prot="public">
          <name>kInstPaddsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3b2e19fa3fed43e50ca0b89d6ac42755" prot="public">
          <name>kInstPaddsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa2e22b237c3580e0b7ee2361335049e9" prot="public">
          <name>kInstPaddusb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7d94382f8b121a3e161f578420ecbb65" prot="public">
          <name>kInstPaddusw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba96626a2a5cc1757394cecc21f66b7cd5" prot="public">
          <name>kInstPaddw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac7c6066cb6c6d84e434f84fe4ba45f98" prot="public">
          <name>kInstPalignr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab1cb6979aa36f47bd9fe6e23a14fa3a9" prot="public">
          <name>kInstPand</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba099e53c87233e93a5fa3d4382324a1ad" prot="public">
          <name>kInstPandn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba36d4f4e87d40094c225894c5abc7a89e" prot="public">
          <name>kInstPause</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baea91ed475c28fa4d471e913ccc2639e1" prot="public">
          <name>kInstPavgb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba440b4ccf834e9e4efad13fa9bce16a98" prot="public">
          <name>kInstPavgw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badb66d28e0b455b9e7c54a2ee49f93db1" prot="public">
          <name>kInstPblendvb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9fff99634546d3d944cb31be25e1c87a" prot="public">
          <name>kInstPblendw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba25411ee55715b9ca30a03f9eb61e69f3" prot="public">
          <name>kInstPclmulqdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0ec135367b89bb8512267a559cb4cee8" prot="public">
          <name>kInstPcmpeqb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3d09de5df6a1f840b0991de2c0b75606" prot="public">
          <name>kInstPcmpeqd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8de2c45734b29e80d23602d8f95bc539" prot="public">
          <name>kInstPcmpeqq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baadb590af54c8385ad60bd034b8488dcc" prot="public">
          <name>kInstPcmpeqw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba61e04d878166d02447caa9aa7147a00f" prot="public">
          <name>kInstPcmpestri</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba901d4aeb80df1087eed96d8aa362db2b" prot="public">
          <name>kInstPcmpestrm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8857fcc1de280a8979931f94f1f61189" prot="public">
          <name>kInstPcmpgtb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba285683cb15e1c40e6843eac87eeb1c39" prot="public">
          <name>kInstPcmpgtd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba18d9e2867cbde9e5e658201df52a6282" prot="public">
          <name>kInstPcmpgtq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba03531f2caf7e4b33b16824bfced38143" prot="public">
          <name>kInstPcmpgtw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf19e6944f7e61454bd01f7f6ae4a41db" prot="public">
          <name>kInstPcmpistri</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa3b3e63bcae39208113a1ac178f02d38" prot="public">
          <name>kInstPcmpistrm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba921d461a179438f58ea98cafcaa2fc31" prot="public">
          <name>kInstPdep</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1c5507dbacbc75b4dedc69c6d88f5718" prot="public">
          <name>kInstPext</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0a772dc221a2996eedf4f88a4025ed46" prot="public">
          <name>kInstPextrb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae3cc91739dfac2af732c12df6d1f4d99" prot="public">
          <name>kInstPextrd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5cb4473af7450cc66d8a6f6f9ef72937" prot="public">
          <name>kInstPextrq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7a9d81d038a7e179164bfbfa9cb5a2ec" prot="public">
          <name>kInstPextrw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba623aa166f7709528d71a9e4ecb7d1c4d" prot="public">
          <name>kInstPf2id</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba53e6848a070039fa488c965b40b94974" prot="public">
          <name>kInstPf2iw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf1261ae86280728000e038b94c09b3f5" prot="public">
          <name>kInstPfacc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba02eba2428b0ed9ef6b7c16c02c63d930" prot="public">
          <name>kInstPfadd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac818d7d7ed15e7564915e7057a7432b4" prot="public">
          <name>kInstPfcmpeq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6e81861d7f9d860472d610089589d5f5" prot="public">
          <name>kInstPfcmpge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6b26d2c110de7a244bc4709a5e6b3842" prot="public">
          <name>kInstPfcmpgt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baaa04ff620d10dcc8fa8f71b987db84a3" prot="public">
          <name>kInstPfmax</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba73eb98c58ff100ce60439caed50d7c03" prot="public">
          <name>kInstPfmin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2641b731849e51d6031308e7315e528f" prot="public">
          <name>kInstPfmul</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba58f2dd8520cf035b95d4fe4d6a11ad5c" prot="public">
          <name>kInstPfnacc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab362995c4fdf8bed49457a5be53d8d01" prot="public">
          <name>kInstPfpnacc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba40bceb729ab51335cfa600cc56ad25a4" prot="public">
          <name>kInstPfrcp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babb65407260c869fda6c05e324a6a6183" prot="public">
          <name>kInstPfrcpit1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2e5073a54f55be98307ef2b340b29a11" prot="public">
          <name>kInstPfrcpit2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae33e3a111e79faeefda5d0e2cef06da8" prot="public">
          <name>kInstPfrsqit1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4ea249efbdfa93d4602c83be51ea5bab" prot="public">
          <name>kInstPfrsqrt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badf63f7fa6196427ec74d4b336563da10" prot="public">
          <name>kInstPfsub</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba375cd884d9551e7183a33ff728ba0552" prot="public">
          <name>kInstPfsubr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9b1b4fc3ae9bebaa3291aabd54e8ecea" prot="public">
          <name>kInstPhaddd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba83fa0953fe0c0bfbacf4013479a8b9a7" prot="public">
          <name>kInstPhaddsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba44d369ebdd5c1c6b2b06d2962494b9fd" prot="public">
          <name>kInstPhaddw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba27e3dd110ae5812e21d40606f4fee112" prot="public">
          <name>kInstPhminposuw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0f40d33f706d972a3f109a310302ca83" prot="public">
          <name>kInstPhsubd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5f6c1cea12740d8a77d262d2360fd750" prot="public">
          <name>kInstPhsubsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba17734bc0a619c5e529188b0286b018e3" prot="public">
          <name>kInstPhsubw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba23ccbb61fa33532b8524aafd04185900" prot="public">
          <name>kInstPi2fd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae27b153c2c7fcbacf08a52f638dfd292" prot="public">
          <name>kInstPi2fw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7a4420fdeac335d21b16730842dd79bd" prot="public">
          <name>kInstPinsrb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba082d57857b75d894cacfdaa4ef3a5560" prot="public">
          <name>kInstPinsrd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab896dfdd606c5197f9a44640bc0ddf17" prot="public">
          <name>kInstPinsrq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba739039e3c12b3d28227aecda736f7e02" prot="public">
          <name>kInstPinsrw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac1dc23c9d29fa1f6d0247d12f8aa77d4" prot="public">
          <name>kInstPmaddubsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba32c206b70c7ddbf2437b5492b886548c" prot="public">
          <name>kInstPmaddwd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba448a39957595764b94277eb53842e05a" prot="public">
          <name>kInstPmaxsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacfe2dc041d0d75a3bb9e236bf2f5b114" prot="public">
          <name>kInstPmaxsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf2b03575bb7999159fb6938b49de0e62" prot="public">
          <name>kInstPmaxsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba24c560534d87151279638d537c694669" prot="public">
          <name>kInstPmaxub</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baeca1bd6908aa98914f68c4eb83689604" prot="public">
          <name>kInstPmaxud</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0833826800a5d998095c9347720dd4b2" prot="public">
          <name>kInstPmaxuw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2827ac7796bae93f0b1ea750d7eaf9d9" prot="public">
          <name>kInstPminsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba44548abbb3696399142355f2c40a15ff" prot="public">
          <name>kInstPminsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafbc59dde1aa4a41eb8f1c965a4044ecd" prot="public">
          <name>kInstPminsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5aaf3da18bc6f1146e7cc64fbd595004" prot="public">
          <name>kInstPminub</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba088be0eab7a4e37f60b48714d7587ebc" prot="public">
          <name>kInstPminud</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa8fb6875f468b06736aaceded8411471" prot="public">
          <name>kInstPminuw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba744968e86f58d7ebb13a927eccdf8edd" prot="public">
          <name>kInstPmovmskb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7ae734ee39b0eef693edaac0f907dc75" prot="public">
          <name>kInstPmovsxbd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badace7820f38dcfbffa771d371c005faa" prot="public">
          <name>kInstPmovsxbq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacde4b7180bd07054a41cec12c8633586" prot="public">
          <name>kInstPmovsxbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5273d68937bf6765bf715dfbdf55488d" prot="public">
          <name>kInstPmovsxdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab8ddc1f054f49f62322341dbaec76b58" prot="public">
          <name>kInstPmovsxwd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba117b84a07c0794a9566616e71e909493" prot="public">
          <name>kInstPmovsxwq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4c634f89152c812196c908bec4b545c7" prot="public">
          <name>kInstPmovzxbd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba44016df52a279144701df3a319a97952" prot="public">
          <name>kInstPmovzxbq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac1e8815ff3da69c5c03bb3187564ea3b" prot="public">
          <name>kInstPmovzxbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba140e22ab6be6a7ec5b5f1ecdd9822214" prot="public">
          <name>kInstPmovzxdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba13095723c2b1c4414f601ddcd23ba649" prot="public">
          <name>kInstPmovzxwd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae296f95b5a4009f95c3dfae32b906ff3" prot="public">
          <name>kInstPmovzxwq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba83018e891fcd22b01d9eabc9269c3110" prot="public">
          <name>kInstPmuldq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7183dd915ded8253e05ca8b63ca48250" prot="public">
          <name>kInstPmulhrsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9823e10c7beaafc8d0bbaf38eab0c66b" prot="public">
          <name>kInstPmulhuw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa0ec05035421a8ca5a77ffb02732025c" prot="public">
          <name>kInstPmulhw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab977df5a02d18591907ed84cf1135a63" prot="public">
          <name>kInstPmulld</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0f9cb8e4b73d6543b69b59ea120b53b6" prot="public">
          <name>kInstPmullw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba744a1994547dfaf324056932c27b33b0" prot="public">
          <name>kInstPmuludq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7e9a75b0aa4af107e057101a32e02953" prot="public">
          <name>kInstPop</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf5090bd2516ea9335de1e719c8fe9b44" prot="public">
          <name>kInstPopa</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9e8422fd0eea04330e73971eaba5fd83" prot="public">
          <name>kInstPopcnt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf73f34c5bb41b9873054188c5a4091db" prot="public">
          <name>kInstPopf</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab95dfb58a1596334ca48e96dbc98c88a" prot="public">
          <name>kInstPor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2128e4cf77b85edfb50aec414e326bc8" prot="public">
          <name>kInstPrefetch</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6bd43999ed1b07fca62be84bf88e547a" prot="public">
          <name>kInstPrefetch3dNow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba821f27fd0a0e239e22e305b577270f0a" prot="public">
          <name>kInstPrefetchw3dNow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac558114cbdb555f230ddd544f437592c" prot="public">
          <name>kInstPsadbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7323447e47067f08b8f50b8e87a4f35d" prot="public">
          <name>kInstPshufb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba286584cbd0e68c35c93f52110bd70d98" prot="public">
          <name>kInstPshufd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba12cef18c645ecabbce9e280cdb13f534" prot="public">
          <name>kInstPshufhw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7d18433108d28d555aa2195a2b4f0ad9" prot="public">
          <name>kInstPshuflw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba647547259d1fae9b8027f34f58465659" prot="public">
          <name>kInstPshufw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf2b54af0dba2d42400f3b0e6f7dd7deb" prot="public">
          <name>kInstPsignb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae643679262b584b0321d8ade2c4c1204" prot="public">
          <name>kInstPsignd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafa7a0bbaa759c45207b4f9d112cf3068" prot="public">
          <name>kInstPsignw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5721a19050008e639f83c29bcb199afe" prot="public">
          <name>kInstPslld</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba739c7ff00234d76d2e997964320165a7" prot="public">
          <name>kInstPslldq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba56ba8a1b2f894832365a8e700b56f9c8" prot="public">
          <name>kInstPsllq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa2b7dceabb1bbd3950310af486d76ab0" prot="public">
          <name>kInstPsllw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab3fee5ee08544390d194257804f77147" prot="public">
          <name>kInstPsrad</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacd6e69c112912207b5ddcd14228ff170" prot="public">
          <name>kInstPsraw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba25cb29ad1f39d87f5145dd8f4a5c09e8" prot="public">
          <name>kInstPsrld</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baba846cf451aad46312da60dbbb603a7d" prot="public">
          <name>kInstPsrldq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba154759e317687b5dc6ecb65f1a0ec7e7" prot="public">
          <name>kInstPsrlq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba612ac66412757905b700ec33f7f39851" prot="public">
          <name>kInstPsrlw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6ad207c59c3f37d01b6ea3073618d109" prot="public">
          <name>kInstPsubb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacd5928a2b6f53c2d245000da7e84f9d6" prot="public">
          <name>kInstPsubd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba26e1c802d9599f4a4793b2b8642a959c" prot="public">
          <name>kInstPsubq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab3adc29ce6e652ed6a114f749a1f4038" prot="public">
          <name>kInstPsubsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad0d2d56838e8baf2cdf4fb65e5c4d044" prot="public">
          <name>kInstPsubsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7d65b7dd9cb58f9b7c25fd66d2d0c21c" prot="public">
          <name>kInstPsubusb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7a44210dc34079b8dca272b6b9f8ee9d" prot="public">
          <name>kInstPsubusw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9eae536771fbf570378f23fe3cf0b6c4" prot="public">
          <name>kInstPsubw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba72f86f9a05ad8b8f23c65e311ff25623" prot="public">
          <name>kInstPswapd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0273b281204b7742d8c135e783485ea6" prot="public">
          <name>kInstPtest</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3d95d5055b3e2335c1a4d7ead2f59692" prot="public">
          <name>kInstPunpckhbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad29fde7ed033801bb63d78009c74d10d" prot="public">
          <name>kInstPunpckhdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab10204262fed88892684fc5e9b8dce58" prot="public">
          <name>kInstPunpckhqdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac8d17294206e46a93985368c2178331d" prot="public">
          <name>kInstPunpckhwd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba22284750f9a5b82d28dc613f46d50d1d" prot="public">
          <name>kInstPunpcklbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baafc9f04ca0a26ae36c6939a75eabb0e7" prot="public">
          <name>kInstPunpckldq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba894388d2fe0773b944f33e722f4c4556" prot="public">
          <name>kInstPunpcklqdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba81302f98fa3e8aad30600317808fd587" prot="public">
          <name>kInstPunpcklwd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab12027c67443c3c6fa0032abcb48b686" prot="public">
          <name>kInstPush</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab8a38d0069a988641301b62b71d77d85" prot="public">
          <name>kInstPusha</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3e9237530454635f15ba5b801b7c9c66" prot="public">
          <name>kInstPushf</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baeaabcfad140732460dde41666cf6023b" prot="public">
          <name>kInstPxor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8fe41694ef7b189868d71cafea8eb4ff" prot="public">
          <name>kInstRcl</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba72186daf32970b18b83fdd07fb3e8279" prot="public">
          <name>kInstRcpps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badf71d62f0d52dd9f4dcc29b65192628c" prot="public">
          <name>kInstRcpss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3d8f3fbd4f23832115974adb4f4ed494" prot="public">
          <name>kInstRcr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2d5bffb23ce714e0320b2eb5ef5ec6c4" prot="public">
          <name>kInstRdfsbase</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9cb70689ac4da4bcb7f33df91e7265df" prot="public">
          <name>kInstRdgsbase</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baee1ee3fed242582a5d6df6f6dfbc771e" prot="public">
          <name>kInstRdrand</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa43e96f73359fab8d4f7d0df5ebc59e0" prot="public">
          <name>kInstRdtsc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baeb8c6f67f34bb9c3e95724434e9a40d1" prot="public">
          <name>kInstRdtscp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7d8e7e4b7e564893022bcd2c2e0e8277" prot="public">
          <name>kInstRepLodsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad56bc8b95295ce4b4d8f207c7a72e7ed" prot="public">
          <name>kInstRepLodsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf7b531a1431029fa11f7bcf568c3e611" prot="public">
          <name>kInstRepLodsq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0db6ceb599fb528394d3ce38b8aebc55" prot="public">
          <name>kInstRepLodsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafad8651719e5bf5f8b5f6790a9bc7e70" prot="public">
          <name>kInstRepMovsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba378bfdeb8c2e238d8c3bd66d2fe39835" prot="public">
          <name>kInstRepMovsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6c9b7d4a3d49f97a603176171e859e7a" prot="public">
          <name>kInstRepMovsq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba820e55e57b978faa311033d2abe9665c" prot="public">
          <name>kInstRepMovsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba14ede1dd575df7a69aaf2db227c5bb2d" prot="public">
          <name>kInstRepStosb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8ac43e9695951ac3149731c28c8fdb29" prot="public">
          <name>kInstRepStosd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf0ad2d288659ac7395b115087090f757" prot="public">
          <name>kInstRepStosq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba601bfcecc91821d038a6b5c802342982" prot="public">
          <name>kInstRepStosw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa451af4477cba10b546357f15bcf983b" prot="public">
          <name>kInstRepeCmpsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba653c7246c7efa3ddfcce3e4d1fea1cc3" prot="public">
          <name>kInstRepeCmpsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3de1965611acd520a7e0999aacf99a49" prot="public">
          <name>kInstRepeCmpsq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf7933a0638401fd384bdcbe6e3039f46" prot="public">
          <name>kInstRepeCmpsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa3fb72c28a40f3999423f47638af8b35" prot="public">
          <name>kInstRepeScasb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba20cc42031ddbd9b0b447785115bced91" prot="public">
          <name>kInstRepeScasd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa8d0d3b4eff3d10fc523c675897b7a95" prot="public">
          <name>kInstRepeScasq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba65fb76dd64eb2bf8b7bb2e566ee3bcf9" prot="public">
          <name>kInstRepeScasw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf77cd354ee0832b1f072c2f8f0e38421" prot="public">
          <name>kInstRepneCmpsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac49b7fb4943f1d81643ebe9964b1b3d6" prot="public">
          <name>kInstRepneCmpsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa2a1d104b0976db22c91f630db9d18d8" prot="public">
          <name>kInstRepneCmpsq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2a76b26c2869a5fc20bab99d56e37790" prot="public">
          <name>kInstRepneCmpsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bada20033f915faf4f0b5149ed69615ee7" prot="public">
          <name>kInstRepneScasb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3ecc1abeb8f76b5d4d17e46cf1dc1aee" prot="public">
          <name>kInstRepneScasd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad5337ce4f69599e69d9dcde47063034f" prot="public">
          <name>kInstRepneScasq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba71524ac4d417e29b9c337551df7969a5" prot="public">
          <name>kInstRepneScasw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3c97f901f1181fe9a0a0c0d38635c9f3" prot="public">
          <name>kInstRet</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3fcb64fe8fd2b784f2811dc926253c56" prot="public">
          <name>kInstRol</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba60a11d73182341306584a7c2c1ec810a" prot="public">
          <name>kInstRor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba92256eab5463e864db9632be0b31c3ba" prot="public">
          <name>kInstRorx</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4b3ee66c6b2155ee575e7407b1c37ca9" prot="public">
          <name>kInstRoundpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba55664ab4b941dd5feca9cfae0c891ca8" prot="public">
          <name>kInstRoundps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba97dae2f3046ec9ac17e3bc1cb2d9ccd2" prot="public">
          <name>kInstRoundsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba25a186696f689806dd2ed581b56538fd" prot="public">
          <name>kInstRoundss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba912fd26e3c0444c975b7eed17df77d08" prot="public">
          <name>kInstRsqrtps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba10d8da1cb093d2b374154feac5738251" prot="public">
          <name>kInstRsqrtss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2884f236518ea8eb153553813439f88d" prot="public">
          <name>kInstSahf</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba745d64120b5bc4afc81ba3989cb2df3b" prot="public">
          <name>kInstSal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1316178fb3cad82776f438f289d28578" prot="public">
          <name>kInstSar</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba255c158f79a7201df33736124afdc557" prot="public">
          <name>kInstSarx</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba26db770170ef150271b9244fdd183b9a" prot="public">
          <name>kInstSbb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba83c463f6374bc09ed5425cd8847576f5" prot="public">
          <name>kInstSeta</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab6e3a46e9f080f2741ede7fff1bc7569" prot="public">
          <name>kInstSetae</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba637e20494a087fc8622811cbc1564655" prot="public">
          <name>kInstSetb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab1e6784aaa47d08cbfd24820e39928d3" prot="public">
          <name>kInstSetbe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baace8c5108be8b51367fc7b4f9669efb9" prot="public">
          <name>kInstSetc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baec6b06ce34e4ee60863688d0bb8fb445" prot="public">
          <name>kInstSete</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad8e6935e3426c3c9650308359935dce4" prot="public">
          <name>kInstSetg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba427d91d8c382111aa8fadf87bfe73a52" prot="public">
          <name>kInstSetge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba95fcdf05f6fcce5f75f94b40d531b476" prot="public">
          <name>kInstSetl</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6a9b7fce6653f21ffaa2a6b7cef4e6b8" prot="public">
          <name>kInstSetle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baad58701dc8d716001376d31a835f6455" prot="public">
          <name>kInstSetna</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab4f703cd334751a9916cf25ba0829333" prot="public">
          <name>kInstSetnae</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae00899de3b073b721e6c3c9371ec1168" prot="public">
          <name>kInstSetnb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6baf13d9713e7db89a7a041f7badc0b2" prot="public">
          <name>kInstSetnbe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba928b13f145337fad91851bf060fcb531" prot="public">
          <name>kInstSetnc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3deab4b90db942cb1684284e161d88b5" prot="public">
          <name>kInstSetne</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba291a1c6f2e1e79a95974075c13481645" prot="public">
          <name>kInstSetng</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7da7bcd9b2e44237ce78ac5cccabc9fe" prot="public">
          <name>kInstSetnge</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac084877d14254e7028b011294849011f" prot="public">
          <name>kInstSetnl</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa5f621c286c6ae48683217fc28cfba54" prot="public">
          <name>kInstSetnle</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7e995257e8daa7a8b688e17265f45b6d" prot="public">
          <name>kInstSetno</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba13a14250d078a2b1468c71cfc1be411c" prot="public">
          <name>kInstSetnp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba37b3e820bf4c8d98872d6c22dabf6a87" prot="public">
          <name>kInstSetns</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa05bdea846fff6690f1da6501c706589" prot="public">
          <name>kInstSetnz</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babfc10340bde8428a00e85a95aceb0684" prot="public">
          <name>kInstSeto</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8fad894d0fee15c48d59cf44332bc456" prot="public">
          <name>kInstSetp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba029b9fc48c618fbe43d227e9dea9d085" prot="public">
          <name>kInstSetpe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba28e702d1bb2ad3877e2ae9a25999e837" prot="public">
          <name>kInstSetpo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa1e4f0e9c9550c4d58d96d3e1dd9e46d" prot="public">
          <name>kInstSets</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8c153adb64eb840e18a53b842c2d1d59" prot="public">
          <name>kInstSetz</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0acaef5789b85ba82f7af2045b9e3625" prot="public">
          <name>kInstSfence</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba653b65b02d23772e68ccfd26b1e3b136" prot="public">
          <name>kInstShl</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6cfb582da99229cfd5030ef785ffc6c8" prot="public">
          <name>kInstShld</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba94b8e5cb1bb3b913cba3621a1b4c47de" prot="public">
          <name>kInstShlx</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac2f0bc96dc005f98227a6eaf527f3b84" prot="public">
          <name>kInstShr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba70cee80625626b994ff4d467f1a83bbf" prot="public">
          <name>kInstShrd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba653dcab3c15b0ce86a6738d27d93fa9d" prot="public">
          <name>kInstShrx</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5437d31fb52722139f708779ca0d7416" prot="public">
          <name>kInstShufpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babba4a52199a55da725d88cb8963a8645" prot="public">
          <name>kInstShufps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae700639da3f7e305e2386b1e6ba8a806" prot="public">
          <name>kInstSqrtpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba72737cc3e3ec2614bb4b1b3f8845d3bb" prot="public">
          <name>kInstSqrtps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba601b95606a2a00f0016632977ed9beb1" prot="public">
          <name>kInstSqrtsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baae41a0479282cd357cdaa03ee1f51f8d" prot="public">
          <name>kInstSqrtss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba595927d27176f12915330e2174582bc6" prot="public">
          <name>kInstStc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba41f89be08d93a9f5bdeca188b2a5e4ff" prot="public">
          <name>kInstStd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae3bec09a645057a7f33783493ccd7489" prot="public">
          <name>kInstStmxcsr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba504b770ed8235799bad5cac0df65604f" prot="public">
          <name>kInstSub</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac04dcf46ac1ce89886a322e13c618b66" prot="public">
          <name>kInstSubpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba83a1c4a6d300bcdb3625d1e73bbcf67c" prot="public">
          <name>kInstSubps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba49d69e41cceec16c83596ba30b19b51d" prot="public">
          <name>kInstSubsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badd08b039e8bb99c7541a138fb6b0473c" prot="public">
          <name>kInstSubss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac786fd1e9909ae925e012aeda8964aa6" prot="public">
          <name>kInstTest</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac26d1e4bf1810bf0ef5062aeaeaaa6fd" prot="public">
          <name>kInstTzcnt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5ab4dd8583f107146eba9d1356da7206" prot="public">
          <name>kInstUcomisd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baec9c977149d42902da84f3eb9f4ba5a9" prot="public">
          <name>kInstUcomiss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf9a5a97a0065cffd677cd892121baf28" prot="public">
          <name>kInstUd2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa4423fe570adf8bc2778d32d2e6c9ef7" prot="public">
          <name>kInstUnpckhpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baaa0310ff1d06dc8c747844b534103657" prot="public">
          <name>kInstUnpckhps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba925297f0a967e6c0d19af1e7633a9982" prot="public">
          <name>kInstUnpcklpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba92e15d2d82e3c128dcf1bdab77cb7a52" prot="public">
          <name>kInstUnpcklps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba13d10e6a6bce3796edb78ad8f28d9fe5" prot="public">
          <name>kInstVaddpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5913789a55246e90c5c5aba1d17997f4" prot="public">
          <name>kInstVaddps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2228285ced9406329589b659cb18c6d8" prot="public">
          <name>kInstVaddsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba22fbe0eb889847f319a0e990642fd528" prot="public">
          <name>kInstVaddss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2b3f3873375e932c35b83d9040a86647" prot="public">
          <name>kInstVaddsubpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba16f60f26576adae9332593b8cf75b08b" prot="public">
          <name>kInstVaddsubps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba006cfcd9a3385657eeaafc119f594709" prot="public">
          <name>kInstVaesdec</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacaaf887337911940536feb9f3d844af5" prot="public">
          <name>kInstVaesdeclast</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babcf339a39d0fd5b99e27da81be371cd0" prot="public">
          <name>kInstVaesenc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8a9cbd0e4097fb9884e4a6c1378cf134" prot="public">
          <name>kInstVaesenclast</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba02c6d7a9b437acbd9816f29e67adbef8" prot="public">
          <name>kInstVaesimc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae1ba1fb836e96a0e3e7ef1215e5cbeaa" prot="public">
          <name>kInstVaeskeygenassist</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa84b79268a4809209b16019a9dec38cb" prot="public">
          <name>kInstVandnpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3ac12bef532842910f4f4bf81478b8ae" prot="public">
          <name>kInstVandnps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba74bf71caf8b533880723daea6095dcf4" prot="public">
          <name>kInstVandpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9fec1d50ceb05a03023b3b77c471ded6" prot="public">
          <name>kInstVandps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4d9c7c64abf6b31483bf83a95a98b5ad" prot="public">
          <name>kInstVblendpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac83c40da8bce3099158aaabd9c01a422" prot="public">
          <name>kInstVblendps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba961a90c5abc40dfbdc47a3048f5b8213" prot="public">
          <name>kInstVblendvpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafbadbe8b00c95c23a84e1c6f74977512" prot="public">
          <name>kInstVblendvps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba13a509560e22da137d7d571ff13ff973" prot="public">
          <name>kInstVbroadcastf128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf0b13c2bfd4a4ef13da14f063627ee00" prot="public">
          <name>kInstVbroadcasti128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba460bdd34bcaec39fbac63f76bb77bfb1" prot="public">
          <name>kInstVbroadcastsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba340141aa99bc15d175a19c6cccfce912" prot="public">
          <name>kInstVbroadcastss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba637519fc8c81205c266e008049f5c57c" prot="public">
          <name>kInstVcmppd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6e8fdecd698144d3d63274d4482c520b" prot="public">
          <name>kInstVcmpps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3599b6ac371a3a8880774d9f3bd89aca" prot="public">
          <name>kInstVcmpsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba28a1f00066dde426cc003cdad7c05c48" prot="public">
          <name>kInstVcmpss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba84b3371bf3cbbca65f3f83b9753812bc" prot="public">
          <name>kInstVcomisd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab13c077f2feafec3cfbdec7a1581d06f" prot="public">
          <name>kInstVcomiss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6fb1d12689c751bfabbe7f5b2ba575b8" prot="public">
          <name>kInstVcvtdq2pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad92f2c808465137ad2f0bab1e4423850" prot="public">
          <name>kInstVcvtdq2ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba40a08e5e8012585c109f9255a2c42fe4" prot="public">
          <name>kInstVcvtpd2dq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafeb7369ec21bb7324cfa88304851604c" prot="public">
          <name>kInstVcvtpd2ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badf3ab0f31bb51450e472d48b44bc3447" prot="public">
          <name>kInstVcvtph2ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babc2d21838ea1b3c8372d326adf0c8d3d" prot="public">
          <name>kInstVcvtps2dq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf6dbe85f061dbfeeff51c592e941ed1c" prot="public">
          <name>kInstVcvtps2pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1c10538b1f8ac3535f9a20f504ad5dbe" prot="public">
          <name>kInstVcvtps2ph</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baba219c7b1dd1f8b4bdab54f7c7d980fd" prot="public">
          <name>kInstVcvtsd2si</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab8ffc99df03c823934ce5f1931e3d4be" prot="public">
          <name>kInstVcvtsd2ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac902a0745986927935555522e34ec339" prot="public">
          <name>kInstVcvtsi2sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba18fa35fde7f364736843226abf3e200b" prot="public">
          <name>kInstVcvtsi2ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9484510856e8a06f7f88e4ef251ab96a" prot="public">
          <name>kInstVcvtss2sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba73f23d9f22b0af95826574e3468e2f49" prot="public">
          <name>kInstVcvtss2si</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babebb2bee00b16d1baa46092fa6d4555a" prot="public">
          <name>kInstVcvttpd2dq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba64608b89aa4e718e0eee5470088724bc" prot="public">
          <name>kInstVcvttps2dq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2d089560b7c985adb907b85593a9535a" prot="public">
          <name>kInstVcvttsd2si</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac89e188b5467e762938dc33696717b4d" prot="public">
          <name>kInstVcvttss2si</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa95e3004bb6ecd46b6c50aa4f7649693" prot="public">
          <name>kInstVdivpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baddafbe4f114bc9b4c51dad3842c340ab" prot="public">
          <name>kInstVdivps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2289d30015d5b81e47fa3dbc3ae254c8" prot="public">
          <name>kInstVdivsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba869a5767b2639a1fb77cf96c78e95587" prot="public">
          <name>kInstVdivss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baead1f9e2fa33704f3f6b7e79b06207dd" prot="public">
          <name>kInstVdppd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baae85abe980aaa9a53b5acc5d8e1a4724" prot="public">
          <name>kInstVdpps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba13c1ec36ea61eb07d23079b802d14a6f" prot="public">
          <name>kInstVextractf128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba718e10832447c58b651a3ae5a6506379" prot="public">
          <name>kInstVextracti128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3dc1a6d85db1c3d195a1a618d11c96dd" prot="public">
          <name>kInstVextractps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa6e3cadb88edf0df2c7f60a7dada51a0" prot="public">
          <name>kInstVfmadd132pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babf35c3ff1f2ebbec793d420d7f5b6323" prot="public">
          <name>kInstVfmadd132ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba298eabbcb80c8738263345d121fb31a4" prot="public">
          <name>kInstVfmadd132sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae1467de73a43b6dcfe6d6242125273f5" prot="public">
          <name>kInstVfmadd132ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae3556e26d3ceee905762ce2fb423b864" prot="public">
          <name>kInstVfmadd213pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baaa444428c836af3df05394e25c66c973" prot="public">
          <name>kInstVfmadd213ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad94d615e89fb32953b6ea07baa63f5b3" prot="public">
          <name>kInstVfmadd213sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf33bda5b316aa647026499e200c1b5aa" prot="public">
          <name>kInstVfmadd213ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badd262185b3f7d9443c2048e680077034" prot="public">
          <name>kInstVfmadd231pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacffc0617b545c73ff15e0e6283379539" prot="public">
          <name>kInstVfmadd231ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba54ef8f985295bab58f1306212c05e919" prot="public">
          <name>kInstVfmadd231sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5cc40cc8fa50936b4071d06a29857e17" prot="public">
          <name>kInstVfmadd231ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba79ad11b31207b2f7ab4f1af2ee605dcc" prot="public">
          <name>kInstVfmaddsub132pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7ddb0f2d835b139ad43764ba79af4c80" prot="public">
          <name>kInstVfmaddsub132ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baeec064da94406130ca5a9fca62fd5eb0" prot="public">
          <name>kInstVfmaddsub213pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba56fcbd35da1047e88de36cc29632b42a" prot="public">
          <name>kInstVfmaddsub213ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba890a8df8802826c85c61c509a45b26cb" prot="public">
          <name>kInstVfmaddsub231pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2b0a3cafbc13b8be223b4967599233b9" prot="public">
          <name>kInstVfmaddsub231ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba12198c9688124ce14d4a103695a8f546" prot="public">
          <name>kInstVfmsub132pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba84ec6bb17822f4ab8a90b9536894de13" prot="public">
          <name>kInstVfmsub132ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7e568d63106c44bf090ac71d9928b24a" prot="public">
          <name>kInstVfmsub132sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba869522d2765799e80264cf92f0e25f2d" prot="public">
          <name>kInstVfmsub132ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babdae84e0cfbfb66c682f01636817c52a" prot="public">
          <name>kInstVfmsub213pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1f6673ff4f860a58d607e60ec31ad501" prot="public">
          <name>kInstVfmsub213ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad1b454cd5cdbd8d04682941ee99d5781" prot="public">
          <name>kInstVfmsub213sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5dc751d595fd5212860b545addb2d1eb" prot="public">
          <name>kInstVfmsub213ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa9d2199a49983e2c286825842c07aa3d" prot="public">
          <name>kInstVfmsub231pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2ffc552bae105703dc545f6ddfcaba3a" prot="public">
          <name>kInstVfmsub231ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba596b60db5168fb8edf5adb797743a074" prot="public">
          <name>kInstVfmsub231sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab6c5b23865004e46fc4b7f53dd4a2c45" prot="public">
          <name>kInstVfmsub231ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba061db0fbbe617869690dc030173819cd" prot="public">
          <name>kInstVfmsubadd132pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac6cf595de29aef9e172338cfd60b8d9d" prot="public">
          <name>kInstVfmsubadd132ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba84255a79d80a8d8e423abf7a4ddeee5d" prot="public">
          <name>kInstVfmsubadd213pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba117b676823f9b567002d24dc6e3d0a85" prot="public">
          <name>kInstVfmsubadd213ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baad112e0442afc417238783e489b83b30" prot="public">
          <name>kInstVfmsubadd231pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba42730511776a4022bf139fcce02969fc" prot="public">
          <name>kInstVfmsubadd231ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7602ad90515f651fa17943a838645774" prot="public">
          <name>kInstVfnmadd132pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad88318cdda4db4711d874822174533c1" prot="public">
          <name>kInstVfnmadd132ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae4eaacccbec722111a774f62d5c37e3e" prot="public">
          <name>kInstVfnmadd132sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2fa588ab7a49d0d6dd2425a7008f2755" prot="public">
          <name>kInstVfnmadd132ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5aaf962ccdbe102423182312012276eb" prot="public">
          <name>kInstVfnmadd213pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae1fa786553c218cd8ad0389ce0cc2456" prot="public">
          <name>kInstVfnmadd213ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babfae6a38d1211f60fdf07097673ebc71" prot="public">
          <name>kInstVfnmadd213sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6d88a6632efeeaad75c84b5d3d4aaab5" prot="public">
          <name>kInstVfnmadd213ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1819b9d3d69215d5d256fa974337242f" prot="public">
          <name>kInstVfnmadd231pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad246b6f7bf290c32f42d5ae9db12465a" prot="public">
          <name>kInstVfnmadd231ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafbfd9f857a994a884708c7b492f2b274" prot="public">
          <name>kInstVfnmadd231sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7112a02349303a8cb9f1be17f2a9c087" prot="public">
          <name>kInstVfnmadd231ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8f3567e212750a6efdebdd6a5ee9d7b3" prot="public">
          <name>kInstVfnmsub132pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba888003af683af217898a1fc96a5bc798" prot="public">
          <name>kInstVfnmsub132ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baaa348a2125e9e8f2bba72b4240b7ab89" prot="public">
          <name>kInstVfnmsub132sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba555ad6714459379de7ecba4e05080e9f" prot="public">
          <name>kInstVfnmsub132ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba97b52a30807f78f2128cb2b7fb86cf0b" prot="public">
          <name>kInstVfnmsub213pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacfa07b71043f90daf847f8d1af139685" prot="public">
          <name>kInstVfnmsub213ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba83afe78a965d99c6ba5589534edd4af7" prot="public">
          <name>kInstVfnmsub213sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3a0c30402796664294b0c51a23e2c188" prot="public">
          <name>kInstVfnmsub213ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba373ee10130c05eabdeed2cf172977695" prot="public">
          <name>kInstVfnmsub231pd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba51bff3830b8856861005ace89e6e26dd" prot="public">
          <name>kInstVfnmsub231ps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3af824b8da9693723ec7c44a36b8f63c" prot="public">
          <name>kInstVfnmsub231sd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad6ba32580e936a274e8784d591fe9524" prot="public">
          <name>kInstVfnmsub231ss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba74e8d8c915d2956c120e2f916697d5fb" prot="public">
          <name>kInstVgatherdpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba10089d80e60031f16e5fed833ee9aee2" prot="public">
          <name>kInstVgatherdps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babd8f5e5d0d9f2675e4e7a7dd303d9e67" prot="public">
          <name>kInstVgatherqpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac508fc6bba18541e08592483ac4f631b" prot="public">
          <name>kInstVgatherqps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3b5f9f486ef803e22a91f854f50be2d8" prot="public">
          <name>kInstVhaddpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac3d88939a27f3ee48e4bc188d087e11e" prot="public">
          <name>kInstVhaddps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab3fb6425b197ed021da839b34e8cca03" prot="public">
          <name>kInstVhsubpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba83966a21af18ed075c13b41dc90ceca7" prot="public">
          <name>kInstVhsubps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4b5ccaa6d3fb51c9f3fa4ba0d7d95397" prot="public">
          <name>kInstVinsertf128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3e28675e611398e1610f0bc534f79056" prot="public">
          <name>kInstVinserti128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babf2f9d8806880a131f90d64e7f656f97" prot="public">
          <name>kInstVinsertps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba55a607b56639354aa14667786b93eb37" prot="public">
          <name>kInstVlddqu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab480876e73df3c13c46b2aed5f4dcb61" prot="public">
          <name>kInstVldmxcsr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba78688e7bee4627de27a8cd733b5b44f7" prot="public">
          <name>kInstVmaskmovdqu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3d6ae83469433fad47535e7f431dbd54" prot="public">
          <name>kInstVmaskmovpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba203be701a8a0fd22c1464b89ad79736f" prot="public">
          <name>kInstVmaskmovps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba52c35a2273e9a94096846736119a4feb" prot="public">
          <name>kInstVmaxpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab15a77ba34cbe2307e2f23d5103c4ba6" prot="public">
          <name>kInstVmaxps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1ffb34266f40544922f4cc641553b6a4" prot="public">
          <name>kInstVmaxsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae8dd1400b24778ff7559473db573bde4" prot="public">
          <name>kInstVmaxss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba873a82c84cf222ec9e2b1df74d7424c5" prot="public">
          <name>kInstVminpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7d6dde71f896767a929af665250d4c0d" prot="public">
          <name>kInstVminps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2ecd139daf968ab20cf434346de9c0eb" prot="public">
          <name>kInstVminsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9525a9c69edb1030d10d3321c9172bf9" prot="public">
          <name>kInstVminss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babdd7146f71dc3757c8bb82c1ea33f9a3" prot="public">
          <name>kInstVmovapd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7cee39d1176a8adcde0f40945c94118b" prot="public">
          <name>kInstVmovaps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2a3215e715debcb7fc996d4ad6784716" prot="public">
          <name>kInstVmovd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba42b56d0a0c968c0e3951b88a1e405921" prot="public">
          <name>kInstVmovddup</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7a53a3442296c5b0f1bfae119330f52a" prot="public">
          <name>kInstVmovdqa</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babb2e235aa7bf16b2d63e50c81ddeaead" prot="public">
          <name>kInstVmovdqu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba36c745243769c6447d6d97ef90d068ad" prot="public">
          <name>kInstVmovhlps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba98800ae93801d1c49dd10f5d53827260" prot="public">
          <name>kInstVmovhpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0b84113dd1818fccbba03c980705d6ef" prot="public">
          <name>kInstVmovhps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2801586c7d33575c22d2e96e18ed75d0" prot="public">
          <name>kInstVmovlhps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab4d6f8b11ab0def37d7c8de121ebce55" prot="public">
          <name>kInstVmovlpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badd75734c2a287d0b2bba08372df08d88" prot="public">
          <name>kInstVmovlps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf1509d0b9678520c3bb2f302de727154" prot="public">
          <name>kInstVmovmskpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6e54c203417f706a8b335f5392265d4a" prot="public">
          <name>kInstVmovmskps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4648c86cff5d00c837985e11321b330a" prot="public">
          <name>kInstVmovntdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba48ce2541b55eef7eaa90d56f4c01b757" prot="public">
          <name>kInstVmovntdqa</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae097a9547a6b45cce4a6faeba273af0d" prot="public">
          <name>kInstVmovntpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa0d368b33a51e0636b501087d9c48ec9" prot="public">
          <name>kInstVmovntps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6d860d1d183081154107aa394352249c" prot="public">
          <name>kInstVmovq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae0fc10824675be7e072e42d5d4df59a6" prot="public">
          <name>kInstVmovsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba32c077527c950d9a6bf03e81e19d69b2" prot="public">
          <name>kInstVmovshdup</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba48475703f9756d22eb9a33332d9df45a" prot="public">
          <name>kInstVmovsldup</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad09c3d061670d99a9209f336ff93559c" prot="public">
          <name>kInstVmovss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9cc841525261241a607f01f561d7664f" prot="public">
          <name>kInstVmovupd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6b0a62ee25028c0b4a62e7afae8c8e63" prot="public">
          <name>kInstVmovups</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba36d428ece3576d0c9af4a4bff0ccfb49" prot="public">
          <name>kInstVmpsadbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8a4f4f1acaa1af930d2a15af6755c60b" prot="public">
          <name>kInstVmulpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab780c18abfff9557a223191e6fb62006" prot="public">
          <name>kInstVmulps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badfacbc5b02c26b1232e77ee848740760" prot="public">
          <name>kInstVmulsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab21a18e2f029a0a94a36515d2356b690" prot="public">
          <name>kInstVmulss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2a55bc0b156b4700f434ad84b8ea0eda" prot="public">
          <name>kInstVorpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab5fcfd1ef174898417fca640520ff890" prot="public">
          <name>kInstVorps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab364ca14ba00f11338f9ca71acdad445" prot="public">
          <name>kInstVpabsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba33470ff0326e591ed165a136c2c4982a" prot="public">
          <name>kInstVpabsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba00cfc937ca64924eac0da5a2b82bb2a2" prot="public">
          <name>kInstVpabsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babf8edfbcf19b353d5884c6a978a94f1a" prot="public">
          <name>kInstVpackssdw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2525e8cd033730ddb6d981f1c39363ec" prot="public">
          <name>kInstVpacksswb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2825a47e4a87eb2a5c852d1e79c29b28" prot="public">
          <name>kInstVpackusdw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4fb662f9d80d396f34b47c1efa2878d8" prot="public">
          <name>kInstVpackuswb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba30e17721fc56469aa785c0160f0b21e0" prot="public">
          <name>kInstVpaddb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3fc51db60a2763dcd7fa6c34cf4cf0e7" prot="public">
          <name>kInstVpaddd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae0b47500cf16be7a21f0269cfa945018" prot="public">
          <name>kInstVpaddq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2e59e5530949791f41464a8eb0ab3490" prot="public">
          <name>kInstVpaddsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad2029516ba95e449d538e5de2b313475" prot="public">
          <name>kInstVpaddsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babd014904205d0fb33829ad7ca2a2dc58" prot="public">
          <name>kInstVpaddusb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba01c02ebbb57ee00e2583e0d064a06ec4" prot="public">
          <name>kInstVpaddusw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab1b5fe539ff6b7befe13a3fb98d1eab2" prot="public">
          <name>kInstVpaddw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa35d1ae0808fe3c60478d30fb854c1da" prot="public">
          <name>kInstVpalignr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba00a0537ae9e741d0202fee737ac6fd1c" prot="public">
          <name>kInstVpand</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7be3c00f88d2dde41392ec0b634b3a21" prot="public">
          <name>kInstVpandn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba477e32a26e9686c60c55a437843d8b0b" prot="public">
          <name>kInstVpavgb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba60f4b4ebc94d69e4b9d9bd4e2c278905" prot="public">
          <name>kInstVpavgw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf31b1397f01c4a44b9e0ead1d5d057f2" prot="public">
          <name>kInstVpblendd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badb16bc741b7d8a1b7513cc9902e17302" prot="public">
          <name>kInstVpblendvb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3b8949c73f4754287f21651f4f23fdce" prot="public">
          <name>kInstVpblendw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafeb01909e69efe005215c84c8669020e" prot="public">
          <name>kInstVpbroadcastb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba86991a1e560ff6a1212be6f90923768b" prot="public">
          <name>kInstVpbroadcastd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba13d0dc2dcf9095d103bf1fac5af30ec3" prot="public">
          <name>kInstVpbroadcastq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba369ce633759878468938b8b7b6e0a6bf" prot="public">
          <name>kInstVpbroadcastw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7dde662460d9769d74ea65255f5195d3" prot="public">
          <name>kInstVpclmulqdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba089324e3a002c5b0d64733da01c51a7b" prot="public">
          <name>kInstVpcmpeqb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba287ddb97ecd17951471c01da0544b3ba" prot="public">
          <name>kInstVpcmpeqd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac096f07f00575e57b44a1dacad153bbd" prot="public">
          <name>kInstVpcmpeqq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf34a186f00a01db830776cdb6c6ed600" prot="public">
          <name>kInstVpcmpeqw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5602a74380de6b2a48882604a88c885b" prot="public">
          <name>kInstVpcmpestri</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba03a44c93e5efc4e4c68a0376cc35ee82" prot="public">
          <name>kInstVpcmpestrm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac85d19e93c18b597856dbc7fac3ff1d7" prot="public">
          <name>kInstVpcmpgtb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba22419f98e2886eeba3e0ceba70ad85e5" prot="public">
          <name>kInstVpcmpgtd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba98f5313a3e0183fe7a10f45a24171503" prot="public">
          <name>kInstVpcmpgtq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8143d3c84ff709d576274f8f101c400f" prot="public">
          <name>kInstVpcmpgtw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5d697c68425cf5eaae7ed9f19d39bc59" prot="public">
          <name>kInstVpcmpistri</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4652c822239ed0500fa6b23979231603" prot="public">
          <name>kInstVpcmpistrm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badd160c92b30c64e9f26e481d2fdba116" prot="public">
          <name>kInstVperm2f128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba72faee4894aea919e9d48d094938994b" prot="public">
          <name>kInstVperm2i128</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba511899bd0578026f9d9edf5243e0dc6e" prot="public">
          <name>kInstVpermd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba92202d9cb73b8d55a79b878e11563691" prot="public">
          <name>kInstVpermilpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba27f0cb5c127ec4b0d437f1f30cd13ef7" prot="public">
          <name>kInstVpermilps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4ebd099dd66451d1530b5ab002d9a241" prot="public">
          <name>kInstVpermpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba67bb2b67faeea4d71a14e50c4e1213d3" prot="public">
          <name>kInstVpermps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba062c6af46890ec732d741ff717515ee3" prot="public">
          <name>kInstVpermq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab1e0b0ee14cbb731d7a40de3c59f732a" prot="public">
          <name>kInstVpextrb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bada4ea1ea9fff718d2e13dc1020eeae59" prot="public">
          <name>kInstVpextrd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba697033ce2854c80675c23bdd9bb09231" prot="public">
          <name>kInstVpextrq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba29806ec4a9672fe5ee737e2950ba421d" prot="public">
          <name>kInstVpextrw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba881de3ddef7286a4eafd9f630bbc12e7" prot="public">
          <name>kInstVpgatherdd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baaa25aeb0dd31878e933e773f392d6086" prot="public">
          <name>kInstVpgatherdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba22aa030edc34a2afd905de9983e72631" prot="public">
          <name>kInstVpgatherqd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6f213e1b6a5b3a3b3e1dbd4250472f7d" prot="public">
          <name>kInstVpgatherqq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf6b6f2c63df582a1eb2ae2bc3f6fbbea" prot="public">
          <name>kInstVphaddd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3736bc8324e60b0a1384990e1e164291" prot="public">
          <name>kInstVphaddsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8736ddb954bc3dc8e298e819a52503a4" prot="public">
          <name>kInstVphaddw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baedf9c3c3075ae52b4033d591750ed2d6" prot="public">
          <name>kInstVphminposuw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa11eacdd727f9f8f1a1fc44c4045ff6c" prot="public">
          <name>kInstVphsubd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5f678cf2f53ee51081f4a3822ddc4d64" prot="public">
          <name>kInstVphsubsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bace41699bc54a982df7fbe9f41a4496bb" prot="public">
          <name>kInstVphsubw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baaead015a5ad33ae93de87ecc675dc3b3" prot="public">
          <name>kInstVpinsrb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba752079d07a78ba60e0321c935a82fb03" prot="public">
          <name>kInstVpinsrd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5e03e0858afdadf5dd22784e439c2c1e" prot="public">
          <name>kInstVpinsrq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0ee9ded1b55087f7c562b8b75278d0f9" prot="public">
          <name>kInstVpinsrw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab81f52ec2ed92e59f1cb2987ad6f7c6d" prot="public">
          <name>kInstVpmaddubsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba69f504ef1bcd50eedbafd3e2e10b9b5c" prot="public">
          <name>kInstVpmaddwd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baea8e84bc73b64a55bfcab1ae0b20ccf7" prot="public">
          <name>kInstVpmaskmovd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2581dda25f59b5d111fa0b5b5f1f2597" prot="public">
          <name>kInstVpmaskmovq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bada82fc49b31e4323f13c8348edc39735" prot="public">
          <name>kInstVpmaxsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba54a8c7e59ad79663284b7604351a8561" prot="public">
          <name>kInstVpmaxsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf9f13bdba1888375678f4cd8f7b94afc" prot="public">
          <name>kInstVpmaxsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0164462bf6075954fbf1fec45a96cf7d" prot="public">
          <name>kInstVpmaxub</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba353001328b6f0684d58bc7151152df10" prot="public">
          <name>kInstVpmaxud</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baec01daa71fbdc7c3cd78749b20fc2646" prot="public">
          <name>kInstVpmaxuw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badadb8ece49bfbe48dd3e28a6ee1e4f5e" prot="public">
          <name>kInstVpminsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab0ce6056dbebfa85a115526738435ee4" prot="public">
          <name>kInstVpminsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9ca8e5e14bbabae1387146521f2c977a" prot="public">
          <name>kInstVpminsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafc5555d59f2c5bd47ef5140c8197275b" prot="public">
          <name>kInstVpminub</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baad2a17da4289aa4bec701b8940980bf4" prot="public">
          <name>kInstVpminud</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7f89f406e5a77feaff1f1e8a571b9cde" prot="public">
          <name>kInstVpminuw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba24f357383faea8fb7577d795b89edc36" prot="public">
          <name>kInstVpmovmskb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad2be574ecea0c7332f36b03ffe576212" prot="public">
          <name>kInstVpmovsxbd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf029453019af626d79a5f04dcdd92125" prot="public">
          <name>kInstVpmovsxbq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba416a1dae31af4ad1480de049a425785b" prot="public">
          <name>kInstVpmovsxbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baad0643be6e61e4954fd96d6007cd983c" prot="public">
          <name>kInstVpmovsxdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba644a1daed6bbc0211cfe25872433d77b" prot="public">
          <name>kInstVpmovsxwd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa560459fea9a4a7b8621146683b15a0f" prot="public">
          <name>kInstVpmovsxwq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8babcf00f0fd6f2baa8b74cce9082e0936d" prot="public">
          <name>kInstVpmovzxbd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bacaa3c3402b1ee96bbd6c527ead4f1b6c" prot="public">
          <name>kInstVpmovzxbq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bada7b7e29b2c23704ae6d0ba2ba6da2af" prot="public">
          <name>kInstVpmovzxbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3f01576ba32b827b2cf8dfd86050c9f7" prot="public">
          <name>kInstVpmovzxdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baea9fe58263fe770f22762cfec94f6f8c" prot="public">
          <name>kInstVpmovzxwd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba66038f13615325391c55fa551f5cef5e" prot="public">
          <name>kInstVpmovzxwq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6fd2865d36ccc4c44c31d007fcb3b701" prot="public">
          <name>kInstVpmuldq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1bc7d87f36c63aab54b8c2c76016956a" prot="public">
          <name>kInstVpmulhrsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafa93f28454b55f13f0d8d7f18d476ec1" prot="public">
          <name>kInstVpmulhuw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad90b2f89144627aea36b47f69e17ae58" prot="public">
          <name>kInstVpmulhw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad3247d85c8815e08841fbb4346fe0460" prot="public">
          <name>kInstVpmulld</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bada5b60999654ea2c1ca94eff2f4fa1d6" prot="public">
          <name>kInstVpmullw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba893f0bd4c8fa7daec0bdbadd4ebc7982" prot="public">
          <name>kInstVpmuludq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab5c031b3602d7b05c994c48b274acc72" prot="public">
          <name>kInstVpor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba19d11c5a9053080d4b452e5d5c0beb93" prot="public">
          <name>kInstVpsadbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2197fe76209c4d50ec2b58dbee9e79cb" prot="public">
          <name>kInstVpshufb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba366adbd795867fbfb9347a8efb2a71da" prot="public">
          <name>kInstVpshufd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae5e809db80a77014a643626d5ec9cb69" prot="public">
          <name>kInstVpshufhw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafdcb19fc9e9ecd08b4ef94f70122ab27" prot="public">
          <name>kInstVpshuflw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0c41f88ab16c638b72d0921ab1a03412" prot="public">
          <name>kInstVpsignb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9b263ec73b2888cae15324f76d8d56ca" prot="public">
          <name>kInstVpsignd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa3312d81d2eeee2892e0d4c4da524384" prot="public">
          <name>kInstVpsignw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad69b065d7ab4a39b63e7b238ef821022" prot="public">
          <name>kInstVpslld</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5ac5f44d0d2354d188da97402eb43c98" prot="public">
          <name>kInstVpslldq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba26a2a24acdcda3fd23a7060a2c70b6fc" prot="public">
          <name>kInstVpsllq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1d9fe08e25fec6ec25de9acdd8cd8c4c" prot="public">
          <name>kInstVpsllvd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba694732f607ccfc189d8783eac432d7b9" prot="public">
          <name>kInstVpsllvq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6559b63897fbbe20f0888459fe55b99e" prot="public">
          <name>kInstVpsllw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafc799e9082811b3ad9cca90cf3c9f978" prot="public">
          <name>kInstVpsrad</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4d740b2d0e3623af14995f79666e5161" prot="public">
          <name>kInstVpsravd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba2042fa9cb81f7b930e780bee3a141a28" prot="public">
          <name>kInstVpsraw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab3dc3c81af163332dc34590c1b952e48" prot="public">
          <name>kInstVpsrld</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bac1595bc8c06164e9f2e982f5365fddd7" prot="public">
          <name>kInstVpsrldq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7e5b1460a44eb95c3b2e66a54f5b54c5" prot="public">
          <name>kInstVpsrlq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3bc67a748588b469c37decdd2be420db" prot="public">
          <name>kInstVpsrlvd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba303ebeffaf7e4f93ec59e20f570f0526" prot="public">
          <name>kInstVpsrlvq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba73dd36a9c09a6fdfda04eb2e3a5e3321" prot="public">
          <name>kInstVpsrlw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba724fc65c5a5e8e97bec1488be6f0e212" prot="public">
          <name>kInstVpsubb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba94c12a247a8a20eecdc9bcaa7c6621e2" prot="public">
          <name>kInstVpsubd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1df9c5b2cc605dac829380b816e12b68" prot="public">
          <name>kInstVpsubq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5bb3974f716b094d0e90daec2fa4fe18" prot="public">
          <name>kInstVpsubsb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6087745aaa83caf5fba17a441a134d7f" prot="public">
          <name>kInstVpsubsw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae98d6c7bbf8526ba8bbca84d0f96984a" prot="public">
          <name>kInstVpsubusb</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba5a267bcfbd43c161a7442d6f78b28b5e" prot="public">
          <name>kInstVpsubusw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba969d4dc003ddbd9d7e318cf1f43a5c20" prot="public">
          <name>kInstVpsubw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba9510b190a35bcd471e9ebc6740e605ea" prot="public">
          <name>kInstVptest</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa2e525fb0356dc89f4b13d1d79cf924d" prot="public">
          <name>kInstVpunpckhbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba74158906f4a2e57823aa8edd0fa0e073" prot="public">
          <name>kInstVpunpckhdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baeea59d027e94a808195dc926cf51dc4d" prot="public">
          <name>kInstVpunpckhqdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab1e6bf4364362a2ccec823b80560ae22" prot="public">
          <name>kInstVpunpckhwd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7f08a729f494cd85819b0ce354fd14ce" prot="public">
          <name>kInstVpunpcklbw</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba527b754e278423d6e04bb0c5653c1c57" prot="public">
          <name>kInstVpunpckldq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba3829d924d7db8a670531c8494e26c772" prot="public">
          <name>kInstVpunpcklqdq</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf66d48d830227abf4e7538b00114c016" prot="public">
          <name>kInstVpunpcklwd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba954ed61f4d6d2a3fd0c5026e691607d8" prot="public">
          <name>kInstVpxor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf7d3bc602af780684ec0e64ddb11d6b3" prot="public">
          <name>kInstVrcpps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bad29463cc4f1873fa91bcb96e4b1bc71b" prot="public">
          <name>kInstVrcpss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba4d5456ffc79858e2dd390efdfbb5c0e0" prot="public">
          <name>kInstVroundpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba48c96069cf5b2778647a1df4bea7898e" prot="public">
          <name>kInstVroundps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafae64bab3d4368ceca1954ba5dd76d15" prot="public">
          <name>kInstVroundsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bada11680395099bddd952925da353882b" prot="public">
          <name>kInstVroundss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf78b003ab2ee736936f8114ef4bf1d05" prot="public">
          <name>kInstVrsqrtps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab6c764595cc5bca730dd4742249f665e" prot="public">
          <name>kInstVrsqrtss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf04c121c7a5b8300b8d630475b10f922" prot="public">
          <name>kInstVshufpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba800bfc630b65acc38b1385648afb025d" prot="public">
          <name>kInstVshufps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baf5b34e242556c7ec8097ce02c57968d7" prot="public">
          <name>kInstVsqrtpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba0ccb2be8338e6ecdd33992090702e8b0" prot="public">
          <name>kInstVsqrtps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa8802da66d61aa0ce868ffc0c8aa060e" prot="public">
          <name>kInstVsqrtsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8b9864bfdd5d6a6f6a77df5ac9d4222f" prot="public">
          <name>kInstVsqrtss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba02563790ba8e545e640f3fa4eede29c5" prot="public">
          <name>kInstVstmxcsr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba54fbfefe9cd0e4eca584bf42f8e89906" prot="public">
          <name>kInstVsubpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba76a6f095573ff8a915ab09dcc88ec412" prot="public">
          <name>kInstVsubps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa6ace6ddf98fcf92223d8b1de7eca7ee" prot="public">
          <name>kInstVsubsd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae46dae5ddf58e4619ede0f520240302e" prot="public">
          <name>kInstVsubss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab36faa8dd28bdb51968632921502ba88" prot="public">
          <name>kInstVtestpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bafbc76144b87652cbe34ffe96c109d4d7" prot="public">
          <name>kInstVtestps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba473b51a2ac4b567fe87506d7544a8f8b" prot="public">
          <name>kInstVucomisd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7a3359beacb1d3a3cafccf9e5473ec2a" prot="public">
          <name>kInstVucomiss</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba606287e16c4a852ecd57b806ef098ad0" prot="public">
          <name>kInstVunpckhpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6848b4824727eb509a37df91435eacde" prot="public">
          <name>kInstVunpckhps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baa8837e720493ee56c1fc378110af4a40" prot="public">
          <name>kInstVunpcklpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba042935ab80343636367799a37a9785d9" prot="public">
          <name>kInstVunpcklps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba855e2bddd4caf9d757f8d90d679934f6" prot="public">
          <name>kInstVxorpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba85642d4e9a2769d6470af2044c333a1d" prot="public">
          <name>kInstVxorps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8badd40e9d3860c4725df1bda72ad37930c" prot="public">
          <name>kInstVzeroall</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6e5d31fc948d6f5ebcbb1a33dc1fc84a" prot="public">
          <name>kInstVzeroupper</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba8255b121055522990242190e4159de82" prot="public">
          <name>kInstWrfsbase</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab3f5492a5c104517a8d3fdc653aca8b1" prot="public">
          <name>kInstWrgsbase</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bab5bc4681d3768a611d14f74cc614502f" prot="public">
          <name>kInstXadd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baed26aa88a98fb23dff9b3154c25948f0" prot="public">
          <name>kInstXchg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba07961fb82747d43dd418b069ef53848e" prot="public">
          <name>kInstXor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba1a141d3f60ec2f1436395b0eabcc08af" prot="public">
          <name>kInstXorpd</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba057c92911ff74dda46df62d8c1815273" prot="public">
          <name>kInstXorps</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba7f4e3e64927f989bc324afb8705e1840" prot="public">
          <name>_kInstCount</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baad88b72889538701d9c0ed5d5f38285e" prot="public">
          <name>_kInstCmovcc</name>
          <initializer> kInstCmova</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8baab0a837e7461c2dd7690b76e47a35501" prot="public">
          <name>_kInstJcc</name>
          <initializer> kInstJa</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6175752eb21b8047035fda686bdfc010" prot="public">
          <name>_kInstSetcc</name>
          <initializer> kInstSeta</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8ba6b87b852607ac21ba989458519553e03" prot="public">
          <name>_kInstJbegin</name>
          <initializer> kInstJa</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggae77eaf11cadf05f2b892e45fcd239a8bae881f2b34ad9aa5f7ed9b1553757f789" prot="public">
          <name>_kInstJend</name>
          <initializer> kInstJmp</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 instruction codes. </para>        </briefdescription>
        <detaileddescription>
<para>Note that these instruction codes are AsmJit specific. Each instruction has a unique ID that is used as an index to AsmJit instruction table. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="451" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="451" bodyend="1413"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga2413993202a037657c8b31bd881a4bff" prot="public" static="no">
        <name>kInstOptions</name>
        <enumvalue id="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa438db3f8e9ef167e318d3ae4b0043f71" prot="public">
          <name>kInstOptionLock</name>
          <initializer> 0x10</initializer>
          <briefdescription>
<para>Emit instruction with LOCK prefix. </para>          </briefdescription>
          <detaileddescription>
<para>If this option is used and instruction doesn&apos;t support LOCK prefix an invalid instruction error is generated. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa14adbf0db0a92c197f83b863ee3dcda7" prot="public">
          <name>kInstOptionRex</name>
          <initializer> 0x40</initializer>
          <briefdescription>
<para>Force REX prefix to be emitted. </para>          </briefdescription>
          <detaileddescription>
<para>This option should be used carefully, because there are unencodable combinations. If you want to access ah, bh, ch or dh registers the REX prefix can&apos;t be emitted, otherwise illegal instruction error will be returned. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffaf74024a2407f9ae7f6fe757a673578ca" prot="public">
          <name>kInstOptionVex3</name>
          <initializer> 0x80</initializer>
          <briefdescription>
<para>Force three-byte VEX prefix to be emitted (instead of more compact two-byte VEX prefix). </para>          </briefdescription>
          <detaileddescription>
<para>Ignored if the instruction is not AVX instruction or extension to the instruction set that is encoded by using VEX prefix. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 instruction emit options, mainly for internal purposes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="1420" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="1420" bodyend="1441"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1gaa30d3f39e2e8169aec8b9120b459042a" prot="public" static="no">
        <name>kInstGroup</name>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa840aa384bc5b5c8a2ebda726568f0868" prot="public">
          <name>kInstGroupNone</name>
          <briefdescription>
<para>Never used. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaaab29edce69012d9747d02423e0697ef" prot="public">
          <name>kInstGroupX86Op</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa7bffe225c2222ce6977dd76fbdf40f84" prot="public">
          <name>kInstGroupX86Rm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad3c26384550e051b9abf092dacff885f" prot="public">
          <name>kInstGroupX86Rm_B</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa99b4a76d5718005b95a662494af1e8bd" prot="public">
          <name>kInstGroupX86RmReg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa2582d2fc4ec0855845e86e3b1df00127" prot="public">
          <name>kInstGroupX86RegRm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa948f4bfbb6f60fa814381ef9b8420c84" prot="public">
          <name>kInstGroupX86M</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa936a529efe41a0f17e49cef38112fb21" prot="public">
          <name>kInstGroupX86Arith</name>
          <briefdescription>
<para>Adc/Add/And/Cmp/Or/Sbb/Sub/Xor. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad09804358ef242252f4e194c1702be3f" prot="public">
          <name>kInstGroupX86BSwap</name>
          <briefdescription>
<para>Bswap. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa1cedcbd3cc0231640487b4bd1b4933be" prot="public">
          <name>kInstGroupX86BTest</name>
          <briefdescription>
<para>Bt/Btc/Btr/Bts. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa501679eb18dbc6289c7edac6bb6f3e92" prot="public">
          <name>kInstGroupX86Call</name>
          <briefdescription>
<para>Call. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaf98140e6ce086e51e558ee09cc69202b" prot="public">
          <name>kInstGroupX86Enter</name>
          <briefdescription>
<para>Enter. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa268bf2cda50549d9a9cdf9795b62a2a9" prot="public">
          <name>kInstGroupX86Imul</name>
          <briefdescription>
<para>Imul. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa3a6c4aae66093212ea801b3c5b6796ee" prot="public">
          <name>kInstGroupX86IncDec</name>
          <briefdescription>
<para>Inc/Dec. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae1b7e0135951aa540a8be412eebcf4ab" prot="public">
          <name>kInstGroupX86Int</name>
          <briefdescription>
<para>Int. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aac5d6bbffe4edcb02016e637314b12158" prot="public">
          <name>kInstGroupX86Jcc</name>
          <briefdescription>
<para>Jcc. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa192cca22ecc6c4c1101fb7fe6b3fdd97" prot="public">
          <name>kInstGroupX86Jmp</name>
          <briefdescription>
<para>Jmp. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae6f4f52ddab74426e1d8d51d65ab0c68" prot="public">
          <name>kInstGroupX86Lea</name>
          <briefdescription>
<para>Lea. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa33daa646b54291194399d28213635d03" prot="public">
          <name>kInstGroupX86Mov</name>
          <briefdescription>
<para>Mov. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa66e318071bca1612a49b6266311d23a2" prot="public">
          <name>kInstGroupX86MovSxZx</name>
          <briefdescription>
<para>Movsx/Movsxd/Movzx. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa1707c2bad4262dad3973942a4ffe32f6" prot="public">
          <name>kInstGroupX86MovPtr</name>
          <briefdescription>
<para>Mov having absolute memory operand (x86/x64). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab3899b299a15b72f8031cb76c3d63b5d" prot="public">
          <name>kInstGroupX86Push</name>
          <briefdescription>
<para>Push. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aadc4ef73dca80198dcacfbb9a49d54eb1" prot="public">
          <name>kInstGroupX86Pop</name>
          <briefdescription>
<para>Pop. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5c4197badcd502f136f25a5d4d1c1c4a" prot="public">
          <name>kInstGroupX86Rep</name>
          <briefdescription>
<para>Rep/Repe/Repne LodsX/MovsX/StosX/CmpsX/ScasX. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa6aa95a26f943bac62d4fec85b1c0208" prot="public">
          <name>kInstGroupX86Ret</name>
          <briefdescription>
<para>Ret. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa971bbd8c19c3dd39a8f605ccb68d4e17" prot="public">
          <name>kInstGroupX86Rot</name>
          <briefdescription>
<para>Rcl/Rcr/Rol/Ror/Sal/Sar/Shl/Shr. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aac4273307d1e6f598e166a6752111d48b" prot="public">
          <name>kInstGroupX86Set</name>
          <briefdescription>
<para>Setcc. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab491764e41cbc19258510f0cb955f864" prot="public">
          <name>kInstGroupX86Shlrd</name>
          <briefdescription>
<para>Shld/Rhrd. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaecc1c23a585d67494f34d3320acd13b2" prot="public">
          <name>kInstGroupX86Test</name>
          <briefdescription>
<para>Test. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa256d9c5b6c9a4d09ee000797a2d41f92" prot="public">
          <name>kInstGroupX86Xadd</name>
          <briefdescription>
<para>Xadd. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaea6e852cbb506ed97353273935d643ee" prot="public">
          <name>kInstGroupX86Xchg</name>
          <briefdescription>
<para>Xchg. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaaf6ec4753e3a2102245acbddef9196a3" prot="public">
          <name>kInstGroupFpuOp</name>
          <briefdescription>
<para>Fincstp/Finit/FldX/Fnclex/Fninit/Fnop/Fpatan/Fprem/Fprem1/Fptan/Frndint/Fscale/Fsin/Fsincos/Fsqrt/Ftst/Fucompp/Fxam/Fxtract/Fyl2x/Fyl2xp1. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad29eac3ec09ea882f0def584a0930b62" prot="public">
          <name>kInstGroupFpuArith</name>
          <briefdescription>
<para>Fadd/Fdiv/Fdivr/Fmul/Fsub/Fsubr. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa94914265ac52574a43beac39ccb00743" prot="public">
          <name>kInstGroupFpuCom</name>
          <briefdescription>
<para>Fcom/Fcomp. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa37111a56e03363f9b90168b196d2eaee" prot="public">
          <name>kInstGroupFpuFldFst</name>
          <briefdescription>
<para>Fld/Fst/Fstp. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa7c58c0588c6b28af67273d672d2684ba" prot="public">
          <name>kInstGroupFpuM</name>
          <briefdescription>
<para>Fiadd/Ficom/Ficomp/Fidiv/Fidivr/Fild/Fimul/Fist/Fistp/Fisttp/Fisub/Fisubr. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa78c80e5fa3d49a1da83a7f45135241d" prot="public">
          <name>kInstGroupFpuR</name>
          <briefdescription>
<para>Fcmov/Fcomi/Fcomip/Ffree/Fucom/Fucomi/Fucomip/Fucomp/Fxch. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa7af20062bc057e144ae24cb10858cafb" prot="public">
          <name>kInstGroupFpuRDef</name>
          <briefdescription>
<para>Faddp/Fdivp/Fdivrp/Fmulp/Fsubp/Fsubrp. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaaf03ac56ad3dff84e7c0a51670224845" prot="public">
          <name>kInstGroupFpuStsw</name>
          <briefdescription>
<para>Fnstsw/Fstsw. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaee50aac4ae06bdce483626a00ffe3ff1" prot="public">
          <name>kInstGroupExtRm</name>
          <briefdescription>
<para>Mm/Xmm instruction. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa61b4c3f5db957e75a70ba727432a1cda" prot="public">
          <name>kInstGroupExtRm_P</name>
          <briefdescription>
<para>Mm/Xmm instruction (propagates 66H if the instruction uses XMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaec2eda0c26fff0ea93c95b942854d540" prot="public">
          <name>kInstGroupExtRm_Q</name>
          <briefdescription>
<para>Mm/Xmm instruction (propagates REX.W if GPQ is used). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa48397d673ea2013029e0ff9cfb878c2" prot="public">
          <name>kInstGroupExtRmRi</name>
          <briefdescription>
<para>Mm/Xmm instruction having Rm/Ri encodings. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa3ce31428cd19c8c9c23165bd0cf139be" prot="public">
          <name>kInstGroupExtRmRi_P</name>
          <briefdescription>
<para>Mm/Xmm instruction having Rm/Ri encodings (propagates 66H if the instruction uses XMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa9788fa67ccd9e62001a270219b713357" prot="public">
          <name>kInstGroupExtRmi</name>
          <briefdescription>
<para>Mm/Xmm instruction having Rmi encoding. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa53fe7b68781e4288b9417b9e12309c3e" prot="public">
          <name>kInstGroupExtRmi_P</name>
          <briefdescription>
<para>Mm/Xmm instruction having Rmi encoding (propagates 66H if the instruction uses XMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5b8be6c278dd39087919e8ade57e43b7" prot="public">
          <name>kInstGroupExtCrc</name>
          <briefdescription>
<para>Crc32. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8a05f0b0a53e7676593e63ae2f4f43d8" prot="public">
          <name>kInstGroupExtExtract</name>
          <briefdescription>
<para>Pextrb/Pextrw/Pextrd/Pextrq/Extractps. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa110a676f418f4efba43a30b8bdb1e40f" prot="public">
          <name>kInstGroupExtFence</name>
          <briefdescription>
<para>Lfence/Mfence/Sfence. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaf57a1dfed6644444f529982fdbc72a63" prot="public">
          <name>kInstGroupExtMov</name>
          <briefdescription>
<para>Mov Mm/Xmm. </para>          </briefdescription>
          <detaileddescription>
<para>0x66 prefix must be set manually in opcodes.</para><para><itemizedlist>
<listitem><para>Primary opcode is used for instructions in (X)Mm &lt;- (X)Mm/Mem format,</para></listitem><listitem><para>Secondary opcode is used for instructions in (X)Mm/Mem &lt;- (X)Mm format. </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa11015e50f73f418427e93fddef8f40ca" prot="public">
          <name>kInstGroupExtMovNoRexW</name>
          <briefdescription>
<para>Mov Mm/Xmm. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad61d9f6ca8a1e79c038564e561854e41" prot="public">
          <name>kInstGroupExtMovBe</name>
          <briefdescription>
<para>Movbe. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa02df60718863f56570a113706e390a96" prot="public">
          <name>kInstGroupExtMovD</name>
          <briefdescription>
<para>Movd. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa29f89f84ae4a1082eae4d28e3e4a2e95" prot="public">
          <name>kInstGroupExtMovQ</name>
          <briefdescription>
<para>Movq. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa3de3fe75f469b47e29cc93f26bae41f4" prot="public">
          <name>kInstGroupExtPrefetch</name>
          <briefdescription>
<para>Prefetch. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa2a25c4ce9d84a6baa07356cdaa520ae8" prot="public">
          <name>kInstGroup3dNow</name>
          <briefdescription>
<para>3dNow instruction. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aacfc80558e477aca7222e73fb2b21f3ca" prot="public">
          <name>kInstGroupAvxOp</name>
          <briefdescription>
<para>AVX instruction without operands. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa0947e4e35ef70b29cc3f1e77ad8fb063" prot="public">
          <name>kInstGroupAvxM</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;M&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa414ecc6c7527485f4a8d2496cfb39bc2" prot="public">
          <name>kInstGroupAvxMr</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;MR&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaed073e1c2fe8ca02254537eb9b960c0a" prot="public">
          <name>kInstGroupAvxMr_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;MR&apos; (propagates AVX.L if the instruction uses YMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab7d8f1b1d8c02e6224dfebf496950244" prot="public">
          <name>kInstGroupAvxMri</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;MRI&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaf96e11a709cc83b54af6dbf358f43d6f" prot="public">
          <name>kInstGroupAvxMri_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;MRI&apos; (propagates AVX.L if the instruction uses YMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa256bf890c5323d7ccb4cc19ef1117ccc" prot="public">
          <name>kInstGroupAvxRm</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RM&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad083d79a13b2a7b59e220226d48e1461" prot="public">
          <name>kInstGroupAvxRm_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RM&apos; (propagates AVX.L if the instruction uses YMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa185c6a4f2729479ad455e5c6635bf563" prot="public">
          <name>kInstGroupAvxRmi</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RMI&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa2aba88364185f2e79a7995523639e1c1" prot="public">
          <name>kInstGroupAvxRmi_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RMI&apos; (propagates AVX.L if the instruction uses YMM register).. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5a0446f6c9391ce6e92edeb526d2d8c4" prot="public">
          <name>kInstGroupAvxRvm</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVM&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aadb7f04aeb1acd0208508bdd386acf6d7" prot="public">
          <name>kInstGroupAvxRvm_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVM&apos; (propagates AVX.L if the instruction uses YMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa65463a64b46c2a8eb295a1105cf90ebb" prot="public">
          <name>kInstGroupAvxRvmr</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVMR&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8b42448387ee6339ac1026bed030a654" prot="public">
          <name>kInstGroupAvxRvmr_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVMR&apos; (propagates AVX.L if the instruction uses YMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab3c93bda88839aa8acd60274c0fed397" prot="public">
          <name>kInstGroupAvxRvmi</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVMI&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa0a13063eae5fad7c13655686d824044b" prot="public">
          <name>kInstGroupAvxRvmi_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVMI&apos; (propagates AVX.L if the instruction uses YMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aadce04c64be6e3d454c1e31716d422510" prot="public">
          <name>kInstGroupAvxRmv</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RMV&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa258bbe2007d908e681dfad9e9f8449ef" prot="public">
          <name>kInstGroupAvxRmvi</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RMVI&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae4c1ea7e4cbf3bee7297a4f1ed708bb0" prot="public">
          <name>kInstGroupAvxRmMr</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RM&apos; or &apos;MR&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa6af8b51fd0a37f3a85a3b8ffbf8096fc" prot="public">
          <name>kInstGroupAvxRmMr_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RM&apos; or &apos;MR&apos; (propagates AVX.L if the instruction uses YMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa25dd097b84f990762516c146f8bcb6f0" prot="public">
          <name>kInstGroupAvxRvmRmi</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVM&apos; or &apos;RMI&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8d2e84bc78487b0e4088027d28d113a2" prot="public">
          <name>kInstGroupAvxRvmRmi_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVM&apos; or &apos;RMI&apos; (propagates AVX.L if the instruction uses YMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa6aa6ae8e369d646cf02645564799a52d" prot="public">
          <name>kInstGroupAvxRvmMr</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVM&apos; or &apos;MR&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8c24fb303264ace3899566316a5a16a7" prot="public">
          <name>kInstGroupAvxRvmMvr</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVM&apos; or &apos;MVR&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa4d5eda7c24d264ea15417f9a6d57c58" prot="public">
          <name>kInstGroupAvxRvmMvr_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVM&apos; or &apos;MVR&apos; (propagates AVX.L if the instruction uses YMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5d1548503dfd11a800901c874a30c877" prot="public">
          <name>kInstGroupAvxRvmVmi</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVM&apos; or &apos;VMI&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad2071f4350b840f7b4c6f8e88114ffb8" prot="public">
          <name>kInstGroupAvxRvmVmi_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;RVM&apos; or &apos;VMI&apos; (propagates AVX.L if the instruction uses YMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8b7914b4090eaebf2c82612bc21fd085" prot="public">
          <name>kInstGroupAvxVm</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;VM&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa2777e4cd44153a1565dbc6758a5b869f" prot="public">
          <name>kInstGroupAvxVmi</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;VMI&apos;. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae4e6b050b38a620c89363b530a14aa1f" prot="public">
          <name>kInstGroupAvxVmi_P</name>
          <briefdescription>
<para>AVX instruction encoded as &apos;VMI&apos; (propagates AVX.L if the instruction uses YMM register). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa915e85741ec1c5090815932d8270902" prot="public">
          <name>kInstGroupAvxMovSsSd</name>
          <briefdescription>
<para>Vmovss/Vmovsd. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa9b86e77c9484815394672b8f117b8dd" prot="public">
          <name>kInstGroupAvxGather</name>
          <briefdescription>
<para>AVX2 gather family instructions (VSIB). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5d01d479febb3650934be8da1087c462" prot="public">
          <name>kInstGroupAvxGatherEx</name>
          <briefdescription>
<para>AVX2 gather family instructions (VSIB), differs only in mem operand. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 instruction groups. </para>        </briefdescription>
        <detaileddescription>
<para>This should be only used by assembler, because it&apos;s <computeroutput>asmjit::Assembler</computeroutput> specific grouping. Each group represents one &apos;case&apos; in the Assembler&apos;s main emit method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="1452" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="1452" bodyend="1635"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1gaaba19b5097d939e6304292bb09da9e12" prot="public" static="no">
        <name>kInstOpCode</name>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12adf7a53c7d76e5723b21efbd50382516e" prot="public">
          <name>kInstOpCode_MM_Shift</name>
          <initializer> 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12a28517a3b5b5d1f7a73c931d5aedca922" prot="public">
          <name>kInstOpCode_MM_Mask</name>
          <initializer> 0x0FU &lt;&lt; kInstOpCode_MM_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12af03eff0167fa7ebffb3761b0bbe9ffdc" prot="public">
          <name>kInstOpCode_MM_00</name>
          <initializer> 0x00U &lt;&lt; kInstOpCode_MM_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12acd785475f5fe9848aadecaa1ba8c6860" prot="public">
          <name>kInstOpCode_MM_0F</name>
          <initializer> 0x01U &lt;&lt; kInstOpCode_MM_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12a28991f4d675f958ad18a9d74233ae8e3" prot="public">
          <name>kInstOpCode_MM_0F38</name>
          <initializer> 0x02U &lt;&lt; kInstOpCode_MM_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12a7a8c2ee604bb1be116eeeb5bdc5ab70e" prot="public">
          <name>kInstOpCode_MM_0F3A</name>
          <initializer> 0x03U &lt;&lt; kInstOpCode_MM_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12aa50bcc7e5376bfab68205ab171e377be" prot="public">
          <name>kInstOpCode_MM_0F01</name>
          <initializer> 0x0FU &lt;&lt; kInstOpCode_MM_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12a75d69086d51354c6a38b38959dc42f42" prot="public">
          <name>kInstOpCode_PP_Shift</name>
          <initializer> 21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12a27ba8e924a33a83c23991db339a0221c" prot="public">
          <name>kInstOpCode_PP_Mask</name>
          <initializer> 0x07U &lt;&lt; kInstOpCode_PP_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12ac067e4b3bdb004e9efb9b02d7eb9e2c5" prot="public">
          <name>kInstOpCode_PP_00</name>
          <initializer> 0x00U &lt;&lt; kInstOpCode_PP_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12a35ca0b4f8bb733dc60c0b86906a4e0b5" prot="public">
          <name>kInstOpCode_PP_66</name>
          <initializer> 0x01U &lt;&lt; kInstOpCode_PP_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12a5fa72b93b721913d527b6361ea8d8256" prot="public">
          <name>kInstOpCode_PP_F3</name>
          <initializer> 0x02U &lt;&lt; kInstOpCode_PP_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12a0f39d0633261c7e2bd236d5bc0c8f521" prot="public">
          <name>kInstOpCode_PP_F2</name>
          <initializer> 0x03U &lt;&lt; kInstOpCode_PP_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12aba3783f0e9eae7262631b4a773bda73f" prot="public">
          <name>kInstOpCode_PP_9B</name>
          <initializer> 0x07U &lt;&lt; kInstOpCode_PP_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12ae53bf3840323b8aa48f19885c031be9f" prot="public">
          <name>kInstOpCode_L_Shift</name>
          <initializer> 24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12aa3b7b4c8e59520b7dbff5a671799b5cc" prot="public">
          <name>kInstOpCode_L_Mask</name>
          <initializer> 0x01U &lt;&lt; kInstOpCode_L_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12a6e1e1cfdaf234d2b3cd1a22c3327286b" prot="public">
          <name>kInstOpCode_L_False</name>
          <initializer> 0x00U &lt;&lt; kInstOpCode_L_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12aa5739cec4de77916417d79fcf0892443" prot="public">
          <name>kInstOpCode_L_True</name>
          <initializer> 0x01U &lt;&lt; kInstOpCode_L_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12a0ce1991474979f54c0db5c7063eb7e13" prot="public">
          <name>kInstOpCode_O_Shift</name>
          <initializer> 29</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggaaba19b5097d939e6304292bb09da9e12a9071fb8c179affec8a6619d7cbdd50af" prot="public">
          <name>kInstOpCode_O_Mask</name>
          <initializer> 0x07U &lt;&lt; kInstOpCode_O_Shift</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Instruction OpCode encoding used by asmjit &apos;<ref refid="structasmjit_1_1x86x64_1_1InstInfo" kindref="compound">InstInfo</ref>&apos; table. </para>        </briefdescription>
        <detaileddescription>
<para>The schema was inspired by AVX/AVX2 features. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="1644" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="1644" bodyend="1674"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga9741e8a4cc904b35dc950570803abd37" prot="public" static="no">
        <name>kInstFlags</name>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a1f471eeb8e612b63bc9ecf1eb8e896ab" prot="public">
          <name>kInstFlagNone</name>
          <initializer> 0x0000</initializer>
          <briefdescription>
<para>No flags. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37abc3da04810c61d0f9f981456459b98e7" prot="public">
          <name>kInstFlagFlow</name>
          <initializer> 0x0001</initializer>
          <briefdescription>
<para>Instruction is a control-flow instruction. </para>          </briefdescription>
          <detaileddescription>
<para>Control flow instructions are jmp, jcc, call and ret. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad5cc42d5e26c67479525192d1f535565" prot="public">
          <name>kInstFlagTest</name>
          <initializer> 0x0002</initializer>
          <briefdescription>
<para>Instruction is a compare/test like instruction. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad4b9bd5ecfc722027dda933f907e75d2" prot="public">
          <name>kInstFlagMove</name>
          <initializer> 0x0004</initializer>
          <briefdescription>
<para>Instruction is a move like instruction. </para>          </briefdescription>
          <detaileddescription>
<para>Move instructions typically overwrite the first operand by the second operand. The first operand can be the exact copy of the second operand or it can be any kind of conversion. Mov instructions are typically &apos;mov&apos;, &apos;movd&apos;, &apos;movq&apos;, &apos;movdq?&apos;, &apos;cmov??&apos; like instructions, but we also consider &apos;lea&apos; (Load Effective Address), multimedia instructions like &apos;cvtdq2pd&apos;, shuffle instructions like &apos;pshufb&apos; and SSE/SSE2 mathematic instructions like &apos;rcp??&apos;, &apos;round??&apos; and &apos;rsqrt??&apos;. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a8617892895dedb1ef0756edb525a3506" prot="public">
          <name>kInstFlagXchg</name>
          <initializer> 0x0008</initializer>
          <briefdescription>
<para>Instruction is an exchange like instruction. </para>          </briefdescription>
          <detaileddescription>
<para>Exchange instruction typically overwrite first and second operand, we count &apos;xchg&apos; and &apos;xadd&apos; instructions right now. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a2a23c0346b187ccf4bdc2aca7325a686" prot="public">
          <name>kInstFlagFp</name>
          <initializer> 0x0010</initializer>
          <briefdescription>
<para>Instruction accesses Fp register(s). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a4bfda635ab02f27875c70fa0354a8646" prot="public">
          <name>kInstFlagLock</name>
          <initializer> 0x0020</initializer>
          <briefdescription>
<para>Instruction can be prefixed by using the LOCK prefix. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37aa399b956eb3582e0947d0b4a9d32e3af" prot="public">
          <name>kInstFlagSpecial</name>
          <initializer> 0x0040</initializer>
          <briefdescription>
<para>Instruction is special, this is for <computeroutput>Compiler</computeroutput>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a67fb1f2dda6d618b99e7a9e45699a40e" prot="public">
          <name>kInstFlagSpecialMem</name>
          <initializer> 0x0080</initializer>
          <briefdescription>
<para>Instruction always performs memory access. </para>          </briefdescription>
          <detaileddescription>
<para>This flag is always combined with <computeroutput>kInstFlagSpecial</computeroutput> and signalizes that there is an implicit address which is accessed (usually EDI/RDI or ESI/EDI). </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ae3896e14d1088cab33b7062af5e7bb2a" prot="public">
          <name>kInstFlagMem2</name>
          <initializer> 0x0100</initializer>
          <briefdescription>
<para>Instruction memory operand can refer to 16-bit address (used by FPU). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a61ca5bba58b2714ef204f445f089a7be" prot="public">
          <name>kInstFlagMem4</name>
          <initializer> 0x0200</initializer>
          <briefdescription>
<para>Instruction memory operand can refer to 32-bit address (used by FPU). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a7f7b411245f1144531fdf664c0d46a03" prot="public">
          <name>kInstFlagMem8</name>
          <initializer> 0x0400</initializer>
          <briefdescription>
<para>Instruction memory operand can refer to 64-bit address (used by FPU). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37af26ff9a24212294cfa1c5aba6cd5af1a" prot="public">
          <name>kInstFlagMem10</name>
          <initializer> 0x0800</initializer>
          <briefdescription>
<para>Instruction memory operand can refer to 80-bit address (used by FPU). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37aec16998107e33ac810cd30749e421662" prot="public">
          <name>kInstFlagMem2_4</name>
          <initializer> kInstFlagMem2   | kInstFlagMem4</initializer>
          <briefdescription>
<para>Combination of <computeroutput>kInstFlagMem2</computeroutput> and <computeroutput>kInstFlagMem4</computeroutput>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a1fb4910c41f3d10fb403343444834652" prot="public">
          <name>kInstFlagMem2_4_8</name>
          <initializer> kInstFlagMem2_4 | kInstFlagMem8</initializer>
          <briefdescription>
<para>Combination of <computeroutput>kInstFlagMem2</computeroutput> and <computeroutput>kInstFlagMem4</computeroutput> and <computeroutput>kInstFlagMem8</computeroutput>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad4b92c51f5d67588b7af27abdebdcb52" prot="public">
          <name>kInstFlagMem4_8</name>
          <initializer> kInstFlagMem4   | kInstFlagMem8</initializer>
          <briefdescription>
<para>Combination of <computeroutput>kInstFlagMem4</computeroutput> and <computeroutput>kInstFlagMem8</computeroutput>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ab801b2c1431df9f182d3099a2da060c9" prot="public">
          <name>kInstFlagMem4_8_10</name>
          <initializer> kInstFlagMem4_8 | kInstFlagMem10</initializer>
          <briefdescription>
<para>Combination of <computeroutput>kInstFlagMem4</computeroutput> and <computeroutput>kInstFlagMem8</computeroutput> and <computeroutput>kInstFlagMem10</computeroutput>. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a3699076b1d7770a163b4cf8a1b5724c2" prot="public">
          <name>kInstFlagW</name>
          <initializer> 0x8000</initializer>
          <briefdescription>
<para>REX.W/VEX.W by default. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 instruction type flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="1681" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="1681" bodyend="1746"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1gade08bd84e122d319bfe950dede3e5e2e" prot="public" static="no">
        <name>kInstOp</name>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea1cf9daf29f6e8446beaee86e88466569" prot="public">
          <name>kInstOpGb</name>
          <initializer> 0x0001</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea09c7c5b9b60f02e2617508428a0f5a40" prot="public">
          <name>kInstOpGw</name>
          <initializer> 0x0002</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2eab174c06123ad594e1aed96468253440b" prot="public">
          <name>kInstOpGd</name>
          <initializer> 0x0004</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2eabab268ff834604b86eafcb4968d44e86" prot="public">
          <name>kInstOpGq</name>
          <initializer> 0x0008</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea9e3428e66a4f9cca079ef1c0d37807d7" prot="public">
          <name>kInstOpFp</name>
          <initializer> 0x0010</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2eadc9e6dae90a1321ba30bfd90aae9fcf1" prot="public">
          <name>kInstOpMm</name>
          <initializer> 0x0020</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea50ae6a516088d362b8f747aac7a0e117" prot="public">
          <name>kInstOpXmm</name>
          <initializer> 0x0100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea9d562617f1a090493022277f78b121b4" prot="public">
          <name>kInstOpYmm</name>
          <initializer> 0x0200</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2eaa661a42db88963d1dbdc3aa6c9504b1d" prot="public">
          <name>kInstOpZmm</name>
          <initializer> 0x0400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea006ca5b38a586fec24332c7e1d10d53f" prot="public">
          <name>kInstOpMem</name>
          <initializer> 0x4000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2eacda4bfbe151e564a5ee0ce0059ce3bec" prot="public">
          <name>kInstOpImm</name>
          <initializer> 0x8000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea22d933961a55f39db6c718c64b9796fa" prot="public">
          <name>kInstOpGwb</name>
          <initializer> kInstOpGw     | kInstOpGb</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2eab19c5adb457c621136c8c381291294a3" prot="public">
          <name>kInstOpGqd</name>
          <initializer> kInstOpGq     | kInstOpGd</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ead07bb3841a5ce25a8e7efcf3354b2604" prot="public">
          <name>kInstOpGqdw</name>
          <initializer> kInstOpGq     | kInstOpGd | kInstOpGw</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2eab30351254b1ae04395ed32d29e194efc" prot="public">
          <name>kInstOpGqdwb</name>
          <initializer> kInstOpGq     | kInstOpGd | kInstOpGw | kInstOpGb</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea8d6ea08d3e1fb93a4f88f1e48cd43730" prot="public">
          <name>kInstOpGbMem</name>
          <initializer> kInstOpGb     | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea44f0314752b303a2172a946d202f03f6" prot="public">
          <name>kInstOpGwMem</name>
          <initializer> kInstOpGw     | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea5e95be901890e947f0c69f211781c7a7" prot="public">
          <name>kInstOpGdMem</name>
          <initializer> kInstOpGd     | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2eafdce31409c2982882da55e54ac355dce" prot="public">
          <name>kInstOpGqMem</name>
          <initializer> kInstOpGq     | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea574c5a4ad6fdaa48924d39dc64c48572" prot="public">
          <name>kInstOpGwbMem</name>
          <initializer> kInstOpGwb    | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea04beac469cfa314d34001d5b4295e7e7" prot="public">
          <name>kInstOpGqdMem</name>
          <initializer> kInstOpGqd    | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea7f7425157ecfed98f2d036fb5f46180c" prot="public">
          <name>kInstOpGqdwMem</name>
          <initializer> kInstOpGqdw   | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea66e06b6684c396dc1879806d8067d0b9" prot="public">
          <name>kInstOpGqdwbMem</name>
          <initializer> kInstOpGqdwb  | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea90cea60b7b130292be4a1e62d6c5f2d7" prot="public">
          <name>kInstOpFpMem</name>
          <initializer> kInstOpFp     | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea4241b896ced7cc5dfea7309563cc9fef" prot="public">
          <name>kInstOpMmMem</name>
          <initializer> kInstOpMm     | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea635ab2a0349a41cd010787096fdfbcd7" prot="public">
          <name>kInstOpXmmMem</name>
          <initializer> kInstOpXmm    | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea86657dba89b1aaa9848f7da8da5c757c" prot="public">
          <name>kInstOpYmmMem</name>
          <initializer> kInstOpYmm    | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea29c30d60e49f64bb9aab9fc72afe1460" prot="public">
          <name>kInstOpMmXmm</name>
          <initializer> kInstOpMm     | kInstOpXmm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea3cc9cd3bed6c9fc8c15c81334c785c6e" prot="public">
          <name>kInstOpMmXmmMem</name>
          <initializer> kInstOpMmXmm  | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea015eac4483d120e4f2e7f67fcaffc480" prot="public">
          <name>kInstOpXmmYmm</name>
          <initializer> kInstOpXmm    | kInstOpYmm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggade08bd84e122d319bfe950dede3e5e2ea5956c40b118a0c3bc8d133d4ccb33592" prot="public">
          <name>kInstOpXmmYmmMem</name>
          <initializer> kInstOpXmmYmm | kInstOpMem</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 instruction operand flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="1753" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="1753" bodyend="1794"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga46745c982ed79dafc3b61ae380ddbb7b" prot="public" static="no">
        <name>kCond</name>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba6288b029f68941ae6833e07b0890196c" prot="public">
          <name>kCondA</name>
          <initializer> 0x07</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7bafd27666d0da4798451596e466a977c2d" prot="public">
          <name>kCondAE</name>
          <initializer> 0x03</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7baadc35dbd6f3ad0a1e45a1ca4b02acaee" prot="public">
          <name>kCondB</name>
          <initializer> 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba4dbdee1e25a12b53512afdc1bc57ac38" prot="public">
          <name>kCondBE</name>
          <initializer> 0x06</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba369e28b8787e34210ea17827e1b6520d" prot="public">
          <name>kCondC</name>
          <initializer> 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba51f9818ad4df0631c25abf24d6e51570" prot="public">
          <name>kCondE</name>
          <initializer> 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba2be026dd01bd7e3750050c599d2e7333" prot="public">
          <name>kCondG</name>
          <initializer> 0x0F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7bab4e73271ab3bc5a13a218e28f6b1a56b" prot="public">
          <name>kCondGE</name>
          <initializer> 0x0D</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba7f6cbe9be3e8df954f362f406b9402ba" prot="public">
          <name>kCondL</name>
          <initializer> 0x0C</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba0f969fc86019522accdae9e0bb00ed8e" prot="public">
          <name>kCondLE</name>
          <initializer> 0x0E</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba74a6d1cd508aa29ffa743c3e2b6aa8fc" prot="public">
          <name>kCondNA</name>
          <initializer> 0x06</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba7dab3f7fb3ac27f152b5722878877063" prot="public">
          <name>kCondNAE</name>
          <initializer> 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7baf200370423008b170adc5595183e9e88" prot="public">
          <name>kCondNB</name>
          <initializer> 0x03</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba2b09bbcdf06a4997be3922f72e2ebef4" prot="public">
          <name>kCondNBE</name>
          <initializer> 0x07</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba778e5a2b1b92f37649a1b7b40058a51a" prot="public">
          <name>kCondNC</name>
          <initializer> 0x03</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7bac62289c4b343652fa53205b844094dbb" prot="public">
          <name>kCondNE</name>
          <initializer> 0x05</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba09ef33c94edfb005b701575276c5d9f3" prot="public">
          <name>kCondNG</name>
          <initializer> 0x0E</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7bae2db5fca46b8d09cdec76a02949d5eba" prot="public">
          <name>kCondNGE</name>
          <initializer> 0x0C</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7bac3d3d2f5760b86f0bd942a84d52562be" prot="public">
          <name>kCondNL</name>
          <initializer> 0x0D</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba33770a6dd288ec496e2b99d0c7ff6e8e" prot="public">
          <name>kCondNLE</name>
          <initializer> 0x0F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba166fa9f8cbaa0f1df0f36b2b1e38fea5" prot="public">
          <name>kCondNO</name>
          <initializer> 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba2e0dae7a580498637769fad8700242d2" prot="public">
          <name>kCondNP</name>
          <initializer> 0x0B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba7e0d61d6f106c06ca926a8c869199dd8" prot="public">
          <name>kCondNS</name>
          <initializer> 0x09</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7baf1b6d33c8df48740e0e48ab306ce929d" prot="public">
          <name>kCondNZ</name>
          <initializer> 0x05</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7bad84ace572f306f99b4ddb966f34e31fd" prot="public">
          <name>kCondO</name>
          <initializer> 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba0b30ba7a7928bafc8791e1717b12a8cb" prot="public">
          <name>kCondP</name>
          <initializer> 0x0A</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba38907272e209ca48b5680e3024a1247c" prot="public">
          <name>kCondPE</name>
          <initializer> 0x0A</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7bab5c532ed75bdb650901bb633744748c2" prot="public">
          <name>kCondPO</name>
          <initializer> 0x0B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba3f5ef0d9f0a732830bbbac064744d31b" prot="public">
          <name>kCondS</name>
          <initializer> 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba077ad1d13052b916ed350e5df21ba9d0" prot="public">
          <name>kCondZ</name>
          <initializer> 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba2bc7471479afde0ecc1beb12c55fe8f9" prot="public">
          <name>kCondOverflow</name>
          <initializer> 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba873a854254952e99bbd1cbcd7fde2da3" prot="public">
          <name>kCondNotOverflow</name>
          <initializer> 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba8acb78a4862a2c41f3900708600ae9ea" prot="public">
          <name>kCondBelow</name>
          <initializer> 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba1e469ed5d3830229450f8a6d6b8d3051" prot="public">
          <name>kCondAboveEqual</name>
          <initializer> 0x03</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7baa40c5d9bc5a1118efa9689145b5b8846" prot="public">
          <name>kCondEqual</name>
          <initializer> 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba66b44723ea73eac5b5e6160f5e9fba75" prot="public">
          <name>kCondNotEqual</name>
          <initializer> 0x05</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7baa6e7512ca4fbdc0379cf307a3c4877c1" prot="public">
          <name>kCondBelowEqual</name>
          <initializer> 0x06</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba812fb63af26b5c69a5ce67842e43b4f1" prot="public">
          <name>kCondAbove</name>
          <initializer> 0x07</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba1257354c488aac80c8004760ec7c19f9" prot="public">
          <name>kCondSign</name>
          <initializer> 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7baff00e4bba45aba728bd80294e08b04f1" prot="public">
          <name>kCondNotSign</name>
          <initializer> 0x09</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba5190d8005fc10495eb2701a849a4aa00" prot="public">
          <name>kCondParityEven</name>
          <initializer> 0x0A</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7baa384bf3ad974278218fd52b8222eb993" prot="public">
          <name>kCondParityOdd</name>
          <initializer> 0x0B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba46381a8dcd9a05826f54ed9e0bb99035" prot="public">
          <name>kCondLess</name>
          <initializer> 0x0C</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7bad8fdd3b3ba931e239384561c7805919e" prot="public">
          <name>kCondGreaterEqual</name>
          <initializer> 0x0D</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba3321c42a2d6aee5d1f6854f9e8df4f0b" prot="public">
          <name>kCondLessEqual</name>
          <initializer> 0x0E</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba902afbadded9dee1649e241c4cd0624b" prot="public">
          <name>kCondGreater</name>
          <initializer> 0x0F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba167a3d7496198bfa6055aa4f377a9f5f" prot="public">
          <name>kCondZero</name>
          <initializer> 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba20b8bd818c3053ef552808200698495d" prot="public">
          <name>kCondNotZero</name>
          <initializer> 0x05</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7bac175aa33f76075f86211637dbfe072a3" prot="public">
          <name>kCondNegative</name>
          <initializer> 0x08</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7bae144f773070384e672fe45f43b63578c" prot="public">
          <name>kCondPositive</name>
          <initializer> 0x09</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7baa156eed9d0b467082a3a00ce23ff3781" prot="public">
          <name>kCondFpuUnordered</name>
          <initializer> 0x10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7badff83f00fef211bca3732552b4a81120" prot="public">
          <name>kCondFpuNotUnordered</name>
          <initializer> 0x11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba99bda6215f94e7c2257f592a5a85dac6" prot="public">
          <name>kCondNone</name>
          <initializer> 0x12</initializer>
          <briefdescription>
<para>No condition code. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 Condition codes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="1801" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="1801" bodyend="1864"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1gac1cff950c5a6c4a09fa2807d40d6b74e" prot="public" static="no">
        <name>kVarType</name>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" prot="public">
          <name>kVarTypeMm</name>
          <initializer> 12</initializer>
          <briefdescription>
<para>Variable is Mm (MMX). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" prot="public">
          <name>kVarTypeXmm</name>
          <briefdescription>
<para>Variable is Xmm (SSE/SSE2). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" prot="public">
          <name>kVarTypeXmmSs</name>
          <briefdescription>
<para>Variable is SSE scalar SP-FP number. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" prot="public">
          <name>kVarTypeXmmPs</name>
          <briefdescription>
<para>Variable is SSE packed SP-FP number (4 floats). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" prot="public">
          <name>kVarTypeXmmSd</name>
          <briefdescription>
<para>Variable is SSE2 scalar DP-FP number. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" prot="public">
          <name>kVarTypeXmmPd</name>
          <briefdescription>
<para>Variable is SSE2 packed DP-FP number (2 doubles). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea63ec4833bed0aeaa88e1f41c7f45b86f" prot="public">
          <name>kVarTypeYmm</name>
          <briefdescription>
<para>Variable is Ymm (AVX). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea7af57e49bc6aae8806ce5d6e6eea51f3" prot="public">
          <name>kVarTypeYmmPs</name>
          <briefdescription>
<para>Variable is AVX packed SP-FP number (8 floats). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaff3a02be54244818dfead89c641f1296" prot="public">
          <name>kVarTypeYmmPd</name>
          <briefdescription>
<para>Variable is AVX packed DP-FP number (4 doubles). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" prot="public">
          <name>kVarTypeCount</name>
          <briefdescription>
<para>Count of variable types. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea021a0ca22dc5a52b0db45bbbee7ef4b6" prot="public">
          <name>_kVarTypeMmStart</name>
          <initializer> kVarTypeMm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eab95886ab3007c31f64feb9ce39c21b8d" prot="public">
          <name>_kVarTypeMmEnd</name>
          <initializer> kVarTypeMm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea40a0c9a625025f1903e7f3bdc1b8a9cd" prot="public">
          <name>_kVarTypeXmmStart</name>
          <initializer> kVarTypeXmm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea6f293b0fbe7dd6d1030b915f2e3186a4" prot="public">
          <name>_kVarTypeXmmEnd</name>
          <initializer> kVarTypeXmmPd</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea5e52479114369c27deb1efa6f9f23d5f" prot="public">
          <name>_kVarTypeYmmStart</name>
          <initializer> kVarTypeYmm</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea21ef358265a5d24869f7e96c17344a41" prot="public">
          <name>_kVarTypeYmmEnd</name>
          <initializer> kVarTypeYmmPd</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 variable type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="1871" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="1871" bodyend="1910"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga790848a0ca69955866d99e8fefa0545d" prot="public" static="no">
        <name>kVarDesc</name>
        <enumvalue id="group__asmjit__x86x64_1gga790848a0ca69955866d99e8fefa0545da19066ce2e0282086473a1400454d23a6" prot="public">
          <name>kVarDescSp</name>
          <initializer> 0x10</initializer>
          <briefdescription>
<para>Variable contains single-precision floating-point(s). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga790848a0ca69955866d99e8fefa0545da21707bf740b999e0ae6a87c724373e7d" prot="public">
          <name>kVarDescDp</name>
          <initializer> 0x20</initializer>
          <briefdescription>
<para>Variable contains double-precision floating-point(s). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga790848a0ca69955866d99e8fefa0545da3404a571bc84eaeb4959c3d855574370" prot="public">
          <name>kVarDescPacked</name>
          <initializer> 0x40</initializer>
          <briefdescription>
<para>Variable is packed (for example float4x, double2x, ...). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86/X64 variable description. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="1917" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="1917" bodyend="1924"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga1cef400cf6e21967f796513f7c44ad2e" prot="public" static="no">
        <name>kFuncConv</name>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea553686702d710c1fb5936db274ffa4b2" prot="public">
          <name>kFuncConvX64W</name>
          <initializer> 1</initializer>
          <briefdescription>
<para>X64 calling convention for Windows platform (WIN64 ABI). </para>          </briefdescription>
          <detaileddescription>
<para>For first four arguments are used these registers:<itemizedlist>
<listitem><para>1. 32/64-bit integer or floating point argument - rcx/xmm0</para></listitem><listitem><para>2. 32/64-bit integer or floating point argument - rdx/xmm1</para></listitem><listitem><para>3. 32/64-bit integer or floating point argument - r8/xmm2</para></listitem><listitem><para>4. 32/64-bit integer or floating point argument - r9/xmm3</para></listitem></itemizedlist>
</para><para>Note first four arguments here means arguments at positions from 1 to 4 (included). For example if second argument is not passed in register then rdx/xmm1 register is unused.</para><para>All other arguments are pushed on the stack in right-to-left direction. Stack is aligned by 16 bytes. There is 32-byte shadow space on the stack that can be used to save up to four 64-bit registers (probably designed to be used to save first four arguments passed in registers).</para><para>Arguments direction:<itemizedlist>
<listitem><para>Right to Left (except for first 4 parameters that&apos;s in registers)</para></listitem></itemizedlist>
</para><para>Stack is cleaned by:<itemizedlist>
<listitem><para>Caller.</para></listitem></itemizedlist>
</para><para>Return value:<itemizedlist>
<listitem><para>Integer types - RAX register.</para></listitem><listitem><para>Floating points - XMM0 register.</para></listitem></itemizedlist>
</para><para>Stack is always aligned by 16 bytes.</para><para>More information about this calling convention can be found on MSDN: <ulink url="http://msdn.microsoft.com/en-us/library/9b372w95.aspx">http://msdn.microsoft.com/en-us/library/9b372w95.aspx</ulink> . </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea86646a2f15a33883198dc96cd586cba3" prot="public">
          <name>kFuncConvX64U</name>
          <initializer> 2</initializer>
          <briefdescription>
<para>X64 calling convention for Unix platforms (AMD64 ABI). </para>          </briefdescription>
          <detaileddescription>
<para>First six 32 or 64-bit integer arguments are passed in rdi, rsi, rdx, rcx, r8, r9 registers. First eight floating point or Xmm arguments are passed in xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7 registers. This means that in registers can be transferred up to 14 arguments total.</para><para>There is also RED ZONE below the stack pointer that can be used for temporary storage. The red zone is the space from [rsp-128] to [rsp-8].</para><para>Arguments direction:<itemizedlist>
<listitem><para>Right to Left (Except for arguments passed in registers).</para></listitem></itemizedlist>
</para><para>Stack is cleaned by:<itemizedlist>
<listitem><para>Caller.</para></listitem></itemizedlist>
</para><para>Return value:<itemizedlist>
<listitem><para>Integer types - RAX register.</para></listitem><listitem><para>Floating points - XMM0 register.</para></listitem></itemizedlist>
</para><para>Stack is always aligned by 16 bytes. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eab7e3dd2133e72d62ec10577f7aa59e81" prot="public">
          <name>kFuncConvCDecl</name>
          <initializer> 3</initializer>
          <briefdescription>
<para>Cdecl calling convention (used by C runtime). </para>          </briefdescription>
          <detaileddescription>
<para>Compatible across MSVC and GCC.</para><para>Arguments direction:<itemizedlist>
<listitem><para>Right to Left</para></listitem></itemizedlist>
</para><para>Stack is cleaned by:<itemizedlist>
<listitem><para>Caller. </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b49ad730aef88425b403db4743f1c3e" prot="public">
          <name>kFuncConvStdCall</name>
          <initializer> 4</initializer>
          <briefdescription>
<para>Stdcall calling convention (used by WinAPI). </para>          </briefdescription>
          <detaileddescription>
<para>Compatible across MSVC and GCC.</para><para>Arguments direction:<itemizedlist>
<listitem><para>Right to Left</para></listitem></itemizedlist>
</para><para>Stack is cleaned by:<itemizedlist>
<listitem><para>Callee.</para></listitem></itemizedlist>
</para><para>Return value:<itemizedlist>
<listitem><para>Integer types - EAX:EDX registers.</para></listitem><listitem><para>Floating points - fp0 register. </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea7e73cd258391478a22a16706e8765989" prot="public">
          <name>kFuncConvMsThisCall</name>
          <initializer> 5</initializer>
          <briefdescription>
<para>MSVC specific calling convention used by MSVC/Intel compilers for struct/class methods. </para>          </briefdescription>
          <detaileddescription>
<para>This is MSVC (and Intel) only calling convention used in Windows world for C++ class methods. Implicit &apos;this&apos; pointer is stored in ECX register instead of storing it on the stack.</para><para>Arguments direction:<itemizedlist>
<listitem><para>Right to Left (except this pointer in ECX)</para></listitem></itemizedlist>
</para><para>Stack is cleaned by:<itemizedlist>
<listitem><para>Callee.</para></listitem></itemizedlist>
</para><para>Return value:<itemizedlist>
<listitem><para>Integer types - EAX:EDX registers.</para></listitem><listitem><para>Floating points - fp0 register.</para></listitem></itemizedlist>
</para><para>C++ class methods that have variable count of arguments uses different calling convention called cdecl.</para><para><simplesect kind="note"><para>This calling convention is always used by MSVC for class methods, it&apos;s implicit and there is no way how to override it. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b0cadb9dec3ae217ff320376f13e404" prot="public">
          <name>kFuncConvMsFastCall</name>
          <initializer> 6</initializer>
          <briefdescription>
<para>MSVC specific fastcall. </para>          </briefdescription>
          <detaileddescription>
<para>Two first parameters (evaluated from left-to-right) are in ECX:EDX registers, all others on the stack in right-to-left order.</para><para>Arguments direction:<itemizedlist>
<listitem><para>Right to Left (except to first two integer arguments in ECX:EDX)</para></listitem></itemizedlist>
</para><para>Stack is cleaned by:<itemizedlist>
<listitem><para>Callee.</para></listitem></itemizedlist>
</para><para>Return value:<itemizedlist>
<listitem><para>Integer types - EAX:EDX registers.</para></listitem><listitem><para>Floating points - fp0 register.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>This calling convention differs to GCC one in stack cleaning mechanism. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea9914b37ad9535fd37562af85830af3ff" prot="public">
          <name>kFuncConvBorlandFastCall</name>
          <initializer> 7</initializer>
          <briefdescription>
<para>Borland specific fastcall with 2 parameters in registers. </para>          </briefdescription>
          <detaileddescription>
<para>Two first parameters (evaluated from left-to-right) are in ECX:EDX registers, all others on the stack in left-to-right order.</para><para>Arguments direction:<itemizedlist>
<listitem><para>Left to Right (except to first two integer arguments in ECX:EDX)</para></listitem></itemizedlist>
</para><para>Stack is cleaned by:<itemizedlist>
<listitem><para>Callee.</para></listitem></itemizedlist>
</para><para>Return value:<itemizedlist>
<listitem><para>Integer types - EAX:EDX registers.</para></listitem><listitem><para>Floating points - fp0 register.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>Arguments on the stack are in left-to-right order that differs to other fastcall conventions used in different compilers. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b441adfcd78f9f09d22c48debce4bdf" prot="public">
          <name>kFuncConvGccFastCall</name>
          <initializer> 8</initializer>
          <briefdescription>
<para>GCC specific fastcall convention. </para>          </briefdescription>
          <detaileddescription>
<para>Two first parameters (evaluated from left-to-right) are in ECX:EDX registers, all others on the stack in right-to-left order.</para><para>Arguments direction:<itemizedlist>
<listitem><para>Right to Left (except to first two integer arguments in ECX:EDX)</para></listitem></itemizedlist>
</para><para>Stack is cleaned by:<itemizedlist>
<listitem><para>Callee.</para></listitem></itemizedlist>
</para><para>Return value:<itemizedlist>
<listitem><para>Integer types - EAX:EDX registers.</para></listitem><listitem><para>Floating points - fp0 register.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>This calling convention should be compatible with <computeroutput>kFuncConvMsFastCall</computeroutput>. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ead94574cee35b8c0c82855189c429401e" prot="public">
          <name>kFuncConvGccRegParm1</name>
          <initializer> 9</initializer>
          <briefdescription>
<para>GCC specific regparm(1) convention. </para>          </briefdescription>
          <detaileddescription>
<para>The first parameter (evaluated from left-to-right) is in EAX register, all others on the stack in right-to-left order.</para><para>Arguments direction:<itemizedlist>
<listitem><para>Right to Left (except to first one integer argument in EAX)</para></listitem></itemizedlist>
</para><para>Stack is cleaned by:<itemizedlist>
<listitem><para>Caller.</para></listitem></itemizedlist>
</para><para>Return value:<itemizedlist>
<listitem><para>Integer types - EAX:EDX registers.</para></listitem><listitem><para>Floating points - fp0 register. </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eacb9583a574e3f1b453751c95791f3056" prot="public">
          <name>kFuncConvGccRegParm2</name>
          <initializer> 10</initializer>
          <briefdescription>
<para>GCC specific regparm(2) convention. </para>          </briefdescription>
          <detaileddescription>
<para>Two first parameters (evaluated from left-to-right) are in EAX:EDX registers, all others on the stack in right-to-left order.</para><para>Arguments direction:<itemizedlist>
<listitem><para>Right to Left (except to first two integer arguments in EAX:EDX)</para></listitem></itemizedlist>
</para><para>Stack is cleaned by:<itemizedlist>
<listitem><para>Caller.</para></listitem></itemizedlist>
</para><para>Return value:<itemizedlist>
<listitem><para>Integer types - EAX:EDX registers.</para></listitem><listitem><para>Floating points - fp0 register. </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eaa05e116e3ed2c8a8754b595635c9ece7" prot="public">
          <name>kFuncConvGccRegParm3</name>
          <initializer> 11</initializer>
          <briefdescription>
<para>GCC specific fastcall with 3 parameters in registers. </para>          </briefdescription>
          <detaileddescription>
<para>Three first parameters (evaluated from left-to-right) are in EAX:EDX:ECX registers, all others on the stack in right-to-left order.</para><para>Arguments direction:<itemizedlist>
<listitem><para>Right to Left (except to first three integer arguments in EAX:EDX:ECX)</para></listitem></itemizedlist>
</para><para>Stack is cleaned by:<itemizedlist>
<listitem><para>Caller.</para></listitem></itemizedlist>
</para><para>Return value:<itemizedlist>
<listitem><para>Integer types - EAX:EDX registers.</para></listitem><listitem><para>Floating points - fp0 register. </para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea03d70ad76bdf694bada639618feacca0" prot="public">
          <name>_kFuncConvCount</name>
          <initializer> 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea4dde21b21db39b2ce2d861606fc59b1f" prot="public">
          <name>kFuncConvHost</name>
          <initializer> kFuncConvX64U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eaf3779ed041b6b4421408803d78cb8cb7" prot="public">
          <name>kFuncConvHostCDecl</name>
          <initializer> kFuncConvHost</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea7d75099b5eeb32bbd0685f207a0b99ea" prot="public">
          <name>kFuncConvHostStdCall</name>
          <initializer> kFuncConvHost</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eab6eacc3380866aa4d8a06b7be4910455" prot="public">
          <name>kFuncConvHostFastCall</name>
          <initializer> kFuncConvHost</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea4dde21b21db39b2ce2d861606fc59b1f" prot="public">
          <name>kFuncConvHost</name>
          <initializer> kFuncConvX64U</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eaf3779ed041b6b4421408803d78cb8cb7" prot="public">
          <name>kFuncConvHostCDecl</name>
          <initializer> kFuncConvHost</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea7d75099b5eeb32bbd0685f207a0b99ea" prot="public">
          <name>kFuncConvHostStdCall</name>
          <initializer> kFuncConvHost</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eab6eacc3380866aa4d8a06b7be4910455" prot="public">
          <name>kFuncConvHostFastCall</name>
          <initializer> kFuncConvHost</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86 function calling conventions. </para>        </briefdescription>
        <detaileddescription>
<para>Calling convention is scheme how function arguments are passed into function and how functions returns values. In assembler programming it&apos;s needed to always comply with function calling conventions, because even small inconsistency can cause undefined behavior or crash.</para><para>List of calling conventions for 32-bit x86 mode:<itemizedlist>
<listitem><para><computeroutput>kFuncConvCDecl</computeroutput> - Calling convention for C runtime.</para></listitem><listitem><para><computeroutput>kFuncConvStdCall</computeroutput> - Calling convention for WinAPI functions.</para></listitem><listitem><para><computeroutput>kFuncConvMsThisCall</computeroutput> - Calling convention for C++ members under Windows (produced by MSVC and all MSVC compatible compilers).</para></listitem><listitem><para><computeroutput>kFuncConvMsFastCall</computeroutput> - Fastest calling convention that can be used by MSVC compiler.</para></listitem><listitem><para><computeroutput>kFuncConv_BORNANDFASTCALL</computeroutput> - Borland fastcall convention.</para></listitem><listitem><para><computeroutput>kFuncConvGccFastCall</computeroutput> - GCC fastcall convention (2 register arguments).</para></listitem><listitem><para><computeroutput>kFuncConvGccRegParm1</computeroutput> - GCC regparm(1) convention.</para></listitem><listitem><para><computeroutput>kFuncConvGccRegParm2</computeroutput> - GCC regparm(2) convention.</para></listitem><listitem><para><computeroutput>kFuncConvGccRegParm3</computeroutput> - GCC regparm(3) convention.</para></listitem></itemizedlist>
</para><para>List of calling conventions for 64-bit x86 mode (x64):<itemizedlist>
<listitem><para><computeroutput>kFuncConvX64W</computeroutput> - Windows 64-bit calling convention (WIN64 ABI).</para></listitem><listitem><para><computeroutput>kFuncConvX64U</computeroutput> - Unix 64-bit calling convention (AMD64 ABI).</para></listitem></itemizedlist>
</para><para>There is also <computeroutput>kFuncConvHost</computeroutput> that is defined to fit best to your compiler.</para><para>These types are used together with <computeroutput>asmjit::Compiler::addFunc()</computeroutput> method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86func.h" line="58" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86func.h" bodystart="58" bodyend="336"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga9a688e930dadd3a2a82dd6999e8681ff" prot="public" static="no">
        <name>kFuncHint</name>
        <enumvalue id="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffab728a139b384786e1183e880eb722ceb" prot="public">
          <name>kFuncHintPushPop</name>
          <initializer> 16</initializer>
          <briefdescription>
<para>Use push/pop sequences instead of mov sequences in function prolog and epilog. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffa6edbcdb990dad842a5575e987a36dad0" prot="public">
          <name>kFuncHintEmms</name>
          <initializer> 17</initializer>
          <briefdescription>
<para>Add emms instruction to the function epilog. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffa5d4386a7e7b452a7273753d7af7f0e47" prot="public">
          <name>kFuncHintSFence</name>
          <initializer> 18</initializer>
          <briefdescription>
<para>Add sfence instruction to the function epilog. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffaef76692b9c047ec20dd93dfa26442d0d" prot="public">
          <name>kFuncHintLFence</name>
          <initializer> 19</initializer>
          <briefdescription>
<para>Add lfence instruction to the function epilog. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86 function hints. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86func.h" line="343" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86func.h" bodystart="343" bodyend="353"/>
      </memberdef>
      <memberdef kind="enum" id="group__asmjit__x86x64_1ga7b42aa5041e210749d119bbf3be8ec3e" prot="public" static="no">
        <name>kFuncFlags</name>
        <enumvalue id="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" prot="public">
          <name>kFuncFlagPushPop</name>
          <initializer> 0x00010000</initializer>
          <briefdescription>
<para>Whether to emit register load/save sequence using push/pop pairs. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea6e3366da1c4c93b998d9deeaf3f42c3e" prot="public">
          <name>kFuncFlagEnter</name>
          <initializer> 0x00020000</initializer>
          <briefdescription>
<para>Whether to emit &quot;enter&quot; instead of three instructions in case that the function is not naked or misaligned. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eadeccd860e44737b6746fc18c553b9683" prot="public">
          <name>kFuncFlagLeave</name>
          <initializer> 0x00040000</initializer>
          <briefdescription>
<para>Whether to emit &quot;leave&quot; instead of two instructions in case that the function is not naked or misaligned. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea1aadaf95fc36acabc2de1980da2e4072" prot="public">
          <name>kFuncFlagMoveArgs</name>
          <initializer> 0x00080000</initializer>
          <briefdescription>
<para>Whether it&apos;s required to move arguments to a new stack location, because of manual aligning. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea04a47eab8f496c62b46ee10b0db1b02c" prot="public">
          <name>kFuncFlagEmms</name>
          <initializer> 0x01000000</initializer>
          <briefdescription>
<para>Whether to emit EMMS instruction in epilog (auto-detected). </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea5a7da13edc4314da69d0c84c5a743c2b" prot="public">
          <name>kFuncFlagSFence</name>
          <initializer> 0x02000000</initializer>
          <briefdescription>
<para>Whether to emit SFence instruction in epilog (auto-detected). </para>          </briefdescription>
          <detaileddescription>
<para><simplesect kind="note"><para>kFuncFlagSFence and kFuncFlagLFence combination will result in emitting mfence. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eae2310ea543f281708f892f3b7db37952" prot="public">
          <name>kFuncFlagLFence</name>
          <initializer> 0x04000000</initializer>
          <briefdescription>
<para>Whether to emit LFence instruction in epilog (auto-detected). </para>          </briefdescription>
          <detaileddescription>
<para><simplesect kind="note"><para>kFuncFlagSFence and kFuncFlagLFence combination will result in emitting mfence. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>X86 function flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86func.h" line="360" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86func.h" bodystart="360" bodyend="390"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__asmjit__x86x64_1gac124a323c2da30ea8bdc3c3d00c773aa" prot="public" static="no">
        <type><ref refid="unionasmjit_1_1Vec64Data" kindref="compound">Vec64Data</ref></type>
        <definition>typedef Vec64Data asmjit::x86x64::MmData</definition>
        <argsstring></argsstring>
        <name>MmData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="54" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__asmjit__x86x64_1ga63f1678c1c46ba96ffaf0a39e67e1cf2" prot="public" static="no">
        <type><ref refid="unionasmjit_1_1Vec128Data" kindref="compound">Vec128Data</ref></type>
        <definition>typedef Vec128Data asmjit::x86x64::XmmData</definition>
        <argsstring></argsstring>
        <name>XmmData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="55" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__asmjit__x86x64_1gadf1201aac72505b072c020d3ac75006f" prot="public" static="no">
        <type><ref refid="unionasmjit_1_1Vec256Data" kindref="compound">Vec256Data</ref></type>
        <definition>typedef Vec256Data asmjit::x86x64::YmmData</definition>
        <argsstring></argsstring>
        <name>YmmData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="56" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__asmjit__x86x64_1gaf2c5a17550412731bb4dbce29777cf6d" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const char</type>
        <definition>ASMJIT_API const char asmjit::x86x64::_instName[]</definition>
        <argsstring>[]</argsstring>
        <name>_instName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="65"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga77b3d1beeae1acbb25a11327b5f2b890" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1InstInfo" kindref="compound">InstInfo</ref></type>
        <definition>ASMJIT_API const InstInfo asmjit::x86x64::_instInfo[]</definition>
        <argsstring>[]</argsstring>
        <name>_instInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="70"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga14bc5528d1256fd7f9d0b74fe2a872d4" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const uint32_t</type>
        <definition>ASMJIT_API const uint32_t asmjit::x86x64::_reverseCond[20]</definition>
        <argsstring>[20]</argsstring>
        <name>_reverseCond</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="75"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga6a791839d7a95baf6c4ac9c1b296863b" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const uint32_t</type>
        <definition>ASMJIT_API const uint32_t asmjit::x86x64::_condToCmovcc[20]</definition>
        <argsstring>[20]</argsstring>
        <name>_condToCmovcc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="80"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga097b60b9d444cab8e2a30ac9aca354ab" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const uint32_t</type>
        <definition>ASMJIT_API const uint32_t asmjit::x86x64::_condToJcc[20]</definition>
        <argsstring>[20]</argsstring>
        <name>_condToJcc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="85"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga368ad1e24fa00d0251651008953e946d" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const uint32_t</type>
        <definition>ASMJIT_API const uint32_t asmjit::x86x64::_condToSetcc[20]</definition>
        <argsstring>[20]</argsstring>
        <name>_condToSetcc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="90"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga0cb5c4dd8f6fce9baf818d086a52d7a1" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1VarInfo" kindref="compound">VarInfo</ref></type>
        <definition>ASMJIT_API const VarInfo asmjit::x86x64::_varInfo[]</definition>
        <argsstring>[]</argsstring>
        <name>_varInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="96"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga451bb5800e1af3088039377b9ef26a97" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::noGpReg</definition>
        <argsstring></argsstring>
        <name>noGpReg</name>
        <briefdescription>
<para>No register, can be used only within <computeroutput><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></computeroutput> operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3361"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga79b2845f7cab7fb453e202877e02d069" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::al</definition>
        <argsstring></argsstring>
        <name>al</name>
        <briefdescription>
<para>Gpb-lo register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3364"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga32fe646af6161cb0da35bfc3aa7b8530" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::cl</definition>
        <argsstring></argsstring>
        <name>cl</name>
        <briefdescription>
<para>Gpb-lo register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3366"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga7509e11652ffad6a27f0206926072c7e" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::dl</definition>
        <argsstring></argsstring>
        <name>dl</name>
        <briefdescription>
<para>Gpb-lo register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3368"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga818e09da4e7826d49a1ee12741884a79" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::bl</definition>
        <argsstring></argsstring>
        <name>bl</name>
        <briefdescription>
<para>Gpb-lo register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3370"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gad3d48dab9109c26546c94766a3b33825" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::ah</definition>
        <argsstring></argsstring>
        <name>ah</name>
        <briefdescription>
<para>Gpb-hi register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3372"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga76811396c86f71e9ecb43754dd2cbd87" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::ch</definition>
        <argsstring></argsstring>
        <name>ch</name>
        <briefdescription>
<para>Gpb-hi register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3374"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga42ba84c3fd14dc5685ee3a6e93d2e7dc" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::dh</definition>
        <argsstring></argsstring>
        <name>dh</name>
        <briefdescription>
<para>Gpb-hi register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3376"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gafa4385ccd43834db175216a7643a4b9c" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::bh</definition>
        <argsstring></argsstring>
        <name>bh</name>
        <briefdescription>
<para>Gpb-hi register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3378"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga9693c93b7022a0478eb3b9aa190b8509" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::ax</definition>
        <argsstring></argsstring>
        <name>ax</name>
        <briefdescription>
<para>Gpw register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3381"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga19c4550c3bf2643c92558c832933078d" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::cx</definition>
        <argsstring></argsstring>
        <name>cx</name>
        <briefdescription>
<para>Gpw register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3383"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gafdae06fe5bf6c7b89214c29095800ce4" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::dx</definition>
        <argsstring></argsstring>
        <name>dx</name>
        <briefdescription>
<para>Gpw register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3385"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga08389b37e059f2e24d3833717573cc06" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::bx</definition>
        <argsstring></argsstring>
        <name>bx</name>
        <briefdescription>
<para>Gpw register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3387"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga746716fbb6c456a5221c9cfcb1beadca" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::sp</definition>
        <argsstring></argsstring>
        <name>sp</name>
        <briefdescription>
<para>Gpw register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3389"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga4fee25c5536a29cdf375cf6a2d597d7c" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::bp</definition>
        <argsstring></argsstring>
        <name>bp</name>
        <briefdescription>
<para>Gpw register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3391"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gaa8b171d60de31743a13e44bd7aa353a0" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::si</definition>
        <argsstring></argsstring>
        <name>si</name>
        <briefdescription>
<para>Gpw register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3393"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gaff3cf1f8d62c4e5879e74ac35b4d01ad" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::di</definition>
        <argsstring></argsstring>
        <name>di</name>
        <briefdescription>
<para>Gpw register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3395"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga26df91f0fa40947bb620b176472bf3d3" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::eax</definition>
        <argsstring></argsstring>
        <name>eax</name>
        <briefdescription>
<para>Gpd register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3398"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gaf030da0053911445efff9d86a7d0e251" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::ecx</definition>
        <argsstring></argsstring>
        <name>ecx</name>
        <briefdescription>
<para>Gpd register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3400"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gacc5e7948fbb4596d3e8407a858cb1817" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::edx</definition>
        <argsstring></argsstring>
        <name>edx</name>
        <briefdescription>
<para>Gpd register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3402"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga4bbee13a30d58526860dcfd0fa212590" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::ebx</definition>
        <argsstring></argsstring>
        <name>ebx</name>
        <briefdescription>
<para>Gpd register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3404"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gafee3a114f6450196ac970f3cc964b19b" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::esp</definition>
        <argsstring></argsstring>
        <name>esp</name>
        <briefdescription>
<para>Gpd register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3406"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga55deb3ba95a959b5461bd4525501e92e" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::ebp</definition>
        <argsstring></argsstring>
        <name>ebp</name>
        <briefdescription>
<para>Gpd register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3408"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga1ad3750870b7e8657e9ad5be6b820a17" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::esi</definition>
        <argsstring></argsstring>
        <name>esi</name>
        <briefdescription>
<para>Gpd register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3410"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga64bf639da31c64be79d6ab1f67b933af" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>ASMJIT_API const GpReg asmjit::x86x64::edi</definition>
        <argsstring></argsstring>
        <name>edi</name>
        <briefdescription>
<para>Gpd register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3412"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga636706392adfdfb08fea891658ceb71e" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound">FpReg</ref></type>
        <definition>ASMJIT_API const FpReg asmjit::x86x64::fp0</definition>
        <argsstring></argsstring>
        <name>fp0</name>
        <briefdescription>
<para>Fp register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3415"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga1c8a7a001ce991bb870bb03ab6e64733" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound">FpReg</ref></type>
        <definition>ASMJIT_API const FpReg asmjit::x86x64::fp1</definition>
        <argsstring></argsstring>
        <name>fp1</name>
        <briefdescription>
<para>Fp register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3417"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gacc26e9c240618ce8d9b1410bebede006" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound">FpReg</ref></type>
        <definition>ASMJIT_API const FpReg asmjit::x86x64::fp2</definition>
        <argsstring></argsstring>
        <name>fp2</name>
        <briefdescription>
<para>Fp register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3419"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga42b68e83bad4149c183fd77c947f248e" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound">FpReg</ref></type>
        <definition>ASMJIT_API const FpReg asmjit::x86x64::fp3</definition>
        <argsstring></argsstring>
        <name>fp3</name>
        <briefdescription>
<para>Fp register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3421"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga91e262adb08e2d5130861d51d0bf9944" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound">FpReg</ref></type>
        <definition>ASMJIT_API const FpReg asmjit::x86x64::fp4</definition>
        <argsstring></argsstring>
        <name>fp4</name>
        <briefdescription>
<para>Fp register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3423"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga9ab926cd365079ac81a722b915d66804" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound">FpReg</ref></type>
        <definition>ASMJIT_API const FpReg asmjit::x86x64::fp5</definition>
        <argsstring></argsstring>
        <name>fp5</name>
        <briefdescription>
<para>Fp register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3425"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga63b510953875202775292060ac80b379" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound">FpReg</ref></type>
        <definition>ASMJIT_API const FpReg asmjit::x86x64::fp6</definition>
        <argsstring></argsstring>
        <name>fp6</name>
        <briefdescription>
<para>Fp register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3427"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gaade06831a25252457baeeb2cc80657c8" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound">FpReg</ref></type>
        <definition>ASMJIT_API const FpReg asmjit::x86x64::fp7</definition>
        <argsstring></argsstring>
        <name>fp7</name>
        <briefdescription>
<para>Fp register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3429"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gaac254ec0df446fd8611b935fbd6df205" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound">MmReg</ref></type>
        <definition>ASMJIT_API const MmReg asmjit::x86x64::mm0</definition>
        <argsstring></argsstring>
        <name>mm0</name>
        <briefdescription>
<para>Mm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3432"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga20b84200f7a430d7768669cb7f819ebf" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound">MmReg</ref></type>
        <definition>ASMJIT_API const MmReg asmjit::x86x64::mm1</definition>
        <argsstring></argsstring>
        <name>mm1</name>
        <briefdescription>
<para>Mm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3434"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga59effccc8deb087b01e2144aed15eb4d" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound">MmReg</ref></type>
        <definition>ASMJIT_API const MmReg asmjit::x86x64::mm2</definition>
        <argsstring></argsstring>
        <name>mm2</name>
        <briefdescription>
<para>Mm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3436"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga7ad4264b211a87e14f394a097f1b1f32" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound">MmReg</ref></type>
        <definition>ASMJIT_API const MmReg asmjit::x86x64::mm3</definition>
        <argsstring></argsstring>
        <name>mm3</name>
        <briefdescription>
<para>Mm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3438"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga9880e4d2897d436cf02ceca9295770dc" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound">MmReg</ref></type>
        <definition>ASMJIT_API const MmReg asmjit::x86x64::mm4</definition>
        <argsstring></argsstring>
        <name>mm4</name>
        <briefdescription>
<para>Mm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3440"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga8e9d51810456c1d18fcea4b3aa1a250b" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound">MmReg</ref></type>
        <definition>ASMJIT_API const MmReg asmjit::x86x64::mm5</definition>
        <argsstring></argsstring>
        <name>mm5</name>
        <briefdescription>
<para>Mm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3442"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gac3ca430b0f0c56ce4d6d3db28e487af4" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound">MmReg</ref></type>
        <definition>ASMJIT_API const MmReg asmjit::x86x64::mm6</definition>
        <argsstring></argsstring>
        <name>mm6</name>
        <briefdescription>
<para>Mm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3444"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gae8a7f89db6a4ec575a45ec59136cddc6" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound">MmReg</ref></type>
        <definition>ASMJIT_API const MmReg asmjit::x86x64::mm7</definition>
        <argsstring></argsstring>
        <name>mm7</name>
        <briefdescription>
<para>Mm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3446"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga8d4bab89ddc1e943c64a5feacc840191" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref></type>
        <definition>ASMJIT_API const XmmReg asmjit::x86x64::xmm0</definition>
        <argsstring></argsstring>
        <name>xmm0</name>
        <briefdescription>
<para>Xmm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3449"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga02e9e298a28703095c817c4b6e5ae1b7" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref></type>
        <definition>ASMJIT_API const XmmReg asmjit::x86x64::xmm1</definition>
        <argsstring></argsstring>
        <name>xmm1</name>
        <briefdescription>
<para>Xmm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3451"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gac3df298cc30b94ec3bb225338113ed18" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref></type>
        <definition>ASMJIT_API const XmmReg asmjit::x86x64::xmm2</definition>
        <argsstring></argsstring>
        <name>xmm2</name>
        <briefdescription>
<para>Xmm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3453"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gacdb159c53b05eb9d7e9009cf402993eb" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref></type>
        <definition>ASMJIT_API const XmmReg asmjit::x86x64::xmm3</definition>
        <argsstring></argsstring>
        <name>xmm3</name>
        <briefdescription>
<para>Xmm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3455"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga44380cc612351ebdab26c5caa4d39167" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref></type>
        <definition>ASMJIT_API const XmmReg asmjit::x86x64::xmm4</definition>
        <argsstring></argsstring>
        <name>xmm4</name>
        <briefdescription>
<para>Xmm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3457"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga63a5fdf0e1484858170f6eb488cf29a1" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref></type>
        <definition>ASMJIT_API const XmmReg asmjit::x86x64::xmm5</definition>
        <argsstring></argsstring>
        <name>xmm5</name>
        <briefdescription>
<para>Xmm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3459"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gad382ad5c09e07de384ce90f93efb047e" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref></type>
        <definition>ASMJIT_API const XmmReg asmjit::x86x64::xmm6</definition>
        <argsstring></argsstring>
        <name>xmm6</name>
        <briefdescription>
<para>Xmm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3461"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga3315ef0134a6c7620c0c0e911136ce0f" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref></type>
        <definition>ASMJIT_API const XmmReg asmjit::x86x64::xmm7</definition>
        <argsstring></argsstring>
        <name>xmm7</name>
        <briefdescription>
<para>Xmm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3463"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga2d9dc9c5997d8a73da93c694de3aa2af" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref></type>
        <definition>ASMJIT_API const YmmReg asmjit::x86x64::ymm0</definition>
        <argsstring></argsstring>
        <name>ymm0</name>
        <briefdescription>
<para>Ymm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3466"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga466ee57781a100098fd32a9c6dafee8c" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref></type>
        <definition>ASMJIT_API const YmmReg asmjit::x86x64::ymm1</definition>
        <argsstring></argsstring>
        <name>ymm1</name>
        <briefdescription>
<para>Ymm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3468"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gaa91f6c9575f2025f4c7dde4c346d3bce" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref></type>
        <definition>ASMJIT_API const YmmReg asmjit::x86x64::ymm2</definition>
        <argsstring></argsstring>
        <name>ymm2</name>
        <briefdescription>
<para>Ymm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3470"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gaa3da39dd7490b7cf6d43211eaafbd156" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref></type>
        <definition>ASMJIT_API const YmmReg asmjit::x86x64::ymm3</definition>
        <argsstring></argsstring>
        <name>ymm3</name>
        <briefdescription>
<para>Ymm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3472"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga73f61a7ea57d08b24dad3c02858d8fcf" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref></type>
        <definition>ASMJIT_API const YmmReg asmjit::x86x64::ymm4</definition>
        <argsstring></argsstring>
        <name>ymm4</name>
        <briefdescription>
<para>Ymm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3474"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga1ac3f0e5d47e29c6fd3138d6687e07ab" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref></type>
        <definition>ASMJIT_API const YmmReg asmjit::x86x64::ymm5</definition>
        <argsstring></argsstring>
        <name>ymm5</name>
        <briefdescription>
<para>Ymm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3476"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gafe0b6a22c74cd6cb774990b72abbe85b" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref></type>
        <definition>ASMJIT_API const YmmReg asmjit::x86x64::ymm6</definition>
        <argsstring></argsstring>
        <name>ymm6</name>
        <briefdescription>
<para>Ymm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3478"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga1d0f076a355b9deac2b085f7d11b87d5" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref></type>
        <definition>ASMJIT_API const YmmReg asmjit::x86x64::ymm7</definition>
        <argsstring></argsstring>
        <name>ymm7</name>
        <briefdescription>
<para>Ymm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3480"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga8add59b5136689e0c5e92cddbb926c76" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound">SegReg</ref></type>
        <definition>ASMJIT_API const SegReg asmjit::x86x64::cs</definition>
        <argsstring></argsstring>
        <name>cs</name>
        <briefdescription>
<para>Cs segment register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3483"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gae4d67e6b8e3a91a762ca9e402c7e229b" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound">SegReg</ref></type>
        <definition>ASMJIT_API const SegReg asmjit::x86x64::ss</definition>
        <argsstring></argsstring>
        <name>ss</name>
        <briefdescription>
<para>Ss segment register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3485"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gaa831b29fd36b6c29787e6f2a915f5f60" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound">SegReg</ref></type>
        <definition>ASMJIT_API const SegReg asmjit::x86x64::ds</definition>
        <argsstring></argsstring>
        <name>ds</name>
        <briefdescription>
<para>Ds segment register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3487"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga639d45b2268ca0940dc62e198bbfd3c1" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound">SegReg</ref></type>
        <definition>ASMJIT_API const SegReg asmjit::x86x64::es</definition>
        <argsstring></argsstring>
        <name>es</name>
        <briefdescription>
<para>Es segment register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3489"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1ga5c4bc4a82af43c7784d11d966c89532f" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound">SegReg</ref></type>
        <definition>ASMJIT_API const SegReg asmjit::x86x64::fs</definition>
        <argsstring></argsstring>
        <name>fs</name>
        <briefdescription>
<para>Fs segment register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3491"/>
      </memberdef>
      <memberdef kind="variable" id="group__asmjit__x86x64_1gaf38f11d2b5ecdf468aed83ce94491c04" prot="public" static="no" mutable="no">
        <type>ASMJIT_API const <ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound">SegReg</ref></type>
        <definition>ASMJIT_API const SegReg asmjit::x86x64::gs</definition>
        <argsstring></argsstring>
        <name>gs</name>
        <briefdescription>
<para>Gs segment register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3493"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__asmjit__x86x64_1gab0aa1dd0f7a9b54a4a5d6873a84e0410" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t asmjit::x86x64::mm_shuffle</definition>
        <argsstring>(uint8_t z, uint8_t y, uint8_t x, uint8_t w)</argsstring>
        <name>mm_shuffle</name>
        <param>
          <type>uint8_t</type>
          <declname>z</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Create Shuffle Constant for MMX/SSE shuffle instrutions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>First component position, number at interval [0, 3] inclusive. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>Second component position, number at interval [0, 3] inclusive. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Third component position, number at interval [0, 3] inclusive. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Fourth component position, number at interval [0, 3] inclusive.</para></parameterdescription>
</parameteritem>
</parameterlist>
Shuffle constants can be used to make immediate value for these intrinsics:<itemizedlist>
<listitem><para>Assembler::pshufw()</para></listitem><listitem><para>Assembler::pshufd()</para></listitem><listitem><para>Assembler::pshufhw()</para></listitem><listitem><para>Assembler::pshuflw()</para></listitem><listitem><para>Assembler::shufps() </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3313" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3312" bodyend="3313"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gad6fdc62d00a3ab93678ee01c08ec2d9e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t asmjit::x86x64::reverseCond</definition>
        <argsstring>(uint32_t cond)</argsstring>
        <name>reverseCond</name>
        <param>
          <type>uint32_t</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Corresponds to transposing the operands of a comparison. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3320" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3320" bodyend="3323"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gab80cf469ce90ebf471ddc083b4a2cb4d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t asmjit::x86x64::negateCond</definition>
        <argsstring>(uint32_t cond)</argsstring>
        <name>negateCond</name>
        <param>
          <type>uint32_t</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Get the equivalent of negated condition code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3326" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3326" bodyend="3329"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaa9be0c08ba25861309d0957d134c8c26" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t asmjit::x86x64::condToCmovcc</definition>
        <argsstring>(uint32_t cond)</argsstring>
        <name>condToCmovcc</name>
        <param>
          <type>uint32_t</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Translate condition code <emphasis>cc</emphasis> to cmovcc instruction code. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput>kInstCode</computeroutput>, <computeroutput>_kInstCmovcc</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3337" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3337" bodyend="3340"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga6c8d2f90a1fb96f9a6002c0b70458e5e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t asmjit::x86x64::condToJcc</definition>
        <argsstring>(uint32_t cond)</argsstring>
        <name>condToJcc</name>
        <param>
          <type>uint32_t</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Translate condition code <emphasis>cc</emphasis> to jcc instruction code. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput>kInstCode</computeroutput>, <computeroutput>_kInstJcc</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3344" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3344" bodyend="3347"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga7360265365dd7ff27f275d5c50e3e4f6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t asmjit::x86x64::condToSetcc</definition>
        <argsstring>(uint32_t cond)</argsstring>
        <name>condToSetcc</name>
        <param>
          <type>uint32_t</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
<para>Translate condition code <emphasis>cc</emphasis> to setcc instruction code. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><computeroutput>kInstCode</computeroutput>, <computeroutput>_kInstSetcc</computeroutput>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3351" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3351" bodyend="3354"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga89be8bc827d7615648e7074c9b0a11b3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>static GpReg asmjit::x86x64::gpb_lo</definition>
        <argsstring>(uint32_t index)</argsstring>
        <name>gpb_lo</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get Gpb-lo register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3496" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3496" bodyend="3496"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga0005f63fd37e6867078d64f361c6c49d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>static GpReg asmjit::x86x64::gpb_hi</definition>
        <argsstring>(uint32_t index)</argsstring>
        <name>gpb_hi</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get Gpb-hi register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3498" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3498" bodyend="3498"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga84d074ec698bde54e1b258a5afe0ab21" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>static GpReg asmjit::x86x64::gpw</definition>
        <argsstring>(uint32_t index)</argsstring>
        <name>gpw</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get Gpw register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3500" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3500" bodyend="3500"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga7edc123ef6a6bc00b64fe45d9a295c1c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref></type>
        <definition>static GpReg asmjit::x86x64::gpd</definition>
        <argsstring>(uint32_t index)</argsstring>
        <name>gpd</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get Gpd register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3502" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3502" bodyend="3502"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga966625c8483c9f4de98c1697840ab166" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound">FpReg</ref></type>
        <definition>static FpReg asmjit::x86x64::fp</definition>
        <argsstring>(uint32_t index)</argsstring>
        <name>fp</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get Fp register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3504" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3504" bodyend="3504"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga9a8333264f20709b9757ea2fe6d98062" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound">MmReg</ref></type>
        <definition>static MmReg asmjit::x86x64::mm</definition>
        <argsstring>(uint32_t index)</argsstring>
        <name>mm</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get Mm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3506" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3506" bodyend="3506"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref></type>
        <definition>static XmmReg asmjit::x86x64::xmm</definition>
        <argsstring>(uint32_t index)</argsstring>
        <name>xmm</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get Xmm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3508" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3508" bodyend="3508"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga670a05a7edf855537e6d4d30c4ccb135" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref></type>
        <definition>static YmmReg asmjit::x86x64::ymm</definition>
        <argsstring>(uint32_t index)</argsstring>
        <name>ymm</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get Xmm register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3510" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3510" bodyend="3510"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::ptr</definition>
        <argsstring>(const GpReg &amp;base, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3517" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3517" bodyend="3517"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr</definition>
        <argsstring>(const GpReg &amp;base, int32_t disp=0)</argsstring>
        <name>byte_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3519" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3519" bodyend="3519"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr</definition>
        <argsstring>(const GpReg &amp;base, int32_t disp=0)</argsstring>
        <name>word_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3521" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3521" bodyend="3521"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr</definition>
        <argsstring>(const GpReg &amp;base, int32_t disp=0)</argsstring>
        <name>dword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3523" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3523" bodyend="3523"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr</definition>
        <argsstring>(const GpReg &amp;base, int32_t disp=0)</argsstring>
        <name>qword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3525" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3525" bodyend="3525"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr</definition>
        <argsstring>(const GpReg &amp;base, int32_t disp=0)</argsstring>
        <name>tword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3527" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3527" bodyend="3527"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr</definition>
        <argsstring>(const GpReg &amp;base, int32_t disp=0)</argsstring>
        <name>oword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3529" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3529" bodyend="3529"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr</definition>
        <argsstring>(const GpReg &amp;base, int32_t disp=0)</argsstring>
        <name>yword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3531" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3531" bodyend="3531"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaa1f7204b8b9a2b5a2714c620bf5bf2c2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::ptr</definition>
        <argsstring>(const GpVar &amp;base, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3534" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3534" bodyend="3534"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga4172638b7aa29fdaff0267f28741322f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr</definition>
        <argsstring>(const GpVar &amp;base, int32_t disp=0)</argsstring>
        <name>byte_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3536" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3536" bodyend="3536"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga4fc2295123825dff48a8cd034be81ba4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr</definition>
        <argsstring>(const GpVar &amp;base, int32_t disp=0)</argsstring>
        <name>word_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3538" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3538" bodyend="3538"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga09fc6ab585f7e34335437525f03e330d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr</definition>
        <argsstring>(const GpVar &amp;base, int32_t disp=0)</argsstring>
        <name>dword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3540" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3540" bodyend="3540"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga9999c770898c5cf09f0ab965c55c420b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr</definition>
        <argsstring>(const GpVar &amp;base, int32_t disp=0)</argsstring>
        <name>qword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3542" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3542" bodyend="3542"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaef90056512691315aac479244d4cf469" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr</definition>
        <argsstring>(const GpVar &amp;base, int32_t disp=0)</argsstring>
        <name>tword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3544" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3544" bodyend="3544"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga93a4eec7ab3afe8297abc9063e02a578" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr</definition>
        <argsstring>(const GpVar &amp;base, int32_t disp=0)</argsstring>
        <name>oword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3546" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3546" bodyend="3546"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga57777272861c23eea9575656a3a768cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr</definition>
        <argsstring>(const GpVar &amp;base, int32_t disp=0)</argsstring>
        <name>yword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3548" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3548" bodyend="3548"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gabfc2a2cbd5b7bd0eb9e09deac8ca3a10" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::ptr</definition>
        <argsstring>(const GpReg &amp;base, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3555" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3555" bodyend="3555"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga9557dea7a27336021acde4d2698e03c9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr</definition>
        <argsstring>(const GpReg &amp;base, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>byte_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3557" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3557" bodyend="3557"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaba11ecf506e1d03f66d64cdae8360b72" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr</definition>
        <argsstring>(const GpReg &amp;base, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>word_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3559" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3559" bodyend="3559"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaf5b42aef13ab083036c2e2c331d85c98" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>dword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3561" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3561" bodyend="3561"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga9b7c1c7088d3b474ee4e1026c447fe60" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>qword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3563" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3563" bodyend="3563"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga2bf778c73acd56b5c4f2db6e18e29879" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>tword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3565" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3565" bodyend="3565"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga789536cde0d43490afae28caaec79ae9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>oword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3567" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3567" bodyend="3567"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaaeeeeb38ba9aa34b2828bbdc5680929f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>yword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3569" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3569" bodyend="3569"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaa5d03fab20086abcf6ee19d0fe734721" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::ptr</definition>
        <argsstring>(const GpVar &amp;base, const GpVar &amp;index, uint32_t shift=0, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3572" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3572" bodyend="3572"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gac587ce4d21bf31f524fd714d6cf36cd8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr</definition>
        <argsstring>(const GpVar &amp;base, const GpVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>byte_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3574" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3574" bodyend="3574"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga7b150cbf4315ecbfb752319819294464" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr</definition>
        <argsstring>(const GpVar &amp;base, const GpVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>word_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3576" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3576" bodyend="3576"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga6899f28caad8ecabd382aba730a6d9e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const GpVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>dword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3578" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3578" bodyend="3578"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga5c76eb0abbef7127b9e3f09f0b45e0f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const GpVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>qword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3580" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3580" bodyend="3580"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga5f594959ef33e1962f9cc6816928d4ae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const GpVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>tword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3582" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3582" bodyend="3582"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaf0e439b105f3407a4b2ef6625cc2aef0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const GpVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>oword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3584" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3584" bodyend="3584"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaedce2b16517a68ae873934f26a4f4ecc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const GpVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>yword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3586" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3586" bodyend="3586"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaa222c4cc75b12e20c13759c5c8b40eb5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::ptr</definition>
        <argsstring>(const GpReg &amp;base, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3593" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3593" bodyend="3593"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga9bc8a021e3d44986b4a95422d9d2c0b3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr</definition>
        <argsstring>(const GpReg &amp;base, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>byte_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3595" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3595" bodyend="3595"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga16e72ef68f4abf845c98337e6586b314" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr</definition>
        <argsstring>(const GpReg &amp;base, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>word_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3597" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3597" bodyend="3597"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gabefa83e46f876817799bd5c72a69a6bb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>dword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3599" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3599" bodyend="3599"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gab60b69b8ad16b25d76f826eb58e56397" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>qword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3601" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3601" bodyend="3601"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga7372cb3a486ac35555bc1335b16252dd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>tword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3603" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3603" bodyend="3603"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga5d7753981a9c032bd1bf04116e2519ec" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>oword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3605" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3605" bodyend="3605"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga7a442bd56488de1f7f1c11faa00afa4a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>yword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3607" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3607" bodyend="3607"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga2e3757b4217b010e115f22560b2a9d5e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::ptr</definition>
        <argsstring>(const GpReg &amp;base, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3610" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3610" bodyend="3610"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8478ae439228387e843cd61b3bd96602" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr</definition>
        <argsstring>(const GpReg &amp;base, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>byte_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3612" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3612" bodyend="3612"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga97f1f154203fb0240934c791e06095a9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr</definition>
        <argsstring>(const GpReg &amp;base, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>word_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3614" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3614" bodyend="3614"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8a02616bef42eb757aa7468503a43332" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>dword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3616" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3616" bodyend="3616"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gafad577af79a63570cd0531ec0d547313" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>qword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3618" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3618" bodyend="3618"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga63b3d7f897b643455c644772db3731f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>tword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3620" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3620" bodyend="3620"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga6afbda4ec2382b6042f361559a87b9c9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>oword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3622" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3622" bodyend="3622"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gab9319b65e88ee5774095f770e5e3865f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr</definition>
        <argsstring>(const GpReg &amp;base, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>yword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3624" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3624" bodyend="3624"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga386633dbc0ef49af456c591def83f446" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::ptr</definition>
        <argsstring>(const GpVar &amp;base, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3627" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3627" bodyend="3627"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga428f2dbf341f931e6e9879f95197f99b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr</definition>
        <argsstring>(const GpVar &amp;base, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>byte_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3629" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3629" bodyend="3629"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga67dbe6b80e73d0d359962ad6b882f492" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr</definition>
        <argsstring>(const GpVar &amp;base, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>word_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3631" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3631" bodyend="3631"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gac9508cf3367f590e724698fc031a7924" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>dword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3633" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3633" bodyend="3633"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga7fd9e069f2f70e94220ccd0f62093b9a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>qword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3635" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3635" bodyend="3635"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gafe5d810a42fdfc42e1a8d16625d945d9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>tword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3637" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3637" bodyend="3637"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga890f396997638ff3dfa262fda924d55c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>oword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3639" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3639" bodyend="3639"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gafa8a9875546aceb920c723d67ca63356" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>yword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3641" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3641" bodyend="3641"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga9b020312782d0d9729cd43765810d673" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::ptr</definition>
        <argsstring>(const GpVar &amp;base, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3644" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3644" bodyend="3644"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8240f4a6de6173978e31f661daf5ce54" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr</definition>
        <argsstring>(const GpVar &amp;base, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>byte_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3646" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3646" bodyend="3646"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga06ac23a98a546fdbaca4eb5f63f3b78c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr</definition>
        <argsstring>(const GpVar &amp;base, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>word_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3648" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3648" bodyend="3648"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gad99a28ff5659ee465af309f533e05ca1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>dword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3650" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3650" bodyend="3650"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gab930bbf538e7bc2ca616c4f97f77c6b3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>qword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3652" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3652" bodyend="3652"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8672652bad0c5096b76ddfaa565b3b48" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>tword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3654" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3654" bodyend="3654"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gada1085e316a3c5a494dc9d6552a305aa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>oword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3656" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3656" bodyend="3656"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gac1cb2a72081a589fbcc9a67d8bf5b60f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr</definition>
        <argsstring>(const GpVar &amp;base, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>yword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3658" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3658" bodyend="3658"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gac1dc62eebf2af92367b9fea74113aedc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::ptr</definition>
        <argsstring>(const Label &amp;label, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3665" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3665" bodyend="3665"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gad518e185271c7fd2276ec29b3d21b37e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr</definition>
        <argsstring>(const Label &amp;label, int32_t disp=0)</argsstring>
        <name>byte_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3667" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3667" bodyend="3667"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaf968d3cf34d8de62d1e9baa326448205" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr</definition>
        <argsstring>(const Label &amp;label, int32_t disp=0)</argsstring>
        <name>word_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3669" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3669" bodyend="3669"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga74f3a2d0a3ab13d8b4da39bade6f5d2c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr</definition>
        <argsstring>(const Label &amp;label, int32_t disp=0)</argsstring>
        <name>dword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3671" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3671" bodyend="3671"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga51c098ca6a96426e15f68de3b6da0e53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr</definition>
        <argsstring>(const Label &amp;label, int32_t disp=0)</argsstring>
        <name>qword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3673" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3673" bodyend="3673"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gae8537530a3e55089a87c4167f47793cc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr</definition>
        <argsstring>(const Label &amp;label, int32_t disp=0)</argsstring>
        <name>tword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3675" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3675" bodyend="3675"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga67ef7b8f357e9c055f943f500727f170" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr</definition>
        <argsstring>(const Label &amp;label, int32_t disp=0)</argsstring>
        <name>oword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3677" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3677" bodyend="3677"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga37c1f3f6eae4bfb5a1e9a20ccdd50d20" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr</definition>
        <argsstring>(const Label &amp;label, int32_t disp=0)</argsstring>
        <name>yword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3679" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3679" bodyend="3679"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga6e144cc1bdb8303fa27dc9859f18a1f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::ptr</definition>
        <argsstring>(const Label &amp;label, const GpReg &amp;index, uint32_t shift, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3686" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3686" bodyend="3686"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gafbb2c771ea68d0e8735e19089948041e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr</definition>
        <argsstring>(const Label &amp;label, const GpReg &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>byte_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3688" bodyend="3688"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga0cc7a145a71e494b56c7addd65586005" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr</definition>
        <argsstring>(const Label &amp;label, const GpReg &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>word_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3690" bodyend="3690"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga290db970010da64419ffd92d94beaf22" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr</definition>
        <argsstring>(const Label &amp;label, const GpReg &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>dword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3692" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3692" bodyend="3692"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga821f4fd96db365346c7e6d1b75392073" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr</definition>
        <argsstring>(const Label &amp;label, const GpReg &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>qword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3694" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3694" bodyend="3694"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gadf3fe73c87249404e342250e6c289acc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr</definition>
        <argsstring>(const Label &amp;label, const GpReg &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>tword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3696" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3696" bodyend="3696"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaa9591cd916bf85cb60a9ddfca2f45e6e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr</definition>
        <argsstring>(const Label &amp;label, const GpReg &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>oword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3698" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3698" bodyend="3698"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaa8ba2c8bb39a3a2101ebfe8f75a4b85c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr</definition>
        <argsstring>(const Label &amp;label, const GpReg &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>yword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3700" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3700" bodyend="3700"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga0603e97df39168d87d717fca6c58f652" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::ptr</definition>
        <argsstring>(const Label &amp;label, const GpVar &amp;index, uint32_t shift, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3703" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3703" bodyend="3703"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gab52f66e3d5d9a8d48de60c1a25602dc3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr</definition>
        <argsstring>(const Label &amp;label, const GpVar &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>byte_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3705" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3705" bodyend="3705"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gac6e5d87657505af02b8e3b8b0d481d6d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr</definition>
        <argsstring>(const Label &amp;label, const GpVar &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>word_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3707" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3707" bodyend="3707"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga4cba40cba9109d1e0312c50b3669f953" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr</definition>
        <argsstring>(const Label &amp;label, const GpVar &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>dword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3709" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3709" bodyend="3709"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga19361e54bfef74cbae2dae9c9e803d28" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr</definition>
        <argsstring>(const Label &amp;label, const GpVar &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>qword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3711" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3711" bodyend="3711"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gabf6f25517c129a32b4aeae89bbfca997" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr</definition>
        <argsstring>(const Label &amp;label, const GpVar &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>tword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3713" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3713" bodyend="3713"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gad950a65cb42a9e71db528ca58f134921" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr</definition>
        <argsstring>(const Label &amp;label, const GpVar &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>oword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3715" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3715" bodyend="3715"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gab2db352a6f9ad4761a730d6e56a712d7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr</definition>
        <argsstring>(const Label &amp;label, const GpVar &amp;index, uint32_t shift, int32_t disp=0)</argsstring>
        <name>yword_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3717" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3717" bodyend="3717"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>ASMJIT_API Mem asmjit::x86x64::ptr_abs</definition>
        <argsstring>(Ptr pAbs, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3724"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga52dd2a5a28f7d2b7dc1bb4df9e0f3d3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr_abs</definition>
        <argsstring>(Ptr pAbs, int32_t disp=0)</argsstring>
        <name>byte_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3727" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3727" bodyend="3727"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gae8fa7853e946d765f1a8e755beee4650" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr_abs</definition>
        <argsstring>(Ptr pAbs, int32_t disp=0)</argsstring>
        <name>word_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3729" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3729" bodyend="3729"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8f64b84b53ddda1ac676b76337d9276b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, int32_t disp=0)</argsstring>
        <name>dword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3731" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3731" bodyend="3731"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8e71ae07abb56874ea0f0f3c0374ae8d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, int32_t disp=0)</argsstring>
        <name>qword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3733" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3733" bodyend="3733"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga54c6da2797b58ce91f4ff4512539f69b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, int32_t disp=0)</argsstring>
        <name>tword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand (used for 80-bit floating points). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3735" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3735" bodyend="3735"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga020aad5b46970022452ece30b2aa55b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, int32_t disp=0)</argsstring>
        <name>oword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3737" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3737" bodyend="3737"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gab010c79eb2ad4495a9e48ecba33eb4e1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, int32_t disp=0)</argsstring>
        <name>yword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3739" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3739" bodyend="3739"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaa114d950ea17b5fed49722b1bbfc00aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>ASMJIT_API Mem asmjit::x86x64::ptr_abs</definition>
        <argsstring>(Ptr pAbs, const X86Reg &amp;index, uint32_t shift=0, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound">X86Reg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3746"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8a89c28d1442fbbac828ca3a716f0ba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>ASMJIT_API Mem asmjit::x86x64::ptr_abs</definition>
        <argsstring>(Ptr pAbs, const X86Var &amp;index, uint32_t shift=0, int32_t disp=0, uint32_t size=0)</argsstring>
        <name>ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1X86Var" kindref="compound">X86Var</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a custom pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3748"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga766b934f3a268f12904a7c897cbb1b03" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>byte_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a Byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3751" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3751" bodyend="3751"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gabe797fc454f21df82735de31d30c168f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>word_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3753" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3753" bodyend="3753"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gac444fc263863e1e8e1daa14b4bd5480a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>dword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3755" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3755" bodyend="3755"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga9594e0ed093bbc5ec026e215a780b37e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>qword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3757" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3757" bodyend="3757"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga5e758a6db5c1e5c81bdfcfe4f9029c27" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>tword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3759" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3759" bodyend="3759"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga4ebf7d7be09c372ae6990411b6ce2262" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>oword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3761" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3761" bodyend="3761"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gac427f9babeb10c9c2096b6e886fd9ed7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const GpReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>yword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound">GpReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3763" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3763" bodyend="3763"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga0678bcc14f56f1827da72a36041858e6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>byte_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3766" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3766" bodyend="3766"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gad4296f01a2ca565449b2e65df74cd1bb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>word_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3768" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3768" bodyend="3768"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8ede25fd7b7e129c6e4bf1120434b616" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>dword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3770" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3770" bodyend="3770"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga7aeefdce087761a3e2d0f1a3ea88831f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>qword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3772" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3772" bodyend="3772"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga997e6ee71d0c3969d77fd5e440f8a111" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>tword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3774" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3774" bodyend="3774"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gab1cdd16af55a0c98b19e1e81d2c8d2a2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>oword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3776" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3776" bodyend="3776"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gab6243705e2080de81daffbbddebbc6ee" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>yword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound">XmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3778" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3778" bodyend="3778"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gae1a72e070f4f292fb373806589521b37" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>byte_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3781" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3781" bodyend="3781"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga7e07d8a4479067a6ed2c9055515105f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>word_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3783" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3783" bodyend="3783"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gac88e03a5157f14f1a8690059066465f7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>dword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3785" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3785" bodyend="3785"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8d413257e58023bd809462a229cf3dca" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>qword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3787" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3787" bodyend="3787"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8e4990eea78c213a7e1e8224c8ec1834" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>tword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3789" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3789" bodyend="3789"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga675f1048e4132d3045b18bf84492a14e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>oword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3791" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3791" bodyend="3791"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga6e3694cfd83cc13ec978cb8d541f58b0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmReg &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>yword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound">YmmReg</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3793" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3793" bodyend="3793"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gab57d4492c986ec14980ba3ea6eaf1c50" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>byte_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3796" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3796" bodyend="3796"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga1e7d6bf1e8419b7135bf0fe6dd4223ae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>word_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3798" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3798" bodyend="3798"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gac6a2e3e59e3371819367f90068284642" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>dword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3800" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3800" bodyend="3800"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga041f6a70e727c4dc6fba16c398c7cbcd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>qword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3802" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3802" bodyend="3802"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga0232abf0654d23b1df9ade0261c0730e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>tword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3804" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3804" bodyend="3804"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga8a17c1eb1833da5920322132fd634509" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>oword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3806" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3806" bodyend="3806"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga0856a51ff0b8a993ba023b5ee5623b17" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const XmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>yword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3808" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3808" bodyend="3808"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaf044beee922b2cac9e7e7f76260a6992" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::byte_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>byte_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a byte pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3811" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3811" bodyend="3811"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga7dfecad16b8f19d572e8c5b711345bf4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::word_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>word_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a word pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3813" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3813" bodyend="3813"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gaf2873191b45fc3bff1b5615e4d8d0426" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::dword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>dword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a dword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3815" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3815" bodyend="3815"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga10f40ece260007fbc65dcf01383cb020" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::qword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>qword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a qword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3817" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3817" bodyend="3817"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga5dd886789253ab1ca7f734a9880ffe63" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::tword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>tword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a tword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3819" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3819" bodyend="3819"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga34a6f76e6a5ab6125bd7a60e041f6290" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::oword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>oword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a oword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3821" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3821" bodyend="3821"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gacb099ffecf263893eed76f0e119a1be1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>static Mem asmjit::x86x64::yword_ptr_abs</definition>
        <argsstring>(Ptr pAbs, const YmmVar &amp;index, uint32_t shift=0, int32_t disp=0)</argsstring>
        <name>yword_ptr_abs</name>
        <param>
          <type><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member">Ptr</ref></type>
          <declname>pAbs</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref> &amp;</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>shift</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>disp</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create a yword pointer operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3823" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3823" bodyend="3823"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga70627fb97e48c4f1e24872d9e1587abd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool asmjit::x86x64::x86IsGpbRegOp</definition>
        <argsstring>(const Operand *op)</argsstring>
        <name>x86IsGpbRegOp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3829" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3829" bodyend="3832"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1gabc3ed2fe974927c54223db81f1c30493" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t asmjit::x86x64::x86VarTypeToClass</definition>
        <argsstring>(uint32_t vType)</argsstring>
        <name>x86VarTypeToClass</name>
        <param>
          <type>uint32_t</type>
          <declname>vType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="3834" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="3834" bodyend="3840"/>
      </memberdef>
      <memberdef kind="function" id="group__asmjit__x86x64_1ga1c0f1f66c24d30d357b8a11da4201922" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t asmjit::x86x64::x86GetArchFromCConv</definition>
        <argsstring>(uint32_t conv)</argsstring>
        <name>x86GetArchFromCConv</name>
        <param>
          <type>uint32_t</type>
          <declname>conv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86func.h" line="396" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86func.h" bodystart="396" bodyend="398"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="19"/>
  </compounddef>
</doxygen>
