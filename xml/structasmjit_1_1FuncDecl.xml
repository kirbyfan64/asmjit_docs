<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="structasmjit_1_1FuncDecl" kind="struct" prot="public">
    <compoundname>asmjit::FuncDecl</compoundname>
    <derivedcompoundref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl" prot="public" virt="non-virtual">asmjit::x86x64::X86X64FuncDecl</derivedcompoundref>
    <includes local="no">func.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structasmjit_1_1FuncDecl_1a5782543f71c49198a0a066b74f61f194" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t asmjit::FuncDecl::_convention</definition>
        <argsstring></argsstring>
        <name>_convention</name>
        <briefdescription>
<para>Calling convention. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="435" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structasmjit_1_1FuncDecl_1af2d18e0a1749d64553d1d8b22deed836" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t asmjit::FuncDecl::_calleePopsStack</definition>
        <argsstring></argsstring>
        <name>_calleePopsStack</name>
        <bitfield> 1</bitfield>
        <briefdescription>
<para>Whether a callee pops stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="437" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structasmjit_1_1FuncDecl_1a80bd04b9c80f76e8e1867b0759102a31" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t asmjit::FuncDecl::_direction</definition>
        <argsstring></argsstring>
        <name>_direction</name>
        <bitfield> 1</bitfield>
        <briefdescription>
<para>Direction for arguments passed on the stack, see <computeroutput>kFuncDir</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="439" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="439" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structasmjit_1_1FuncDecl_1a7fc1348c47876dd81f4cadbf8eaf1e14" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t asmjit::FuncDecl::_reserved0</definition>
        <argsstring></argsstring>
        <name>_reserved0</name>
        <bitfield> 6</bitfield>
        <briefdescription>
<para>Reserved #0 (alignment). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="441" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structasmjit_1_1FuncDecl_1ad4eb51ba76eb1b55baeb4e5e26c5fb4c" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t asmjit::FuncDecl::_argCount</definition>
        <argsstring></argsstring>
        <name>_argCount</name>
        <briefdescription>
<para>Count of arguments (in <computeroutput>_argList</computeroutput>). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="444" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structasmjit_1_1FuncDecl_1a8e068d552d8c03ee4d12ac8cec580725" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t asmjit::FuncDecl::_retCount</definition>
        <argsstring></argsstring>
        <name>_retCount</name>
        <briefdescription>
<para>Count of return value(s). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="446" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structasmjit_1_1FuncDecl_1abef4b2387f8b5a671ce2398f45ad9a86" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t asmjit::FuncDecl::_argStackSize</definition>
        <argsstring></argsstring>
        <name>_argStackSize</name>
        <briefdescription>
<para>Count of bytes consumed by arguments on the stack (aligned). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="449" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structasmjit_1_1FuncDecl_1a0691b53275ed119a0b06e7def430f051" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t asmjit::FuncDecl::_redZoneSize</definition>
        <argsstring></argsstring>
        <name>_redZoneSize</name>
        <briefdescription>
<para>Size of &quot;Red Zone&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Used by AMD64-ABI (128 bytes). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="454" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structasmjit_1_1FuncDecl_1a211c52c74f2da513a76dfe9e748fbd4d" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t asmjit::FuncDecl::_spillZoneSize</definition>
        <argsstring></argsstring>
        <name>_spillZoneSize</name>
        <briefdescription>
<para>Size of &quot;Spill Zone&quot;. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Used by WIN64-ABI (32 bytes). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="459" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structasmjit_1_1FuncDecl_1aff3fb03a650c4919f003f03d5f80332f" prot="public" static="no" mutable="no">
        <type><ref refid="structasmjit_1_1FuncInOut" kindref="compound">FuncInOut</ref></type>
        <definition>FuncInOut asmjit::FuncDecl::_argList[kFuncArgCountLoHi]</definition>
        <argsstring>[kFuncArgCountLoHi]</argsstring>
        <name>_argList</name>
        <briefdescription>
<para>Function arguments (including HI arguments) mapped to physical registers and stack offset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="463" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structasmjit_1_1FuncDecl_1a511f2df7f8dd1b102ebec16d3dbc0397" prot="public" static="no" mutable="no">
        <type><ref refid="structasmjit_1_1FuncInOut" kindref="compound">FuncInOut</ref></type>
        <definition>FuncInOut asmjit::FuncDecl::_retList[2]</definition>
        <argsstring>[2]</argsstring>
        <name>_retList</name>
        <briefdescription>
<para>Function return value(s). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="466" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="466" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a42ec8dca10052988d6e0a6aec9abf8c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t asmjit::FuncDecl::getConvention</definition>
        <argsstring>() const </argsstring>
        <name>getConvention</name>
        <briefdescription>
<para>Get function calling convention, see <computeroutput>kFuncConv</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="371" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="371" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1ac410370c89f4dbaa1b0be10fcf3d4b0b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t asmjit::FuncDecl::getCalleePopsStack</definition>
        <argsstring>() const </argsstring>
        <name>getCalleePopsStack</name>
        <briefdescription>
<para>Get whether the callee pops the stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="374" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="374" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1ac80843c1a79f2594625c3732dd8913ae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t asmjit::FuncDecl::getDirection</definition>
        <argsstring>() const </argsstring>
        <name>getDirection</name>
        <briefdescription>
<para>Get direction of arguments passed on the stack. </para>        </briefdescription>
        <detaileddescription>
<para>Direction should be always <computeroutput>kFuncDirRtl</computeroutput>.</para><para><simplesect kind="note"><para>This is related to used calling convention, it&apos;s not affected by number of function arguments or their types. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="382" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a09c52cc8a86a04056a87e7e83cc9934f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t asmjit::FuncDecl::getArgStackSize</definition>
        <argsstring>() const </argsstring>
        <name>getArgStackSize</name>
        <briefdescription>
<para>Get stack size needed for function arguments passed on the stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="385" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="385" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1af18d05e17d59952aaa42a277680994ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t asmjit::FuncDecl::getRedZoneSize</definition>
        <argsstring>() const </argsstring>
        <name>getRedZoneSize</name>
        <briefdescription>
<para>Get size of &quot;Red Zone&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="387" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="387" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a76cb13176e0ee3e9e4281ffe4856342e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t asmjit::FuncDecl::getSpillZoneSize</definition>
        <argsstring>() const </argsstring>
        <name>getSpillZoneSize</name>
        <briefdescription>
<para>Get size of &quot;Spill Zone&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="389" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="389" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a6ff6556e621a2c7d833fb239e40a260a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool asmjit::FuncDecl::hasRet</definition>
        <argsstring>() const </argsstring>
        <name>hasRet</name>
        <briefdescription>
<para>Get whether the function has a return value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="396" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="396" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a845d93fd499fb8cad4afc79242a954ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t asmjit::FuncDecl::getRetCount</definition>
        <argsstring>() const </argsstring>
        <name>getRetCount</name>
        <briefdescription>
<para>Get count of function return values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="398" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="398" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a053aa0d7eea2e19d62313529d038eb34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1FuncInOut" kindref="compound">FuncInOut</ref> &amp;</type>
        <definition>FuncInOut&amp; asmjit::FuncDecl::getRet</definition>
        <argsstring>(uint32_t index=kFuncRetLo)</argsstring>
        <name>getRet</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
          <defval>kFuncRetLo</defval>
        </param>
        <briefdescription>
<para>Get function return value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="401" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="401" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a715f71c74a2dae3aa4c86e5d078b1962" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structasmjit_1_1FuncInOut" kindref="compound">FuncInOut</ref> &amp;</type>
        <definition>const FuncInOut&amp; asmjit::FuncDecl::getRet</definition>
        <argsstring>(uint32_t index=kFuncRetLo) const </argsstring>
        <name>getRet</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
          <defval>kFuncRetLo</defval>
        </param>
        <briefdescription>
<para>Get function return value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="403" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="403" bodyend="403"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a256dfc25b9980a7571c13c4dd6d31e8e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t asmjit::FuncDecl::getArgCount</definition>
        <argsstring>() const </argsstring>
        <name>getArgCount</name>
        <briefdescription>
<para>Get count of function arguments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="406" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="406" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a56befde525f1128d408cf19474c886ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1FuncInOut" kindref="compound">FuncInOut</ref> *</type>
        <definition>FuncInOut* asmjit::FuncDecl::getArgList</definition>
        <argsstring>()</argsstring>
        <name>getArgList</name>
        <briefdescription>
<para>Get function arguments array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="409" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="409" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a168c812ff405cf32eb11e48e067fbcdf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structasmjit_1_1FuncInOut" kindref="compound">FuncInOut</ref> *</type>
        <definition>const FuncInOut* asmjit::FuncDecl::getArgList</definition>
        <argsstring>() const </argsstring>
        <name>getArgList</name>
        <briefdescription>
<para>Get function arguments array (const). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="411" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="411" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a6fb100b2c26ef842ef3ca957416003ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1FuncInOut" kindref="compound">FuncInOut</ref> &amp;</type>
        <definition>FuncInOut&amp; asmjit::FuncDecl::getArg</definition>
        <argsstring>(size_t index)</argsstring>
        <name>getArg</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get function argument at index <emphasis>index</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="414" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="414" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1a12cff01acb1e8d52f383d635969debcb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structasmjit_1_1FuncInOut" kindref="compound">FuncInOut</ref> &amp;</type>
        <definition>const FuncInOut&amp; asmjit::FuncDecl::getArg</definition>
        <argsstring>(size_t index) const </argsstring>
        <name>getArg</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get function argument at index <emphasis>index</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="420" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="420" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1FuncDecl_1ad824c3998ae211ead00657000228443e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void asmjit::FuncDecl::resetArg</definition>
        <argsstring>(size_t index)</argsstring>
        <name>resetArg</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="425" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="425" bodyend="428"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Function declaration. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="849">
        <label>asmjit::FuncDecl</label>
        <link refid="structasmjit_1_1FuncDecl"/>
      </node>
      <node id="850">
        <label>asmjit::x86x64::X86X64FuncDecl</label>
        <link refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl"/>
        <childnode refid="849" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="852">
        <label>asmjit::FuncInOut</label>
        <link refid="structasmjit_1_1FuncInOut"/>
      </node>
      <node id="851">
        <label>asmjit::FuncDecl</label>
        <link refid="structasmjit_1_1FuncDecl"/>
        <childnode refid="852" relation="usage">
          <edgelabel>_retList</edgelabel>
          <edgelabel>_argList</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="365" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="365" bodyend="467"/>
    <listofallmembers>
      <member refid="structasmjit_1_1FuncDecl_1ad4eb51ba76eb1b55baeb4e5e26c5fb4c" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>_argCount</name></member>
      <member refid="structasmjit_1_1FuncDecl_1aff3fb03a650c4919f003f03d5f80332f" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>_argList</name></member>
      <member refid="structasmjit_1_1FuncDecl_1abef4b2387f8b5a671ce2398f45ad9a86" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>_argStackSize</name></member>
      <member refid="structasmjit_1_1FuncDecl_1af2d18e0a1749d64553d1d8b22deed836" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>_calleePopsStack</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a5782543f71c49198a0a066b74f61f194" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>_convention</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a80bd04b9c80f76e8e1867b0759102a31" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>_direction</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a0691b53275ed119a0b06e7def430f051" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>_redZoneSize</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a7fc1348c47876dd81f4cadbf8eaf1e14" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>_reserved0</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a8e068d552d8c03ee4d12ac8cec580725" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>_retCount</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a511f2df7f8dd1b102ebec16d3dbc0397" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>_retList</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a211c52c74f2da513a76dfe9e748fbd4d" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>_spillZoneSize</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a6fb100b2c26ef842ef3ca957416003ef" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getArg</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a12cff01acb1e8d52f383d635969debcb" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getArg</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a256dfc25b9980a7571c13c4dd6d31e8e" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getArgCount</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a56befde525f1128d408cf19474c886ae" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getArgList</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a168c812ff405cf32eb11e48e067fbcdf" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getArgList</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a09c52cc8a86a04056a87e7e83cc9934f" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getArgStackSize</name></member>
      <member refid="structasmjit_1_1FuncDecl_1ac410370c89f4dbaa1b0be10fcf3d4b0b" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getCalleePopsStack</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a42ec8dca10052988d6e0a6aec9abf8c9" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getConvention</name></member>
      <member refid="structasmjit_1_1FuncDecl_1ac80843c1a79f2594625c3732dd8913ae" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getDirection</name></member>
      <member refid="structasmjit_1_1FuncDecl_1af18d05e17d59952aaa42a277680994ea" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getRedZoneSize</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a053aa0d7eea2e19d62313529d038eb34" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getRet</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a715f71c74a2dae3aa4c86e5d078b1962" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getRet</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a845d93fd499fb8cad4afc79242a954ac" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getRetCount</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a76cb13176e0ee3e9e4281ffe4856342e" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>getSpillZoneSize</name></member>
      <member refid="structasmjit_1_1FuncDecl_1a6ff6556e621a2c7d833fb239e40a260a" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>hasRet</name></member>
      <member refid="structasmjit_1_1FuncDecl_1ad824c3998ae211ead00657000228443e" prot="public" virt="non-virtual"><scope>asmjit::FuncDecl</scope><name>resetArg</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
