<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="x86assembler_8h" kind="file">
    <compoundname>x86assembler.h</compoundname>
    <includes refid="assembler_8h" local="yes">../base/assembler.h</includes>
    <includes refid="x86defs_8h" local="yes">../x86/x86defs.h</includes>
    <includes refid="apibegin_8h" local="yes">../base/apibegin.h</includes>
    <includes refid="apiend_8h" local="yes">../base/apiend.h</includes>
    <includedby refid="x86compiler_8h" local="yes">x86compiler.h</includedby>
    <includedby refid="x86context__p_8h" local="yes">x86context_p.h</includedby>
    <includedby refid="x86_8h" local="yes">x86.h</includedby>
    <incdepgraph>
      <node id="2164">
        <label>../base/globals.h</label>
        <childnode refid="2165" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2172">
        <label>../base/apiend.h</label>
      </node>
      <node id="2170">
        <label>stdarg.h</label>
      </node>
      <node id="2161">
        <label>../base/codegen.h</label>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2177" relation="include">
        </childnode>
        <childnode refid="2178" relation="include">
        </childnode>
        <childnode refid="2179" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2174">
        <label>stdint.h</label>
      </node>
      <node id="2168">
        <label>stdlib.h</label>
      </node>
      <node id="2176">
        <label>../base/error.h</label>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2179">
        <label>../base/zone.h</label>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2171">
        <label>../base/apibegin.h</label>
        <childnode refid="2165" relation="include">
        </childnode>
      </node>
      <node id="2177">
        <label>../base/logger.h</label>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2169" relation="include">
        </childnode>
        <childnode refid="2170" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2160">
        <label>../base/assembler.h</label>
        <childnode refid="2161" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2177" relation="include">
        </childnode>
        <childnode refid="2180" relation="include">
        </childnode>
        <childnode refid="2181" relation="include">
        </childnode>
        <childnode refid="2178" relation="include">
        </childnode>
        <childnode refid="2179" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2162">
        <label>../base/defs.h</label>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2175">
        <label>limits.h</label>
      </node>
      <node id="2180">
        <label>../base/podlist.h</label>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2181">
        <label>../base/podvector.h</label>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2173">
        <label>new</label>
      </node>
      <node id="2166">
        <label>config.h</label>
      </node>
      <node id="2185">
        <label>../base/vectypes.h</label>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2163">
        <label>../base/intutil.h</label>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2178">
        <label>../base/runtime.h</label>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2159">
        <label>x86assembler.h</label>
        <link refid="x86assembler.h"/>
        <childnode refid="2160" relation="include">
        </childnode>
        <childnode refid="2182" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2165">
        <label>../build.h</label>
        <childnode refid="2166" relation="include">
        </childnode>
        <childnode refid="2167" relation="include">
        </childnode>
        <childnode refid="2168" relation="include">
        </childnode>
        <childnode refid="2169" relation="include">
        </childnode>
        <childnode refid="2173" relation="include">
        </childnode>
        <childnode refid="2174" relation="include">
        </childnode>
        <childnode refid="2175" relation="include">
        </childnode>
      </node>
      <node id="2167">
        <label>stdio.h</label>
      </node>
      <node id="2169">
        <label>string.h</label>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2170" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2184">
        <label>../base/func.h</label>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2183">
        <label>../base/compiler.h</label>
        <childnode refid="2160" relation="include">
        </childnode>
        <childnode refid="2161" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2176" relation="include">
        </childnode>
        <childnode refid="2184" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2180" relation="include">
        </childnode>
        <childnode refid="2181" relation="include">
        </childnode>
        <childnode refid="2178" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
      <node id="2182">
        <label>../x86/x86defs.h</label>
        <childnode refid="2160" relation="include">
        </childnode>
        <childnode refid="2183" relation="include">
        </childnode>
        <childnode refid="2162" relation="include">
        </childnode>
        <childnode refid="2164" relation="include">
        </childnode>
        <childnode refid="2163" relation="include">
        </childnode>
        <childnode refid="2185" relation="include">
        </childnode>
        <childnode refid="2171" relation="include">
        </childnode>
        <childnode refid="2172" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2188">
        <label>x86context_p.h</label>
      </node>
      <node id="2189">
        <label>x86.h</label>
      </node>
      <node id="2187">
        <label>x86compiler.h</label>
        <childnode refid="2188" relation="include">
        </childnode>
        <childnode refid="2189" relation="include">
        </childnode>
      </node>
      <node id="2186">
        <label>x86assembler.h</label>
        <link refid="x86assembler.h"/>
        <childnode refid="2187" relation="include">
        </childnode>
        <childnode refid="2188" relation="include">
        </childnode>
        <childnode refid="2189" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86X64Assembler" prot="public">asmjit::x86x64::X86X64Assembler</innerclass>
    <innernamespace refid="namespaceasmjit">asmjit</innernamespace>
    <innernamespace refid="namespaceasmjit_1_1x86x64">asmjit::x86x64</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__asmjit__x86x64_1gaaf3f69d80d06b4a532023bb3012a7320" prot="public" static="no">
        <name>INST_0x</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_() { \
    return emit(_Code_); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="31" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga1c8e5a36936d8560ec803c0d65268946" prot="public" static="no">
        <name>INST_1x</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0) { \
    return emit(_Code_, o0); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="36" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga1141c99b39aef1af1c24374dac38626f" prot="public" static="no">
        <name>INST_1x_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="42" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1gaf5d4f68b466dcdbb81bfe5e77dea8d2e" prot="public" static="no">
        <name>INST_1i</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0) { \
    return emit(_Code_, o0); \
  } \
  \
  /* @overload */ \
  ASMJIT_INLINE Error _Inst_(int o0) { \
    return emit(_Code_, o0); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="52" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga4572c748250d3016c19bd474e4921307" prot="public" static="no">
        <name>INST_1i_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0); \
  } \
  \
  /* @overload */ \
  ASMJIT_INLINE Error _Inst_(int o0) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="64" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1gab30b8ea73cac05205fcd6a422696e9d6" prot="public" static="no">
        <name>INST_1cc</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Translate_</defname></param>
        <param><defname>_Op0_</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="100" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga1464791c7e0a5c818d38e8b5bbb18afb" prot="public" static="no">
        <name>INST_2x</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1) { \
    return emit(_Code_, o0, o1); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="105" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga7a1c1126cce4e6ebeae66ced1164b4d9" prot="public" static="no">
        <name>INST_2x_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="111" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga43443da73781e8ee9d76e7f48f729fb0" prot="public" static="no">
        <name>INST_2i</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1) { \
    return emit(_Code_, o0, o1); \
  } \
  \
  /* @overload */ \
  ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, int o1) { \
    return emit(_Code_, o0, o1); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="121" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga272ac8865ce6fbdd79137da0ce95983b" prot="public" static="no">
        <name>INST_2i_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1); \
  } \
  \
  /* @overload */ \
  ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, int o1) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="133" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga002c796f0d4f77c868e0872970510278" prot="public" static="no">
        <name>INST_2cc</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Translate_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="169" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga62fda50441bc63e96d9ec43773c89281" prot="public" static="no">
        <name>INST_3x</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2) { \
    return emit(_Code_, o0, o1, o2); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="174" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga2fbe398eb78774a87861973097325a99" prot="public" static="no">
        <name>INST_3x_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1, o2); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="180" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1gaf7e619e1c9c5014477f81c3ae016f6df" prot="public" static="no">
        <name>INST_3i</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2) { \
    return emit(_Code_, o0, o1, o2); \
  } \
  \
  /* @overload */ \
  ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, int o2) { \
    return emit(_Code_, o0, o1, o2); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="190" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1gae26e6241e5ea53bdd5711875b5823db4" prot="public" static="no">
        <name>INST_3i_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1, o2); \
  } \
  \
  /* @overload */ \
  ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, int o2) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1, o2); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="202" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1gaab0e4d8c9b698ccdc2e6aced677d11e4" prot="public" static="no">
        <name>INST_4x</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <param><defname>_Op3_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2, const _Op3_&amp; o3) { \
    return emit(_Code_, o0, o1, o2, o3); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="208" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga54a46da29249c23493f3d30af5945e84" prot="public" static="no">
        <name>INST_4x_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <param><defname>_Op3_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2, const _Op3_&amp; o3) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1, o2, o3); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="214" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1ga98da736e71fefe5cc1490c53bc9a00a9" prot="public" static="no">
        <name>INST_4i</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <param><defname>_Op3_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2, const _Op3_&amp; o3) { \
    return emit(_Code_, o0, o1, o2, o3); \
  } \
  \
  /* @overload */ \
  ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2, int o3) { \
    return emit(_Code_, o0, o1, o2, o3); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="224" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__asmjit__x86x64_1gac78716bd3006c5410b2047cb6366c701" prot="public" static="no">
        <name>INST_4i_</name>
        <param><defname>_Inst_</defname></param>
        <param><defname>_Code_</defname></param>
        <param><defname>_Op0_</defname></param>
        <param><defname>_Op1_</defname></param>
        <param><defname>_Op2_</defname></param>
        <param><defname>_Op3_</defname></param>
        <param><defname>_Cond_</defname></param>
        <initializer>ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2, const _Op3_&amp; o3) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1, o2, o3); \
  } \
  \
  /* @overload */ \
  ASMJIT_INLINE Error _Inst_(const _Op0_&amp; o0, const _Op1_&amp; o1, const _Op2_&amp; o2, int o3) { \
    <ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member">ASMJIT_ASSERT</ref>(_Cond_); \
    return emit(_Code_, o0, o1, o2, o3); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" line="236" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMJIT_X86_X86ASSEMBLER_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_ASMJIT_X86_X86ASSEMBLER_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/assembler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86defs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x86x64<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_x86x64</highlight></codeline>
<codeline lineno="22"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="23"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[CodeGen-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_0x(_Inst_,<sp/>_Code_)<sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_()<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_);<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_1x(_Inst_,<sp/>_Code_,<sp/>_Op0_)<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_1x_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_1i(_Inst_,<sp/>_Code_,<sp/>_Op0_)<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(int<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_1i_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(int<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_1cc(_Inst_,<sp/>_Code_,<sp/>_Translate_,<sp/>_Op0_)<sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(uint32_t<sp/>cc,<sp/>const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Translate_(cc),<sp/>o0);<sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##a(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##a,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##ae(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##ae,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##b(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##b,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##be(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##be,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##c(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##c,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##e(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##e,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##g(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##g,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##ge(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##ge,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##l(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##l,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##le(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##le,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##na(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##na,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nae(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nae,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nb(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nb,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nbe(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nbe,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nc(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nc,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##ne(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##ne,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##ng(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##ng,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nge(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nge,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nl(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nl,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nle(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nle,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##no(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##no,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##np(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##np,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##ns(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##ns,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nz(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##nz,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##o(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##o,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##p(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##p,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##pe(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##pe,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##po(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##po,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##s(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##s,<sp/>o0);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##z(const<sp/>_Op0_&amp;<sp/>o0)<sp/>{<sp/>return<sp/>emit(_Code_##z,<sp/>o0);<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_2x(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_)<sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_2x_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_2i(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_)<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>int<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_2i_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>int<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_2cc(_Inst_,<sp/>_Code_,<sp/>_Translate_,<sp/>_Op0_,<sp/>_Op1_)<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(uint32_t<sp/>cc,<sp/>const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Translate_(cc),<sp/>o0,<sp/>o1);<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##a(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##a,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##ae(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##ae,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##b(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##b,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##be(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##be,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##c(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##c,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##e(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##e,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##g(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##g,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##ge(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##ge,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##l(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##l,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="149"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##le(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##le,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##na(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##na,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="151"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nae(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nae,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nb(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nb,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nbe(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nbe,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nc(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nc,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##ne(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##ne,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##ng(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##ng,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nge(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nge,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nl(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nl,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nle(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nle,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="160"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##no(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##no,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##np(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##np,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##ns(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##ns,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##nz(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##nz,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##o(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##o,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##p(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##p,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##pe(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##pe,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##po(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##po,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##s(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##s,<sp/>o0,<sp/>o1);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_##z(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1)<sp/>{<sp/>return<sp/>emit(_Code_##z,<sp/>o0,<sp/>o1);<sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_3x(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_)<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_3x_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_3i(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_)<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>int<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_3i_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>int<sp/>o2)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2);<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_4x(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_,<sp/>_Op3_)<sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2,<sp/>const<sp/>_Op3_&amp;<sp/>o3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2,<sp/>o3);<sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_4x_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_,<sp/>_Op3_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="211"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2,<sp/>const<sp/>_Op3_&amp;<sp/>o3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="212"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2,<sp/>o3);<sp/>\</highlight></codeline>
<codeline lineno="214"><highlight class="preprocessor"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_4i(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_,<sp/>_Op3_)<sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2,<sp/>const<sp/>_Op3_&amp;<sp/>o3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2,<sp/>o3);<sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2,<sp/>int<sp/>o3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2,<sp/>o3);<sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INST_4i_(_Inst_,<sp/>_Code_,<sp/>_Op0_,<sp/>_Op1_,<sp/>_Op2_,<sp/>_Op3_,<sp/>_Cond_)<sp/>\</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2,<sp/>const<sp/>_Op3_&amp;<sp/>o3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2,<sp/>o3);<sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>@overload<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>_Inst_(const<sp/>_Op0_&amp;<sp/>o0,<sp/>const<sp/>_Op1_&amp;<sp/>o1,<sp/>const<sp/>_Op2_&amp;<sp/>o2,<sp/>int<sp/>o3)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Cond_);<sp/>\</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>emit(_Code_,<sp/>o0,<sp/>o1,<sp/>o2,<sp/>o3);<sp/>\</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Assembler]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="242"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>assembler.</highlight></codeline>
<codeline lineno="243"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="244"><highlight class="comment">//!<sp/>@ref<sp/>Assembler<sp/>is<sp/>the<sp/>main<sp/>class<sp/>in<sp/>AsmJit<sp/>that<sp/>can<sp/>encode<sp/>instructions</highlight></codeline>
<codeline lineno="245"><highlight class="comment">//!<sp/>and<sp/>their<sp/>operands<sp/>to<sp/>a<sp/>binary<sp/>stream<sp/>runnable<sp/>by<sp/>CPU.<sp/>It<sp/>creates<sp/>internal</highlight></codeline>
<codeline lineno="246"><highlight class="comment">//!<sp/>buffer<sp/>where<sp/>the<sp/>encodes<sp/>instructions<sp/>are<sp/>stored<sp/>and<sp/>it<sp/>contains<sp/>intrinsics</highlight></codeline>
<codeline lineno="247"><highlight class="comment">//!<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>emit<sp/>the<sp/>code<sp/>in<sp/>a<sp/>convenent<sp/>way.<sp/>Code<sp/>generation<sp/>is<sp/>in</highlight></codeline>
<codeline lineno="248"><highlight class="comment">//!<sp/>general<sp/>safe,<sp/>because<sp/>the<sp/>intrinsics<sp/>uses<sp/>method<sp/>overloading<sp/>so<sp/>even<sp/>the</highlight></codeline>
<codeline lineno="249"><highlight class="comment">//!<sp/>code<sp/>is<sp/>emitted<sp/>it<sp/>can<sp/>be<sp/>checked<sp/>by<sp/>a<sp/>C++<sp/>compiler.<sp/>It&apos;s<sp/>nearly<sp/>impossible</highlight></codeline>
<codeline lineno="250"><highlight class="comment">//!<sp/>to<sp/>create<sp/>invalid<sp/>instruction<sp/>(for<sp/>example<sp/>&lt;code&gt;mov<sp/>[eax],<sp/>[eax]&lt;/code&gt;,</highlight></codeline>
<codeline lineno="251"><highlight class="comment">//!<sp/>because<sp/>such<sp/>overload<sp/>doesn&apos;t<sp/>exist.</highlight></codeline>
<codeline lineno="252"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="253"><highlight class="comment">//!<sp/>Each<sp/>call<sp/>to<sp/>an<sp/>assembler<sp/>intrinsic<sp/>function<sp/>emits<sp/>instruction<sp/>directly</highlight></codeline>
<codeline lineno="254"><highlight class="comment">//!<sp/>to<sp/>the<sp/>binary<sp/>stream.<sp/>There<sp/>are<sp/>also<sp/>runtime<sp/>checks<sp/>that<sp/>prevent<sp/>invalid</highlight></codeline>
<codeline lineno="255"><highlight class="comment">//!<sp/>code<sp/>to<sp/>be<sp/>emitted.<sp/>It<sp/>will<sp/>assert<sp/>in<sp/>debug<sp/>mode<sp/>and<sp/>put<sp/>the<sp/>@ref<sp/>Assembler</highlight></codeline>
<codeline lineno="256"><highlight class="comment">//!<sp/>instance<sp/>to<sp/>an<sp/><sp/>error<sp/>state<sp/>in<sp/>production<sp/>mode.</highlight></codeline>
<codeline lineno="257"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="258"><highlight class="comment">//!<sp/>@section<sp/>AsmJit_Assembler_CodeGeneration<sp/>Code<sp/>Generation</highlight></codeline>
<codeline lineno="259"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="260"><highlight class="comment">//!<sp/>To<sp/>generate<sp/>code<sp/>is<sp/>only<sp/>needed<sp/>to<sp/>create<sp/>instance<sp/>of<sp/>@c<sp/>asmjit::Assembler</highlight></codeline>
<codeline lineno="261"><highlight class="comment">//!<sp/>and<sp/>to<sp/>use<sp/>intrinsics.<sp/>See<sp/>example<sp/>how<sp/>to<sp/>do<sp/>that:</highlight></codeline>
<codeline lineno="262"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="263"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="264"><highlight class="comment">//!<sp/>//<sp/>Use<sp/>asmjit<sp/>namespace.</highlight></codeline>
<codeline lineno="265"><highlight class="comment">//!<sp/>using<sp/>namespace<sp/>asmjit;</highlight></codeline>
<codeline lineno="266"><highlight class="comment">//!<sp/>using<sp/>namespace<sp/>asmjit::host;</highlight></codeline>
<codeline lineno="267"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="268"><highlight class="comment">//!<sp/>//<sp/>Create<sp/>Assembler<sp/>instance.</highlight></codeline>
<codeline lineno="269"><highlight class="comment">//!<sp/>Assembler<sp/>a;</highlight></codeline>
<codeline lineno="270"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="271"><highlight class="comment">//!<sp/>//<sp/>Prolog.</highlight></codeline>
<codeline lineno="272"><highlight class="comment">//!<sp/>a.push(ebp);</highlight></codeline>
<codeline lineno="273"><highlight class="comment">//!<sp/>a.mov(ebp,<sp/>esp);</highlight></codeline>
<codeline lineno="274"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="275"><highlight class="comment">//!<sp/>//<sp/>Mov<sp/>1024<sp/>to<sp/>EAX,<sp/>EAX<sp/>is<sp/>also<sp/>return<sp/>value.</highlight></codeline>
<codeline lineno="276"><highlight class="comment">//!<sp/>a.mov(eax,<sp/>1024);</highlight></codeline>
<codeline lineno="277"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="278"><highlight class="comment">//!<sp/>//<sp/>Epilog.</highlight></codeline>
<codeline lineno="279"><highlight class="comment">//!<sp/>a.mov(esp,<sp/>ebp);</highlight></codeline>
<codeline lineno="280"><highlight class="comment">//!<sp/>a.pop(ebp);</highlight></codeline>
<codeline lineno="281"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="282"><highlight class="comment">//!<sp/>//<sp/>Return.</highlight></codeline>
<codeline lineno="283"><highlight class="comment">//!<sp/>a.ret();</highlight></codeline>
<codeline lineno="284"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="285"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="286"><highlight class="comment">//!<sp/>You<sp/>can<sp/>see<sp/>that<sp/>syntax<sp/>is<sp/>very<sp/>close<sp/>to<sp/>Intel<sp/>one.<sp/>Only<sp/>difference<sp/>is<sp/>that</highlight></codeline>
<codeline lineno="287"><highlight class="comment">//!<sp/>you<sp/>are<sp/>calling<sp/>functions<sp/>that<sp/>emits<sp/>the<sp/>binary<sp/>code<sp/>for<sp/>you.<sp/>All<sp/>registers</highlight></codeline>
<codeline lineno="288"><highlight class="comment">//!<sp/>are<sp/>in<sp/>@c<sp/>asmjit<sp/>namespace,<sp/>so<sp/>it&apos;s<sp/>very<sp/>comfortable<sp/>to<sp/>use<sp/>it<sp/>(look<sp/>at</highlight></codeline>
<codeline lineno="289"><highlight class="comment">//!<sp/>first<sp/>line).<sp/>There<sp/>is<sp/>also<sp/>used<sp/>method<sp/>@c<sp/>asmjit::imm()<sp/>to<sp/>create<sp/>an</highlight></codeline>
<codeline lineno="290"><highlight class="comment">//!<sp/>immediate<sp/>value.<sp/>Use<sp/>@c<sp/>asmjit::imm_u()<sp/>to<sp/>create<sp/>unsigned<sp/>immediate<sp/>value.</highlight></codeline>
<codeline lineno="291"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="292"><highlight class="comment">//!<sp/>There<sp/>is<sp/>also<sp/>possibility<sp/>to<sp/>use<sp/>memory<sp/>addresses<sp/>and<sp/>immediates.<sp/>To<sp/>build</highlight></codeline>
<codeline lineno="293"><highlight class="comment">//!<sp/>memory<sp/>address<sp/>use<sp/>@c<sp/>ptr(),<sp/>@c<sp/>byte_ptr(),<sp/>@c<sp/>word_ptr(),<sp/>@c<sp/>dword_ptr()</highlight></codeline>
<codeline lineno="294"><highlight class="comment">//!<sp/>or<sp/>other<sp/>friend<sp/>methods.<sp/>In<sp/>most<sp/>cases<sp/>you<sp/>needs<sp/>only<sp/>@c<sp/>ptr()<sp/>method,<sp/>but</highlight></codeline>
<codeline lineno="295"><highlight class="comment">//!<sp/>there<sp/>are<sp/>instructions<sp/>where<sp/>you<sp/>must<sp/>specify<sp/>address<sp/>size,</highlight></codeline>
<codeline lineno="296"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="297"><highlight class="comment">//!<sp/>for<sp/>example<sp/>(a<sp/>is<sp/>@c<sp/>asmjit::Assembler<sp/>instance):</highlight></codeline>
<codeline lineno="298"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="299"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="300"><highlight class="comment">//!<sp/>a.mov(ptr(eax),<sp/>0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>mov<sp/>ptr<sp/>[eax],<sp/>0</highlight></codeline>
<codeline lineno="301"><highlight class="comment">//!<sp/>a.mov(ptr(eax),<sp/>edx);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>mov<sp/>ptr<sp/>[eax],<sp/>edx</highlight></codeline>
<codeline lineno="302"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="303"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="304"><highlight class="comment">//!<sp/>But<sp/>it&apos;s<sp/>also<sp/>possible<sp/>to<sp/>create<sp/>complex<sp/>addresses:</highlight></codeline>
<codeline lineno="305"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="306"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="307"><highlight class="comment">//!<sp/>//<sp/>eax<sp/>+<sp/>ecx*x<sp/>addresses</highlight></codeline>
<codeline lineno="308"><highlight class="comment">//!<sp/>a.mov(ptr(eax,<sp/>ecx,<sp/>0),<sp/>0);<sp/><sp/><sp/><sp/><sp/>//<sp/>mov<sp/>ptr<sp/>[eax<sp/>+<sp/>ecx],<sp/>0</highlight></codeline>
<codeline lineno="309"><highlight class="comment">//!<sp/>a.mov(ptr(eax,<sp/>ecx,<sp/>1),<sp/>0);<sp/><sp/><sp/><sp/><sp/>//<sp/>mov<sp/>ptr<sp/>[eax<sp/>+<sp/>ecx<sp/>*<sp/>2],<sp/>0</highlight></codeline>
<codeline lineno="310"><highlight class="comment">//!<sp/>a.mov(ptr(eax,<sp/>ecx,<sp/>2),<sp/>0);<sp/><sp/><sp/><sp/><sp/>//<sp/>mov<sp/>ptr<sp/>[eax<sp/>+<sp/>ecx<sp/>*<sp/>4],<sp/>0</highlight></codeline>
<codeline lineno="311"><highlight class="comment">//!<sp/>a.mov(ptr(eax,<sp/>ecx,<sp/>3),<sp/>0);<sp/><sp/><sp/><sp/><sp/>//<sp/>mov<sp/>ptr<sp/>[eax<sp/>+<sp/>ecx<sp/>*<sp/>8],<sp/>0</highlight></codeline>
<codeline lineno="312"><highlight class="comment">//!<sp/>//<sp/>eax<sp/>+<sp/>ecx*x<sp/>+<sp/>disp<sp/>addresses</highlight></codeline>
<codeline lineno="313"><highlight class="comment">//!<sp/>a.mov(ptr(eax,<sp/>ecx,<sp/>0,<sp/><sp/>4),<sp/>0);<sp/>//<sp/>mov<sp/>ptr<sp/>[eax<sp/>+<sp/>ecx<sp/><sp/><sp/><sp/><sp/>+<sp/><sp/>4],<sp/>0</highlight></codeline>
<codeline lineno="314"><highlight class="comment">//!<sp/>a.mov(ptr(eax,<sp/>ecx,<sp/>1,<sp/><sp/>8),<sp/>0);<sp/>//<sp/>mov<sp/>ptr<sp/>[eax<sp/>+<sp/>ecx<sp/>*<sp/>2<sp/>+<sp/><sp/>8],<sp/>0</highlight></codeline>
<codeline lineno="315"><highlight class="comment">//!<sp/>a.mov(ptr(eax,<sp/>ecx,<sp/>2,<sp/>12),<sp/>0);<sp/>//<sp/>mov<sp/>ptr<sp/>[eax<sp/>+<sp/>ecx<sp/>*<sp/>4<sp/>+<sp/>12],<sp/>0</highlight></codeline>
<codeline lineno="316"><highlight class="comment">//!<sp/>a.mov(ptr(eax,<sp/>ecx,<sp/>3,<sp/>16),<sp/>0);<sp/>//<sp/>mov<sp/>ptr<sp/>[eax<sp/>+<sp/>ecx<sp/>*<sp/>8<sp/>+<sp/>16],<sp/>0</highlight></codeline>
<codeline lineno="317"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="318"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="319"><highlight class="comment">//!<sp/>All<sp/>addresses<sp/>shown<sp/>are<sp/>using<sp/>@c<sp/>asmjit::ptr()<sp/>to<sp/>make<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="320"><highlight class="comment">//!<sp/>Some<sp/>assembler<sp/>instructions<sp/>(single<sp/>operand<sp/>ones)<sp/>needs<sp/>to<sp/>have<sp/>specified</highlight></codeline>
<codeline lineno="321"><highlight class="comment">//!<sp/>memory<sp/>operand<sp/>size.<sp/>For<sp/>example<sp/>&lt;code&gt;a.inc(ptr(eax))&lt;/code&gt;<sp/>can&apos;t<sp/>be</highlight></codeline>
<codeline lineno="322"><highlight class="comment">//!<sp/>called.<sp/>@c<sp/>asmjit::Assembler::inc(),<sp/>@c<sp/>asmjit::Assembler::dec()<sp/>and<sp/>similar</highlight></codeline>
<codeline lineno="323"><highlight class="comment">//!<sp/>instructions<sp/>can&apos;t<sp/>be<sp/>encoded<sp/>without<sp/>specifying<sp/>the<sp/>operand<sp/>size.<sp/>See</highlight></codeline>
<codeline lineno="324"><highlight class="comment">//!<sp/>next<sp/>code<sp/>how<sp/>the<sp/>assembler<sp/>works:</highlight></codeline>
<codeline lineno="325"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="326"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="327"><highlight class="comment">//!<sp/>//<sp/>[byte]<sp/>address</highlight></codeline>
<codeline lineno="328"><highlight class="comment">//!<sp/>a.inc(byte_ptr(eax));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>inc<sp/>byte<sp/>ptr<sp/>[eax]</highlight></codeline>
<codeline lineno="329"><highlight class="comment">//!<sp/>a.dec(byte_ptr(eax));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>dec<sp/>byte<sp/>ptr<sp/>[eax]</highlight></codeline>
<codeline lineno="330"><highlight class="comment">//!<sp/>//<sp/>[word]<sp/>address</highlight></codeline>
<codeline lineno="331"><highlight class="comment">//!<sp/>a.inc(word_ptr(eax));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>inc<sp/>word<sp/>ptr<sp/>[eax]</highlight></codeline>
<codeline lineno="332"><highlight class="comment">//!<sp/>a.dec(word_ptr(eax));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>dec<sp/>word<sp/>ptr<sp/>[eax]</highlight></codeline>
<codeline lineno="333"><highlight class="comment">//!<sp/>//<sp/>[dword]<sp/>address</highlight></codeline>
<codeline lineno="334"><highlight class="comment">//!<sp/>a.inc(dword_ptr(eax));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>inc<sp/>dword<sp/>ptr<sp/>[eax]</highlight></codeline>
<codeline lineno="335"><highlight class="comment">//!<sp/>a.dec(dword_ptr(eax));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>dec<sp/>dword<sp/>ptr<sp/>[eax]</highlight></codeline>
<codeline lineno="336"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="337"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="338"><highlight class="comment">//!<sp/>@section<sp/>AsmJit_Assembler_CallingJitCode<sp/>Calling<sp/>JIT<sp/>Code</highlight></codeline>
<codeline lineno="339"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="340"><highlight class="comment">//!<sp/>While<sp/>you<sp/>are<sp/>over<sp/>from<sp/>emitting<sp/>instructions,<sp/>you<sp/>can<sp/>make<sp/>your<sp/>function</highlight></codeline>
<codeline lineno="341"><highlight class="comment">//!<sp/>using<sp/>@c<sp/>asmjit::Assembler::make()<sp/>method.<sp/>This<sp/>method<sp/>will<sp/>use<sp/>memory</highlight></codeline>
<codeline lineno="342"><highlight class="comment">//!<sp/>manager<sp/>to<sp/>allocate<sp/>virtual<sp/>memory<sp/>and<sp/>relocates<sp/>generated<sp/>code<sp/>to<sp/>it.<sp/>For</highlight></codeline>
<codeline lineno="343"><highlight class="comment">//!<sp/>memory<sp/>allocation<sp/>is<sp/>used<sp/>global<sp/>memory<sp/>manager<sp/>by<sp/>default<sp/>and<sp/>memory<sp/>is</highlight></codeline>
<codeline lineno="344"><highlight class="comment">//!<sp/>freeable,<sp/>but<sp/>of<sp/>course<sp/>this<sp/>default<sp/>behavior<sp/>can<sp/>be<sp/>overridden<sp/>specifying</highlight></codeline>
<codeline lineno="345"><highlight class="comment">//!<sp/>your<sp/>memory<sp/>manager<sp/>and<sp/>allocation<sp/>type.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>do<sp/>with<sp/>code</highlight></codeline>
<codeline lineno="346"><highlight class="comment">//!<sp/>something<sp/>else<sp/>you<sp/>can<sp/>always<sp/>override<sp/>make()<sp/>method<sp/>and<sp/>do<sp/>what<sp/>you<sp/>want.</highlight></codeline>
<codeline lineno="347"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="348"><highlight class="comment">//!<sp/>You<sp/>can<sp/>get<sp/>size<sp/>of<sp/>generated<sp/>code<sp/>by<sp/>@c<sp/>getCodeSize()<sp/>or<sp/>@c<sp/>getOffset()</highlight></codeline>
<codeline lineno="349"><highlight class="comment">//!<sp/>methods.<sp/>These<sp/>methods<sp/>returns<sp/>you<sp/>code<sp/>size<sp/>(or<sp/>more<sp/>precisely<sp/>current<sp/>code</highlight></codeline>
<codeline lineno="350"><highlight class="comment">//!<sp/>offset)<sp/>in<sp/>bytes.<sp/>Use<sp/>takeCode()<sp/>to<sp/>take<sp/>internal<sp/>buffer<sp/>(all<sp/>pointers<sp/>in</highlight></codeline>
<codeline lineno="351"><highlight class="comment">//!<sp/>@c<sp/>asmjit::Assembler<sp/>instance<sp/>will<sp/>be<sp/>zeroed<sp/>and<sp/>current<sp/>buffer<sp/>returned)</highlight></codeline>
<codeline lineno="352"><highlight class="comment">//!<sp/>to<sp/>use<sp/>it.<sp/>If<sp/>you<sp/>don&apos;t<sp/>take<sp/>it,<sp/><sp/>@c<sp/>asmjit::Assembler<sp/>destructor<sp/>will</highlight></codeline>
<codeline lineno="353"><highlight class="comment">//!<sp/>free<sp/>it<sp/>automatically.<sp/>To<sp/>alloc<sp/>and<sp/>run<sp/>code<sp/>manually<sp/>don&apos;t<sp/>use</highlight></codeline>
<codeline lineno="354"><highlight class="comment">//!<sp/>@c<sp/>malloc()&apos;ed<sp/>memory,<sp/>but<sp/>instead<sp/>use<sp/>@c<sp/>asmjit::VMem::alloc()<sp/>to<sp/>get<sp/>memory</highlight></codeline>
<codeline lineno="355"><highlight class="comment">//!<sp/>for<sp/>executing<sp/>(specify<sp/>@c<sp/>canExecute<sp/>to<sp/>@c<sp/>true)<sp/>or<sp/>@c<sp/>asmjit::MemoryManager</highlight></codeline>
<codeline lineno="356"><highlight class="comment">//!<sp/>that<sp/>provides<sp/>more<sp/>effective<sp/>and<sp/>comfortable<sp/>way<sp/>to<sp/>allocate<sp/>virtual<sp/>memory.</highlight></codeline>
<codeline lineno="357"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="358"><highlight class="comment">//!<sp/>See<sp/>next<sp/>example<sp/>how<sp/>to<sp/>allocate<sp/>memory<sp/>where<sp/>you<sp/>can<sp/>execute<sp/>code<sp/>created</highlight></codeline>
<codeline lineno="359"><highlight class="comment">//!<sp/>by<sp/>@c<sp/>asmjit::Assembler:</highlight></codeline>
<codeline lineno="360"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="361"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="362"><highlight class="comment">//!<sp/>using<sp/>namespace<sp/>asmjit;</highlight></codeline>
<codeline lineno="363"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="364"><highlight class="comment">//!<sp/>JitRuntime<sp/>runtime;</highlight></codeline>
<codeline lineno="365"><highlight class="comment">//!<sp/>Assembler<sp/>a(&amp;runtime);</highlight></codeline>
<codeline lineno="366"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="367"><highlight class="comment">//!<sp/>//<sp/>...<sp/>Your<sp/>code<sp/>generation<sp/>...</highlight></codeline>
<codeline lineno="368"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="369"><highlight class="comment">//!<sp/>//<sp/>The<sp/>function<sp/>prototype</highlight></codeline>
<codeline lineno="370"><highlight class="comment">//!<sp/>typedef<sp/>void<sp/>(*MyFunc)();</highlight></codeline>
<codeline lineno="371"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="372"><highlight class="comment">//!<sp/>//<sp/>make<sp/>your<sp/>function</highlight></codeline>
<codeline lineno="373"><highlight class="comment">//!<sp/>MyFunc<sp/>func<sp/>=<sp/>asmjit_cast&lt;MyFunc&gt;(a.make());</highlight></codeline>
<codeline lineno="374"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="375"><highlight class="comment">//!<sp/>//<sp/>call<sp/>your<sp/>function</highlight></codeline>
<codeline lineno="376"><highlight class="comment">//!<sp/>func();</highlight></codeline>
<codeline lineno="377"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="378"><highlight class="comment">//!<sp/>//<sp/>If<sp/>you<sp/>don&apos;t<sp/>need<sp/>your<sp/>function<sp/>again,<sp/>free<sp/>it.</highlight></codeline>
<codeline lineno="379"><highlight class="comment">//!<sp/>runtime.free(func);</highlight></codeline>
<codeline lineno="380"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="381"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="382"><highlight class="comment">//!<sp/>@c<sp/>note<sp/>This<sp/>was<sp/>very<sp/>primitive<sp/>example<sp/>how<sp/>to<sp/>call<sp/>generated<sp/>code.</highlight></codeline>
<codeline lineno="383"><highlight class="comment">//!<sp/>In<sp/>production<sp/>code<sp/>you<sp/>will<sp/>never<sp/>do<sp/>alloc/free<sp/>for<sp/>one<sp/>run,<sp/>you<sp/>will</highlight></codeline>
<codeline lineno="384"><highlight class="comment">//!<sp/>probably<sp/>store<sp/>the<sp/>allocated<sp/>function<sp/>and<sp/>free<sp/>it<sp/>when<sp/>the<sp/>application</highlight></codeline>
<codeline lineno="385"><highlight class="comment">//!<sp/>ends<sp/>or<sp/>when<sp/>JIT<sp/>objects<sp/>does<sp/>cleanup.</highlight></codeline>
<codeline lineno="386"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="387"><highlight class="comment">//!<sp/>@section<sp/>AsmJit_Assembler_Labels<sp/>Labels</highlight></codeline>
<codeline lineno="388"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="389"><highlight class="comment">//!<sp/>While<sp/>generating<sp/>assembler<sp/>code,<sp/>you<sp/>will<sp/>usually<sp/>need<sp/>to<sp/>create<sp/>complex</highlight></codeline>
<codeline lineno="390"><highlight class="comment">//!<sp/>code<sp/>with<sp/>labels.<sp/>Labels<sp/>are<sp/>fully<sp/>supported<sp/>and<sp/>you<sp/>can<sp/>call<sp/>@c<sp/>jmp<sp/>or</highlight></codeline>
<codeline lineno="391"><highlight class="comment">//!<sp/>@c<sp/>je<sp/>(and<sp/>similar)<sp/>instructions<sp/>to<sp/>initialized<sp/>or<sp/>yet<sp/>uninitialized<sp/>label.</highlight></codeline>
<codeline lineno="392"><highlight class="comment">//!<sp/>Each<sp/>label<sp/>expects<sp/>to<sp/>be<sp/>bound<sp/>into<sp/>offset.<sp/>To<sp/>bind<sp/>label<sp/>to<sp/>specific</highlight></codeline>
<codeline lineno="393"><highlight class="comment">//!<sp/>offset,<sp/>use<sp/>@c<sp/>bind()<sp/>method.</highlight></codeline>
<codeline lineno="394"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="395"><highlight class="comment">//!<sp/>See<sp/>next<sp/>example<sp/>that<sp/>contains<sp/>complete<sp/>code<sp/>that<sp/>creates<sp/>simple<sp/>memory</highlight></codeline>
<codeline lineno="396"><highlight class="comment">//!<sp/>copy<sp/>function<sp/>(in<sp/>DWord<sp/>entities).</highlight></codeline>
<codeline lineno="397"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="398"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="399"><highlight class="comment">//!<sp/>//<sp/>Example:<sp/>Usage<sp/>of<sp/>Label<sp/>(32-bit<sp/>code).</highlight></codeline>
<codeline lineno="400"><highlight class="comment">//!<sp/>//</highlight></codeline>
<codeline lineno="401"><highlight class="comment">//!<sp/>//<sp/>Create<sp/>simple<sp/>DWord<sp/>memory<sp/>copy<sp/>function:</highlight></codeline>
<codeline lineno="402"><highlight class="comment">//!<sp/>//<sp/>ASMJIT_STDCALL<sp/>void<sp/>copy32(uint32_t*<sp/>dst,<sp/>const<sp/>uint32_t*<sp/>src,<sp/>size_t<sp/>count);</highlight></codeline>
<codeline lineno="403"><highlight class="comment">//!<sp/>using<sp/>namespace<sp/>asmjit;</highlight></codeline>
<codeline lineno="404"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="405"><highlight class="comment">//!<sp/>//<sp/>Assembler<sp/>instance.</highlight></codeline>
<codeline lineno="406"><highlight class="comment">//!<sp/>JitRuntime<sp/>runtime;</highlight></codeline>
<codeline lineno="407"><highlight class="comment">//!<sp/>Assembler<sp/>a(&amp;runtime);</highlight></codeline>
<codeline lineno="408"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="409"><highlight class="comment">//!<sp/>//<sp/>Constants.</highlight></codeline>
<codeline lineno="410"><highlight class="comment">//!<sp/>const<sp/>int<sp/>arg_offset<sp/>=<sp/>8;<sp/>//<sp/>Arguments<sp/>offset<sp/>(STDCALL<sp/>EBP).</highlight></codeline>
<codeline lineno="411"><highlight class="comment">//!<sp/>const<sp/>int<sp/>arg_size<sp/>=<sp/>12;<sp/><sp/>//<sp/>Arguments<sp/>size.</highlight></codeline>
<codeline lineno="412"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="413"><highlight class="comment">//!<sp/>//<sp/>Labels.</highlight></codeline>
<codeline lineno="414"><highlight class="comment">//!<sp/>Label<sp/>L_Loop(a);</highlight></codeline>
<codeline lineno="415"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="416"><highlight class="comment">//!<sp/>//<sp/>Prolog.</highlight></codeline>
<codeline lineno="417"><highlight class="comment">//!<sp/>a.push(ebp);</highlight></codeline>
<codeline lineno="418"><highlight class="comment">//!<sp/>a.mov(ebp,<sp/>esp);</highlight></codeline>
<codeline lineno="419"><highlight class="comment">//!<sp/>a.push(esi);</highlight></codeline>
<codeline lineno="420"><highlight class="comment">//!<sp/>a.push(edi);</highlight></codeline>
<codeline lineno="421"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="422"><highlight class="comment">//!<sp/>//<sp/>Fetch<sp/>arguments</highlight></codeline>
<codeline lineno="423"><highlight class="comment">//!<sp/>a.mov(esi,<sp/>dword_ptr(ebp,<sp/>arg_offset<sp/>+<sp/>0));<sp/>//<sp/>Get<sp/>dst.</highlight></codeline>
<codeline lineno="424"><highlight class="comment">//!<sp/>a.mov(edi,<sp/>dword_ptr(ebp,<sp/>arg_offset<sp/>+<sp/>4));<sp/>//<sp/>Get<sp/>src.</highlight></codeline>
<codeline lineno="425"><highlight class="comment">//!<sp/>a.mov(ecx,<sp/>dword_ptr(ebp,<sp/>arg_offset<sp/>+<sp/>8));<sp/>//<sp/>Get<sp/>count.</highlight></codeline>
<codeline lineno="426"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="427"><highlight class="comment">//!<sp/>//<sp/>Bind<sp/>L_Loop<sp/>label<sp/>to<sp/>here.</highlight></codeline>
<codeline lineno="428"><highlight class="comment">//!<sp/>a.bind(L_Loop);</highlight></codeline>
<codeline lineno="429"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="430"><highlight class="comment">//!<sp/>Copy<sp/>4<sp/>bytes.</highlight></codeline>
<codeline lineno="431"><highlight class="comment">//!<sp/>a.mov(eax,<sp/>dword_ptr(esi));</highlight></codeline>
<codeline lineno="432"><highlight class="comment">//!<sp/>a.mov(dword_ptr(edi),<sp/>eax);</highlight></codeline>
<codeline lineno="433"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="434"><highlight class="comment">//!<sp/>//<sp/>Increment<sp/>pointers.</highlight></codeline>
<codeline lineno="435"><highlight class="comment">//!<sp/>a.add(esi,<sp/>4);</highlight></codeline>
<codeline lineno="436"><highlight class="comment">//!<sp/>a.add(edi,<sp/>4);</highlight></codeline>
<codeline lineno="437"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="438"><highlight class="comment">//!<sp/>//<sp/>Repeat<sp/>loop<sp/>until<sp/>(--ecx<sp/>!=<sp/>0).</highlight></codeline>
<codeline lineno="439"><highlight class="comment">//!<sp/>a.dec(ecx);</highlight></codeline>
<codeline lineno="440"><highlight class="comment">//!<sp/>a.jz(L_Loop);</highlight></codeline>
<codeline lineno="441"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="442"><highlight class="comment">//!<sp/>//<sp/>Epilog.</highlight></codeline>
<codeline lineno="443"><highlight class="comment">//!<sp/>a.pop(edi);</highlight></codeline>
<codeline lineno="444"><highlight class="comment">//!<sp/>a.pop(esi);</highlight></codeline>
<codeline lineno="445"><highlight class="comment">//!<sp/>a.mov(esp,<sp/>ebp);</highlight></codeline>
<codeline lineno="446"><highlight class="comment">//!<sp/>a.pop(ebp);</highlight></codeline>
<codeline lineno="447"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="448"><highlight class="comment">//!<sp/>//<sp/>Return:<sp/>STDCALL<sp/>convention<sp/>is<sp/>to<sp/>pop<sp/>stack<sp/>in<sp/>called<sp/>function.</highlight></codeline>
<codeline lineno="449"><highlight class="comment">//!<sp/>a.ret(arg_size);</highlight></codeline>
<codeline lineno="450"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="451"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="452"><highlight class="comment">//!<sp/>If<sp/>you<sp/>need<sp/>more<sp/>abstraction<sp/>for<sp/>generating<sp/>assembler<sp/>code<sp/>and<sp/>you<sp/>want</highlight></codeline>
<codeline lineno="453"><highlight class="comment">//!<sp/>to<sp/>hide<sp/>calling<sp/>conventions<sp/>between<sp/>32-bit<sp/>and<sp/>64-bit<sp/>operating<sp/>systems,</highlight></codeline>
<codeline lineno="454"><highlight class="comment">//!<sp/>look<sp/>at<sp/>@c<sp/>Compiler<sp/>class<sp/>that<sp/>is<sp/>designed<sp/>for<sp/>higher<sp/>level<sp/>code</highlight></codeline>
<codeline lineno="455"><highlight class="comment">//!<sp/>generation.</highlight></codeline>
<codeline lineno="456"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="457"><highlight class="comment">//!<sp/>@section<sp/>AsmJit_Assembler_AdvancedCodeGeneration<sp/>Advanced<sp/>Code<sp/>Generation</highlight></codeline>
<codeline lineno="458"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="459"><highlight class="comment">//!<sp/>This<sp/>section<sp/>describes<sp/>some<sp/>advanced<sp/>generation<sp/>features<sp/>of<sp/>@c<sp/>Assembler</highlight></codeline>
<codeline lineno="460"><highlight class="comment">//!<sp/>class<sp/>which<sp/>can<sp/>be<sp/>simply<sp/>overlooked.<sp/>The<sp/>first<sp/>thing<sp/>that<sp/>is<sp/>very<sp/>likely</highlight></codeline>
<codeline lineno="461"><highlight class="comment">//!<sp/>needed<sp/>is<sp/>generic<sp/>register<sp/>support.<sp/>In<sp/>previous<sp/>example<sp/>the<sp/>named<sp/>registers</highlight></codeline>
<codeline lineno="462"><highlight class="comment">//!<sp/>were<sp/>used.<sp/>AsmJit<sp/>contains<sp/>functions<sp/>which<sp/>can<sp/>convert<sp/>register<sp/>index<sp/>into</highlight></codeline>
<codeline lineno="463"><highlight class="comment">//!<sp/>operand<sp/>and<sp/>back.</highlight></codeline>
<codeline lineno="464"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="465"><highlight class="comment">//!<sp/>Let&apos;s<sp/>define<sp/>function<sp/>which<sp/>can<sp/>be<sp/>used<sp/>to<sp/>generate<sp/>some<sp/>abstract<sp/>code:</highlight></codeline>
<codeline lineno="466"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="467"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="468"><highlight class="comment">//!<sp/>//<sp/>Simple<sp/>function<sp/>that<sp/>generates<sp/>dword<sp/>copy.</highlight></codeline>
<codeline lineno="469"><highlight class="comment">//!<sp/>void<sp/>genCopyDWord(BaseAssembler&amp;<sp/>a,<sp/>const<sp/>GpReg&amp;<sp/>dst,<sp/>const<sp/>GpReg&amp;<sp/>src,<sp/>const<sp/>GpReg&amp;<sp/>tmp)</highlight></codeline>
<codeline lineno="470"><highlight class="comment">//!<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="comment">//!<sp/><sp/><sp/>a.mov(tmp,<sp/>dword_ptr(src));</highlight></codeline>
<codeline lineno="472"><highlight class="comment">//!<sp/><sp/><sp/>a.mov(dword_ptr(dst),<sp/>tmp);</highlight></codeline>
<codeline lineno="473"><highlight class="comment">//!<sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="475"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="476"><highlight class="comment">//!<sp/>This<sp/>function<sp/>can<sp/>be<sp/>called<sp/>like<sp/>&lt;code&gt;genCopyDWord(a,<sp/>edi,<sp/>esi,<sp/>ebx)&lt;/code&gt;</highlight></codeline>
<codeline lineno="477"><highlight class="comment">//!<sp/>or<sp/>by<sp/>using<sp/>existing<sp/>@ref<sp/>GpReg<sp/>instances.<sp/>This<sp/>abstraction<sp/>allows<sp/>to<sp/>join</highlight></codeline>
<codeline lineno="478"><highlight class="comment">//!<sp/>more<sp/>code<sp/>sections<sp/>together<sp/>without<sp/>rewriting<sp/>each<sp/>to<sp/>use<sp/>specific<sp/>registers.</highlight></codeline>
<codeline lineno="479"><highlight class="comment">//!<sp/>You<sp/>need<sp/>to<sp/>take<sp/>care<sp/>only<sp/>about<sp/>implicit<sp/>registers<sp/>which<sp/>may<sp/>be<sp/>used<sp/>by</highlight></codeline>
<codeline lineno="480"><highlight class="comment">//!<sp/>several<sp/>instructions<sp/>(like<sp/>mul,<sp/>imul,<sp/>div,<sp/>idiv,<sp/>shifting,<sp/>etc...).</highlight></codeline>
<codeline lineno="481"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="482"><highlight class="comment">//!<sp/>Next,<sp/>more<sp/>advanced,<sp/>but<sp/>often<sp/>needed<sp/>technique<sp/>is<sp/>that<sp/>you<sp/>can<sp/>build<sp/>your</highlight></codeline>
<codeline lineno="483"><highlight class="comment">//!<sp/>own<sp/>registers<sp/>allocator.<sp/>X86<sp/>architecture<sp/>contains<sp/>8<sp/>general<sp/>purpose<sp/>registers,</highlight></codeline>
<codeline lineno="484"><highlight class="comment">//!<sp/>8<sp/>Mm<sp/>registers<sp/>and<sp/>8<sp/>Xmm<sp/>registers.<sp/>The<sp/>X64<sp/>(AMD64)<sp/>architecture<sp/>extends<sp/>count</highlight></codeline>
<codeline lineno="485"><highlight class="comment">//!<sp/>of<sp/>Gp<sp/>registers<sp/>and<sp/>Xmm<sp/>registers<sp/>to<sp/>16.<sp/>Use<sp/>the<sp/>@c<sp/>kRegCountBase<sp/>constant<sp/>to</highlight></codeline>
<codeline lineno="486"><highlight class="comment">//!<sp/>get<sp/>count<sp/>of<sp/>Gp<sp/>or<sp/>Xmm<sp/>registers<sp/>or<sp/>@c<sp/>kRegCountGp,<sp/>@c<sp/>kRegCountMm<sp/>and<sp/>@c</highlight></codeline>
<codeline lineno="487"><highlight class="comment">//!<sp/>kRegCountXmm<sp/>constants<sp/>individually.</highlight></codeline>
<codeline lineno="488"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="489"><highlight class="comment">//!<sp/>To<sp/>build<sp/>register<sp/>from<sp/>index<sp/>(value<sp/>from<sp/>0<sp/>inclusive<sp/>to<sp/>kRegNumXXX</highlight></codeline>
<codeline lineno="490"><highlight class="comment">//!<sp/>exclusive)<sp/>use<sp/>@ref<sp/>gpd(),<sp/>@ref<sp/>gpq()<sp/>or<sp/>@ref<sp/>gpz()<sp/>functions.<sp/>To<sp/>create</highlight></codeline>
<codeline lineno="491"><highlight class="comment">//!<sp/>a<sp/>8<sp/>or<sp/>16-bit<sp/>register<sp/>use<sp/>@ref<sp/>gpw(),<sp/>@ref<sp/>gpb_lo()<sp/>or<sp/>@ref<sp/>gpb_hi().</highlight></codeline>
<codeline lineno="492"><highlight class="comment">//!<sp/>To<sp/>create<sp/>other<sp/>registers<sp/>there<sp/>are<sp/>similar<sp/>methods<sp/>like<sp/>@ref<sp/>mm(),<sp/>@ref<sp/>xmm()</highlight></codeline>
<codeline lineno="493"><highlight class="comment">//!<sp/>and<sp/>@ref<sp/>fp().</highlight></codeline>
<codeline lineno="494"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="495"><highlight class="comment">//!<sp/>So<sp/>our<sp/>function<sp/>call<sp/>to<sp/>genCopyDWord<sp/>can<sp/>be<sp/>also<sp/>used<sp/>like<sp/>this:</highlight></codeline>
<codeline lineno="496"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="497"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="498"><highlight class="comment">//!<sp/>genCopyDWord(a,<sp/>gpd(kRegIndexDi),<sp/>gpd(kRegIndexSi),<sp/>gpd(kRegIndexBx));</highlight></codeline>
<codeline lineno="499"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="500"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="501"><highlight class="comment">//!<sp/>kRegIndexXXX<sp/>are<sp/>constants<sp/>defined<sp/>by<sp/>@ref<sp/>kRegIndex<sp/>enum.<sp/>You<sp/>can<sp/>use<sp/>your</highlight></codeline>
<codeline lineno="502"><highlight class="comment">//!<sp/>own<sp/>register<sp/>allocator<sp/>(or<sp/>register<sp/>slot<sp/>manager)<sp/>to<sp/>alloc<sp/>/<sp/>free<sp/>registers</highlight></codeline>
<codeline lineno="503"><highlight class="comment">//!<sp/>so<sp/>kRegIndexXXX<sp/>values<sp/>can<sp/>be<sp/>replaced<sp/>by<sp/>your<sp/>variables<sp/>(0<sp/>to<sp/>kRegNumXXX-1).</highlight></codeline>
<codeline lineno="504"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="505"><highlight class="comment">//!<sp/>@sa<sp/>@ref<sp/>Compiler.</highlight></codeline>
<codeline lineno="506" refid="structasmjit_1_1x86x64_1_1X86X64Assembler" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler" kindref="compound" tooltip="X86/X64 assembler.">X86X64Assembler</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler" kindref="compound" tooltip="Base assembler.">BaseAssembler</ref><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler" kindref="compound" tooltip="X86/X64 assembler.">X86X64Assembler</ref>(<ref refid="structasmjit_1_1BaseRuntime" kindref="compound" tooltip="Base runtime.">BaseRuntime</ref>*<sp/>runtime);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~X86X64Assembler();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Label]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/>//!<sp/>@override.</highlight></codeline>
<codeline lineno="519"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a03342dd0dfa785b87d02d150842ab240" kindref="member" tooltip=".">_bind</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Embed]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>8-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="526" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a391bc9aaa86e0b02bb1578e88071a0b4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a391bc9aaa86e0b02bb1578e88071a0b4" kindref="member" tooltip="Add 8-bit integer data to the instuction stream.">db</ref>(uint8_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/>1);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>16-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="528" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9700e7c9c60f6908bfb51e57fd3f95f0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9700e7c9c60f6908bfb51e57fd3f95f0" kindref="member" tooltip="Add 16-bit integer data to the instuction stream.">dw</ref>(uint16_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/>2);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>32-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="530" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a00b0a761b66db630d66cf41b24817454" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a00b0a761b66db630d66cf41b24817454" kindref="member" tooltip="Add 32-bit integer data to the instuction stream.">dd</ref>(uint32_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/>4);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>64-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="532" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab39a64fc66a4ba0e0888fdb30d0d7d23" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab39a64fc66a4ba0e0888fdb30d0d7d23" kindref="member" tooltip="Add 64-bit integer data to the instuction stream.">dq</ref>(uint64_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/>8);<sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>8-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="535" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8b00e0e0808638f1c0f006fdd5d3221b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8b00e0e0808638f1c0f006fdd5d3221b" kindref="member" tooltip="Add 8-bit integer data to the instuction stream.">dint8</ref>(int8_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int8_t));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>8-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="537" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a31d7aaf4d9ad53790eef763815861fb9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a31d7aaf4d9ad53790eef763815861fb9" kindref="member" tooltip="Add 8-bit integer data to the instuction stream.">duint8</ref>(uint8_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint8_t));<sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>16-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="540" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adce534e2886dc85d43a58b95c718f7a8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adce534e2886dc85d43a58b95c718f7a8" kindref="member" tooltip="Add 16-bit integer data to the instuction stream.">dint16</ref>(int16_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int16_t));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>16-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="542" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab48365aac5ae63b2715e038e95bcd2d7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab48365aac5ae63b2715e038e95bcd2d7" kindref="member" tooltip="Add 16-bit integer data to the instuction stream.">duint16</ref>(uint16_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t));<sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>32-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="545" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a797ea3afee7522e86ecc75724b1105b2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a797ea3afee7522e86ecc75724b1105b2" kindref="member" tooltip="Add 32-bit integer data to the instuction stream.">dint32</ref>(int32_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>32-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="547" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9a4cfc87cbd158f75569e1b022c20e06" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9a4cfc87cbd158f75569e1b022c20e06" kindref="member" tooltip="Add 32-bit integer data to the instuction stream.">duint32</ref>(uint32_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t));<sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>64-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="550" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab4277d803ab640caae8170159b073273" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab4277d803ab640caae8170159b073273" kindref="member" tooltip="Add 64-bit integer data to the instuction stream.">dint64</ref>(int64_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>64-bit<sp/>integer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="552" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa5c4e115675af304ee530a1524db2799" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa5c4e115675af304ee530a1524db2799" kindref="member" tooltip="Add 64-bit integer data to the instuction stream.">duint64</ref>(uint64_t<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t));<sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>float<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="555" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a492d7c017a53c2100d9d4dfee26708a3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a492d7c017a53c2100d9d4dfee26708a3" kindref="member" tooltip="Add float data to the instuction stream.">dfloat</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>double<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="557" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad49c2c9937b3117dd738d39ebe1cbb55" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad49c2c9937b3117dd738d39ebe1cbb55" kindref="member" tooltip="Add double data to the instuction stream.">ddouble</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));<sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>pointer<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="560" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a05cae54708c937155806c9163d1b200d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a05cae54708c937155806c9163d1b200d" kindref="member" tooltip="Add pointer data to the instuction stream.">dptr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*));<sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>Mm<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="563" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a68555681970dabb5526f095d38be6062" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a68555681970dabb5526f095d38be6062" kindref="member" tooltip="Add Mm data to the instuction stream.">dmm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionasmjit_1_1Vec64Data" kindref="compound" tooltip="64-bit vector register data.">MmData</ref>&amp;<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionasmjit_1_1Vec64Data" kindref="compound" tooltip="64-bit vector register data.">MmData</ref>));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>Xmm<sp/>data<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="565" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aad35a23b0a0bb58adb027716a551d6c3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aad35a23b0a0bb58adb027716a551d6c3" kindref="member" tooltip="Add Xmm data to the instuction stream.">dxmm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionasmjit_1_1Vec128Data" kindref="compound" tooltip="128-bit vector register data.">XmmData</ref>&amp;<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="unionasmjit_1_1Vec128Data" kindref="compound" tooltip="128-bit vector register data.">XmmData</ref>));<sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>data<sp/>in<sp/>a<sp/>given<sp/>structure<sp/>instance<sp/>to<sp/>the<sp/>instuction<sp/>stream.</highlight></codeline>
<codeline lineno="568"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="569" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5b953f91dce73078b860882be8fa687c" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5b953f91dce73078b860882be8fa687c" kindref="member" tooltip="Add data in a given structure instance to the instuction stream.">dstruct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>x)<sp/>{<sp/><ref refid="structasmjit_1_1BaseAssembler_1a2bfa219dec130116f562581fce67c05b" kindref="member" tooltip="Embed data into the code buffer.">embed</ref>(&amp;x,<sp/>static_cast&lt;uint32_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)));<sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Embed<sp/>absolute<sp/>label<sp/>pointer<sp/>(4<sp/>or<sp/>8<sp/>bytes).</highlight></codeline>
<codeline lineno="572"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9b6551b9ce0558cf5488e4ee96965f66" kindref="member" tooltip="Embed absolute label pointer (4 or 8 bytes).">embedLabel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>op);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Align]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Align<sp/>target<sp/>buffer<sp/>to<sp/>@a<sp/>m<sp/>bytes.</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/><sp/>//!<sp/>Typical<sp/>usage<sp/>of<sp/>this<sp/>is<sp/>to<sp/>align<sp/>labels<sp/>at<sp/>start<sp/>of<sp/>the<sp/>inner<sp/>loops.</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/>//!<sp/>Inserts<sp/>@c<sp/>nop()<sp/>instructions<sp/>or<sp/>CPU<sp/>optimized<sp/>NOPs.</highlight></codeline>
<codeline lineno="583"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aad93ad4c447740fac276ff4d44dc7b17" kindref="member" tooltip="Align target buffer to m bytes.">_align</ref>(uint32_t<sp/>m);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Options]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Force<sp/>short<sp/>form<sp/>of<sp/>jmp/jcc/other<sp/>instruction.</highlight></codeline>
<codeline lineno="590" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac90cd9a5dd8e8f2ef05a91ba2ce06206" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac90cd9a5dd8e8f2ef05a91ba2ce06206" kindref="member" tooltip="Force short form of jmp/jcc/other instruction.">short_</ref>()</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca3f497bb7cd655089b1e5470867cbc187" kindref="member" tooltip="Emit short form of the instruction.">kInstOptionShortForm</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Force<sp/>long<sp/>form<sp/>of<sp/>jmp/jcc/other<sp/>instruction.</highlight></codeline>
<codeline lineno="594" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad07b9845dec35f20d615ffc524af078a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad07b9845dec35f20d615ffc524af078a" kindref="member" tooltip="Force long form of jmp/jcc/other instruction.">long_</ref>()</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca0914ab67e09d24f2e0c0d512b70c7f08" kindref="member" tooltip="Emit long form of the instruction.">kInstOptionLongForm</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Condition<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>taken.</highlight></codeline>
<codeline lineno="598" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a535457b9596539d18821acf82c33d6e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a535457b9596539d18821acf82c33d6e7" kindref="member" tooltip="Condition is likely to be taken.">taken</ref>()</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4df01d78f89add2e942ec79ad211a4f5" kindref="member" tooltip="Condition is likely to be taken (instruction).">kInstOptionTaken</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Condition<sp/>is<sp/>unlikely<sp/>to<sp/>be<sp/>taken.</highlight></codeline>
<codeline lineno="602" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aecb7e0529403c55576b6968d80af2c01" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aecb7e0529403c55576b6968d80af2c01" kindref="member" tooltip="Condition is unlikely to be taken.">notTaken</ref>()</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4c436f33ba83c4df5948e49e01a5ef67" kindref="member" tooltip="Condition is unlikely to be taken (instruction).">kInstOptionNotTaken</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Lock<sp/>prefix.</highlight></codeline>
<codeline lineno="606" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a658225aaf041bd3642399b5a6e6cbb4d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a658225aaf041bd3642399b5a6e6cbb4d" kindref="member" tooltip="Lock prefix.">lock</ref>()</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa438db3f8e9ef167e318d3ae4b0043f71" kindref="member" tooltip="Emit instruction with LOCK prefix.">kInstOptionLock</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Base<sp/>Instructions]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>with<sp/>Carry.</highlight></codeline>
<codeline lineno="614" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a09bb8604db0966492eebbea6ff822bb4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a09bb8604db0966492eebbea6ff822bb4" kindref="member" tooltip="Add with Carry.">adc</ref>,<sp/>kInstAdc,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="616" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9307732fa4890ce51ade771f665b08f1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a09bb8604db0966492eebbea6ff822bb4" kindref="member" tooltip="Add with Carry.">adc</ref>,<sp/>kInstAdc,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="618" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adace07476380737a357ef0bfb1c27de2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(adc,<sp/>kInstAdc,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="619"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="620" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac6cc436a518032741404c4fb06b46374" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(adc,<sp/>kInstAdc,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="622" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a311bcdf872fffbe14ac20a0747747709" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(adc,<sp/>kInstAdc,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add.</highlight></codeline>
<codeline lineno="625" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adf17346a934ca1ceef39faf2e5ee0613" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adf17346a934ca1ceef39faf2e5ee0613" kindref="member" tooltip="Add.">add</ref>,<sp/>kInstAdd,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="627" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a123e9debe131db86b590774e8bc7274e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(add,<sp/>kInstAdd,<sp/>GpReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="629" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5c36fa922da5c95c9004c4f74b63516f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(add,<sp/>kInstAdd,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="631" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa36d85712c894d1c6c4a5366ccd3ad3f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(add,<sp/>kInstAdd,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="633" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a054a7c1ce066cc2fc4cb463adc824e67" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(add,<sp/>kInstAdd,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And.</highlight></codeline>
<codeline lineno="636" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a585e196347ced0242f8fe82a70732a95" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a585e196347ced0242f8fe82a70732a95" kindref="member" tooltip="And.">and_</ref>,<sp/>kInstAnd,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="638" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac84d11297d20c98ac684820f34ef5556" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(and_,<sp/>kInstAnd,<sp/>GpReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="640" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6d90774d51cab52957d1804509c2554e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(and_,<sp/>kInstAnd,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="642" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae78d25229629e648235d848376fbb760" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(and_,<sp/>kInstAnd,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="644" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a784623b64c88ff2fe374d825187154da" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(and_,<sp/>kInstAnd,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>scan<sp/>forward.</highlight></codeline>
<codeline lineno="647" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa35dcdd080d05c94d808f7c5eda8257c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa35dcdd080d05c94d808f7c5eda8257c" kindref="member" tooltip="Bit scan forward.">bsf</ref>,<sp/>kInstBsf,<sp/>GpReg,<sp/>GpReg,<sp/>!o0.isGpb())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="649" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a02bcff5e21fb10025abacc9892e4214f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(bsf,<sp/>kInstBsf,<sp/>GpReg,<sp/>Mem,<sp/>!o0.isGpb())</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>scan<sp/>reverse.</highlight></codeline>
<codeline lineno="652" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a77afba1dc7861b0cd19abd4380dde9ee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a77afba1dc7861b0cd19abd4380dde9ee" kindref="member" tooltip="Bit scan reverse.">bsr</ref>,<sp/>kInstBsr,<sp/>GpReg,<sp/>GpReg,<sp/>!o0.isGpb())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="654" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7ae5ea82792ea4689341c96f715a1330" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(bsr,<sp/>kInstBsr,<sp/>GpReg,<sp/>Mem,<sp/>!o0.isGpb())</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Byte<sp/>swap<sp/>(32-bit<sp/>or<sp/>64-bit<sp/>registers<sp/>only)<sp/>(i486).</highlight></codeline>
<codeline lineno="657" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a129b39773ab0e6c4845623cd1f6edcf3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a129b39773ab0e6c4845623cd1f6edcf3" kindref="member" tooltip="Byte swap (32-bit or 64-bit registers only) (i486).">bswap</ref>,<sp/>kInstBswap,<sp/>GpReg,<sp/>o0.getSize()<sp/>&gt;=<sp/>4)</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>test.</highlight></codeline>
<codeline lineno="660" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a80c2b6c30ae88ef782cdc9ac9d775ac4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a80c2b6c30ae88ef782cdc9ac9d775ac4" kindref="member" tooltip="Bit test.">bt</ref>,<sp/>kInstBt,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="662" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a547a3eebce32cc1a984224d445aa20c4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(bt,<sp/>kInstBt,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="664" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7cbf4d867dd41dd3426395ed66e20e57" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(bt,<sp/>kInstBt,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="666" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2a74087c8c60c53df4193287ea66c8e5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(bt,<sp/>kInstBt,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>test<sp/>and<sp/>complement.</highlight></codeline>
<codeline lineno="669" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac648815ccd11ef9699b4f7d1c15534ad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac648815ccd11ef9699b4f7d1c15534ad" kindref="member" tooltip="Bit test and complement.">btc</ref>,<sp/>kInstBtc,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="671" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae2e213b533713ae676d1966e47482966" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(btc,<sp/>kInstBtc,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="673" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6de90e2e4b7b9669acd10cd06a156072" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(btc,<sp/>kInstBtc,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="675" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6b2fb605c78486fa826bce649456ba4c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(btc,<sp/>kInstBtc,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>test<sp/>and<sp/>reset.</highlight></codeline>
<codeline lineno="678" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5c81b2592b719d30f13b220eb2331089" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5c81b2592b719d30f13b220eb2331089" kindref="member" tooltip="Bit test and reset.">btr</ref>,<sp/>kInstBtr,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="680" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae2c03d765ec1a5cad8bada4a6d6e52b5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(btr,<sp/>kInstBtr,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="682" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a238aa7ba59db624f71965d756c982413" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(btr,<sp/>kInstBtr,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="684" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a38d9ff918a3710343f541f81c356a8d8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(btr,<sp/>kInstBtr,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bit<sp/>test<sp/>and<sp/>set.</highlight></codeline>
<codeline lineno="687" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7e5eff364723db63dba7aafdedc1f990" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7e5eff364723db63dba7aafdedc1f990" kindref="member" tooltip="Bit test and set.">bts</ref>,<sp/>kInstBts,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="689" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a74980fc08024273cf9073a32c77505ab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(bts,<sp/>kInstBts,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="691" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad365312413c3cdebd92d8674ac5c38a7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(bts,<sp/>kInstBts,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="693" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad6c58d271a99fd229590abb1994e0f0c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(bts,<sp/>kInstBts,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Call.</highlight></codeline>
<codeline lineno="696" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a55e12c1fd997bee8416f92d7f047434f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a55e12c1fd997bee8416f92d7f047434f" kindref="member" tooltip="Call.">call</ref>,<sp/>kInstCall,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="698" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2d5b9717e9e2de4e9d5b3c93c8063abe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(call,<sp/>kInstCall,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="700" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36c326b99f1e261ed6cd90d1fd5d4371" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(call,<sp/>kInstCall,<sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="702" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa457456ddcfd231041031cb8fdce8f3a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(call,<sp/>kInstCall,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="704" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9cd3b8d4b380346122e62750248bb276" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>call(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9cd3b8d4b380346122e62750248bb276" kindref="member">call</ref>(<ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>((intptr_t)dst));<sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>carry<sp/>flag.</highlight></codeline>
<codeline lineno="707" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a06f398d2713daa5a7eaa4c13e6938200" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a06f398d2713daa5a7eaa4c13e6938200" kindref="member" tooltip="Clear carry flag.">clc</ref>,<sp/>kInstClc)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>direction<sp/>flag.</highlight></codeline>
<codeline lineno="709" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5a2fbf6d104e5792af3c660b19130d39" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5a2fbf6d104e5792af3c660b19130d39" kindref="member" tooltip="Clear direction flag.">cld</ref>,<sp/>kInstCld)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Complement<sp/>carry<sp/>flag.</highlight></codeline>
<codeline lineno="711" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8d485e7cbc50040f04b1a8084e7adbfb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8d485e7cbc50040f04b1a8084e7adbfb" kindref="member" tooltip="Complement carry flag.">cmc</ref>,<sp/>kInstCmc)</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>byte<sp/>to<sp/>word<sp/>(AX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>AL).</highlight></codeline>
<codeline lineno="714" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1c410d4d7dc54525faa3e45fd6132b23" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1c410d4d7dc54525faa3e45fd6132b23" kindref="member" tooltip="Convert byte to word (AX &amp;lt;- Sign Extend AL).">cbw</ref>,<sp/>kInstCbw)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>word<sp/>to<sp/>dword<sp/>(DX:AX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>AX).</highlight></codeline>
<codeline lineno="716" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acb275bcb47545d8c506af0a575d35de5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acb275bcb47545d8c506af0a575d35de5" kindref="member" tooltip="Convert word to dword (DX:AX &amp;lt;- Sign Extend AX).">cwd</ref>,<sp/>kInstCwd)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>word<sp/>to<sp/>dword<sp/>(EAX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>AX).</highlight></codeline>
<codeline lineno="718" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abb918ac12b4fd98037d6cbb43ae2222d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abb918ac12b4fd98037d6cbb43ae2222d" kindref="member" tooltip="Convert word to dword (EAX &amp;lt;- Sign Extend AX).">cwde</ref>,<sp/>kInstCwde)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>dword<sp/>to<sp/>qword<sp/>(EDX:EAX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>EAX).</highlight></codeline>
<codeline lineno="720" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a40bb116dd5492e9b3346d26b8a1df867" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a40bb116dd5492e9b3346d26b8a1df867" kindref="member" tooltip="Convert dword to qword (EDX:EAX &amp;lt;- Sign Extend EAX).">cdq</ref>,<sp/>kInstCdq)</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Conditional<sp/>move.</highlight></codeline>
<codeline lineno="723" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abdaef7ae610657fa7b235386bc487d8c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2cc(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abdaef7ae610657fa7b235386bc487d8c" kindref="member" tooltip="Conditional move.">cmov</ref>,<sp/>kInstCmov,<sp/><ref refid="group__asmjit__x86x64_1gaa9be0c08ba25861309d0957d134c8c26" kindref="member" tooltip="Translate condition code cc to cmovcc instruction code.">condToCmovcc</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Conditional<sp/>move.</highlight></codeline>
<codeline lineno="725" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ace67993986709ce473147baf6bd2cfc8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2cc(cmov,<sp/>kInstCmov,<sp/>condToCmovcc,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>two<sp/>operands.</highlight></codeline>
<codeline lineno="728" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3f580891a731a5f667aa42c3636b598b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3f580891a731a5f667aa42c3636b598b" kindref="member" tooltip="Compare two operands.">cmp</ref>,<sp/>kInstCmp,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="730" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa43210fb12a06948c108b600a6313d85" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cmp,<sp/>kInstCmp,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="731"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="732" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aee776ac43b399fc63f1a2842578e3aa8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(cmp,<sp/>kInstCmp,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="734" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af1debfb0afef990268c44bcafeb966a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cmp,<sp/>kInstCmp,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="736" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9d3e95e5f33748a02e4568c3fc608514" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(cmp,<sp/>kInstCmp,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>and<sp/>exchange<sp/>(i486).</highlight></codeline>
<codeline lineno="739" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0555c6be6b6412e3938c9d06a36c9134" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0555c6be6b6412e3938c9d06a36c9134" kindref="member" tooltip="Compare and exchange (i486).">cmpxchg</ref>,<sp/>kInstCmpxchg,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="741" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4041b399d1e1ae8e45b2be72cbd9f68e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cmpxchg,<sp/>kInstCmpxchg,<sp/>Mem,<sp/>GpReg)</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compares<sp/>the<sp/>64-bit<sp/>value<sp/>in<sp/>EDX:EAX<sp/>with<sp/>the<sp/>memory<sp/>operand<sp/>(Pentium).</highlight></codeline>
<codeline lineno="744" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3d7e323d8ea8bb9b30782a23ee7b0284" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3d7e323d8ea8bb9b30782a23ee7b0284" kindref="member" tooltip="Compares the 64-bit value in EDX:EAX with the memory operand (Pentium).">cmpxchg8b</ref>,<sp/>kInstCmpxchg8b,<sp/>Mem)</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>CPU<sp/>identification<sp/>(i486).</highlight></codeline>
<codeline lineno="747" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abc78c56d4044004b42327af96fbb7df9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abc78c56d4044004b42327af96fbb7df9" kindref="member" tooltip="CPU identification (i486).">cpuid</ref>,<sp/>kInstCpuid)</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Accumulate<sp/>crc32<sp/>value<sp/>(polynomial<sp/>0x11EDC6F41)<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="750" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2abcd2f5c396a2ba0aa968467e4465aa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2abcd2f5c396a2ba0aa968467e4465aa" kindref="member" tooltip="Accumulate crc32 value (polynomial 0x11EDC6F41) (SSE4.2).">crc32</ref>,<sp/>kInstCrc32,<sp/>GpReg,<sp/>GpReg,<sp/>o0.isRegType(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>)<sp/>||<sp/>o0.isRegType(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>))</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="752" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a60d72a484631faf737594d606a129922" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(crc32,<sp/>kInstCrc32,<sp/>GpReg,<sp/>Mem,<sp/>o0.isRegType(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>)<sp/>||<sp/>o0.isRegType(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>))</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Decrement<sp/>by<sp/>1.</highlight></codeline>
<codeline lineno="755" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9a4f3b80edde834d618caa61284fabfa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9a4f3b80edde834d618caa61284fabfa" kindref="member" tooltip="Decrement by 1.">dec</ref>,<sp/>kInstDec,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="757" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a40f0bc1162ce30dcc1847ee79fada5f1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(dec,<sp/>kInstDec,<sp/>Mem)</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unsigned<sp/>divide<sp/>(xDX:xAX<sp/>&lt;-<sp/>xDX:xAX<sp/>/<sp/>o0).</highlight></codeline>
<codeline lineno="760" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1b103414ab939ddd8e60c955d4956440" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1b103414ab939ddd8e60c955d4956440" kindref="member" tooltip="Unsigned divide (xDX:xAX &amp;lt;- xDX:xAX / o0).">div</ref>,<sp/>kInstDiv,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="762" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36e6f25f420b006079c68f80ebc118bf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(div,<sp/>kInstDiv,<sp/>Mem)</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Make<sp/>stack<sp/>frame<sp/>for<sp/>procedure<sp/>parameters.</highlight></codeline>
<codeline lineno="765" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aeed513e1dc8ab8bd5238e09cf7c49519" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aeed513e1dc8ab8bd5238e09cf7c49519" kindref="member" tooltip="Make stack frame for procedure parameters.">enter</ref>,<sp/>kInstEnter,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>,<sp/>Imm)</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Signed<sp/>divide<sp/>(xDX:xAX<sp/>&lt;-<sp/>xDX:xAX<sp/>/<sp/>op).</highlight></codeline>
<codeline lineno="768" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a66d8cbde58404e3ec4c8b56edb236c60" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a66d8cbde58404e3ec4c8b56edb236c60" kindref="member" tooltip="Signed divide (xDX:xAX &amp;lt;- xDX:xAX / op).">idiv</ref>,<sp/>kInstIdiv,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="770" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adb6ed518a3802794e403a308e1b5d794" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(idiv,<sp/>kInstIdiv,<sp/>Mem)</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Signed<sp/>multiply<sp/>(xDX:xAX<sp/>&lt;-<sp/>xAX<sp/>*<sp/>o0).</highlight></codeline>
<codeline lineno="773" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a773d403234b30324816b4e741d1dc643" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a773d403234b30324816b4e741d1dc643" kindref="member" tooltip="Signed multiply (xDX:xAX &amp;lt;- xAX * o0).">imul</ref>,<sp/>kInstImul,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="775" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0553a37108f8e2815f94ac1ca6179635" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(imul,<sp/>kInstImul,<sp/>Mem)</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Signed<sp/>multiply.</highlight></codeline>
<codeline lineno="778" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5786ac5bf965455193f7c1b3b6cd5286" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(imul,<sp/>kInstImul,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="780" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a69e698e27aa9bcf26ee99847ac9ed288" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(imul,<sp/>kInstImul,<sp/>GpReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="782" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a726b902661c9e322a5cfcba5873f071a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(imul,<sp/>kInstImul,<sp/>GpReg,<sp/>Imm)</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Signed<sp/>multiply.</highlight></codeline>
<codeline lineno="785" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adc4a3f0a5e849b0d0fff2e676745b7d9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(imul,<sp/>kInstImul,<sp/>GpReg,<sp/>GpReg,<sp/>Imm)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="787" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad483ce1e554362986db6c566417a830d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(imul,<sp/>kInstImul,<sp/>GpReg,<sp/>Mem,<sp/>Imm)</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Increment<sp/>by<sp/>1.</highlight></codeline>
<codeline lineno="790" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adcafdf4783d90f84ca36b478c1c384df" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adcafdf4783d90f84ca36b478c1c384df" kindref="member" tooltip="Increment by 1.">inc</ref>,<sp/>kInstInc,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="792" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a23d85c0accdad2d6bc511784c6cd2f10" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(inc,<sp/>kInstInc,<sp/>Mem)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Interrupt.</highlight></codeline>
<codeline lineno="795" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1a6f8c89def17cb4f1f412d2be48c3e8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1a6f8c89def17cb4f1f412d2be48c3e8" kindref="member" tooltip="Interrupt.">int_</ref>,<sp/>kInstInt,<sp/>Imm)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Interrupt<sp/>3<sp/>-<sp/>trap<sp/>to<sp/>debugger.</highlight></codeline>
<codeline lineno="797" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acfa98159b7a7ca19320dd1ed71c9045d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acfa98159b7a7ca19320dd1ed71c9045d" kindref="member" tooltip="Interrupt 3 - trap to debugger.">int3</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1a6f8c89def17cb4f1f412d2be48c3e8" kindref="member" tooltip="Interrupt.">int_</ref>(3);<sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Jump<sp/>to<sp/>label<sp/>@a<sp/>label<sp/>if<sp/>condition<sp/>@a<sp/>cc<sp/>is<sp/>met.</highlight></codeline>
<codeline lineno="800" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8bcda3b9efc7f942fd66b78075edc54d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1cc(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8bcda3b9efc7f942fd66b78075edc54d" kindref="member" tooltip="Jump to label label if condition cc is met.">j</ref>,<sp/>kInstJ,<sp/><ref refid="group__asmjit__x86x64_1ga6c8d2f90a1fb96f9a6002c0b70458e5e" kindref="member" tooltip="Translate condition code cc to jcc instruction code.">condToJcc</ref>,<sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>)</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Jump.</highlight></codeline>
<codeline lineno="803" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a679c333a1db76a27d01750db323e08c6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a679c333a1db76a27d01750db323e08c6" kindref="member" tooltip="Jump.">jmp</ref>,<sp/>kInstJmp,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="805" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7a1dca6f50fa5c46a9a9021e24ac23dc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(jmp,<sp/>kInstJmp,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/>//!<sp/>@overload.</highlight></codeline>
<codeline lineno="807" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3acda7b1fe809841783a45125c9ef0e5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(jmp,<sp/>kInstJmp,<sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="809" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2b16f297b7a23165cedbee329e925ec7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(jmp,<sp/>kInstJmp,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="810"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="811" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a08e8fbb1ae7ba1cdb7081a93b766b721" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>jmp(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a08e8fbb1ae7ba1cdb7081a93b766b721" kindref="member">jmp</ref>(<ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>((intptr_t)dst));<sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>AH<sp/>from<sp/>flags.</highlight></codeline>
<codeline lineno="814" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a209547ed81c2d3022ba6949a2bbc433d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a209547ed81c2d3022ba6949a2bbc433d" kindref="member" tooltip="Load AH from flags.">lahf</ref>,<sp/>kInstLahf)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Load<sp/>effective<sp/>address</highlight></codeline>
<codeline lineno="817" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aacb33a55c07a087aff6f228ed065258e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aacb33a55c07a087aff6f228ed065258e" kindref="member" tooltip="Load effective address.">lea</ref>,<sp/>kInstLea,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>High<sp/>level<sp/>procedure<sp/>exit.</highlight></codeline>
<codeline lineno="820" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac63f50d62bb05660721ad5b3fe117791" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac63f50d62bb05660721ad5b3fe117791" kindref="member" tooltip="High level procedure exit.">leave</ref>,<sp/>kInstLeave)</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move.</highlight></codeline>
<codeline lineno="823" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac65612674f48c7708fdac79c4b5f436a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac65612674f48c7708fdac79c4b5f436a" kindref="member" tooltip="Move.">mov</ref>,<sp/>kInstMov,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="825" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0b84f3e3792e897309082af29cb8ceac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="827" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af2bb8dc3c05648652ae3f4fe888438ef" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(mov,<sp/>kInstMov,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="829" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1b1daeca44ec515c44b9f6e607ac1677" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="831" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a296314439a02c6eec281cf4bb73be854" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(mov,<sp/>kInstMov,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>from<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="834" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac866bbbd762c4826542ea2da105e9999" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="836" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aaf5341332e825cfe0b1652d2043dbee0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/>Mem,<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>to<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="838" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4e9569b4444951415032da1ecc813ff1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref>,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="840" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8f40e60bbbd688026d53afd1eaf4871a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mov,<sp/>kInstMov,<sp/>SegReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>(AL|AX|EAX|RAX<sp/>&lt;-<sp/>absolute<sp/>address<sp/>in<sp/>immediate).</highlight></codeline>
<codeline lineno="843" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a56217e58a951d3cb74f80756e6b0cd06" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a56217e58a951d3cb74f80756e6b0cd06" kindref="member" tooltip="Move (AL|AX|EAX|RAX &amp;lt;- absolute address in immediate).">mov_ptr</ref>(const<sp/>GpReg&amp;<sp/>dst,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(dst.getRegIndex()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>(static_cast&lt;int64_t&gt;((intptr_t)src));</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a60de9faf6ee0db06d416085299149969" kindref="member" tooltip="Emit an instruction.">emit</ref>(kInstMovptr,<sp/>dst,<sp/>imm);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>(absolute<sp/>address<sp/>in<sp/>immediate<sp/>&lt;-<sp/>AL|AX|EAX|RAX).</highlight></codeline>
<codeline lineno="851" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad639320b46f8172702a3ed1c9079a402" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad639320b46f8172702a3ed1c9079a402" kindref="member" tooltip="Move (absolute address in immediate &amp;lt;- AL|AX|EAX|RAX).">mov_ptr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(src.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>(static_cast&lt;int64_t&gt;((intptr_t)dst));</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1a60de9faf6ee0db06d416085299149969" kindref="member" tooltip="Emit an instruction.">emit</ref>(kInstMovptr,<sp/>imm,<sp/>src);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="858"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>data<sp/>after<sp/>dwapping<sp/>bytes<sp/>(SSE3<sp/>-<sp/>Atom).</highlight></codeline>
<codeline lineno="859" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aca9bdfb4f7c271c474cf40e1fcba6ec9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aca9bdfb4f7c271c474cf40e1fcba6ec9" kindref="member" tooltip="Move data after dwapping bytes (SSE3 - Atom).">movbe</ref>,<sp/>kInstMovbe,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>!o0.isGpb());</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="861" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aaadf7773074aa74ec769fe96107d7e8e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aca9bdfb4f7c271c474cf40e1fcba6ec9" kindref="member" tooltip="Move data after dwapping bytes (SSE3 - Atom).">movbe</ref>,<sp/>kInstMovbe,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>,<sp/>!o1.<ref refid="structasmjit_1_1x86x64_1_1X86Reg_1aa9836fe8c258fdec6873a417f87d851b" kindref="member" tooltip="Get whether the register is Gp byte (8-bit) register.">isGpb</ref>());</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>with<sp/>sign-extension.</highlight></codeline>
<codeline lineno="864" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7456d0f3691a8c5360e57bc2c77f8b0a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7456d0f3691a8c5360e57bc2c77f8b0a" kindref="member" tooltip="Move with sign-extension.">movsx</ref>,<sp/>kInstMovsx,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="866" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a38e13eef2c3b8981eb59172a17a2005d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7456d0f3691a8c5360e57bc2c77f8b0a" kindref="member" tooltip="Move with sign-extension.">movsx</ref>,<sp/>kInstMovsx,<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>with<sp/>zero-extension.</highlight></codeline>
<codeline lineno="869" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1328dd2fdae2c765ae899674f29daefd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1328dd2fdae2c765ae899674f29daefd" kindref="member" tooltip="Move with zero-extension.">movzx</ref>,<sp/>kInstMovzx,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="870"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="871" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af829d4912646885ad2d03d4eaccb240d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movzx,<sp/>kInstMovzx,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unsigned<sp/>multiply<sp/>(xDX:xAX<sp/>&lt;-<sp/>xAX<sp/>*<sp/>o0).</highlight></codeline>
<codeline lineno="874" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a60259d8ef4b0bb4b17d3e98362c57f06" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a60259d8ef4b0bb4b17d3e98362c57f06" kindref="member" tooltip="Unsigned multiply (xDX:xAX &amp;lt;- xAX * o0).">mul</ref>,<sp/>kInstMul,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="876" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5302e42b7c1d7f54c3f224889a86e141" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(mul,<sp/>kInstMul,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Two&apos;s<sp/>complement<sp/>negation.</highlight></codeline>
<codeline lineno="879" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acfe381dce41a9439aca7a034573636ee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acfe381dce41a9439aca7a034573636ee" kindref="member" tooltip="Two&amp;#39;s complement negation.">neg</ref>,<sp/>kInstNeg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="881" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abd7e480ee74bf3f98d25fa7dd8b9581b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(neg,<sp/>kInstNeg,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>No<sp/>operation.</highlight></codeline>
<codeline lineno="884" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a47f8a553fc5f4840b85418e91ebf89c7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a47f8a553fc5f4840b85418e91ebf89c7" kindref="member" tooltip="No operation.">nop</ref>,<sp/>kInstNop)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>One&apos;s<sp/>complement<sp/>negation.</highlight></codeline>
<codeline lineno="887" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab7798ce53180bedd43da933cf857f139" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab7798ce53180bedd43da933cf857f139" kindref="member" tooltip="One&amp;#39;s complement negation.">not_</ref>,<sp/>kInstNot,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="889" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a73cbdc2ce4827a177718fae6ec016c2f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(not_,<sp/>kInstNot,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Or.</highlight></codeline>
<codeline lineno="892" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a012b22121616f658f25af1a7bcd1b52f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a012b22121616f658f25af1a7bcd1b52f" kindref="member" tooltip="Or.">or_</ref>,<sp/>kInstOr,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="893"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="894" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af1b775e8e08580467f1aea2ea3e1706b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(or_,<sp/>kInstOr,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="895"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="896" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aca40799a27099ca1e939dbcbacd9f3bd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(or_,<sp/>kInstOr,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="898" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a607e45011d2542f9cedf6015dbe73722" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(or_,<sp/>kInstOr,<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="900" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5908964cd7ed4392fd406ea64f58cff0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(or_,<sp/>kInstOr,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pop<sp/>a<sp/>value<sp/>from<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="903" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a739d705cd9917fd0a50140ac0b05893b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a739d705cd9917fd0a50140ac0b05893b" kindref="member" tooltip="Pop a value from the stack.">pop</ref>,<sp/>kInstPop,<sp/>GpReg,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/><ref refid="structasmjit_1_1CodeGen_1acbfa512e3ec91bff2364d868d2da3280" kindref="member" tooltip="Get the default register size of the architecture (4 or 8 bytes).">_regSize</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="905" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5e65442d7a0d67defa6f31245a838383" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(pop,<sp/>kInstPop,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/><ref refid="structasmjit_1_1CodeGen_1acbfa512e3ec91bff2364d868d2da3280" kindref="member" tooltip="Get the default register size of the architecture (4 or 8 bytes).">_regSize</ref>)</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="907"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pop<sp/>a<sp/>segment<sp/>register<sp/>from<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="908"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>There<sp/>is<sp/>no<sp/>instruction<sp/>to<sp/>pop<sp/>a<sp/>cs<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="910" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3c0cfa4b21e43352ddedb24f725a64fe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(pop,<sp/>kInstPop,<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref>,<sp/>o0.getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a494414df2b04066d2da5b876e563a97e" kindref="member" tooltip="Cs segment.">kSegCs</ref>);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pop<sp/>stack<sp/>into<sp/>EFLAGS<sp/>register<sp/>(32-bit<sp/>or<sp/>64-bit).</highlight></codeline>
<codeline lineno="913" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a82da8b3f86564a77f4195227f070ab2b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a82da8b3f86564a77f4195227f070ab2b" kindref="member" tooltip="Pop stack into EFLAGS register (32-bit or 64-bit).">popf</ref>,<sp/>kInstPopf)</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return<sp/>the<sp/>count<sp/>of<sp/>number<sp/>of<sp/>bits<sp/>set<sp/>to<sp/>1<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="916" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a65fa96a4c1b614cce89eab7505af8a9b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a65fa96a4c1b614cce89eab7505af8a9b" kindref="member" tooltip="Return the count of number of bits set to 1 (SSE4.2).">popcnt</ref>,<sp/>kInstPopcnt,<sp/>GpReg,<sp/>GpReg,<sp/>!o0.isGpb()<sp/>&amp;&amp;<sp/>o0.getRegType()<sp/>==<sp/>o1.getRegType())</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="918" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a00eaac477eb482b1e55e4c00bb01e1a7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(popcnt,<sp/>kInstPopcnt,<sp/>GpReg,<sp/>Mem,<sp/>!o0.isGpb())</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>word/dword/qword<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="921" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a128a78f4e29313580e6c727d420d2946" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a128a78f4e29313580e6c727d420d2946" kindref="member" tooltip="Push word/dword/qword on the stack.">push</ref>,<sp/>kInstPush,<sp/>GpReg,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/><ref refid="structasmjit_1_1CodeGen_1acbfa512e3ec91bff2364d868d2da3280" kindref="member" tooltip="Get the default register size of the architecture (4 or 8 bytes).">_regSize</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>word/dword/qword<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="923" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab9774b1f116c234b0857b60f3a5e7643" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(push,<sp/>kInstPush,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/><ref refid="structasmjit_1_1CodeGen_1acbfa512e3ec91bff2364d868d2da3280" kindref="member" tooltip="Get the default register size of the architecture (4 or 8 bytes).">_regSize</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>segment<sp/>register<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="925" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afeb94572447f52773db71cf51ef21f85" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(push,<sp/>kInstPush,<sp/>SegReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>word/dword/qword<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="927" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3577b057387f08b7ec71444034f2f217" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1i(push,<sp/>kInstPush,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>EFLAGS<sp/>register<sp/>(32-bit<sp/>or<sp/>64-bit)<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="930" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aeaa8376163f5d21d7031af67a207b2d8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aeaa8376163f5d21d7031af67a207b2d8" kindref="member" tooltip="Push EFLAGS register (32-bit or 64-bit) on the stack.">pushf</ref>,<sp/>kInstPushf)</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@a<sp/>o1<sp/>register<sp/>can<sp/>be<sp/>only<sp/>@c<sp/>cl.</highlight></codeline>
<codeline lineno="935" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0fd4011d019b35fbca7047f048211586" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0fd4011d019b35fbca7047f048211586" kindref="member" tooltip="Rotate bits left.">rcl</ref>,<sp/>kInstRcl,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="937" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a641d9acfeae3d0c117b1742ec210352c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rcl,<sp/>kInstRcl,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="939" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4f8ead574f4c13a05c6f234b24c09508" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rcl,<sp/>kInstRcl,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="941" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a269edf51cfae07af52b48df0e7cc129a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rcl,<sp/>kInstRcl,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@a<sp/>o1<sp/>register<sp/>can<sp/>be<sp/>only<sp/>@c<sp/>cl.</highlight></codeline>
<codeline lineno="946" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aafec59d5dde65388109357dc31629203" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aafec59d5dde65388109357dc31629203" kindref="member" tooltip="Rotate bits right.">rcr</ref>,<sp/>kInstRcr,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="948" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a861341a87e266b8ea7d7b6932300d882" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rcr,<sp/>kInstRcr,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="950" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a975205c7b64e5f6f75131567e2eed3fa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rcr,<sp/>kInstRcr,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="952" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aac0f176bb4f9697d181d65ce6a325657" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rcr,<sp/>kInstRcr,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Read<sp/>time-stamp<sp/>counter<sp/>(Pentium).</highlight></codeline>
<codeline lineno="955" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7bcd218d9e3f85bd651aa0fde62111b5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7bcd218d9e3f85bd651aa0fde62111b5" kindref="member" tooltip="Read time-stamp counter (Pentium).">rdtsc</ref>,<sp/>kInstRdtsc)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Read<sp/>time-stamp<sp/>counter<sp/>and<sp/>processor<sp/>id<sp/>(Pentium).</highlight></codeline>
<codeline lineno="957" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a01570ca32fa10e6742dc027d114787b7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a01570ca32fa10e6742dc027d114787b7" kindref="member" tooltip="Read time-stamp counter and processor id (Pentium).">rdtscp</ref>,<sp/>kInstRdtscp)</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>ECX/RCX<sp/>bytes<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>AL.</highlight></codeline>
<codeline lineno="960" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a813f374dcebaf99bd88128637dc2f24c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a813f374dcebaf99bd88128637dc2f24c" kindref="member" tooltip="Load ECX/RCX bytes from DS:[ESI/RSI] to AL.">rep_lodsb</ref>,<sp/>kInstRepLodsb)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>ECX/RCX<sp/>dwords<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>EAX.</highlight></codeline>
<codeline lineno="962" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad7f56299d2be1236307901f5253efa51" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad7f56299d2be1236307901f5253efa51" kindref="member" tooltip="Load ECX/RCX dwords from DS:[ESI/RSI] to EAX.">rep_lodsd</ref>,<sp/>kInstRepLodsd)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>ECX/RCX<sp/>Words<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>AX.</highlight></codeline>
<codeline lineno="964" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a56150da369090b27a10af53162ecc002" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a56150da369090b27a10af53162ecc002" kindref="member" tooltip="Load ECX/RCX Words from DS:[ESI/RSI] to AX.">rep_lodsw</ref>,<sp/>kInstRepLodsw)</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>ECX/RCX<sp/>bytes<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="967" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afdf4c8362786adf1b66abd325250d764" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afdf4c8362786adf1b66abd325250d764" kindref="member" tooltip="Move ECX/RCX bytes from DS:[ESI/RSI] to ES:[EDI/RDI].">rep_movsb</ref>,<sp/>kInstRepMovsb)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>ECX/RCX<sp/>dwords<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="969" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4f6d12cf30fc8b41c047ef4496ba9457" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4f6d12cf30fc8b41c047ef4496ba9457" kindref="member" tooltip="Move ECX/RCX dwords from DS:[ESI/RSI] to ES:[EDI/RDI].">rep_movsd</ref>,<sp/>kInstRepMovsd)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>ECX/RCX<sp/>words<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="971" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae6e2f87fc9c5fb772d5051cabbc09269" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae6e2f87fc9c5fb772d5051cabbc09269" kindref="member" tooltip="Move ECX/RCX words from DS:[ESI/RSI] to ES:[EDI/RDI].">rep_movsw</ref>,<sp/>kInstRepMovsw)</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fill<sp/>ECX/RCX<sp/>bytes<sp/>at<sp/>ES:[EDI/RDI]<sp/>with<sp/>AL.</highlight></codeline>
<codeline lineno="974" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9471851f26a731b9a0a70f3cf50b9ce3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9471851f26a731b9a0a70f3cf50b9ce3" kindref="member" tooltip="Fill ECX/RCX bytes at ES:[EDI/RDI] with AL.">rep_stosb</ref>,<sp/>kInstRepStosb)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fill<sp/>ECX/RCX<sp/>dwords<sp/>at<sp/>ES:[EDI/RDI]<sp/>with<sp/>EAX.</highlight></codeline>
<codeline lineno="976" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9e7bea0f4db79b70cdcf396d1bf600be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9e7bea0f4db79b70cdcf396d1bf600be" kindref="member" tooltip="Fill ECX/RCX dwords at ES:[EDI/RDI] with EAX.">rep_stosd</ref>,<sp/>kInstRepStosd)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fill<sp/>ECX/RCX<sp/>words<sp/>at<sp/>ES:[EDI/RDI]<sp/>with<sp/>AX.</highlight></codeline>
<codeline lineno="978" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a03f8de12f4cac87c6c07aef836193830" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a03f8de12f4cac87c6c07aef836193830" kindref="member" tooltip="Fill ECX/RCX words at ES:[EDI/RDI] with AX.">rep_stosw</ref>,<sp/>kInstRepStosw)</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>bytes<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="981" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac45296ac53772fa2df30889d2a582b4a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac45296ac53772fa2df30889d2a582b4a" kindref="member" tooltip="Repeated find nonmatching bytes in ES:[EDI/RDI] and DS:[ESI/RDI].">repe_cmpsb</ref>,<sp/>kInstRepeCmpsb)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>dwords<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="983" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af6ea05290bca0b3deeb957e40cb869cd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af6ea05290bca0b3deeb957e40cb869cd" kindref="member" tooltip="Repeated find nonmatching dwords in ES:[EDI/RDI] and DS:[ESI/RDI].">repe_cmpsd</ref>,<sp/>kInstRepeCmpsd)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>words<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="985" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2f469a24c4024f4c28a83184d843bfba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2f469a24c4024f4c28a83184d843bfba" kindref="member" tooltip="Repeated find nonmatching words in ES:[EDI/RDI] and DS:[ESI/RDI].">repe_cmpsw</ref>,<sp/>kInstRepeCmpsw)</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="987"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>non-AL<sp/>byte<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="988" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2f68732f1e09ec7cb1c17a337d7658ba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2f68732f1e09ec7cb1c17a337d7658ba" kindref="member" tooltip="Find non-AL byte starting at ES:[EDI/RDI].">repe_scasb</ref>,<sp/>kInstRepeScasb)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>non-EAX<sp/>dword<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="990" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3510e55661f7a2db258a4f968e463c10" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3510e55661f7a2db258a4f968e463c10" kindref="member" tooltip="Find non-EAX dword starting at ES:[EDI/RDI].">repe_scasd</ref>,<sp/>kInstRepeScasd)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>non-AX<sp/>word<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="992" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0f0c557b2976e87e47d064f34343c23a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0f0c557b2976e87e47d064f34343c23a" kindref="member" tooltip="Find non-AX word starting at ES:[EDI/RDI].">repe_scasw</ref>,<sp/>kInstRepeScasw)</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>bytes<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="995" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af7faae42f969839e100edccdba98aa46" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af7faae42f969839e100edccdba98aa46" kindref="member" tooltip="Repeated find nonmatching bytes in ES:[EDI/RDI] and DS:[ESI/RDI].">repne_cmpsb</ref>,<sp/>kInstRepneCmpsb)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>dwords<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="997" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a01d274347fd08664c3b967517fe4f5bd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a01d274347fd08664c3b967517fe4f5bd" kindref="member" tooltip="Repeated find nonmatching dwords in ES:[EDI/RDI] and DS:[ESI/RDI].">repne_cmpsd</ref>,<sp/>kInstRepneCmpsd)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>words<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="999" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad643126d9c1279e3406db49822a47020" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad643126d9c1279e3406db49822a47020" kindref="member" tooltip="Repeated find nonmatching words in ES:[EDI/RDI] and DS:[ESI/RDI].">repne_cmpsw</ref>,<sp/>kInstRepneCmpsw)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>AL,<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1002" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1affb0f23f696c9388aa6cee8d3db24652" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1affb0f23f696c9388aa6cee8d3db24652" kindref="member" tooltip="Find AL, starting at ES:[EDI/RDI].">repne_scasb</ref>,<sp/>kInstRepneScasb)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>EAX,<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1004" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aba93950d9c77109b588f956c7ab0f123" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aba93950d9c77109b588f956c7ab0f123" kindref="member" tooltip="Find EAX, starting at ES:[EDI/RDI].">repne_scasd</ref>,<sp/>kInstRepneScasd)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>AX,<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="1006" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab54cbac88c9cd2885fbd102fe58c90a8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab54cbac88c9cd2885fbd102fe58c90a8" kindref="member" tooltip="Find AX, starting at ES:[EDI/RDI].">repne_scasw</ref>,<sp/>kInstRepneScasw)</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return.</highlight></codeline>
<codeline lineno="1009" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa785d84603b3a06841eded0a7826b2cd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa785d84603b3a06841eded0a7826b2cd" kindref="member" tooltip="Return.">ret</ref>,<sp/>kInstRet)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1011" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9201a8c2b33b4dcb6498b48afa4958ec" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1i(ret,<sp/>kInstRet,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@a<sp/>o1<sp/>register<sp/>can<sp/>be<sp/>only<sp/>@c<sp/>cl.</highlight></codeline>
<codeline lineno="1016" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a96582e738a3b3f842066f5cc396e89f9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a96582e738a3b3f842066f5cc396e89f9" kindref="member" tooltip="Rotate bits left.">rol</ref>,<sp/>kInstRol,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1018" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa8b6ff8e881c25d785a37d79efe487df" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rol,<sp/>kInstRol,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="1020" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a180cf4bd0d7b8ea57698d7c3fcb37998" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rol,<sp/>kInstRol,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1022" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af1b9fc89fc2d2e0ececc771b0009d2e3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(rol,<sp/>kInstRol,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@a<sp/>o1<sp/>register<sp/>can<sp/>be<sp/>only<sp/>@c<sp/>cl.</highlight></codeline>
<codeline lineno="1027" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8d330b4c163d961c0bd0af8b7d0dcab5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8d330b4c163d961c0bd0af8b7d0dcab5" kindref="member" tooltip="Rotate bits right.">ror</ref>,<sp/>kInstRor,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1029" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a01f843b0643e4cad9921d3afed55e7f0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(ror,<sp/>kInstRor,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rotate<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="1031" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4789ea48c295a889d2850a1532d0ce34" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(ror,<sp/>kInstRor,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1033" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a93c327a037591993a4fcc621e9208645" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(ror,<sp/>kInstRor,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>AH<sp/>into<sp/>flags.</highlight></codeline>
<codeline lineno="1036" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab0bf528c5aff4b0efb3294e3d4451728" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab0bf528c5aff4b0efb3294e3d4451728" kindref="member" tooltip="Store AH into flags.">sahf</ref>,<sp/>kInstSahf)</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Integer<sp/>subtraction<sp/>with<sp/>borrow.</highlight></codeline>
<codeline lineno="1039" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36733f68538df32814bc1240841aa238" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36733f68538df32814bc1240841aa238" kindref="member" tooltip="Integer subtraction with borrow.">sbb</ref>,<sp/>kInstSbb,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1041" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a374a8ab528200f3f0f207f78dc6da6ba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sbb,<sp/>kInstSbb,<sp/>GpReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1043" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afe8c04fa10075150a62d5de1a95bdd38" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sbb,<sp/>kInstSbb,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1045" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afdbffb9b2301760fb3ff8208a9d8235d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sbb,<sp/>kInstSbb,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1047" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa8a89a48de2e3cb60db671ac28a6f949" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sbb,<sp/>kInstSbb,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="1050"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1051"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@a<sp/>o1<sp/>register<sp/>can<sp/>be<sp/>only<sp/>@c<sp/>cl.</highlight></codeline>
<codeline lineno="1052" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1ca0222b0b9b5b90b9908692d265d904" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1ca0222b0b9b5b90b9908692d265d904" kindref="member" tooltip="Shift bits left.">sal</ref>,<sp/>kInstSal,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1053"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1054" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5cbb03aa2f48de75c482962fd3ebe376" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sal,<sp/>kInstSal,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="1056" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af214fae96267726036ea8c9df1fdaf39" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sal,<sp/>kInstSal,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1058" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a08d0da8f72c004ce3636605c7583c213" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sal,<sp/>kInstSal,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1060"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@a<sp/>o1<sp/>register<sp/>can<sp/>be<sp/>only<sp/>@c<sp/>cl.</highlight></codeline>
<codeline lineno="1063" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a19bdf11acb846ded2b1337ed98c3308b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a19bdf11acb846ded2b1337ed98c3308b" kindref="member" tooltip="Shift bits right.">sar</ref>,<sp/>kInstSar,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1064"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1065" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad67d83a75af5b7ae4d6fdabb1b6f5370" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sar,<sp/>kInstSar,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="1067" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a67fe1e41fceb050b25a7a5ade03fed1a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sar,<sp/>kInstSar,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1069" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a13cfbcb1a049480ce0208aa68203ed4e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sar,<sp/>kInstSar,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>byte<sp/>on<sp/>condition.</highlight></codeline>
<codeline lineno="1072" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab263c44d72267fa0080837dd54b3c761" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1cc(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab263c44d72267fa0080837dd54b3c761" kindref="member" tooltip="Set byte on condition.">set</ref>,<sp/>kInstSet,<sp/><ref refid="group__asmjit__x86x64_1ga7360265365dd7ff27f275d5c50e3e4f6" kindref="member" tooltip="Translate condition code cc to setcc instruction code.">condToSetcc</ref>,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>byte<sp/>on<sp/>condition.</highlight></codeline>
<codeline lineno="1074" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5f4ebb4a06e56cd0487a8857f578b17a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1cc(set,<sp/>kInstSet,<sp/>condToSetcc,<sp/>Mem)</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@a<sp/>o1<sp/>register<sp/>can<sp/>be<sp/>only<sp/>@c<sp/>cl.</highlight></codeline>
<codeline lineno="1079" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2a625cbf9a77b2506b0fb0d1bec7f499" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2a625cbf9a77b2506b0fb0d1bec7f499" kindref="member" tooltip="Shift bits left.">shl</ref>,<sp/>kInstShl,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1081" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adae3ffb51af172a697caf277a78ea8f1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(shl,<sp/>kInstShl,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>left.</highlight></codeline>
<codeline lineno="1083" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6dafb2afece7af354470a1b926f011bb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(shl,<sp/>kInstShl,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1085" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a848be1399fce2abc63e2240ca3c654b6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(shl,<sp/>kInstShl,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@a<sp/>o1<sp/>register<sp/>can<sp/>be<sp/>only<sp/>@c<sp/>cl.</highlight></codeline>
<codeline lineno="1090" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a41bf786351f7b6caa71d3c972a34ef4b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a41bf786351f7b6caa71d3c972a34ef4b" kindref="member" tooltip="Shift bits right.">shr</ref>,<sp/>kInstShr,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1091"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1092" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a91a09009338435d4b8d0dee90a511ae7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(shr,<sp/>kInstShr,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1093"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shift<sp/>bits<sp/>right.</highlight></codeline>
<codeline lineno="1094" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a03d3b29bd7457fedb758157f606b688c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(shr,<sp/>kInstShr,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1096" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab8e44c03865f3d6387f5832c223f6c6d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(shr,<sp/>kInstShr,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Double<sp/>precision<sp/>shift<sp/>left.</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@a<sp/>o2<sp/>register<sp/>can<sp/>be<sp/>only<sp/>@c<sp/>cl<sp/>register.</highlight></codeline>
<codeline lineno="1101" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7773fd4212c470b6c3267724e2cba761" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7773fd4212c470b6c3267724e2cba761" kindref="member" tooltip="Double precision shift left.">shld</ref>,<sp/>kInstShld,<sp/>GpReg,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1103" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aaf4f0b22a615e69658c39a90f597ae2a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(shld,<sp/>kInstShld,<sp/>Mem,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1104"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Double<sp/>precision<sp/>shift<sp/>left.</highlight></codeline>
<codeline lineno="1105" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad573afa732ceb01aecec01919a5f7c02" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shld,<sp/>kInstShld,<sp/>GpReg,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1107" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a62b47e3edae80cc9ff5b1ce638c3dbdf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shld,<sp/>kInstShld,<sp/>Mem,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1109"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Double<sp/>precision<sp/>shift<sp/>right.</highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@a<sp/>o2<sp/>register<sp/>can<sp/>be<sp/>only<sp/>@c<sp/>cl<sp/>register.</highlight></codeline>
<codeline lineno="1112" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a73fdeb741a3da855f8d7dd126f8d0fd5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a73fdeb741a3da855f8d7dd126f8d0fd5" kindref="member" tooltip="Double precision shift right.">shrd</ref>,<sp/>kInstShrd,<sp/>GpReg,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1114" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6ed51697df9a30d7a143127e11161287" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(shrd,<sp/>kInstShrd,<sp/>Mem,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Double<sp/>precision<sp/>shift<sp/>right.</highlight></codeline>
<codeline lineno="1116" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a98dc718b2bd3e55e6fba153c76f0c88f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shrd,<sp/>kInstShrd,<sp/>GpReg,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1118" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a50a542de4d645479871427a8bc851a43" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shrd,<sp/>kInstShrd,<sp/>Mem,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>carry<sp/>flag<sp/>to<sp/>1.</highlight></codeline>
<codeline lineno="1121" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aec22c0778679f007780d41b3207c0927" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aec22c0778679f007780d41b3207c0927" kindref="member" tooltip="Set carry flag to 1.">stc</ref>,<sp/>kInstStc)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>direction<sp/>flag<sp/>to<sp/>1.</highlight></codeline>
<codeline lineno="1123" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a48beac4397c1fd86ff9d2c73e8866e37" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a48beac4397c1fd86ff9d2c73e8866e37" kindref="member" tooltip="Set direction flag to 1.">std</ref>,<sp/>kInstStd)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1125"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Subtract.</highlight></codeline>
<codeline lineno="1126" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a117a908a51de30b9cca7f7c6c506bb02" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a117a908a51de30b9cca7f7c6c506bb02" kindref="member" tooltip="Subtract.">sub</ref>,<sp/>kInstSub,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1128" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a24e46bb6c8bfac7f258ad876f2221316" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sub,<sp/>kInstSub,<sp/>GpReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1130" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0ba487e0d16ec482693a66179d88d9dc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sub,<sp/>kInstSub,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1132" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a99f1223892df9dc196108659b00c35d2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sub,<sp/>kInstSub,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1134" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a947303284b6a8d7c962c72fdf2f64915" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(sub,<sp/>kInstSub,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Logical<sp/>compare.</highlight></codeline>
<codeline lineno="1137" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7699830820a10662ca2485188173181e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7699830820a10662ca2485188173181e" kindref="member" tooltip="Logical compare.">test</ref>,<sp/>kInstTest,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1139" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac1f58c4a9132e07c9feae142eaa83a1b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(test,<sp/>kInstTest,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1141" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae678d7eaeebc731740f3b7be7b36369e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(test,<sp/>kInstTest,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1143" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9baec239f4c20af3ab32a46fab4fcd1a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(test,<sp/>kInstTest,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Undefined<sp/>instruction<sp/>-<sp/>Raise<sp/>#UD<sp/>exception.</highlight></codeline>
<codeline lineno="1146" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5043f0d900ff3dcfa5da023f055c649d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5043f0d900ff3dcfa5da023f055c649d" kindref="member" tooltip="Undefined instruction - Raise #UD exception.">ud2</ref>,<sp/>kInstUd2)</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Exchange<sp/>and<sp/>Add.</highlight></codeline>
<codeline lineno="1149" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad3dd940f3f305da92d530e5d8153a2d8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad3dd940f3f305da92d530e5d8153a2d8" kindref="member" tooltip="Exchange and Add.">xadd</ref>,<sp/>kInstXadd,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1150"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1151" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa1d96a4015f429092ffc68ac2f447713" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xadd,<sp/>kInstXadd,<sp/>Mem,<sp/>GpReg)</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Exchange<sp/>register/memory<sp/>with<sp/>register.</highlight></codeline>
<codeline lineno="1154" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab2f153cf8070f4d6b0aa9a9530ed3af6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab2f153cf8070f4d6b0aa9a9530ed3af6" kindref="member" tooltip="Exchange register/memory with register.">xchg</ref>,<sp/>kInstXchg,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1155"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1156" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae5867d1c285b63b8935d6b2ab3ff66b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xchg,<sp/>kInstXchg,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1158" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acfb6f19167588dba6a81df452df43850" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xchg,<sp/>kInstXchg,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xor.</highlight></codeline>
<codeline lineno="1161" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a25a297390d340c7fac57eebb6a6c3907" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a25a297390d340c7fac57eebb6a6c3907" kindref="member" tooltip="Xor.">xor_</ref>,<sp/>kInstXor,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1163" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7e0e7c584329fe087105c7bf96c874f8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xor_,<sp/>kInstXor,<sp/>GpReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1164"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1165" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae8463c99ae18d5ea368bcf901b237813" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(xor_,<sp/>kInstXor,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1167" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad55725f89f1d40d55bc4edecc34d5d62" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xor_,<sp/>kInstXor,<sp/>Mem,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1169" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af13f24f82178915218ae7697f5778f32" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(xor_,<sp/>kInstXor,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Fpu]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1175"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compute<sp/>2^x<sp/>-<sp/>1<sp/>(FPU).</highlight></codeline>
<codeline lineno="1176" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3f7fc1d4c4e5603bad7bd50b885aaf6a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3f7fc1d4c4e5603bad7bd50b885aaf6a" kindref="member" tooltip="Compute 2^x - 1 (FPU).">f2xm1</ref>,<sp/>kInstF2xm1)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1178"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Absolute<sp/>value<sp/>of<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1179" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad02f5263a01bcf0605293e46e8ad3130" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad02f5263a01bcf0605293e46e8ad3130" kindref="member" tooltip="Absolute value of fp0 (FPU).">fabs</ref>,<sp/>kInstFabs)</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1181"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>@a<sp/>o1<sp/>to<sp/>@a<sp/>o0<sp/>and<sp/>store<sp/>result<sp/>in<sp/>@a<sp/>o0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1182"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1183"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>One<sp/>of<sp/>dst<sp/>or<sp/>src<sp/>must<sp/>be<sp/>fp0.</highlight></codeline>
<codeline lineno="1184" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afa00e12bc7877ae59f313f0d270ef008" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afa00e12bc7877ae59f313f0d270ef008" kindref="member" tooltip="Add o1 to o0 and store result in o0 (FPU).">fadd</ref>,<sp/>kInstFadd,<sp/><ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound" tooltip="X86/X64 80-bit Fp register.">FpReg</ref>,<sp/>FpReg,<sp/>o0.getRegIndex()<sp/>==<sp/>0<sp/>||<sp/>o1.getRegIndex()<sp/>==<sp/>0)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>4-byte<sp/>or<sp/>8-byte<sp/>FP<sp/>@a<sp/>o0<sp/>to<sp/>fp0<sp/>and<sp/>store<sp/>result<sp/>in<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1186" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1a782bcd9c1f48c9b6e4c5ad2e225a39" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(fadd,<sp/>kInstFadd,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1187"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>fp0<sp/>to<sp/>@a<sp/>o0<sp/>and<sp/>POP<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1188" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a98435cae3365a20a4a6bc77ebe47e074" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a332e05884bd83e037cc01dbce591b975" kindref="member">faddp</ref>,<sp/>kInstFaddp,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1189"><highlight class="comment"><sp/><sp/>//!<sp/>@overload.</highlight></codeline>
<codeline lineno="1190" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a332e05884bd83e037cc01dbce591b975" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(faddp,<sp/>kInstFaddp)</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>binary<sp/>coded<sp/>decimal<sp/>(FPU).</highlight></codeline>
<codeline lineno="1193" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad45a4aeda5c59a30103085780bdf8821" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad45a4aeda5c59a30103085780bdf8821" kindref="member" tooltip="Load binary coded decimal (FPU).">fbld</ref>,<sp/>kInstFbld,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>BCD<sp/>integer<sp/>and<sp/>Pop<sp/>(FPU).</highlight></codeline>
<codeline lineno="1195" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a15c93ea471ef906d3590184d52d7e8e1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a15c93ea471ef906d3590184d52d7e8e1" kindref="member" tooltip="Store BCD integer and Pop (FPU).">fbstp</ref>,<sp/>kInstFbstp,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Change<sp/>fp0<sp/>sign<sp/>(FPU).</highlight></codeline>
<codeline lineno="1197" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5c3ef97898e0b33af29dc150a0076d92" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5c3ef97898e0b33af29dc150a0076d92" kindref="member" tooltip="Change fp0 sign (FPU).">fchs</ref>,<sp/>kInstFchs)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1199"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>exceptions<sp/>(FPU).</highlight></codeline>
<codeline lineno="1200" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1c578819e1ca9f99895ea9f448196a2b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1c578819e1ca9f99895ea9f448196a2b" kindref="member" tooltip="Clear exceptions (FPU).">fclex</ref>,<sp/>kInstFclex)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>FP<sp/>Conditional<sp/>move<sp/>(FPU).</highlight></codeline>
<codeline lineno="1203" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ace6bac9107b09c09343e4c8fc7de2c8e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ace6bac9107b09c09343e4c8fc7de2c8e" kindref="member" tooltip="FP Conditional move (FPU).">fcmovb</ref>,<sp/>kInstFcmovb,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>FP<sp/>Conditional<sp/>move<sp/>(FPU).</highlight></codeline>
<codeline lineno="1205" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a619e16b969a37fa4cfc144dd9570e4f0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a619e16b969a37fa4cfc144dd9570e4f0" kindref="member" tooltip="FP Conditional move (FPU).">fcmovbe</ref>,<sp/>kInstFcmovbe,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1206"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>FP<sp/>Conditional<sp/>move<sp/>(FPU).</highlight></codeline>
<codeline lineno="1207" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aeab1eeacbfb6f5c791b132b07786402c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aeab1eeacbfb6f5c791b132b07786402c" kindref="member" tooltip="FP Conditional move (FPU).">fcmove</ref>,<sp/>kInstFcmove,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>FP<sp/>Conditional<sp/>move<sp/>(FPU).</highlight></codeline>
<codeline lineno="1209" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab17ecfc82d1a114c72ccab431f32c01c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab17ecfc82d1a114c72ccab431f32c01c" kindref="member" tooltip="FP Conditional move (FPU).">fcmovnb</ref>,<sp/>kInstFcmovnb,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1210"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>FP<sp/>Conditional<sp/>move<sp/>(FPU).</highlight></codeline>
<codeline lineno="1211" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3bd7d38d69a5182b49be692d07deb747" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3bd7d38d69a5182b49be692d07deb747" kindref="member" tooltip="FP Conditional move (FPU).">fcmovnbe</ref>,<sp/>kInstFcmovnbe,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1212"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>FP<sp/>Conditional<sp/>move<sp/>(FPU).</highlight></codeline>
<codeline lineno="1213" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af78135b6bc68664a20fde3a3e638b942" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af78135b6bc68664a20fde3a3e638b942" kindref="member" tooltip="FP Conditional move (FPU).">fcmovne</ref>,<sp/>kInstFcmovne,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>FP<sp/>Conditional<sp/>move<sp/>(FPU).</highlight></codeline>
<codeline lineno="1215" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2555b1028863f2e95afe76fe609f846f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2555b1028863f2e95afe76fe609f846f" kindref="member" tooltip="FP Conditional move (FPU).">fcmovnu</ref>,<sp/>kInstFcmovnu,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1216"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>FP<sp/>Conditional<sp/>move<sp/>(FPU).</highlight></codeline>
<codeline lineno="1217" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a817a07cfb7d1632d1d716fd2f8540b54" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a817a07cfb7d1632d1d716fd2f8540b54" kindref="member" tooltip="FP Conditional move (FPU).">fcmovu</ref>,<sp/>kInstFcmovu,<sp/>FpReg)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1219"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>fp0<sp/>with<sp/>@a<sp/>o0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1220" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a11ae9fdb6991834ae87cf4becd199804" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a85ba9551aa1a070fe939e4b2fcf85477" kindref="member" tooltip="Compare fp0 with fp1 (FPU).">fcom</ref>,<sp/>kInstFcom,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1221"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>fp0<sp/>with<sp/>fp1<sp/>(FPU).</highlight></codeline>
<codeline lineno="1222" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a85ba9551aa1a070fe939e4b2fcf85477" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(fcom,<sp/>kInstFcom)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1223"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>fp0<sp/>with<sp/>4-byte<sp/>or<sp/>8-byte<sp/>FP<sp/>at<sp/>@a<sp/>src<sp/>(FPU).</highlight></codeline>
<codeline lineno="1224" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a450fe3918fdf151d3ed6d5f2e23eefe3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(fcom,<sp/>kInstFcom,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>fp0<sp/>with<sp/>@a<sp/>o0<sp/>and<sp/>pop<sp/>the<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1226" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5673368bd48679fc3596b2a5599731fe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6ea26dc4e91fb4f7aba33873d0a0d61d" kindref="member" tooltip="Compare fp0 with fp1 and pop the stack (FPU).">fcomp</ref>,<sp/>kInstFcomp,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1227"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>fp0<sp/>with<sp/>fp1<sp/>and<sp/>pop<sp/>the<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1228" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6ea26dc4e91fb4f7aba33873d0a0d61d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(fcomp,<sp/>kInstFcomp)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1229"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>fp0<sp/>with<sp/>4-byte<sp/>or<sp/>8-byte<sp/>FP<sp/>at<sp/>@a<sp/>adr<sp/>and<sp/>pop<sp/>the<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1230" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a10b5a114fe43ba523be2aa177c6c7abc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(fcomp,<sp/>kInstFcomp,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1231"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>fp0<sp/>with<sp/>fp1<sp/>and<sp/>pop<sp/>register<sp/>stack<sp/>twice<sp/>(FPU).</highlight></codeline>
<codeline lineno="1232" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a01814c982a9d9656df6e732b77425bc4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a01814c982a9d9656df6e732b77425bc4" kindref="member" tooltip="Compare fp0 with fp1 and pop register stack twice (FPU).">fcompp</ref>,<sp/>kInstFcompp)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1233"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>fp0<sp/>and<sp/>@a<sp/>o0<sp/>and<sp/>Set<sp/>EFLAGS<sp/>(FPU).</highlight></codeline>
<codeline lineno="1234" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad68b10d2998821e121acf0456bbfc16c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad68b10d2998821e121acf0456bbfc16c" kindref="member" tooltip="Compare fp0 and o0 and Set EFLAGS (FPU).">fcomi</ref>,<sp/>kInstFcomi,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1235"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>fp0<sp/>and<sp/>@a<sp/>o0<sp/>and<sp/>Set<sp/>EFLAGS<sp/>and<sp/>pop<sp/>the<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1236" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0e19243ca4825953673705baa068ce20" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0e19243ca4825953673705baa068ce20" kindref="member" tooltip="Compare fp0 and o0 and Set EFLAGS and pop the stack (FPU).">fcomip</ref>,<sp/>kInstFcomip,<sp/>FpReg)</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1238"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Calculate<sp/>cosine<sp/>of<sp/>fp0<sp/>and<sp/>store<sp/>result<sp/>in<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1239" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a159699ee299ff9353ac2d68b351f85ad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a159699ee299ff9353ac2d68b351f85ad" kindref="member" tooltip="Calculate cosine of fp0 and store result in fp0 (FPU).">fcos</ref>,<sp/>kInstFcos)</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1241"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Decrement<sp/>stack-top<sp/>pointer<sp/>(FPU).</highlight></codeline>
<codeline lineno="1242" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a107af790357ea7f634b1bc1c68571c74" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a107af790357ea7f634b1bc1c68571c74" kindref="member" tooltip="Decrement stack-top pointer (FPU).">fdecstp</ref>,<sp/>kInstFdecstp)</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1244"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Divide<sp/>@a<sp/>o0<sp/>by<sp/>@a<sp/>o1<sp/>(FPU).</highlight></codeline>
<codeline lineno="1245"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1246"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>One<sp/>of<sp/>@a<sp/>o0<sp/>or<sp/>@a<sp/>o1<sp/>register<sp/>must<sp/>be<sp/>fp0.</highlight></codeline>
<codeline lineno="1247" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5a880bf7df28c43fa85d8be64d1cfe37" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5a880bf7df28c43fa85d8be64d1cfe37" kindref="member" tooltip="Divide o0 by o1 (FPU).">fdiv</ref>,<sp/>kInstFdiv,<sp/>FpReg,<sp/>FpReg,<sp/>o0.getRegIndex()<sp/>==<sp/>0<sp/>||<sp/>o1.getRegIndex()<sp/>==<sp/>0)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1248"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Divide<sp/>fp0<sp/>by<sp/>32-bit<sp/>or<sp/>64-bit<sp/>FP<sp/>value<sp/>(FPU).</highlight></codeline>
<codeline lineno="1249" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab3dea5ec3ac611f54b765a7fb16e76db" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(fdiv,<sp/>kInstFdiv,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1250"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Divide<sp/>@a<sp/>o0<sp/>by<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1251" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae5ee38bb6bc0cb6d3a9cd19b68b15e74" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a38ea53e8fde240aa95ec3f012b505b0d" kindref="member">fdivp</ref>,<sp/>kInstFdivp,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1252"><highlight class="comment"><sp/><sp/>//!<sp/>@overload.</highlight></codeline>
<codeline lineno="1253" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a38ea53e8fde240aa95ec3f012b505b0d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(fdivp,<sp/>kInstFdivp)</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1255"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reverse<sp/>divide<sp/>@a<sp/>o0<sp/>by<sp/>@a<sp/>o1<sp/>(FPU).</highlight></codeline>
<codeline lineno="1256"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1257"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>One<sp/>of<sp/>@a<sp/>o0<sp/>or<sp/>@a<sp/>src<sp/>register<sp/>must<sp/>be<sp/>fp0.</highlight></codeline>
<codeline lineno="1258" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac0d104e8222b75d79d56ae34e466f229" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac0d104e8222b75d79d56ae34e466f229" kindref="member" tooltip="Reverse divide o0 by o1 (FPU).">fdivr</ref>,<sp/>kInstFdivr,<sp/>FpReg,<sp/>FpReg,<sp/>o0.getRegIndex()<sp/>==<sp/>0<sp/>||<sp/>o1.getRegIndex()<sp/>==<sp/>0)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reverse<sp/>divide<sp/>fp0<sp/>by<sp/>32-bit<sp/>or<sp/>64-bit<sp/>FP<sp/>value<sp/>(FPU).</highlight></codeline>
<codeline lineno="1260" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3337604f4af377ca95fc2f5340549ace" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(fdivr,<sp/>kInstFdivr,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1261"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reverse<sp/>divide<sp/>@a<sp/>o0<sp/>by<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1262" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad98c21804253e29bdab18a976ddb58f1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a94c61045c2c98fc9e4dab8dd8158c394" kindref="member">fdivrp</ref>,<sp/>kInstFdivrp,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1263"><highlight class="comment"><sp/><sp/>//!<sp/>@overload.</highlight></codeline>
<codeline lineno="1264" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a94c61045c2c98fc9e4dab8dd8158c394" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(fdivrp,<sp/>kInstFdivrp)</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1266"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Free<sp/>FP<sp/>register<sp/>(FPU).</highlight></codeline>
<codeline lineno="1267"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1268"><highlight class="comment"><sp/><sp/>//!<sp/>Sets<sp/>the<sp/>tag<sp/>in<sp/>the<sp/>FPU<sp/>tag<sp/>register<sp/>associated<sp/>with<sp/>register<sp/>@a<sp/>o0</highlight></codeline>
<codeline lineno="1269"><highlight class="comment"><sp/><sp/>//!<sp/>to<sp/>empty<sp/>(11B).<sp/>The<sp/>contents<sp/>of<sp/>@a<sp/>o0<sp/>and<sp/>the<sp/>FPU<sp/>stack-top<sp/>pointer</highlight></codeline>
<codeline lineno="1270"><highlight class="comment"><sp/><sp/>//!<sp/>(TOP)<sp/>are<sp/>not<sp/>affected.</highlight></codeline>
<codeline lineno="1271" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2dd9ad45b02f4220f9ca772de38118ea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2dd9ad45b02f4220f9ca772de38118ea" kindref="member" tooltip="Free FP register (FPU).">ffree</ref>,<sp/>kInstFfree,<sp/>FpReg)</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1273"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>16-bit<sp/>or<sp/>32-bit<sp/>integer<sp/>to<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1274" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abab5588d0f3d6e1d7b94ac76ff4c5f58" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abab5588d0f3d6e1d7b94ac76ff4c5f58" kindref="member" tooltip="Add 16-bit or 32-bit integer to fp0 (FPU).">fiadd</ref>,<sp/>kInstFiadd,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1276"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>fp0<sp/>with<sp/>16-bit<sp/>or<sp/>32-bit<sp/>Integer<sp/>(FPU).</highlight></codeline>
<codeline lineno="1277" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aac3d921e0b7175e82bf21bbbd5b7732b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aac3d921e0b7175e82bf21bbbd5b7732b" kindref="member" tooltip="Compare fp0 with 16-bit or 32-bit Integer (FPU).">ficom</ref>,<sp/>kInstFicom,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/>4)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1278"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>fp0<sp/>with<sp/>16-bit<sp/>or<sp/>32-bit<sp/>Integer<sp/>and<sp/>pop<sp/>the<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1279" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abbd5fb8a56fa5acd3fb39d6005cfd976" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abbd5fb8a56fa5acd3fb39d6005cfd976" kindref="member" tooltip="Compare fp0 with 16-bit or 32-bit Integer and pop the stack (FPU).">ficomp</ref>,<sp/>kInstFicomp,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1281"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Divide<sp/>fp0<sp/>by<sp/>32-bit<sp/>or<sp/>16-bit<sp/>integer<sp/>(@a<sp/>src)<sp/>(FPU).</highlight></codeline>
<codeline lineno="1282" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a04d3c548635c17d2985cb3f0cd658d6c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a04d3c548635c17d2985cb3f0cd658d6c" kindref="member" tooltip="Divide fp0 by 32-bit or 16-bit integer (src) (FPU).">fidiv</ref>,<sp/>kInstFidiv,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/>4)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1283"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reverse<sp/>divide<sp/>fp0<sp/>by<sp/>32-bit<sp/>or<sp/>16-bit<sp/>integer<sp/>(@a<sp/>src)<sp/>(FPU).</highlight></codeline>
<codeline lineno="1284" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af7bed3fefd7cebd3521efb223cb3713b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af7bed3fefd7cebd3521efb223cb3713b" kindref="member" tooltip="Reverse divide fp0 by 32-bit or 16-bit integer (src) (FPU).">fidivr</ref>,<sp/>kInstFidivr,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>16-bit,<sp/>32-bit<sp/>or<sp/>64-bit<sp/>Integer<sp/>and<sp/>push<sp/>it<sp/>to<sp/>the<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1287" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a637e343d70a2b979f4534a82fc0fa036" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a637e343d70a2b979f4534a82fc0fa036" kindref="member" tooltip="Load 16-bit, 32-bit or 64-bit Integer and push it to the stack (FPU).">fild</ref>,<sp/>kInstFild,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/>4<sp/>||<sp/>o0.getSize()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1289"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>fp0<sp/>by<sp/>16-bit<sp/>or<sp/>32-bit<sp/>integer<sp/>and<sp/>store<sp/>it<sp/>to<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1290" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aed56f8ec52b6e96d37bd31ec7c20f753" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aed56f8ec52b6e96d37bd31ec7c20f753" kindref="member" tooltip="Multiply fp0 by 16-bit or 32-bit integer and store it to fp0 (FPU).">fimul</ref>,<sp/>kInstFimul,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Increment<sp/>stack-top<sp/>pointer<sp/>(FPU).</highlight></codeline>
<codeline lineno="1293" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aef6ccb3d7c7e575ae6c880aaa51c11d0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aef6ccb3d7c7e575ae6c880aaa51c11d0" kindref="member" tooltip="Increment stack-top pointer (FPU).">fincstp</ref>,<sp/>kInstFincstp)</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1295"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Initialize<sp/>FPU<sp/>(FPU).</highlight></codeline>
<codeline lineno="1296" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa55730caa3983d6737c57a1652649ba2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa55730caa3983d6737c57a1652649ba2" kindref="member" tooltip="Initialize FPU (FPU).">finit</ref>,<sp/>kInstFinit)</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1298"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Subtract<sp/>16-bit<sp/>or<sp/>32-bit<sp/>integer<sp/>from<sp/>fp0<sp/>and<sp/>store<sp/>result<sp/>to<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1299" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5b227ecfc1dd6b7a693e336e6576b8fc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5b227ecfc1dd6b7a693e336e6576b8fc" kindref="member" tooltip="Subtract 16-bit or 32-bit integer from fp0 and store result to fp0 (FPU).">fisub</ref>,<sp/>kInstFisub,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/>4)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reverse<sp/>subtract<sp/>16-bit<sp/>or<sp/>32-bit<sp/>integer<sp/>from<sp/>fp0<sp/>and<sp/>store<sp/>result<sp/>to<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1301" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a68e3e21da6fde8663fa6af7aa4e64fce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a68e3e21da6fde8663fa6af7aa4e64fce" kindref="member" tooltip="Reverse subtract 16-bit or 32-bit integer from fp0 and store result to fp0 (FPU).">fisubr</ref>,<sp/>kInstFisubr,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1303"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Initialize<sp/>FPU<sp/>without<sp/>checking<sp/>for<sp/>pending<sp/>unmasked<sp/>exceptions<sp/>(FPU).</highlight></codeline>
<codeline lineno="1304" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a744b993bc0836612038227b72dcf92bb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a744b993bc0836612038227b72dcf92bb" kindref="member" tooltip="Initialize FPU without checking for pending unmasked exceptions (FPU).">fninit</ref>,<sp/>kInstFninit)</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1306"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>fp0<sp/>as<sp/>16-bit<sp/>or<sp/>32-bit<sp/>Integer<sp/>to<sp/>@a<sp/>o0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1307" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3785969cbf95b665f13c350920256e73" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3785969cbf95b665f13c350920256e73" kindref="member" tooltip="Store fp0 as 16-bit or 32-bit Integer to o0 (FPU).">fist</ref>,<sp/>kInstFist,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/>4)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1308"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>fp0<sp/>as<sp/>16-bit,<sp/>32-bit<sp/>or<sp/>64-bit<sp/>Integer<sp/>to<sp/>@a<sp/>o0<sp/>and<sp/>pop<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1309" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab802b333ccdfc502099d339973f62d30" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab802b333ccdfc502099d339973f62d30" kindref="member" tooltip="Store fp0 as 16-bit, 32-bit or 64-bit Integer to o0 and pop stack (FPU).">fistp</ref>,<sp/>kInstFistp,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>2<sp/>||<sp/>o0.getSize()<sp/>==<sp/>4<sp/>||<sp/>o0.getSize()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1311"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>32-bit,<sp/>64-bit<sp/>or<sp/>80-bit<sp/>floating<sp/>point<sp/>value<sp/>on<sp/>the<sp/>FPU<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1312" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a606b21fccdb766ab4d29f2eb7ca3f70e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a606b21fccdb766ab4d29f2eb7ca3f70e" kindref="member" tooltip="Push 32-bit, 64-bit or 80-bit floating point value on the FPU register stack (FPU).">fld</ref>,<sp/>kInstFld,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>4<sp/>||<sp/>o0.getSize()<sp/>==<sp/>8<sp/>||<sp/>o0.getSize()<sp/>==<sp/>10)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1313"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>@a<sp/>o0<sp/>on<sp/>the<sp/>FPU<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1314" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab4274c647d9c45c6c2b9bb2e81be0d99" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(fld,<sp/>kInstFld,<sp/>FpReg)</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1316"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>+1.0<sp/>on<sp/>the<sp/>FPU<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1317" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7bafa7684e43dff769bb206c0d5af16b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7bafa7684e43dff769bb206c0d5af16b" kindref="member" tooltip="Push +1.0 on the FPU register stack (FPU).">fld1</ref>,<sp/>kInstFld1)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>log2(10)<sp/>on<sp/>the<sp/>FPU<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1319" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a28ab9e424781e237bd2eab22c2880e30" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a28ab9e424781e237bd2eab22c2880e30" kindref="member" tooltip="Push log2(10) on the FPU register stack (FPU).">fldl2t</ref>,<sp/>kInstFldl2t)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1320"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>log2(e)<sp/>on<sp/>the<sp/>FPU<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1321" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afae6e3b3c9040103a2f5cf2a9bec22db" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afae6e3b3c9040103a2f5cf2a9bec22db" kindref="member" tooltip="Push log2(e) on the FPU register stack (FPU).">fldl2e</ref>,<sp/>kInstFldl2e)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1322"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>pi<sp/>on<sp/>the<sp/>FPU<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1323" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0d2a70f5774d791b073cd5b5fea0a683" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0d2a70f5774d791b073cd5b5fea0a683" kindref="member" tooltip="Push pi on the FPU register stack (FPU).">fldpi</ref>,<sp/>kInstFldpi)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1324"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>log10(2)<sp/>on<sp/>the<sp/>FPU<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1325" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a37e0f0a811c65417a56dc1190c99817d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a37e0f0a811c65417a56dc1190c99817d" kindref="member" tooltip="Push log10(2) on the FPU register stack (FPU).">fldlg2</ref>,<sp/>kInstFldlg2)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1326"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>ln(2)<sp/>on<sp/>the<sp/>FPU<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1327" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aef0758b9c188b089a85e9f21d88c0eb2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aef0758b9c188b089a85e9f21d88c0eb2" kindref="member" tooltip="Push ln(2) on the FPU register stack (FPU).">fldln2</ref>,<sp/>kInstFldln2)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1328"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push<sp/>+0.0<sp/>on<sp/>the<sp/>FPU<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1329" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6904a3fcfbb051bd65461f178da129fe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6904a3fcfbb051bd65461f178da129fe" kindref="member" tooltip="Push +0.0 on the FPU register stack (FPU).">fldz</ref>,<sp/>kInstFldz)</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1331"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>x87<sp/>FPU<sp/>control<sp/>word<sp/>(2<sp/>bytes)<sp/>(FPU).</highlight></codeline>
<codeline lineno="1332" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8bce119e7fc6ec71a8038b9d8cc1d65b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8bce119e7fc6ec71a8038b9d8cc1d65b" kindref="member" tooltip="Load x87 FPU control word (2 bytes) (FPU).">fldcw</ref>,<sp/>kInstFldcw,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1333"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>x87<sp/>FPU<sp/>environment<sp/>(14<sp/>or<sp/>28<sp/>bytes)<sp/>(FPU).</highlight></codeline>
<codeline lineno="1334" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae29e81dc82681a76a1532c20e8ed551a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae29e81dc82681a76a1532c20e8ed551a" kindref="member" tooltip="Load x87 FPU environment (14 or 28 bytes) (FPU).">fldenv</ref>,<sp/>kInstFldenv,<sp/>Mem)</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1336"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>@a<sp/>o0<sp/>by<sp/>@a<sp/>o1<sp/>and<sp/>store<sp/>result<sp/>in<sp/>@a<sp/>o0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1337"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1338"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>One<sp/>of<sp/>dst<sp/>or<sp/>src<sp/>must<sp/>be<sp/>fp0.</highlight></codeline>
<codeline lineno="1339" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36a9cb0ff748a1fa67d1e1ba5e356c39" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36a9cb0ff748a1fa67d1e1ba5e356c39" kindref="member" tooltip="Multiply o0 by o1 and store result in o0 (FPU).">fmul</ref>,<sp/>kInstFmul,<sp/>FpReg,<sp/>FpReg,<sp/>o0.getRegIndex()<sp/>==<sp/>0<sp/>||<sp/>o1.getRegIndex()<sp/>==<sp/>0)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1340"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>fp0<sp/>by<sp/>32-bit<sp/>or<sp/>64-bit<sp/>@a<sp/>o0<sp/>and<sp/>store<sp/>result<sp/>in<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1341" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae9f6ac9f394d5110411fd56102f4df57" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(fmul,<sp/>kInstFmul,<sp/>Mem)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1343"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>fp0<sp/>by<sp/>@a<sp/>o0<sp/>and<sp/>POP<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1344" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a961a8f91af17582a2f260e7c90d55881" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abd38e20218f6be6e67f762a06fdd306e" kindref="member">fmulp</ref>,<sp/>kInstFmulp,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1345"><highlight class="comment"><sp/><sp/>//!<sp/>@overload.</highlight></codeline>
<codeline lineno="1346" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abd38e20218f6be6e67f762a06fdd306e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(fmulp,<sp/>kInstFmulp)</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1348"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clear<sp/>exceptions<sp/>(FPU).</highlight></codeline>
<codeline lineno="1349" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1fcb571cca1148102d078db08c14474d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1fcb571cca1148102d078db08c14474d" kindref="member" tooltip="Clear exceptions (FPU).">fnclex</ref>,<sp/>kInstFnclex)</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1351"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>No<sp/>operation<sp/>(FPU).</highlight></codeline>
<codeline lineno="1352" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a21d45bfaad8c94bc7a55875621ca04d6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a21d45bfaad8c94bc7a55875621ca04d6" kindref="member" tooltip="No operation (FPU).">fnop</ref>,<sp/>kInstFnop)</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1354"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Save<sp/>FPU<sp/>state<sp/>(FPU).</highlight></codeline>
<codeline lineno="1355" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a25d6b4db6eeb826ebed7f75159dc8d3e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a25d6b4db6eeb826ebed7f75159dc8d3e" kindref="member" tooltip="Save FPU state (FPU).">fnsave</ref>,<sp/>kInstFnsave,<sp/>Mem)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1357"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>x87<sp/>FPU<sp/>environment<sp/>(FPU).</highlight></codeline>
<codeline lineno="1358" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6662477a1d42b96900250dfd3e257d68" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6662477a1d42b96900250dfd3e257d68" kindref="member" tooltip="Store x87 FPU environment (FPU).">fnstenv</ref>,<sp/>kInstFnstenv,<sp/>Mem)</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1360"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>x87<sp/>FPU<sp/>control<sp/>word<sp/>(FPU).</highlight></codeline>
<codeline lineno="1361" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acec4eb3db346be537c4dbc408f82338a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acec4eb3db346be537c4dbc408f82338a" kindref="member" tooltip="Store x87 FPU control word (FPU).">fnstcw</ref>,<sp/>kInstFnstcw,<sp/>Mem)</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1363"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>x87<sp/>FPU<sp/>status<sp/>word<sp/>to<sp/>@a<sp/>o0<sp/>(AX)<sp/>(FPU).</highlight></codeline>
<codeline lineno="1364" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a77fe002f2357ef326b51d37b557e35ee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a77fe002f2357ef326b51d37b557e35ee" kindref="member" tooltip="Store x87 FPU status word to o0 (AX) (FPU).">fnstsw</ref>,<sp/>kInstFnstsw,<sp/>GpReg,<sp/>o0.isRegCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7088b937cbaa2114610046a308697d2e" kindref="member" tooltip="Gpw register.">kRegTypeGpw</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>))</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1365"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>x87<sp/>FPU<sp/>status<sp/>word<sp/>to<sp/>@a<sp/>o0<sp/>(2<sp/>bytes)<sp/>(FPU).</highlight></codeline>
<codeline lineno="1366" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2d0e2444c639aac5a00f1e897c3c088f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(fnstsw,<sp/>kInstFnstsw,<sp/>Mem)</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1368"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Calculate<sp/>arctan(fp1<sp/>/<sp/>fp0)<sp/>and<sp/>pop<sp/>the<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1369" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0659d1b85d0b5d12203a0b2e12f79da6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0659d1b85d0b5d12203a0b2e12f79da6" kindref="member" tooltip="Calculate arctan(fp1 / fp0) and pop the register stack (FPU).">fpatan</ref>,<sp/>kInstFpatan)</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1371"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Calculate<sp/>fprem(fp0,<sp/>fp1)<sp/>and<sp/>pop<sp/>the<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1372" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5ead7284ab096932c27b2877727df247" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5ead7284ab096932c27b2877727df247" kindref="member" tooltip="Calculate fprem(fp0, fp1) and pop the register stack (FPU).">fprem</ref>,<sp/>kInstFprem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1373"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Calculate<sp/>IEEE<sp/>fprem(fp0,<sp/>fp1)<sp/>and<sp/>pop<sp/>the<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1374" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a12235e33008b95304570f737f9f2c0be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a12235e33008b95304570f737f9f2c0be" kindref="member" tooltip="Calculate IEEE fprem(fp0, fp1) and pop the register stack (FPU).">fprem1</ref>,<sp/>kInstFprem1)</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1376"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Calculate<sp/>arctan(fp0)<sp/>and<sp/>pop<sp/>the<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1377" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa402d4553790ca02c334623a940ae5a8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa402d4553790ca02c334623a940ae5a8" kindref="member" tooltip="Calculate arctan(fp0) and pop the register stack (FPU).">fptan</ref>,<sp/>kInstFptan)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1378"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Round<sp/>fp0<sp/>to<sp/>Integer<sp/>(FPU).</highlight></codeline>
<codeline lineno="1379" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3682ce3effb6a744af3a8309675bcb4b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3682ce3effb6a744af3a8309675bcb4b" kindref="member" tooltip="Round fp0 to Integer (FPU).">frndint</ref>,<sp/>kInstFrndint)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1381"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Restore<sp/>FPU<sp/>state<sp/>from<sp/>@a<sp/>o0<sp/>(94<sp/>or<sp/>108<sp/>bytes)<sp/>(FPU).</highlight></codeline>
<codeline lineno="1382" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa318fc4326ac246531f3edaa85c95603" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa318fc4326ac246531f3edaa85c95603" kindref="member" tooltip="Restore FPU state from o0 (94 or 108 bytes) (FPU).">frstor</ref>,<sp/>kInstFrstor,<sp/>Mem)</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1384"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Save<sp/>FPU<sp/>state<sp/>to<sp/>@a<sp/>o0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1385"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1386"><highlight class="comment"><sp/><sp/>//!<sp/>Store<sp/>FPU<sp/>state<sp/>to<sp/>94<sp/>or<sp/>108-bytes<sp/>after<sp/>checking<sp/>for</highlight></codeline>
<codeline lineno="1387"><highlight class="comment"><sp/><sp/>//!<sp/>pending<sp/>unmasked<sp/>FP<sp/>exceptions.<sp/>Then<sp/>reinitialize</highlight></codeline>
<codeline lineno="1388"><highlight class="comment"><sp/><sp/>//!<sp/>the<sp/>FPU.</highlight></codeline>
<codeline lineno="1389" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad1f926049b6c0a676b48b7e24522d2d0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad1f926049b6c0a676b48b7e24522d2d0" kindref="member" tooltip="Save FPU state to o0 (FPU).">fsave</ref>,<sp/>kInstFsave,<sp/>Mem)</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1391"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scale<sp/>(FPU).</highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1393"><highlight class="comment"><sp/><sp/>//!<sp/>Scale<sp/>fp0<sp/>by<sp/>fp1.</highlight></codeline>
<codeline lineno="1394" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2c338d9878a541172f151f972a431057" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2c338d9878a541172f151f972a431057" kindref="member" tooltip="Scale (FPU).">fscale</ref>,<sp/>kInstFscale)</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1396"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Calculate<sp/>sine<sp/>of<sp/>fp0<sp/>and<sp/>store<sp/>result<sp/>in<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1397" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4b78463c463dca02c907d26558b2b447" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4b78463c463dca02c907d26558b2b447" kindref="member" tooltip="Calculate sine of fp0 and store result in fp0 (FPU).">fsin</ref>,<sp/>kInstFsin)</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1399"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Sine<sp/>and<sp/>cosine<sp/>(FPU).</highlight></codeline>
<codeline lineno="1400"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1401"><highlight class="comment"><sp/><sp/>//!<sp/>Compute<sp/>the<sp/>sine<sp/>and<sp/>cosine<sp/>of<sp/>fp0;<sp/>replace<sp/>fp0<sp/>with<sp/>the<sp/>sine</highlight></codeline>
<codeline lineno="1402"><highlight class="comment"><sp/><sp/>//!<sp/>and<sp/>push<sp/>the<sp/>cosine<sp/>on<sp/>the<sp/>register<sp/>stack.</highlight></codeline>
<codeline lineno="1403" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4a2cb918927a5eee662b25a0dbc57839" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4a2cb918927a5eee662b25a0dbc57839" kindref="member" tooltip="Sine and cosine (FPU).">fsincos</ref>,<sp/>kInstFsincos)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1405"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Square<sp/>root<sp/>(FPU).</highlight></codeline>
<codeline lineno="1406"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1407"><highlight class="comment"><sp/><sp/>//!<sp/>Calculates<sp/>square<sp/>root<sp/>of<sp/>fp0<sp/>and<sp/>stores<sp/>the<sp/>result<sp/>in<sp/>fp0.</highlight></codeline>
<codeline lineno="1408" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac5c424ebd03f444ecafc8ebc884902a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac5c424ebd03f444ecafc8ebc884902a9" kindref="member" tooltip="Square root (FPU).">fsqrt</ref>,<sp/>kInstFsqrt)</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1410"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>floating<sp/>point<sp/>value<sp/>(FPU).</highlight></codeline>
<codeline lineno="1411"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1412"><highlight class="comment"><sp/><sp/>//!<sp/>Store<sp/>fp0<sp/>as<sp/>32-bit<sp/>or<sp/>64-bit<sp/>floating<sp/>point<sp/>value<sp/>to<sp/>@a<sp/>o0.</highlight></codeline>
<codeline lineno="1413" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a23a518a11d5157adbbabd6771a791184" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a23a518a11d5157adbbabd6771a791184" kindref="member" tooltip="Store floating point value (FPU).">fst</ref>,<sp/>kInstFst,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>4<sp/>||<sp/>o0.getSize()<sp/>==<sp/>8)</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1415"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>floating<sp/>point<sp/>value<sp/>to<sp/>@a<sp/>o0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1416" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adc6eb43b22b359606315bc801eb54739" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(fst,<sp/>kInstFst,<sp/>FpReg)</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1418"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>floating<sp/>point<sp/>value<sp/>and<sp/>pop<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1419"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1420"><highlight class="comment"><sp/><sp/>//!<sp/>Store<sp/>fp0<sp/>as<sp/>32-bit<sp/>or<sp/>64-bit<sp/>floating<sp/>point<sp/>value<sp/>to<sp/>@a<sp/>o0</highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/><sp/>//!<sp/>and<sp/>pop<sp/>register<sp/>stack.</highlight></codeline>
<codeline lineno="1422" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7d537ac5b53a5d472ebd88ddf6e45008" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7d537ac5b53a5d472ebd88ddf6e45008" kindref="member" tooltip="Store floating point value and pop register stack (FPU).">fstp</ref>,<sp/>kInstFstp,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>4<sp/>||<sp/>o0.getSize()<sp/>==<sp/>8<sp/>||<sp/>o0.getSize()<sp/>==<sp/>10)</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1424"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>floating<sp/>point<sp/>value<sp/>and<sp/>pop<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1425"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1426"><highlight class="comment"><sp/><sp/>//!<sp/>Store<sp/>fp0<sp/>to<sp/>@a<sp/>o0<sp/>and<sp/>pop<sp/>register<sp/>stack.</highlight></codeline>
<codeline lineno="1427" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa6a96975edcb39bc3f1520b514089703" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(fstp,<sp/>kInstFstp,<sp/>FpReg)</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>x87<sp/>FPU<sp/>control<sp/>word<sp/>(FPU).</highlight></codeline>
<codeline lineno="1430"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1431"><highlight class="comment"><sp/><sp/>//!<sp/>Store<sp/>FPU<sp/>control<sp/>word<sp/>to<sp/>@a<sp/>o0<sp/>(2<sp/>bytes)<sp/>after<sp/>checking<sp/>for<sp/>pending</highlight></codeline>
<codeline lineno="1432"><highlight class="comment"><sp/><sp/>//!<sp/>unmasked<sp/>floating-point<sp/>exceptions.</highlight></codeline>
<codeline lineno="1433" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a986e2dd51ff655bd4fb5681e952d8d67" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a986e2dd51ff655bd4fb5681e952d8d67" kindref="member" tooltip="Store x87 FPU control word (FPU).">fstcw</ref>,<sp/>kInstFstcw,<sp/>Mem)</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1435"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>x87<sp/>FPU<sp/>environment<sp/>(FPU).</highlight></codeline>
<codeline lineno="1436"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1437"><highlight class="comment"><sp/><sp/>//!<sp/>Store<sp/>FPU<sp/>environment<sp/>to<sp/>@a<sp/>o0<sp/>(14<sp/>or<sp/>28<sp/>bytes)<sp/>after<sp/>checking<sp/>for</highlight></codeline>
<codeline lineno="1438"><highlight class="comment"><sp/><sp/>//!<sp/>pending<sp/>unmasked<sp/>floating-point<sp/>exceptions.<sp/>Then<sp/>mask<sp/>all<sp/>floating</highlight></codeline>
<codeline lineno="1439"><highlight class="comment"><sp/><sp/>//!<sp/>point<sp/>exceptions.</highlight></codeline>
<codeline lineno="1440" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a91f4549537add6de05f324420eee058b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a91f4549537add6de05f324420eee058b" kindref="member" tooltip="Store x87 FPU environment (FPU).">fstenv</ref>,<sp/>kInstFstenv,<sp/>Mem)</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1442"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>x87<sp/>FPU<sp/>status<sp/>word<sp/>(AX)<sp/>(FPU).</highlight></codeline>
<codeline lineno="1443" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3881577e7727aceaff1329a194aa81cc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3881577e7727aceaff1329a194aa81cc" kindref="member" tooltip="Store x87 FPU status word (AX) (FPU).">fstsw</ref>,<sp/>kInstFstsw,<sp/>GpReg,<sp/>o0.isRegCode(kRegTypeGpw,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>))</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1444"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>x87<sp/>FPU<sp/>status<sp/>sord<sp/>(2<sp/>bytes)<sp/>(FPU).</highlight></codeline>
<codeline lineno="1445" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a35814d64db49e72d59591095fedd4dce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(fstsw,<sp/>kInstFstsw,<sp/>Mem)</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1447"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Subtract<sp/>@a<sp/>o0<sp/>from<sp/>@a<sp/>o0<sp/>and<sp/>store<sp/>result<sp/>in<sp/>@a<sp/>o0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1448"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1449"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>One<sp/>of<sp/>dst<sp/>or<sp/>src<sp/>must<sp/>be<sp/>fp0.</highlight></codeline>
<codeline lineno="1450" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aad0028cf4a906c1ba95f6bf2c0c9934a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aad0028cf4a906c1ba95f6bf2c0c9934a" kindref="member" tooltip="Subtract o0 from o0 and store result in o0 (FPU).">fsub</ref>,<sp/>kInstFsub,<sp/>FpReg,<sp/>FpReg,<sp/>o0.getRegIndex()<sp/>==<sp/>0<sp/>||<sp/>o1.getRegIndex()<sp/>==<sp/>0)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1451"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Subtract<sp/>32-bit<sp/>or<sp/>64-bit<sp/>@a<sp/>o0<sp/>from<sp/>fp0<sp/>and<sp/>store<sp/>result<sp/>in<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1452" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a03c08ee7ae80366efccffbb4a59239ab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(fsub,<sp/>kInstFsub,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>4<sp/>||<sp/>o0.getSize()<sp/>==<sp/>8)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1453"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Subtract<sp/>fp0<sp/>from<sp/>@a<sp/>o0<sp/>and<sp/>POP<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1454" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acd134873a85917cc9f0b1697dae853af" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4968650f5f855c44985f241f2a889b98" kindref="member">fsubp</ref>,<sp/>kInstFsubp,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/><sp/>//!<sp/>@overload.</highlight></codeline>
<codeline lineno="1456" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4968650f5f855c44985f241f2a889b98" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(fsubp,<sp/>kInstFsubp)</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1458"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reverse<sp/>subtract<sp/>@a<sp/>o1<sp/>from<sp/>@a<sp/>o0<sp/>and<sp/>store<sp/>result<sp/>in<sp/>@a<sp/>o0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1459"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1460"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>One<sp/>of<sp/>dst<sp/>or<sp/>src<sp/>must<sp/>be<sp/>fp0.</highlight></codeline>
<codeline lineno="1461" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a32d85bc7bd35da913b55384426387a7f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x_(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a32d85bc7bd35da913b55384426387a7f" kindref="member" tooltip="Reverse subtract o1 from o0 and store result in o0 (FPU).">fsubr</ref>,<sp/>kInstFsubr,<sp/>FpReg,<sp/>FpReg,<sp/>o0.getRegIndex()<sp/>==<sp/>0<sp/>||<sp/>o1.getRegIndex()<sp/>==<sp/>0)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1462"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reverse<sp/>subtract<sp/>32-bit<sp/>or<sp/>64-bit<sp/>@a<sp/>o0<sp/>from<sp/>fp0<sp/>and<sp/>store<sp/>result<sp/>in<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1463" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abe8dcfaa8e3c3be881f2b543f271bd64" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x_(fsubr,<sp/>kInstFsubr,<sp/>Mem,<sp/>o0.getSize()<sp/>==<sp/>4<sp/>||<sp/>o0.getSize()<sp/>==<sp/>8)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1464"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reverse<sp/>subtract<sp/>fp0<sp/>from<sp/>@a<sp/>o0<sp/>and<sp/>POP<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1465" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab4762ada7b6a051c9e757821c292dcc1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6f64d7afcfa4681faa3768586e0ee277" kindref="member">fsubrp</ref>,<sp/>kInstFsubrp,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1466"><highlight class="comment"><sp/><sp/>//!<sp/>@overload.</highlight></codeline>
<codeline lineno="1467" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6f64d7afcfa4681faa3768586e0ee277" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(fsubrp,<sp/>kInstFsubrp)</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1469"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Floating<sp/>point<sp/>test<sp/>-<sp/>Compare<sp/>fp0<sp/>with<sp/>0.0.<sp/>(FPU).</highlight></codeline>
<codeline lineno="1470" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa32f296999c6ee6f78a8a696d6c6f6e2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa32f296999c6ee6f78a8a696d6c6f6e2" kindref="member" tooltip="Floating point test - Compare fp0 with 0.0. (FPU).">ftst</ref>,<sp/>kInstFtst)</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1472"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unordered<sp/>compare<sp/>fp0<sp/>with<sp/>@a<sp/>o0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1473" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8d8de83d179523190d54656c5c5a3ad1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3bf10a0148e2cd0bdcf057d81c403a8f" kindref="member" tooltip="Unordered compare fp0 with fp1 (FPU).">fucom</ref>,<sp/>kInstFucom,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1474"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unordered<sp/>compare<sp/>fp0<sp/>with<sp/>fp1<sp/>(FPU).</highlight></codeline>
<codeline lineno="1475" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3bf10a0148e2cd0bdcf057d81c403a8f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(fucom,<sp/>kInstFucom)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1476"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unordered<sp/>compare<sp/>fp0<sp/>and<sp/>@a<sp/>o0,<sp/>check<sp/>for<sp/>ordered<sp/>values<sp/>and<sp/>Set<sp/>EFLAGS<sp/>(FPU).</highlight></codeline>
<codeline lineno="1477" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a54a6fcf95f2e81b633ff2e3536f6f0c0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a54a6fcf95f2e81b633ff2e3536f6f0c0" kindref="member" tooltip="Unordered compare fp0 and o0, check for ordered values and Set EFLAGS (FPU).">fucomi</ref>,<sp/>kInstFucomi,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1478"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unordered<sp/>compare<sp/>fp0<sp/>and<sp/>@a<sp/>o0,<sp/>Check<sp/>for<sp/>ordered<sp/>values<sp/>and<sp/>Set<sp/>EFLAGS<sp/>and<sp/>pop<sp/>the<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1479" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5d93c4fe24806d33f3024f5e9249a857" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5d93c4fe24806d33f3024f5e9249a857" kindref="member" tooltip="Unordered compare fp0 and o0, Check for ordered values and Set EFLAGS and pop the stack (FPU)...">fucomip</ref>,<sp/>kInstFucomip,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1480"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unordered<sp/>compare<sp/>fp0<sp/>with<sp/>@a<sp/>o0<sp/>and<sp/>pop<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1481" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1f1e39bc9df4a6c5c26be9ee4169d511" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a294b8d5b2db1f9ebf7a62bfaa8e6f300" kindref="member" tooltip="Unordered compare fp0 with fp1 and pop register stack (FPU).">fucomp</ref>,<sp/>kInstFucomp,<sp/>FpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1482"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unordered<sp/>compare<sp/>fp0<sp/>with<sp/>fp1<sp/>and<sp/>pop<sp/>register<sp/>stack<sp/>(FPU).</highlight></codeline>
<codeline lineno="1483" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a294b8d5b2db1f9ebf7a62bfaa8e6f300" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(fucomp,<sp/>kInstFucomp)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1484"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unordered<sp/>compare<sp/>fp0<sp/>with<sp/>fp1<sp/>and<sp/>pop<sp/>register<sp/>stack<sp/>twice<sp/>(FPU).</highlight></codeline>
<codeline lineno="1485" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a01d2425a4173d46282513c7ac00efebb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a01d2425a4173d46282513c7ac00efebb" kindref="member" tooltip="Unordered compare fp0 with fp1 and pop register stack twice (FPU).">fucompp</ref>,<sp/>kInstFucompp)</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/>INST_0x(fwait,<sp/>kInstFwait)</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1489"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Examine<sp/>fp0<sp/>(FPU).</highlight></codeline>
<codeline lineno="1490" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aae016e6f9250099aa6730014e25ba73b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aae016e6f9250099aa6730014e25ba73b" kindref="member" tooltip="Examine fp0 (FPU).">fxam</ref>,<sp/>kInstFxam)</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1492"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Exchange<sp/>register<sp/>contents<sp/>(FPU).</highlight></codeline>
<codeline lineno="1493"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1494"><highlight class="comment"><sp/><sp/>//!<sp/>Exchange<sp/>content<sp/>of<sp/>fp0<sp/>with<sp/>@a<sp/>o0.</highlight></codeline>
<codeline lineno="1495" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7cc24293147a53595122450566b76fe0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7cc24293147a53595122450566b76fe0" kindref="member" tooltip="Exchange register contents (FPU).">fxch</ref>,<sp/>kInstFxch,<sp/>FpReg)</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1497"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Restore<sp/>FP,<sp/>MMX<sp/>and<sp/>streaming<sp/>SIMD<sp/>extension<sp/>states<sp/>(FPU,<sp/>MMX,<sp/>SSE).</highlight></codeline>
<codeline lineno="1498"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1499"><highlight class="comment"><sp/><sp/>//!<sp/>Load<sp/>FP<sp/>and<sp/>MMX<sp/>technology<sp/>and<sp/>Streaming<sp/>SIMD<sp/>Extension<sp/>state<sp/>from</highlight></codeline>
<codeline lineno="1500"><highlight class="comment"><sp/><sp/>//!<sp/>src<sp/>(512<sp/>bytes).</highlight></codeline>
<codeline lineno="1501" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4b14b2681405b1180ee2d99179472e61" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4b14b2681405b1180ee2d99179472e61" kindref="member" tooltip="Restore FP, MMX and streaming SIMD extension states (FPU, MMX, SSE).">fxrstor</ref>,<sp/>kInstFxrstor,<sp/>Mem)</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1503"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>FP,<sp/>MMX<sp/>and<sp/>streaming<sp/>SIMD<sp/>extension<sp/>states<sp/>(FPU,<sp/>MMX,<sp/>SSE).</highlight></codeline>
<codeline lineno="1504"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1505"><highlight class="comment"><sp/><sp/>//!<sp/>Store<sp/>FP<sp/>and<sp/>MMX<sp/>technology<sp/>state<sp/>and<sp/>Streaming<sp/>SIMD<sp/>Extension<sp/>state</highlight></codeline>
<codeline lineno="1506"><highlight class="comment"><sp/><sp/>//!<sp/>to<sp/>dst<sp/>(512<sp/>bytes).</highlight></codeline>
<codeline lineno="1507" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae5db7f98b45629fb84333549387287f2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae5db7f98b45629fb84333549387287f2" kindref="member" tooltip="Store FP, MMX and streaming SIMD extension states (FPU, MMX, SSE).">fxsave</ref>,<sp/>kInstFxsave,<sp/>Mem)</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1509"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>exponent<sp/>and<sp/>significand<sp/>(FPU).</highlight></codeline>
<codeline lineno="1510"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1511"><highlight class="comment"><sp/><sp/>//!<sp/>Separate<sp/>value<sp/>in<sp/>fp0<sp/>into<sp/>exponent<sp/>and<sp/>significand,<sp/>store<sp/>exponent</highlight></codeline>
<codeline lineno="1512"><highlight class="comment"><sp/><sp/>//!<sp/>in<sp/>fp0<sp/>and<sp/>push<sp/>the<sp/>significand<sp/>on<sp/>the<sp/>register<sp/>stack.</highlight></codeline>
<codeline lineno="1513" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9d020c2293ac1b0199df72fbbe998be8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9d020c2293ac1b0199df72fbbe998be8" kindref="member" tooltip="Extract exponent and significand (FPU).">fxtract</ref>,<sp/>kInstFxtract)</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compute<sp/>y<sp/>*<sp/>log2(x).</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1517"><highlight class="comment"><sp/><sp/>//!<sp/>Replace<sp/>fp1<sp/>with<sp/>(fp1<sp/>*<sp/>log2(fp0))<sp/>and<sp/>pop<sp/>the<sp/>register<sp/>stack.</highlight></codeline>
<codeline lineno="1518" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a20cfa2cf22c06af2f895bc12773c04f7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a20cfa2cf22c06af2f895bc12773c04f7" kindref="member" tooltip="Compute y * log2(x).">fyl2x</ref>,<sp/>kInstFyl2x)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compute<sp/>y<sp/>*<sp/>log_2(x+1).</highlight></codeline>
<codeline lineno="1520"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/><sp/>//!<sp/>Replace<sp/>fp1<sp/>with<sp/>(fp1<sp/>*<sp/>(log2(fp0)+1))<sp/>and<sp/>pop<sp/>the<sp/>register<sp/>stack.</highlight></codeline>
<codeline lineno="1522" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae4c8c4b4adb44da5d3a000e09b6bd3b0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae4c8c4b4adb44da5d3a000e09b6bd3b0" kindref="member" tooltip="Compute y * log_2(x+1).">fyl2xp1</ref>,<sp/>kInstFyl2xp1)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[MMX]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1528"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>dword<sp/>(MMX).</highlight></codeline>
<codeline lineno="1529" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3b48c4e84a6565ee7fddf55282f69b62" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3b48c4e84a6565ee7fddf55282f69b62" kindref="member" tooltip="Move dword (MMX).">movd</ref>,<sp/>kInstMovd,<sp/>Mem,<sp/><ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound" tooltip="X86/X64 64-bit Mm register.">MmReg</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1530"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1531" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab4607c8ac6520525a1fa900428c7c5a2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound" tooltip="X86/X64 64-bit Mm register.">MmReg</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1532"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1533" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a68cd47f521205e5606942a6379ae39d9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/><ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound" tooltip="X86/X64 64-bit Mm register.">MmReg</ref>,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1534"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1535" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab6076e28a58d8f8454bf73076d003898" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>MmReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1537"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>qword<sp/>(MMX).</highlight></codeline>
<codeline lineno="1538" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ade72365e231f52b6a3b3aec363387d7c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ade72365e231f52b6a3b3aec363387d7c" kindref="member" tooltip="Move qword (MMX).">movq</ref>,<sp/>kInstMovq,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1539"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1540" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a97120769a5e52ae44dc31a57dbea03df" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>Mem,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1541"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1542" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a80cc4c30a999a4b398c9f60162d21727" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1544"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>signed<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="1545" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9ed46933966107200e97f61d781f07a4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9ed46933966107200e97f61d781f07a4" kindref="member" tooltip="Pack with signed saturation (MMX).">packsswb</ref>,<sp/>kInstPacksswb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1546"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1547" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aab53328989b0e42d76f7a61e0d34ab08" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packsswb,<sp/>kInstPacksswb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1549"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>signed<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="1550" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a92e021e7f54feaeba3c5dbf2a783664f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a92e021e7f54feaeba3c5dbf2a783664f" kindref="member" tooltip="Pack with signed saturation (MMX).">packssdw</ref>,<sp/>kInstPackssdw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1551"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1552" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acce5c5452b6a26d57d5a8bdb560b62c3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packssdw,<sp/>kInstPackssdw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1554"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>unsigned<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="1555" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a75cfe53ee2233d43618e6e98e6583a29" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a75cfe53ee2233d43618e6e98e6583a29" kindref="member" tooltip="Pack with unsigned saturation (MMX).">packuswb</ref>,<sp/>kInstPackuswb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1556"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1557" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a75aee6e99664faa676ae6c64e6e00fa9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packuswb,<sp/>kInstPackuswb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1559"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>byte<sp/>add<sp/>(MMX).</highlight></codeline>
<codeline lineno="1560" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a156a944157710498bb3b1abf6f5abe91" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a156a944157710498bb3b1abf6f5abe91" kindref="member" tooltip="Packed byte add (MMX).">paddb</ref>,<sp/>kInstPaddb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1561"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1562" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8cb15044ebe14efb937c1de5d18b88b2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddb,<sp/>kInstPaddb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1564"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>word<sp/>add<sp/>(MMX).</highlight></codeline>
<codeline lineno="1565" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa963ad97957f84f372c65ef6e6cebfbf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa963ad97957f84f372c65ef6e6cebfbf" kindref="member" tooltip="Packed word add (MMX).">paddw</ref>,<sp/>kInstPaddw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1566"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1567" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aecfa1f76362d3ea0c6feaa21d462dbff" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddw,<sp/>kInstPaddw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1569"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>dword<sp/>add<sp/>(MMX).</highlight></codeline>
<codeline lineno="1570" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afcde5e1a7863194af1ae23eede17e67e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afcde5e1a7863194af1ae23eede17e67e" kindref="member" tooltip="Packed dword add (MMX).">paddd</ref>,<sp/>kInstPaddd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1571"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1572" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af8fbc792e4ff145272290cdf6722a590" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddd,<sp/>kInstPaddd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1574"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="1575" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae899fe96a3ca7ed2a7964c85db1a9c68" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae899fe96a3ca7ed2a7964c85db1a9c68" kindref="member" tooltip="Packed add with saturation (MMX).">paddsb</ref>,<sp/>kInstPaddsb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1576"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1577" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7532f37390ae1b0f87be0ddb70f7d2f7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsb,<sp/>kInstPaddsb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1579"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="1580" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a165ab1c5a5ff81c08f210e13de5c82be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a165ab1c5a5ff81c08f210e13de5c82be" kindref="member" tooltip="Packed add with saturation (MMX).">paddsw</ref>,<sp/>kInstPaddsw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1581"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1582" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0a191c9e44c5e3cb00aaa6d2bcab6474" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsw,<sp/>kInstPaddsw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1584"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>unsigned<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="1585" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7ab24f91bcdf5f9898eff81980ad1ff6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7ab24f91bcdf5f9898eff81980ad1ff6" kindref="member" tooltip="Packed add unsigned with saturation (MMX).">paddusb</ref>,<sp/>kInstPaddusb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1586"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1587" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5a3c161119710d154033f3a06f1962ce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusb,<sp/>kInstPaddusb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1589"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>unsigned<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="1590" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5f6b6b0899695a8c4175d088db30d761" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5f6b6b0899695a8c4175d088db30d761" kindref="member" tooltip="Packed add unsigned with saturation (MMX).">paddusw</ref>,<sp/>kInstPaddusw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1591"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1592" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad6f0d2e85128dd02b8b430b097bf4e5e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusw,<sp/>kInstPaddusw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1594"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And<sp/>(MMX).</highlight></codeline>
<codeline lineno="1595" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab6730a7f50afdffea98a2208c0558ee0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab6730a7f50afdffea98a2208c0558ee0" kindref="member" tooltip="And (MMX).">pand</ref>,<sp/>kInstPand,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1596"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1597" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6c1941155592bbfcb311160ea9e5a4ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pand,<sp/>kInstPand,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1599"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And-not<sp/>(MMX).</highlight></codeline>
<codeline lineno="1600" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a07fa82c06feff46c1cde06755ce9f26f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a07fa82c06feff46c1cde06755ce9f26f" kindref="member" tooltip="And-not (MMX).">pandn</ref>,<sp/>kInstPandn,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1601"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1602" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af9546554b72925fc94c0776d60d308d1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pandn,<sp/>kInstPandn,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1604"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>bytes<sp/>for<sp/>equal<sp/>(MMX).</highlight></codeline>
<codeline lineno="1605" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac26367e810570f11432b9f1ea3058edb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac26367e810570f11432b9f1ea3058edb" kindref="member" tooltip="Packed compare bytes for equal (MMX).">pcmpeqb</ref>,<sp/>kInstPcmpeqb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1606"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1607" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab97be0c661ae84af91b5cde40943c4f0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqb,<sp/>kInstPcmpeqb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1609"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>words<sp/>for<sp/>equal<sp/>(MMX).</highlight></codeline>
<codeline lineno="1610" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7901233f3888feb1ef274c0b0b8baf85" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7901233f3888feb1ef274c0b0b8baf85" kindref="member" tooltip="Packed compare words for equal (MMX).">pcmpeqw</ref>,<sp/>kInstPcmpeqw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1611"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1612" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a72b39c52b238f5f822c93a4b7797c3e8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqw,<sp/>kInstPcmpeqw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1614"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>dwords<sp/>for<sp/>equal<sp/>(MMX).</highlight></codeline>
<codeline lineno="1615" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af4a2412cc65ac43d424d134164c9f6c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af4a2412cc65ac43d424d134164c9f6c5" kindref="member" tooltip="Packed compare dwords for equal (MMX).">pcmpeqd</ref>,<sp/>kInstPcmpeqd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1616"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1617" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acb7f7cbe849081bacdf1bb6b2126af54" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqd,<sp/>kInstPcmpeqd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1619"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>bytes<sp/>for<sp/>greater<sp/>than<sp/>(MMX).</highlight></codeline>
<codeline lineno="1620" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3d3c1af5c9e5c3c5de2d8dbca735f7ad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3d3c1af5c9e5c3c5de2d8dbca735f7ad" kindref="member" tooltip="Packed compare bytes for greater than (MMX).">pcmpgtb</ref>,<sp/>kInstPcmpgtb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1621"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1622" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa8c48b13cc4177f70b1df04e65151720" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtb,<sp/>kInstPcmpgtb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1624"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>words<sp/>for<sp/>greater<sp/>than<sp/>(MMX).</highlight></codeline>
<codeline lineno="1625" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6ea82db10f715cf8444eaa5d162841ef" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6ea82db10f715cf8444eaa5d162841ef" kindref="member" tooltip="Packed compare words for greater than (MMX).">pcmpgtw</ref>,<sp/>kInstPcmpgtw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1626"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1627" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7fc0617f163412e8a2f1c4a08b2aad04" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtw,<sp/>kInstPcmpgtw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1629"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>dqords<sp/>for<sp/>greater<sp/>than<sp/>(MMX).</highlight></codeline>
<codeline lineno="1630" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2c400406a753bd67593ddfa8b0572009" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2c400406a753bd67593ddfa8b0572009" kindref="member" tooltip="Packed compare dqords for greater than (MMX).">pcmpgtd</ref>,<sp/>kInstPcmpgtd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1631"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1632" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad40ff9fa8e9481df3d0c1c1ac7a7108e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtd,<sp/>kInstPcmpgtd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1634"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>(MMX).</highlight></codeline>
<codeline lineno="1635" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa16a4e3284e540b2df528fdb7ce0b07a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa16a4e3284e540b2df528fdb7ce0b07a" kindref="member" tooltip="Packed multiply high (MMX).">pmulhw</ref>,<sp/>kInstPmulhw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1636"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1637" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab57ae5611133513da8507b29b3f127bb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhw,<sp/>kInstPmulhw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1639"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>low<sp/>(MMX).</highlight></codeline>
<codeline lineno="1640" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afc751ac51972cac275e4d93229799501" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afc751ac51972cac275e4d93229799501" kindref="member" tooltip="Packed multiply low (MMX).">pmullw</ref>,<sp/>kInstPmullw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1641"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1642" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acc7392965bc0f113f1a7d703b27cebf8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmullw,<sp/>kInstPmullw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1644"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Or<sp/>(MMX).</highlight></codeline>
<codeline lineno="1645" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ade38950fe45915edd8b79ee7e8ae72a6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ade38950fe45915edd8b79ee7e8ae72a6" kindref="member" tooltip="Or (MMX).">por</ref>,<sp/>kInstPor,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1646"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1647" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a84df020b4dc80a317141cb3bf59fdbeb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(por,<sp/>kInstPor,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1649"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>and<sp/>add<sp/>(MMX).</highlight></codeline>
<codeline lineno="1650" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aaedfcf691d60677d21ec7a6fb8fba876" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aaedfcf691d60677d21ec7a6fb8fba876" kindref="member" tooltip="Packed multiply and add (MMX).">pmaddwd</ref>,<sp/>kInstPmaddwd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1651"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1652" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7adf43722d6d04f905ecafd60201c460" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddwd,<sp/>kInstPmaddwd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1654"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="1655" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa55f15bf91f4f8251fd5700e96ac393f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa55f15bf91f4f8251fd5700e96ac393f" kindref="member" tooltip="Packed shift left logical (MMX).">pslld</ref>,<sp/>kInstPslld,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1656"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1657" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a81463ca07f4d28f4063aa1954e6ff304" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pslld,<sp/>kInstPslld,<sp/>MmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1658"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1659" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acdaab9f4eea8941b5a869ac8c7a6edf2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(pslld,<sp/>kInstPslld,<sp/>MmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1661"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="1662" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a221c0a400675ce8df5ae484267dde716" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a221c0a400675ce8df5ae484267dde716" kindref="member" tooltip="Packed shift left logical (MMX).">psllq</ref>,<sp/>kInstPsllq,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1663"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1664" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a611c1f528d3e32ca9a9498520ab589c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllq,<sp/>kInstPsllq,<sp/>MmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1665"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1666" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0bd44306f001a98e5b54337be0f856d7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psllq,<sp/>kInstPsllq,<sp/>MmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1668"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="1669" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aec93ad20cfdcb191002a1f34bc3f606c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aec93ad20cfdcb191002a1f34bc3f606c" kindref="member" tooltip="Packed shift left logical (MMX).">psllw</ref>,<sp/>kInstPsllw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1670"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1671" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a44b7fa587a82a55c20e1824aeccb0aee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllw,<sp/>kInstPsllw,<sp/>MmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1672"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1673" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3d0a32cc3c158eeda7240c7ad372e0bf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psllw,<sp/>kInstPsllw,<sp/>MmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1675"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>arithmetic<sp/>(MMX).</highlight></codeline>
<codeline lineno="1676" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a13b9ecc85162fb316e4eddd9cb69d6f7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a13b9ecc85162fb316e4eddd9cb69d6f7" kindref="member" tooltip="Packed shift right arithmetic (MMX).">psrad</ref>,<sp/>kInstPsrad,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1677"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1678" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7e2d81c8c54359022a394f7ec0f5bffe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrad,<sp/>kInstPsrad,<sp/>MmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1679"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1680" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3a0376efd490c9c5b4dc200fe7991e2b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrad,<sp/>kInstPsrad,<sp/>MmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1682"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>arithmetic<sp/>(MMX).</highlight></codeline>
<codeline lineno="1683" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a77bfe6e59b8cf5ca54f47d003fe1c57f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a77bfe6e59b8cf5ca54f47d003fe1c57f" kindref="member" tooltip="Packed shift right arithmetic (MMX).">psraw</ref>,<sp/>kInstPsraw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1684"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1685" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7e16b545c3fabce89474056c2cc95a7b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psraw,<sp/>kInstPsraw,<sp/>MmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1686"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1687" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8a2a6dda795758352a6c85726092b376" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psraw,<sp/>kInstPsraw,<sp/>MmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1689"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="1690" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab9cc65ca040c046b7e3863b6e4046c28" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab9cc65ca040c046b7e3863b6e4046c28" kindref="member" tooltip="Packed shift right logical (MMX).">psrld</ref>,<sp/>kInstPsrld,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1691"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1692" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afbbb0be96ece3159b56def658344b28e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrld,<sp/>kInstPsrld,<sp/>MmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1693"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1694" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad5ec85f776bc24e1776535739b3bb914" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrld,<sp/>kInstPsrld,<sp/>MmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1696"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="1697" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afe7dcb31b4836756ff98e5e9a2315ad2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afe7dcb31b4836756ff98e5e9a2315ad2" kindref="member" tooltip="Packed shift right logical (MMX).">psrlq</ref>,<sp/>kInstPsrlq,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1698"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1699" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa83eba27cf1c6b4f8527e56a865b6125" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlq,<sp/>kInstPsrlq,<sp/>MmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1700"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1701" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad86a39408ee9a470c2a48f86200093a4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrlq,<sp/>kInstPsrlq,<sp/>MmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1703"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(MMX).</highlight></codeline>
<codeline lineno="1704" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a77c0c084a026a94ae5e1a9d67d3e0966" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a77c0c084a026a94ae5e1a9d67d3e0966" kindref="member" tooltip="Packed shift right logical (MMX).">psrlw</ref>,<sp/>kInstPsrlw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1705"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1706" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac70c3bb66871c2999eed64685c8f0c29" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlw,<sp/>kInstPsrlw,<sp/>MmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1707"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1708" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae57bb3e0cfef8a57cf0d55f05bc8cfec" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrlw,<sp/>kInstPsrlw,<sp/>MmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1710"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(MMX).</highlight></codeline>
<codeline lineno="1711" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a04c0a82c47a90719435c9b833ecb2443" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a04c0a82c47a90719435c9b833ecb2443" kindref="member" tooltip="Packed subtract (MMX).">psubb</ref>,<sp/>kInstPsubb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1712"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1713" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad650be2d922df124698b560866304b18" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubb,<sp/>kInstPsubb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1715"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(MMX).</highlight></codeline>
<codeline lineno="1716" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2ca88b960241bd5f25be1b7803930c83" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2ca88b960241bd5f25be1b7803930c83" kindref="member" tooltip="Packed subtract (MMX).">psubw</ref>,<sp/>kInstPsubw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1717"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1718" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac3b7d062a53dc374bc17a40df8de8c35" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubw,<sp/>kInstPsubw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1720"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(MMX).</highlight></codeline>
<codeline lineno="1721" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6f5aa141751e25ffee568f3e9d7147a1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6f5aa141751e25ffee568f3e9d7147a1" kindref="member" tooltip="Packed subtract (MMX).">psubd</ref>,<sp/>kInstPsubd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1722"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1723" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a90cb625693db0b762852c4742a6ea345" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubd,<sp/>kInstPsubd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1725"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="1726" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab14f14e7c062b4fa66847240a2aef2e4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab14f14e7c062b4fa66847240a2aef2e4" kindref="member" tooltip="Packed subtract with saturation (MMX).">psubsb</ref>,<sp/>kInstPsubsb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1727"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1728" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a99a63475a672ed6264820a14b3b77feb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsb,<sp/>kInstPsubsb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1730"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="1731" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9c195bd9303d08dd051b538ec99818a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9c195bd9303d08dd051b538ec99818a9" kindref="member" tooltip="Packed subtract with saturation (MMX).">psubsw</ref>,<sp/>kInstPsubsw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1732"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1733" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a19b0c1b4f0d69c3da899262872fabd89" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsw,<sp/>kInstPsubsw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1735"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>unsigned<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="1736" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acfee711cdb72e75fe89e2e4e60266c6a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acfee711cdb72e75fe89e2e4e60266c6a" kindref="member" tooltip="Packed subtract with unsigned saturation (MMX).">psubusb</ref>,<sp/>kInstPsubusb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1738" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae6beb0cd7a8877d3b78e8e2ffacc71ea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusb,<sp/>kInstPsubusb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1740"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>unsigned<sp/>saturation<sp/>(MMX).</highlight></codeline>
<codeline lineno="1741" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1addd8227d5371d1b82de689303593c2d4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1addd8227d5371d1b82de689303593c2d4" kindref="member" tooltip="Packed subtract with unsigned saturation (MMX).">psubusw</ref>,<sp/>kInstPsubusw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1742"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1743" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac17db2a99303a734fa62c86c5a0bc6d1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusw,<sp/>kInstPsubusw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1745"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="1746" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adf6e7f1a4ac2bcba7fdb137a6518d5dd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adf6e7f1a4ac2bcba7fdb137a6518d5dd" kindref="member" tooltip="Unpack high packed data (MMX).">punpckhbw</ref>,<sp/>kInstPunpckhbw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1747"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1748" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a00511753929cfa464eda70c9fa9d6c09" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhbw,<sp/>kInstPunpckhbw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1750"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="1751" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a84c0eb8f9ee322e91f0e48098765b607" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a84c0eb8f9ee322e91f0e48098765b607" kindref="member" tooltip="Unpack high packed data (MMX).">punpckhwd</ref>,<sp/>kInstPunpckhwd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1752"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1753" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac2bb1223884dc3ab32ce37f257e85ce1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhwd,<sp/>kInstPunpckhwd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1755"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="1756" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1f4e3c7a4eddc6558998b66ad0f207e4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1f4e3c7a4eddc6558998b66ad0f207e4" kindref="member" tooltip="Unpack high packed data (MMX).">punpckhdq</ref>,<sp/>kInstPunpckhdq,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1757"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1758" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a29f2cc99b0157977573c8ea1487d708d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhdq,<sp/>kInstPunpckhdq,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1760"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="1761" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a52ed02f6fddeb946aa1cd6bbd59d9cfa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a52ed02f6fddeb946aa1cd6bbd59d9cfa" kindref="member" tooltip="Unpack high packed data (MMX).">punpcklbw</ref>,<sp/>kInstPunpcklbw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1762"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1763" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad059757a4685faa25cea9c4dace3eaca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklbw,<sp/>kInstPunpcklbw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1765"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="1766" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa4271319655650beed40aa8a1ab7ac05" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa4271319655650beed40aa8a1ab7ac05" kindref="member" tooltip="Unpack high packed data (MMX).">punpcklwd</ref>,<sp/>kInstPunpcklwd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1767"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1768" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a73dfdf9057210e61b2e8176633fef305" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklwd,<sp/>kInstPunpcklwd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1770"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>data<sp/>(MMX).</highlight></codeline>
<codeline lineno="1771" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a703445ec657aaf57e2faf2c3452a1e30" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a703445ec657aaf57e2faf2c3452a1e30" kindref="member" tooltip="Unpack high packed data (MMX).">punpckldq</ref>,<sp/>kInstPunpckldq,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1772"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1773" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a884bf8390c8f569af50d1bb5b73e68eb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckldq,<sp/>kInstPunpckldq,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1775"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xor<sp/>(MMX).</highlight></codeline>
<codeline lineno="1776" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac1e5293ef936b85b08a4fd050fd3e116" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac1e5293ef936b85b08a4fd050fd3e116" kindref="member" tooltip="Xor (MMX).">pxor</ref>,<sp/>kInstPxor,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1777"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1778" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af43ac1f08b408f3397d52ae59fc8e0cf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pxor,<sp/>kInstPxor,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1780"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Empty<sp/>MMX<sp/>state.</highlight></codeline>
<codeline lineno="1781" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a28b1a3263824d8edea4b6aae6722d5ac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a28b1a3263824d8edea4b6aae6722d5ac" kindref="member" tooltip="Empty MMX state.">emms</ref>,<sp/>kInstEmms)</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[3dNow]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1787"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>to<sp/>integer<sp/>convert<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1788" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a35aef9ee20ed94788d5b2ac9cdc7ea90" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a35aef9ee20ed94788d5b2ac9cdc7ea90" kindref="member" tooltip="Packed SP-FP to integer convert (3dNow!).">pf2id</ref>,<sp/>kInstPf2id,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1789"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1790" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af60e72666ebe775caf99c58c2c8886f5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pf2id,<sp/>kInstPf2id,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1792"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/><sp/>Packed<sp/>SP-FP<sp/>to<sp/>integer<sp/>word<sp/>convert<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1793" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a08d13a0ad479c349afdb570316824637" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a08d13a0ad479c349afdb570316824637" kindref="member" tooltip="Packed SP-FP to integer word convert (3dNow!).">pf2iw</ref>,<sp/>kInstPf2iw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1794"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1795" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad9f7f1c3480c14b3212023f3dd9b7f50" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pf2iw,<sp/>kInstPf2iw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1797"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>accumulate<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1798" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a863624de2325983d960f8b06d7d36079" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a863624de2325983d960f8b06d7d36079" kindref="member" tooltip="Packed SP-FP accumulate (3dNow!).">pfacc</ref>,<sp/>kInstPfacc,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1799"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1800" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a43a5d0702988df7115a2379b29400433" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfacc,<sp/>kInstPfacc,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1802"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>addition<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1803" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6859a6bc427421202f3ff616420165f9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6859a6bc427421202f3ff616420165f9" kindref="member" tooltip="Packed SP-FP addition (3dNow!).">pfadd</ref>,<sp/>kInstPfadd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1804"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1805" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afce9ba78cd2a0d27fcfdf6ef6856ba1f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfadd,<sp/>kInstPfadd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1807"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>compare<sp/>-<sp/>dst<sp/>==<sp/>src<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1808" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a80c835fd74b7c6b2fcd970b92635c764" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a80c835fd74b7c6b2fcd970b92635c764" kindref="member" tooltip="Packed SP-FP compare - dst == src (3dNow!).">pfcmpeq</ref>,<sp/>kInstPfcmpeq,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1809"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1810" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1cc4b7e8d35cd86365f75f6b79c31d83" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfcmpeq,<sp/>kInstPfcmpeq,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1812"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>compare<sp/>-<sp/>dst<sp/>&gt;=<sp/>src<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1813" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7ee302cad654187caae9defb06c798a1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7ee302cad654187caae9defb06c798a1" kindref="member" tooltip="Packed SP-FP compare - dst &amp;gt;= src (3dNow!).">pfcmpge</ref>,<sp/>kInstPfcmpge,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1814"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1815" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0268ab7c09f6f144b78c7274468daf3f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfcmpge,<sp/>kInstPfcmpge,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1817"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>compare<sp/>-<sp/>dst<sp/>&gt;<sp/>src<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1818" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5e283aed20497d2e2e23596055afcfee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5e283aed20497d2e2e23596055afcfee" kindref="member" tooltip="Packed SP-FP compare - dst &amp;gt; src (3dNow!).">pfcmpgt</ref>,<sp/>kInstPfcmpgt,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1819"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1820" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa5d5915de476cb224b8482c77f22db15" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfcmpgt,<sp/>kInstPfcmpgt,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1822"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>maximum<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1823" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae2010cf6a14eddb1bfe3826ebc3d31de" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae2010cf6a14eddb1bfe3826ebc3d31de" kindref="member" tooltip="Packed SP-FP maximum (3dNow!).">pfmax</ref>,<sp/>kInstPfmax,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1824"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1825" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad7a45edeca1affba1bbcfc82ed87c858" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfmax,<sp/>kInstPfmax,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1827"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>minimum<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1828" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a053f2c3412368be099d5865b9a9f3fbf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a053f2c3412368be099d5865b9a9f3fbf" kindref="member" tooltip="Packed SP-FP minimum (3dNow!).">pfmin</ref>,<sp/>kInstPfmin,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1829"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1830" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9739deb9625a197ed1b8ce7c2e45fad4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfmin,<sp/>kInstPfmin,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1832"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>multiply<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1833" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a670e627f641e21d7b3a876ef6810f146" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a670e627f641e21d7b3a876ef6810f146" kindref="member" tooltip="Packed SP-FP multiply (3dNow!).">pfmul</ref>,<sp/>kInstPfmul,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1834"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1835" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1573af28dabb9bb6d3f7d2468cb9a69c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfmul,<sp/>kInstPfmul,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1837"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>negative<sp/>accumulate<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1838" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aab6e36ba204ca6cef7e4c49625679e86" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aab6e36ba204ca6cef7e4c49625679e86" kindref="member" tooltip="Packed SP-FP negative accumulate (3dNow!).">pfnacc</ref>,<sp/>kInstPfnacc,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1839"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1840" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aafadb689bad64fa8155e6bb86bc3fdd2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfnacc,<sp/>kInstPfnacc,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1842"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>mixed<sp/>accumulate<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1843" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa18570a1db2b8938f7fe744e2b07f8a8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa18570a1db2b8938f7fe744e2b07f8a8" kindref="member" tooltip="Packed SP-FP mixed accumulate (3dNow!).">pfpnacc</ref>,<sp/>kInstPfpnacc,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1844"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1845" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a532d2aa83ac84b8c8d1c58754fadbffe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfpnacc,<sp/>kInstPfpnacc,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1847"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal<sp/>Approximation<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1848" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a77a095b3fad2aa3de9d21547f83cd221" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a77a095b3fad2aa3de9d21547f83cd221" kindref="member" tooltip="Packed SP-FP reciprocal Approximation (3dNow!).">pfrcp</ref>,<sp/>kInstPfrcp,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1849"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1850" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a00e94d89c06af2a7c57b9fdc7e68dc59" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfrcp,<sp/>kInstPfrcp,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1852"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal,<sp/>first<sp/>iteration<sp/>step<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1853" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aad9e205ab5c502d197f07bab9e1345f8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aad9e205ab5c502d197f07bab9e1345f8" kindref="member" tooltip="Packed SP-FP reciprocal, first iteration step (3dNow!).">pfrcpit1</ref>,<sp/>kInstPfrcpit1,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1854"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1855" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acd7bcf386374efb71edaeb9741385d88" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfrcpit1,<sp/>kInstPfrcpit1,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1857"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal,<sp/>second<sp/>iteration<sp/>step<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1858" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af906d77a961321f7ae38774163429204" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af906d77a961321f7ae38774163429204" kindref="member" tooltip="Packed SP-FP reciprocal, second iteration step (3dNow!).">pfrcpit2</ref>,<sp/>kInstPfrcpit2,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1859"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1860" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa36a4472eaaaca8c98308150a751c420" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfrcpit2,<sp/>kInstPfrcpit2,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1862"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal<sp/>square<sp/>root,<sp/>first<sp/>iteration<sp/>step<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1863" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa4d822856c8e6ef693e923e3c19bcc35" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa4d822856c8e6ef693e923e3c19bcc35" kindref="member" tooltip="Packed SP-FP reciprocal square root, first iteration step (3dNow!).">pfrsqit1</ref>,<sp/>kInstPfrsqit1,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1864"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1865" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a61c05ea6ebb09d4c8242cc8408895f21" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfrsqit1,<sp/>kInstPfrsqit1,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1867"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal<sp/>square<sp/>root<sp/>approximation<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1868" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad2472fd8b1f54cd7985cf95179ff07c8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad2472fd8b1f54cd7985cf95179ff07c8" kindref="member" tooltip="Packed SP-FP reciprocal square root approximation (3dNow!).">pfrsqrt</ref>,<sp/>kInstPfrsqrt,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1869"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1870" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aac43b315b5317535074513c0da9f5ffa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfrsqrt,<sp/>kInstPfrsqrt,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1872"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>subtract<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1873" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8cd0716536adf3cc34541f3c5bc39735" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8cd0716536adf3cc34541f3c5bc39735" kindref="member" tooltip="Packed SP-FP subtract (3dNow!).">pfsub</ref>,<sp/>kInstPfsub,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1874"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1875" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac0949bccd8ec4009eead96e27529f76d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfsub,<sp/>kInstPfsub,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1877"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reverse<sp/>subtract<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1878" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abd20ab98bae02fda5503d484a500a08a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abd20ab98bae02fda5503d484a500a08a" kindref="member" tooltip="Packed SP-FP reverse subtract (3dNow!).">pfsubr</ref>,<sp/>kInstPfsubr,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1879"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1880" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae174d35705ca5fdd2b5f2bf5e2dbb5f9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pfsubr,<sp/>kInstPfsubr,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1882"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>dwords<sp/>to<sp/>SP-FP<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1883" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a959e28aa679f534ac52ed47b0fb184ce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a959e28aa679f534ac52ed47b0fb184ce" kindref="member" tooltip="Packed dwords to SP-FP (3dNow!).">pi2fd</ref>,<sp/>kInstPi2fd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1884"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1885" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abf12ed0523a81e98781e0beba96e587b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pi2fd,<sp/>kInstPi2fd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1887"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>words<sp/>to<sp/>SP-FP<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1888" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aceb7d543cb6732ba2bfe50cb597e3959" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aceb7d543cb6732ba2bfe50cb597e3959" kindref="member" tooltip="Packed words to SP-FP (3dNow!).">pi2fw</ref>,<sp/>kInstPi2fw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1889"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1890" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9d4364afa53e3d6472e6a09ae3f31fd9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pi2fw,<sp/>kInstPi2fw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1892"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>swap<sp/>dword<sp/>(3dNow!)</highlight></codeline>
<codeline lineno="1893" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7a0c0edf09758df7e89e2e0c031a6ea3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7a0c0edf09758df7e89e2e0c031a6ea3" kindref="member" tooltip="Packed swap dword (3dNow!)">pswapd</ref>,<sp/>kInstPswapd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1894"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1895" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5dd4dce7b41023ae2ec92aa513919fd0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pswapd,<sp/>kInstPswapd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1897"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Prefetch<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1898" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2e20904f4a7a99b02c03b6086c812d6d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2e20904f4a7a99b02c03b6086c812d6d" kindref="member" tooltip="Prefetch (3dNow!).">prefetch3dnow</ref>,<sp/>kInstPrefetch3dNow,<sp/>Mem)</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1900"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Prefetch<sp/>and<sp/>set<sp/>cache<sp/>to<sp/>modified<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1901" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a483db1c9f5edde3d13e7fb4bdacc1c89" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a483db1c9f5edde3d13e7fb4bdacc1c89" kindref="member" tooltip="Prefetch and set cache to modified (3dNow!).">prefetchw3dnow</ref>,<sp/>kInstPrefetchw3dNow,<sp/>Mem)</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1903"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Faster<sp/>EMMS<sp/>(3dNow!).</highlight></codeline>
<codeline lineno="1904" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8a0792987f2fe38b682cba05da87c8ac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8a0792987f2fe38b682cba05da87c8ac" kindref="member" tooltip="Faster EMMS (3dNow!).">femms</ref>,<sp/>kInstFemms)</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SSE]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1910"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>add<sp/>(SSE).</highlight></codeline>
<codeline lineno="1911" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7d316afac7844bbcb594555a0b88053b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7d316afac7844bbcb594555a0b88053b" kindref="member" tooltip="Packed SP-FP add (SSE).">addps</ref>,<sp/>kInstAddps,<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1912"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1913" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aeaec81a9449cd551ac83bed49f4c7754" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addps,<sp/>kInstAddps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1915"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>add<sp/>(SSE).</highlight></codeline>
<codeline lineno="1916" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae3d43d56b81154de0192af96d9d508ac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae3d43d56b81154de0192af96d9d508ac" kindref="member" tooltip="Scalar SP-FP add (SSE).">addss</ref>,<sp/>kInstAddss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1917"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1918" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1adb2a28e271a8e033fee66b669d9448" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addss,<sp/>kInstAddss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1920"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And-not<sp/>for<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="1921" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0b928d38b15155cde2c66b6fe92943a7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0b928d38b15155cde2c66b6fe92943a7" kindref="member" tooltip="And-not for SP-FP (SSE).">andnps</ref>,<sp/>kInstAndnps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1922"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1923" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acf197d37a7b3071b60b34758e3142785" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(andnps,<sp/>kInstAndnps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1925"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And<sp/>for<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="1926" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a82d28ee6c4b4a672614b8361961a43e6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a82d28ee6c4b4a672614b8361961a43e6" kindref="member" tooltip="And for SP-FP (SSE).">andps</ref>,<sp/>kInstAndps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1927"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1928" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0bea0289c4a3a9169d6c75307fa5e11f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(andps,<sp/>kInstAndps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1930"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>compare<sp/>(SSE).</highlight></codeline>
<codeline lineno="1931" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ade03627e652c0038284ce47ec8d3c53e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ade03627e652c0038284ce47ec8d3c53e" kindref="member" tooltip="Packed SP-FP compare (SSE).">cmpps</ref>,<sp/>kInstCmpps,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1932"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1933" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afc3830e697f8b39e7d340e737fddc65f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(cmpps,<sp/>kInstCmpps,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1935"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>scalar<sp/>SP-FP<sp/>values<sp/>(SSE).</highlight></codeline>
<codeline lineno="1936" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a09e7dca8115f29c7aabed5efb2319fba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a09e7dca8115f29c7aabed5efb2319fba" kindref="member" tooltip="Compare scalar SP-FP values (SSE).">cmpss</ref>,<sp/>kInstCmpss,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1937"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1938" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1dcd2046ed82fe5ac65b0dd45d8fb842" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(cmpss,<sp/>kInstCmpss,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1940"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>ordered<sp/>SP-FP<sp/>compare<sp/>and<sp/>set<sp/>EFLAGS<sp/>(SSE).</highlight></codeline>
<codeline lineno="1941" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a66b184725850ae76ae240f9cd942150a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a66b184725850ae76ae240f9cd942150a" kindref="member" tooltip="Scalar ordered SP-FP compare and set EFLAGS (SSE).">comiss</ref>,<sp/>kInstComiss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1942"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1943" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7b26589d162bfd518192a33c75ceedbc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(comiss,<sp/>kInstComiss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1945"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>signed<sp/>INT32<sp/>to<sp/>packed<sp/>SP-FP<sp/>conversion<sp/>(SSE).</highlight></codeline>
<codeline lineno="1946" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1add0dd48a04a447e63cbdae5bc54fdff6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1add0dd48a04a447e63cbdae5bc54fdff6" kindref="member" tooltip="Packed signed INT32 to packed SP-FP conversion (SSE).">cvtpi2ps</ref>,<sp/>kInstCvtpi2ps,<sp/>XmmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1947"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1948" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac583b6c4e84a268e7f1a2b8af00e64c9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtpi2ps,<sp/>kInstCvtpi2ps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1950"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>to<sp/>packed<sp/>INT32<sp/>conversion<sp/>(SSE).</highlight></codeline>
<codeline lineno="1951" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a21f012a0f5faf8b6c0e8d58d5ad5b45d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a21f012a0f5faf8b6c0e8d58d5ad5b45d" kindref="member" tooltip="Packed SP-FP to packed INT32 conversion (SSE).">cvtps2pi</ref>,<sp/>kInstCvtps2pi,<sp/>MmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1952"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1953" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8591fcbe6bd29104edadc24c35002b04" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtps2pi,<sp/>kInstCvtps2pi,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1955"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>signed<sp/>INT32<sp/>to<sp/>SP-FP<sp/>conversion<sp/>(SSE).</highlight></codeline>
<codeline lineno="1956" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa2f737c1c0b03d41b30285c9649da7ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa2f737c1c0b03d41b30285c9649da7ca" kindref="member" tooltip="Scalar signed INT32 to SP-FP conversion (SSE).">cvtsi2ss</ref>,<sp/>kInstCvtsi2ss,<sp/>XmmReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1957"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1958" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af9dd24bfbbe0bbccf788b3fcfc10d6f5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtsi2ss,<sp/>kInstCvtsi2ss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1960"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>to<sp/>signed<sp/>INT32<sp/>conversion<sp/>(SSE).</highlight></codeline>
<codeline lineno="1961" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6acb3b5812e8258795fb7a6fb8336dcc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6acb3b5812e8258795fb7a6fb8336dcc" kindref="member" tooltip="Scalar SP-FP to signed INT32 conversion (SSE).">cvtss2si</ref>,<sp/>kInstCvtss2si,<sp/>GpReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1962"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1963" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad0fed0e6e71ac4fb32d0dc4288487e06" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtss2si,<sp/>kInstCvtss2si,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1965"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>to<sp/>packed<sp/>INT32<sp/>conversion<sp/>(truncate)<sp/>(SSE).</highlight></codeline>
<codeline lineno="1966" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a513939ed423fae5f8b0e9e76c253243f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a513939ed423fae5f8b0e9e76c253243f" kindref="member" tooltip="Packed SP-FP to packed INT32 conversion (truncate) (SSE).">cvttps2pi</ref>,<sp/>kInstCvttps2pi,<sp/>MmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1967"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1968" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0839943db757aec07004612ee6c72ad5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttps2pi,<sp/>kInstCvttps2pi,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1970"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>to<sp/>signed<sp/>INT32<sp/>conversion<sp/>(truncate)<sp/>(SSE).</highlight></codeline>
<codeline lineno="1971" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa43b9695b9dccff4ed75c8267b89fc87" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa43b9695b9dccff4ed75c8267b89fc87" kindref="member" tooltip="Scalar SP-FP to signed INT32 conversion (truncate) (SSE).">cvttss2si</ref>,<sp/>kInstCvttss2si,<sp/>GpReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1972"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1973" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a23ebef79e6ba4cac29ee9b60f03d197b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttss2si,<sp/>kInstCvttss2si,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1975"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>divide<sp/>(SSE).</highlight></codeline>
<codeline lineno="1976" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afc7dd6617d40988ce09d534cce7d3b30" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afc7dd6617d40988ce09d534cce7d3b30" kindref="member" tooltip="Packed SP-FP divide (SSE).">divps</ref>,<sp/>kInstDivps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1977"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1978" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a18ee8f2c96f93727616b049e73bd442d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(divps,<sp/>kInstDivps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1980"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>divide<sp/>(SSE).</highlight></codeline>
<codeline lineno="1981" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adda3fbd65468e271a9df1efc52516fd2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adda3fbd65468e271a9df1efc52516fd2" kindref="member" tooltip="Scalar SP-FP divide (SSE).">divss</ref>,<sp/>kInstDivss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1982"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1983" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7fdeb8f3239cc587064656f38e84d3c6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(divss,<sp/>kInstDivss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1985"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>streaming<sp/>SIMD<sp/>extension<sp/>control/status<sp/>(SSE).</highlight></codeline>
<codeline lineno="1986" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0f404966f1ee7a3a9e929739f8b25d3d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0f404966f1ee7a3a9e929739f8b25d3d" kindref="member" tooltip="Load streaming SIMD extension control/status (SSE).">ldmxcsr</ref>,<sp/>kInstLdmxcsr,<sp/>Mem)</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1988"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Byte<sp/>mask<sp/>write<sp/>(SSE).</highlight></codeline>
<codeline lineno="1989"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1990"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>The<sp/>default<sp/>memory<sp/>location<sp/>is<sp/>specified<sp/>by<sp/>DS:EDI.</highlight></codeline>
<codeline lineno="1991" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8346a2b3f39b0d999fd515ada4563dc5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8346a2b3f39b0d999fd515ada4563dc5" kindref="member" tooltip="Byte mask write (SSE).">maskmovq</ref>,<sp/>kInstMaskmovq,<sp/>MmReg,<sp/>MmReg)</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1993"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>maximum<sp/>(SSE).</highlight></codeline>
<codeline lineno="1994" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa498b968fd38f63366194433cbb218b4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa498b968fd38f63366194433cbb218b4" kindref="member" tooltip="Packed SP-FP maximum (SSE).">maxps</ref>,<sp/>kInstMaxps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1995"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="1996" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af741bc017b4fe6e60264115354c4b80c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(maxps,<sp/>kInstMaxps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1998"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>maximum<sp/>(SSE).</highlight></codeline>
<codeline lineno="1999" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adb193f2b2407bcb78d8a96d5c00c54f8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adb193f2b2407bcb78d8a96d5c00c54f8" kindref="member" tooltip="Scalar SP-FP maximum (SSE).">maxss</ref>,<sp/>kInstMaxss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2000"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2001" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adbfe6f260d0b9e4afc01f18b5dbb9a67" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(maxss,<sp/>kInstMaxss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2003"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>minimum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2004" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a82ba7224b60e0670379f5945706695af" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a82ba7224b60e0670379f5945706695af" kindref="member" tooltip="Packed SP-FP minimum (SSE).">minps</ref>,<sp/>kInstMinps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2005"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2006" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af74777209f6e3b68f33f790f71227552" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(minps,<sp/>kInstMinps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2008"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>minimum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2009" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af2e3f17b6f66f41e1f0f8ec714dc3bc8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af2e3f17b6f66f41e1f0f8ec714dc3bc8" kindref="member" tooltip="Scalar SP-FP minimum (SSE).">minss</ref>,<sp/>kInstMinss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2010"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2011" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7bd5c645f7c122e64c4ca8c1b03d411f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(minss,<sp/>kInstMinss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2013"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>aligned<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE).</highlight></codeline>
<codeline lineno="2014" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad360620842308574252539f0f5b2247c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad360620842308574252539f0f5b2247c" kindref="member" tooltip="Move aligned packed SP-FP values (SSE).">movaps</ref>,<sp/>kInstMovaps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2015"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2016" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aaf46f36bc3a15feda93c73ebe4481964" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movaps,<sp/>kInstMovaps,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2017"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>aligned<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE).</highlight></codeline>
<codeline lineno="2018" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1dd436fea5399de365d28e51eaba7234" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movaps,<sp/>kInstMovaps,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2020"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>dword.</highlight></codeline>
<codeline lineno="2021" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad134ad7ea3ae2428f33e81619507b373" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>Mem,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2022"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2023" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3015bb090b76325c18fc5e8f7533164d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>GpReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2024"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2025" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a624c89375020e9d981c0bc0ec2ba2c78" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2026"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2027" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6839f8634e9851e2bd299187d60c3ff0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movd,<sp/>kInstMovd,<sp/>XmmReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2029"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>qword<sp/>(SSE).</highlight></codeline>
<codeline lineno="2030" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aefc5d862bca5fa52cb5792bb85b9534c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2031"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2032" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a147c95b82dc15dd0d0cfa9a070df6958" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>Mem,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2033"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2034" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a82c0c345f6fa10ebceb007ecd1c2f19a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2036"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>64<sp/>Bits<sp/>non-temporal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2037" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa1b5f77be259abe76bda00dcbe6ac39d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa1b5f77be259abe76bda00dcbe6ac39d" kindref="member" tooltip="Move 64 Bits non-temporal (SSE).">movntq</ref>,<sp/>kInstMovntq,<sp/>Mem,<sp/>MmReg)</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2039"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>High<sp/>to<sp/>low<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2040" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac286f25c418edd897a3de01d78bbc833" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac286f25c418edd897a3de01d78bbc833" kindref="member" tooltip="High to low packed SP-FP (SSE).">movhlps</ref>,<sp/>kInstMovhlps,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2042"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>high<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2043" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5441e88bedc67cf4439a23cfbac97185" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5441e88bedc67cf4439a23cfbac97185" kindref="member" tooltip="Move high packed SP-FP (SSE).">movhps</ref>,<sp/>kInstMovhps,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2044"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>high<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2045" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a399858eb2c3f2a93361fd34e4dd66a40" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movhps,<sp/>kInstMovhps,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2047"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>low<sp/>to<sp/>high<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2048" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a71004b174af5a848e8fb732a175832d6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a71004b174af5a848e8fb732a175832d6" kindref="member" tooltip="Move low to high packed SP-FP (SSE).">movlhps</ref>,<sp/>kInstMovlhps,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2050"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>low<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2051" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a80d611e737f9f92b785f9f4b7f2120b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a80d611e737f9f92b785f9f4b7f2120b8" kindref="member" tooltip="Move low packed SP-FP (SSE).">movlps</ref>,<sp/>kInstMovlps,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2052"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>low<sp/>packed<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2053" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a165f865d8d331de28a6cd0f13185cd7c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movlps,<sp/>kInstMovlps,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2055"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>aligned<sp/>four<sp/>packed<sp/>SP-FP<sp/>non-temporal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2056" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a075cc39dcfbbfff63177c2d2504e1758" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a075cc39dcfbbfff63177c2d2504e1758" kindref="member" tooltip="Move aligned four packed SP-FP non-temporal (SSE).">movntps</ref>,<sp/>kInstMovntps,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2058"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>scalar<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2059" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad4bd4723265f7c554703ce10c75a433f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad4bd4723265f7c554703ce10c75a433f" kindref="member" tooltip="Move scalar SP-FP (SSE).">movss</ref>,<sp/>kInstMovss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2060"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2061" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad5e6735ab05b9b9b88c4d17671f4facc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movss,<sp/>kInstMovss,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2062"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2063" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad3f7c4a714345dd72170004eaf473bae" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movss,<sp/>kInstMovss,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2065"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>unaligned<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE).</highlight></codeline>
<codeline lineno="2066" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a723aa4b30fcdb3d5ff7427a7e38405ce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a723aa4b30fcdb3d5ff7427a7e38405ce" kindref="member" tooltip="Move unaligned packed SP-FP values (SSE).">movups</ref>,<sp/>kInstMovups,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2067"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2068" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8a15ccd198b23f97783c94c648e27d79" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movups,<sp/>kInstMovups,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2069"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2070" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aafed902bcb0bc596328ff865409e6d65" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movups,<sp/>kInstMovups,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2072"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>multiply<sp/>(SSE).</highlight></codeline>
<codeline lineno="2073" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac810ea5df3e28037f9b41acf4c97efc7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac810ea5df3e28037f9b41acf4c97efc7" kindref="member" tooltip="Packed SP-FP multiply (SSE).">mulps</ref>,<sp/>kInstMulps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2074"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2075" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afcad04bfb6ac77ece4e0dc692da69781" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mulps,<sp/>kInstMulps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2077"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>multiply<sp/>(SSE).</highlight></codeline>
<codeline lineno="2078" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a185455ffcdd9f6216e1240c7fce20454" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a185455ffcdd9f6216e1240c7fce20454" kindref="member" tooltip="Scalar SP-FP multiply (SSE).">mulss</ref>,<sp/>kInstMulss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2079"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2080" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4feb47cecc7f277597b35e05121a76a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mulss,<sp/>kInstMulss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2082"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Or<sp/>for<sp/>SP-FP<sp/>data<sp/>(SSE).</highlight></codeline>
<codeline lineno="2083" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6d7bb4f2bc06b410f09efb50988a1f19" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6d7bb4f2bc06b410f09efb50988a1f19" kindref="member" tooltip="Or for SP-FP data (SSE).">orps</ref>,<sp/>kInstOrps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2084"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2085" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa70119e0f4e98ac949704e4f5536b65d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(orps,<sp/>kInstOrps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2087"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>average<sp/>(SSE).</highlight></codeline>
<codeline lineno="2088" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae0c8425153db1b22c9598378e2f09837" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae0c8425153db1b22c9598378e2f09837" kindref="member" tooltip="Packed average (SSE).">pavgb</ref>,<sp/>kInstPavgb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2089"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2090" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a63dbe1ba32cae73468efb9517d11ce99" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgb,<sp/>kInstPavgb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2092"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>average<sp/>(SSE).</highlight></codeline>
<codeline lineno="2093" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1f685e4b5093085a2dac3bf1c1bb786e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1f685e4b5093085a2dac3bf1c1bb786e" kindref="member" tooltip="Packed average (SSE).">pavgw</ref>,<sp/>kInstPavgw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2094"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2095" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a48e9d613a0979af1ff562dc59d457523" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgw,<sp/>kInstPavgw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2097"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>word<sp/>(SSE).</highlight></codeline>
<codeline lineno="2098" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a639d3a57783d2f7443e1a3698b3edf01" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a639d3a57783d2f7443e1a3698b3edf01" kindref="member" tooltip="Extract word (SSE).">pextrw</ref>,<sp/>kInstPextrw,<sp/>GpReg,<sp/>MmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2100"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Insert<sp/>word<sp/>(SSE).</highlight></codeline>
<codeline lineno="2101" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2220e7bc4b9f3482cc1c497cdd153c97" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2220e7bc4b9f3482cc1c497cdd153c97" kindref="member" tooltip="Insert word (SSE).">pinsrw</ref>,<sp/>kInstPinsrw,<sp/>MmReg,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2102"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2103" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac30dc3cd293e7723a3dc17b2fec23903" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrw,<sp/>kInstPinsrw,<sp/>MmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2105"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>signed<sp/>integer<sp/>word<sp/>maximum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2106" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4b0e2a8347cde4979732cb70f546a2bb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4b0e2a8347cde4979732cb70f546a2bb" kindref="member" tooltip="Packed signed integer word maximum (SSE).">pmaxsw</ref>,<sp/>kInstPmaxsw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2107"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2108" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aed5737ebb35ffe54b136724399ec5054" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxsw,<sp/>kInstPmaxsw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2110"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>unsigned<sp/>integer<sp/>byte<sp/>maximum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2111" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7474422f245d2c2a7b1174f19074ff1e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7474422f245d2c2a7b1174f19074ff1e" kindref="member" tooltip="Packed unsigned integer byte maximum (SSE).">pmaxub</ref>,<sp/>kInstPmaxub,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2112"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2113" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a04fa03cb1eb91d78a9db7a578b4e0f19" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxub,<sp/>kInstPmaxub,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2115"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>signed<sp/>integer<sp/>word<sp/>minimum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2116" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acaf5e61c828bdc2a72177e697e4a43d5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acaf5e61c828bdc2a72177e697e4a43d5" kindref="member" tooltip="Packed signed integer word minimum (SSE).">pminsw</ref>,<sp/>kInstPminsw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2117"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2118" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4acbb0dce7f00fc821f5760601540e15" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminsw,<sp/>kInstPminsw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2120"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>unsigned<sp/>integer<sp/>byte<sp/>minimum<sp/>(SSE).</highlight></codeline>
<codeline lineno="2121" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abd4ca813a42cfbae284ce817a8cc3c2b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abd4ca813a42cfbae284ce817a8cc3c2b" kindref="member" tooltip="Packed unsigned integer byte minimum (SSE).">pminub</ref>,<sp/>kInstPminub,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2122"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2123" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7174435ad753eca6423f259a6466f07e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminub,<sp/>kInstPminub,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2125"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>Byte<sp/>mask<sp/>to<sp/>integer<sp/>(SSE).</highlight></codeline>
<codeline lineno="2126" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abfb982c05ce442997ec0e4a94d85039d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abfb982c05ce442997ec0e4a94d85039d" kindref="member" tooltip="Move Byte mask to integer (SSE).">pmovmskb</ref>,<sp/>kInstPmovmskb,<sp/>GpReg,<sp/>MmReg)</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2128"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>unsigned<sp/>(SSE).</highlight></codeline>
<codeline lineno="2129" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9fe37248e9f6c52214046c0165ff9316" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9fe37248e9f6c52214046c0165ff9316" kindref="member" tooltip="Packed multiply high unsigned (SSE).">pmulhuw</ref>,<sp/>kInstPmulhuw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2130"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2131" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a999ca292d39f2274918e2d613e38054e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhuw,<sp/>kInstPmulhuw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2133"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sum<sp/>of<sp/>absolute<sp/>differences<sp/>(SSE).</highlight></codeline>
<codeline lineno="2134" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa4a7fe27f5fb637c9f41f495b0915d3c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa4a7fe27f5fb637c9f41f495b0915d3c" kindref="member" tooltip="Packed sum of absolute differences (SSE).">psadbw</ref>,<sp/>kInstPsadbw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2135"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2136" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a453e080f0975f4433a1d73cd067b075a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psadbw,<sp/>kInstPsadbw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2138"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shuffle<sp/>Word<sp/>(SSE).</highlight></codeline>
<codeline lineno="2139" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a569dca34f3488ad0763b2415bfa5d778" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a569dca34f3488ad0763b2415bfa5d778" kindref="member" tooltip="Packed shuffle Word (SSE).">pshufw</ref>,<sp/>kInstPshufw,<sp/>MmReg,<sp/>MmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2140"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2141" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad05f3e1a4a0a3a6b8dcdf0a9365173d9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pshufw,<sp/>kInstPshufw,<sp/>MmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2143"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>reciprocal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2144" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a00bd63f9dab2988acd6f373e2545c2da" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a00bd63f9dab2988acd6f373e2545c2da" kindref="member" tooltip="Packed SP-FP reciprocal (SSE).">rcpps</ref>,<sp/>kInstRcpps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2145"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2146" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7f4277ef37b83bc86dc1a911db440507" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rcpps,<sp/>kInstRcpps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2148"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>reciprocal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2149" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a89c585b6608a3a776156d3b91274d0e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a89c585b6608a3a776156d3b91274d0e7" kindref="member" tooltip="Scalar SP-FP reciprocal (SSE).">rcpss</ref>,<sp/>kInstRcpss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2150"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2151" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a47fbe5b3f4d1642b3584d793255e6d1c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rcpss,<sp/>kInstRcpss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2153"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Prefetch<sp/>(SSE).</highlight></codeline>
<codeline lineno="2154" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae59f6874c5443228e93df39af5ebf669" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae59f6874c5443228e93df39af5ebf669" kindref="member" tooltip="Prefetch (SSE).">prefetch</ref>,<sp/>kInstPrefetch,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2156"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compute<sp/>sum<sp/>of<sp/>absolute<sp/>differences<sp/>(SSE).</highlight></codeline>
<codeline lineno="2157" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a64ea3f50cde731bd8c47a07dee971659" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psadbw,<sp/>kInstPsadbw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2158"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2159" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a42277bbc179ac8ed93041415fda385d4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psadbw,<sp/>kInstPsadbw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2161"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>square<sp/>root<sp/>reciprocal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2162" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab03abfff83a509a1f678ac3c2ce21382" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab03abfff83a509a1f678ac3c2ce21382" kindref="member" tooltip="Packed SP-FP square root reciprocal (SSE).">rsqrtps</ref>,<sp/>kInstRsqrtps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2163"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2164" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a228c9163446af814da1bc32e7c10eac9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rsqrtps,<sp/>kInstRsqrtps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2166"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>square<sp/>root<sp/>reciprocal<sp/>(SSE).</highlight></codeline>
<codeline lineno="2167" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abd52d16edd9ea70d950e7c861124628e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abd52d16edd9ea70d950e7c861124628e" kindref="member" tooltip="Scalar SP-FP square root reciprocal (SSE).">rsqrtss</ref>,<sp/>kInstRsqrtss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2168"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2169" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5807c8d99394de0e040d53739d3d16c9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(rsqrtss,<sp/>kInstRsqrtss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2171"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>fence<sp/>(SSE).</highlight></codeline>
<codeline lineno="2172" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a504d5e2ba4a2f25bfc26195c8d721a1b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a504d5e2ba4a2f25bfc26195c8d721a1b" kindref="member" tooltip="Store fence (SSE).">sfence</ref>,<sp/>kInstSfence)</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2174"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shuffle<sp/>SP-FP<sp/>(SSE).</highlight></codeline>
<codeline lineno="2175" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aecbf65ca74e038674699427568b8d988" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aecbf65ca74e038674699427568b8d988" kindref="member" tooltip="Shuffle SP-FP (SSE).">shufps</ref>,<sp/>kInstShufps,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2176"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2177" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a06dfba2087bda9aee63920ebac901c2f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shufps,<sp/>kInstShufps,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2179"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>square<sp/>root<sp/>(SSE).</highlight></codeline>
<codeline lineno="2180" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6179c0ec0bca940eaf5233694bfd41cd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6179c0ec0bca940eaf5233694bfd41cd" kindref="member" tooltip="Packed SP-FP square root (SSE).">sqrtps</ref>,<sp/>kInstSqrtps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2181"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2182" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa13211674a92eac4daa8a72de36d6b2a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sqrtps,<sp/>kInstSqrtps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2184"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>square<sp/>root<sp/>(SSE).</highlight></codeline>
<codeline lineno="2185" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad63e5fae4386c333668529a0e3fc84d1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad63e5fae4386c333668529a0e3fc84d1" kindref="member" tooltip="Scalar SP-FP square root (SSE).">sqrtss</ref>,<sp/>kInstSqrtss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2186"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2187" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a181db99a3e24536c02631e7f4b3f9b01" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sqrtss,<sp/>kInstSqrtss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2189"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>streaming<sp/>SIMD<sp/>extension<sp/>control/status<sp/>(SSE).</highlight></codeline>
<codeline lineno="2190" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa433da13b7d68f7d08196d2f51662e17" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa433da13b7d68f7d08196d2f51662e17" kindref="member" tooltip="Store streaming SIMD extension control/status (SSE).">stmxcsr</ref>,<sp/>kInstStmxcsr,<sp/>Mem)</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2192"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>subtract<sp/>(SSE).</highlight></codeline>
<codeline lineno="2193" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a87360277291db7b87e88c87bd6c8bdf9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a87360277291db7b87e88c87bd6c8bdf9" kindref="member" tooltip="Packed SP-FP subtract (SSE).">subps</ref>,<sp/>kInstSubps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2194"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2195" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac79401bac030b9ce2a4c0cb2e224cbaf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(subps,<sp/>kInstSubps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2197"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>SP-FP<sp/>subtract<sp/>(SSE).</highlight></codeline>
<codeline lineno="2198" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af80f72a7f7853772165cb1f647c80536" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af80f72a7f7853772165cb1f647c80536" kindref="member" tooltip="Scalar SP-FP subtract (SSE).">subss</ref>,<sp/>kInstSubss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2199"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2200" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0d353d7b0612d426e4774f92a1838d83" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(subss,<sp/>kInstSubss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2202"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unordered<sp/>scalar<sp/>SP-FP<sp/>compare<sp/>and<sp/>set<sp/>EFLAGS<sp/>(SSE).</highlight></codeline>
<codeline lineno="2203" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a13e4c6207799cea487f081c394a94eac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a13e4c6207799cea487f081c394a94eac" kindref="member" tooltip="Unordered scalar SP-FP compare and set EFLAGS (SSE).">ucomiss</ref>,<sp/>kInstUcomiss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2204"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2205" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afc8eb97de7f4e89468d52c2cd8e92481" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(ucomiss,<sp/>kInstUcomiss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2207"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>packed<sp/>SP-FP<sp/>data<sp/>(SSE).</highlight></codeline>
<codeline lineno="2208" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a03918c60a16ddfa67c615fd6107d37ec" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a03918c60a16ddfa67c615fd6107d37ec" kindref="member" tooltip="Unpack high packed SP-FP data (SSE).">unpckhps</ref>,<sp/>kInstUnpckhps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2209"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2210" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae071c83720a29c57bdada05e1f7360c0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(unpckhps,<sp/>kInstUnpckhps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2212"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>low<sp/>packed<sp/>SP-FP<sp/>data<sp/>(SSE).</highlight></codeline>
<codeline lineno="2213" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae6664448f7a3cee98a157af1273dbb51" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae6664448f7a3cee98a157af1273dbb51" kindref="member" tooltip="Unpack low packed SP-FP data (SSE).">unpcklps</ref>,<sp/>kInstUnpcklps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2214"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2215" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a75a30ec7bb277eaaafe671c5b5b22880" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(unpcklps,<sp/>kInstUnpcklps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2217"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xor<sp/>for<sp/>SP-FP<sp/>data<sp/>(SSE).</highlight></codeline>
<codeline lineno="2218" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a637702e9422f03410eb56c620f03a9b5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a637702e9422f03410eb56c620f03a9b5" kindref="member" tooltip="Xor for SP-FP data (SSE).">xorps</ref>,<sp/>kInstXorps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2219"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2220" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3498e6101d6d98d7d466e1888e7cfa02" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xorps,<sp/>kInstXorps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"></highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SSE2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2226"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2227" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a35991ed4ef719bbc5ddbc5d2d7780ac1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a35991ed4ef719bbc5ddbc5d2d7780ac1" kindref="member" tooltip="Packed DP-FP add (SSE2).">addpd</ref>,<sp/>kInstAddpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2228"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2229" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8ae9d6f39d02a59044038850518cde66" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addpd,<sp/>kInstAddpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2231"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>DP-FP<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2232" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a58f385f72928e4000e338d502926c891" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a58f385f72928e4000e338d502926c891" kindref="member" tooltip="Scalar DP-FP add (SSE2).">addsd</ref>,<sp/>kInstAddsd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2233"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2234" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4484086145cc1932d45d8aeef736d4b1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addsd,<sp/>kInstAddsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2236"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And-not<sp/>for<sp/>DP-FP<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2237" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae3156ce624211552efc5375565662239" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae3156ce624211552efc5375565662239" kindref="member" tooltip="And-not for DP-FP (SSE2).">andnpd</ref>,<sp/>kInstAndnpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2238"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2239" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1addf8571c60dfc73732d1144bf3fa719a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(andnpd,<sp/>kInstAndnpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2241"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And<sp/>for<sp/>DP-FP<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2242" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a58a1ee9600ccf81ef9c5404f2412e6b7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a58a1ee9600ccf81ef9c5404f2412e6b7" kindref="member" tooltip="And for DP-FP (SSE2).">andpd</ref>,<sp/>kInstAndpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2243"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2244" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3031ab0eeb708c342c2bf00d66d6c839" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(andpd,<sp/>kInstAndpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2246"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Flush<sp/>cache<sp/>line<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2247" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a763bee18f28f584b8d165820f3ebe16d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a763bee18f28f584b8d165820f3ebe16d" kindref="member" tooltip="Flush cache line (SSE2).">clflush</ref>,<sp/>kInstClflush,<sp/>Mem)</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2249"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>compare<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2250" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a23738c5a8ff9c2ba1e14b3870dd2584e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a23738c5a8ff9c2ba1e14b3870dd2584e" kindref="member" tooltip="Packed DP-FP compare (SSE2).">cmppd</ref>,<sp/>kInstCmppd,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2251"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2252" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a924163e482359a7296af631d19458ff0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(cmppd,<sp/>kInstCmppd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2254"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>scalar<sp/>SP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2255" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a014600ddf19b281bc050d79bb69228b2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a014600ddf19b281bc050d79bb69228b2" kindref="member" tooltip="Compare scalar SP-FP values (SSE2).">cmpsd</ref>,<sp/>kInstCmpsd,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2256"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2257" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad2ecb653566c1332afa1993eda46a27d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(cmpsd,<sp/>kInstCmpsd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2259"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>ordered<sp/>DP-FP<sp/>compare<sp/>and<sp/>set<sp/>EFLAGS<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2260" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a70fc47e40023aa28c0d90cc800bf0ff4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a70fc47e40023aa28c0d90cc800bf0ff4" kindref="member" tooltip="Scalar ordered DP-FP compare and set EFLAGS (SSE2).">comisd</ref>,<sp/>kInstComisd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2261"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2262" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa60e6d4bf1704e2814532c622a3a9068" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(comisd,<sp/>kInstComisd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2264"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>qword<sp/>integers<sp/>to<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2265" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a651435ffe71891f73cdcc0d4220ac1d7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a651435ffe71891f73cdcc0d4220ac1d7" kindref="member" tooltip="Convert packed qword integers to packed DP-FP values (SSE2).">cvtdq2pd</ref>,<sp/>kInstCvtdq2pd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2266"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2267" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad5889cbdd7109feb5c033349ffa640b9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtdq2pd,<sp/>kInstCvtdq2pd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2269"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>qword<sp/>integers<sp/>to<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2270" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6877c97dda97d21657088bc1f82ba6cd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6877c97dda97d21657088bc1f82ba6cd" kindref="member" tooltip="Convert packed qword integers to packed SP-FP values (SSE2).">cvtdq2ps</ref>,<sp/>kInstCvtdq2ps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2271"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2272" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a92ce752721403155e2cbc750cf67beb8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtdq2ps,<sp/>kInstCvtdq2ps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2274"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>DP-FP<sp/>values<sp/>to<sp/>packed<sp/>qword<sp/>integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2275" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af7046914d46e0fac764af8961f9ec2ef" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af7046914d46e0fac764af8961f9ec2ef" kindref="member" tooltip="Convert packed DP-FP values to packed qword integers (SSE2).">cvtpd2dq</ref>,<sp/>kInstCvtpd2dq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2276"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2277" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afba2d574d2231045fb417b0e77495e3c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtpd2dq,<sp/>kInstCvtpd2dq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2279"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>DP-FP<sp/>values<sp/>to<sp/>packed<sp/>qword<sp/>integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2280" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab2973c5ddb3b10d827fac683c1b8954f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab2973c5ddb3b10d827fac683c1b8954f" kindref="member" tooltip="Convert packed DP-FP values to packed qword integers (SSE2).">cvtpd2pi</ref>,<sp/>kInstCvtpd2pi,<sp/>MmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2281"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2282" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a815470e4d0f8a91c823a12d511793194" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtpd2pi,<sp/>kInstCvtpd2pi,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2284"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>DP-FP<sp/>values<sp/>to<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2285" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1d548594a8407f5c6690cfa6f434c957" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1d548594a8407f5c6690cfa6f434c957" kindref="member" tooltip="Convert packed DP-FP values to packed SP-FP values (SSE2).">cvtpd2ps</ref>,<sp/>kInstCvtpd2ps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2286"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2287" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae6db7810bf3386a560038ed4dfb99582" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtpd2ps,<sp/>kInstCvtpd2ps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2288"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2289"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>dword<sp/>integers<sp/>to<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2290" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a02af38ceb452519de910c0fd55cc40d7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a02af38ceb452519de910c0fd55cc40d7" kindref="member" tooltip="Convert packed dword integers to packed DP-FP values (SSE2).">cvtpi2pd</ref>,<sp/>kInstCvtpi2pd,<sp/>XmmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2291"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2292" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab1e4bec30ad2e3db5103493d23b2f18d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtpi2pd,<sp/>kInstCvtpi2pd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2294"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>SP-FP<sp/>values<sp/>to<sp/>packed<sp/>qword<sp/>integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2295" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3c841c6fff8c57b2739489dda5967808" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3c841c6fff8c57b2739489dda5967808" kindref="member" tooltip="Convert packed SP-FP values to packed qword integers (SSE2).">cvtps2dq</ref>,<sp/>kInstCvtps2dq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2296"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2297" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0f7ffc3d73649749e54a07336428b382" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtps2dq,<sp/>kInstCvtps2dq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2299"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>packed<sp/>SP-FP<sp/>values<sp/>to<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2300" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2c0738315009363a2fa737b8f70685cb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2c0738315009363a2fa737b8f70685cb" kindref="member" tooltip="Convert packed SP-FP values to packed DP-FP values (SSE2).">cvtps2pd</ref>,<sp/>kInstCvtps2pd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2301"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2302" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3445956f16d639789ed90b611d02d69d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtps2pd,<sp/>kInstCvtps2pd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2304"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>scalar<sp/>DP-FP<sp/>value<sp/>to<sp/>dword<sp/>integer<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2305" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6c9b1726f16b0eee737af57897f32292" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6c9b1726f16b0eee737af57897f32292" kindref="member" tooltip="Convert scalar DP-FP value to dword integer (SSE2).">cvtsd2si</ref>,<sp/>kInstCvtsd2si,<sp/>GpReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2306"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2307" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a34837ad1ce65444d35274ea1aebf770f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtsd2si,<sp/>kInstCvtsd2si,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2309"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>scalar<sp/>DP-FP<sp/>value<sp/>to<sp/>scalar<sp/>SP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2310" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0c549dbd671de61510dbdedc46466708" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0c549dbd671de61510dbdedc46466708" kindref="member" tooltip="Convert scalar DP-FP value to scalar SP-FP value (SSE2).">cvtsd2ss</ref>,<sp/>kInstCvtsd2ss,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2311"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2312" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad703d5681decbc2c20fa5584797b2280" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtsd2ss,<sp/>kInstCvtsd2ss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2314"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>dword<sp/>integer<sp/>to<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2315" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a821dda7e23e2c709221e84da9b3872ba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a821dda7e23e2c709221e84da9b3872ba" kindref="member" tooltip="Convert dword integer to scalar DP-FP value (SSE2).">cvtsi2sd</ref>,<sp/>kInstCvtsi2sd,<sp/>XmmReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2316"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2317" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2ec9296d29f08b34497616d1540bd205" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtsi2sd,<sp/>kInstCvtsi2sd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2319"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>scalar<sp/>SP-FP<sp/>value<sp/>to<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2320" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7520c9035b974f23ba20bcb4eb3c934d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7520c9035b974f23ba20bcb4eb3c934d" kindref="member" tooltip="Convert scalar SP-FP value to scalar DP-FP value (SSE2).">cvtss2sd</ref>,<sp/>kInstCvtss2sd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2321"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2322" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a70beb6e31d552cd05e66fc567d413a1c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvtss2sd,<sp/>kInstCvtss2sd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2324"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>with<sp/>truncation<sp/>packed<sp/>DP-FP<sp/>values<sp/>to<sp/>packed<sp/>dword<sp/>integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2325" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a894a88f3570c89902b7845f09187c4fd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a894a88f3570c89902b7845f09187c4fd" kindref="member" tooltip="Convert with truncation packed DP-FP values to packed dword integers (SSE2).">cvttpd2pi</ref>,<sp/>kInstCvttpd2pi,<sp/>MmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2326"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2327" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6c1d10335473c727d9b3dc5af7431883" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttpd2pi,<sp/>kInstCvttpd2pi,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2329"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>with<sp/>truncation<sp/>packed<sp/>DP-FP<sp/>values<sp/>to<sp/>packed<sp/>qword<sp/>integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2330" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa8751b58f87dbba7d77e6c1f1491647c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa8751b58f87dbba7d77e6c1f1491647c" kindref="member" tooltip="Convert with truncation packed DP-FP values to packed qword integers (SSE2).">cvttpd2dq</ref>,<sp/>kInstCvttpd2dq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2331"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2332" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0d14a924f396c1cd5416c212a23f96b2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttpd2dq,<sp/>kInstCvttpd2dq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2334"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>with<sp/>truncation<sp/>packed<sp/>SP-FP<sp/>values<sp/>to<sp/>packed<sp/>qword<sp/>integers<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2335" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a56ad8f9ebff79bc1211006c417634ae8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a56ad8f9ebff79bc1211006c417634ae8" kindref="member" tooltip="Convert with truncation packed SP-FP values to packed qword integers (SSE2).">cvttps2dq</ref>,<sp/>kInstCvttps2dq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2336"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2337" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7ac683a61df6f851b60af7c7a2b410f5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttps2dq,<sp/>kInstCvttps2dq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2339"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>with<sp/>truncation<sp/>scalar<sp/>DP-FP<sp/>value<sp/>to<sp/>signed<sp/>dword<sp/>integer<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2340" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adcab0e4d34878c56985a05d7e8b3f613" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adcab0e4d34878c56985a05d7e8b3f613" kindref="member" tooltip="Convert with truncation scalar DP-FP value to signed dword integer (SSE2).">cvttsd2si</ref>,<sp/>kInstCvttsd2si,<sp/>GpReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2341"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2342" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a82ea0ff3c23af1f0ad093e340ab17d8d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(cvttsd2si,<sp/>kInstCvttsd2si,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2344"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>divide<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2345" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a35885c066818e39b9cb31b4d86ac0c60" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a35885c066818e39b9cb31b4d86ac0c60" kindref="member" tooltip="Packed DP-FP divide (SSE2).">divpd</ref>,<sp/>kInstDivpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2346"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2347" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac97cfec5f27e835d134f9b01b7754a4b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(divpd,<sp/>kInstDivpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2349"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>DP-FP<sp/>divide<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2350" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4faaa0e884931258e3f64057b0cf473c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4faaa0e884931258e3f64057b0cf473c" kindref="member" tooltip="Scalar DP-FP divide (SSE2).">divsd</ref>,<sp/>kInstDivsd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2351"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2352" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab4b2086fa03651aa48687e06ddaa0315" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(divsd,<sp/>kInstDivsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2354"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>fence<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2355" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a06c20e382dc0efc771eec4bcf398bd0b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a06c20e382dc0efc771eec4bcf398bd0b" kindref="member" tooltip="Load fence (SSE2).">lfence</ref>,<sp/>kInstLfence)</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2357"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>selected<sp/>bytes<sp/>of<sp/>oword<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2358"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="2359"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Target<sp/>is<sp/>DS:EDI.</highlight></codeline>
<codeline lineno="2360" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aad2cc5bb11b889c19ef5ca42d3ebab28" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aad2cc5bb11b889c19ef5ca42d3ebab28" kindref="member" tooltip="Store selected bytes of oword (SSE2).">maskmovdqu</ref>,<sp/>kInstMaskmovdqu,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2362"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return<sp/>maximum<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2363" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aca4488913d82b0856881569dfd2e75be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aca4488913d82b0856881569dfd2e75be" kindref="member" tooltip="Return maximum packed DP-FP values (SSE2).">maxpd</ref>,<sp/>kInstMaxpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2364"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2365" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a743df8fe0871365e12f7a42e95675ac9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(maxpd,<sp/>kInstMaxpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2367"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return<sp/>maximum<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2368" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a97ac870f1583f8f9dc65b1248a8e22e1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a97ac870f1583f8f9dc65b1248a8e22e1" kindref="member" tooltip="Return maximum scalar DP-FP value (SSE2).">maxsd</ref>,<sp/>kInstMaxsd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2369"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2370" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a15f0fba8487e9a6a083059f9dd392e56" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(maxsd,<sp/>kInstMaxsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2372"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>fence<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2373" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab8b280bb880661c6ab60abab86d2f898" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab8b280bb880661c6ab60abab86d2f898" kindref="member" tooltip="Memory fence (SSE2).">mfence</ref>,<sp/>kInstMfence)</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2375"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return<sp/>minimum<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2376" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa9dbd64b66cb0eefecdb533ad9ec8425" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa9dbd64b66cb0eefecdb533ad9ec8425" kindref="member" tooltip="Return minimum packed DP-FP values (SSE2).">minpd</ref>,<sp/>kInstMinpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2377"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2378" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a157821fc5ff833979725ec0583d96253" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(minpd,<sp/>kInstMinpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2380"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Return<sp/>minimum<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2381" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a92b48a41edbb7fc5c3f6d3789742bfb5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a92b48a41edbb7fc5c3f6d3789742bfb5" kindref="member" tooltip="Return minimum scalar DP-FP value (SSE2).">minsd</ref>,<sp/>kInstMinsd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2382"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2383" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af4b8b38e8db2e287a5fb7cf4eb8e56d1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(minsd,<sp/>kInstMinsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2385"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>aligned<sp/>oword<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2386" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac90d33fdcbeae3092deffbd9fadfc9fa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac90d33fdcbeae3092deffbd9fadfc9fa" kindref="member" tooltip="Move aligned oword (SSE2).">movdqa</ref>,<sp/>kInstMovdqa,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2387"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2388" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aaa9386b21063b7526c2969b847b955f0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movdqa,<sp/>kInstMovdqa,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2389"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2390" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3b727be864ba2e9de4f1040aea28749c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movdqa,<sp/>kInstMovdqa,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2392"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>unaligned<sp/>oword<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2393" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad12fac691914ac592a4da04703f36301" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad12fac691914ac592a4da04703f36301" kindref="member" tooltip="Move unaligned oword (SSE2).">movdqu</ref>,<sp/>kInstMovdqu,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2394"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2395" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a95a0f0adf1c324dceb4b7371ce47ca81" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movdqu,<sp/>kInstMovdqu,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2396"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2397" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae05b1d4814e56a6aaed2d8221eb94219" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movdqu,<sp/>kInstMovdqu,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2399"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>packed<sp/>SP-FP<sp/>sign<sp/>mask<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2400" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5b34c7d742188646a47ef5462bf6edd2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5b34c7d742188646a47ef5462bf6edd2" kindref="member" tooltip="Extract packed SP-FP sign mask (SSE2).">movmskps</ref>,<sp/>kInstMovmskps,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2402"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>packed<sp/>DP-FP<sp/>sign<sp/>mask<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2403" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a423f778347567585b87682fba7c47e29" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a423f778347567585b87682fba7c47e29" kindref="member" tooltip="Extract packed DP-FP sign mask (SSE2).">movmskpd</ref>,<sp/>kInstMovmskpd,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2405"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2406" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6c3f1c1496ed0aac4f3e994f20f7dcc8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6c3f1c1496ed0aac4f3e994f20f7dcc8" kindref="member" tooltip="Move scalar DP-FP value (SSE2).">movsd</ref>,<sp/>kInstMovsd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2407"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2408" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7fe1657e0c586605444fc50479435329" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movsd,<sp/>kInstMovsd,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2409"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2410" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad971835b68d06541b9fc0dd7bdca1f4c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movsd,<sp/>kInstMovsd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2412"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>aligned<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2413" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8c4f948ff2aa9276af6b548664061195" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8c4f948ff2aa9276af6b548664061195" kindref="member" tooltip="Move aligned packed DP-FP values (SSE2).">movapd</ref>,<sp/>kInstMovapd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2414"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2415" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4c05b1f1daf2599576ecfe1450802a5e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movapd,<sp/>kInstMovapd,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2416"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2417" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae88f95a6c633fe0bc060ec3a73f61b5c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movapd,<sp/>kInstMovapd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2419"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>qword<sp/>from<sp/>Xmm<sp/>to<sp/>Mm<sp/>register<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2420" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adb9a3802137ffd2af61f3328ca1a7a7e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adb9a3802137ffd2af61f3328ca1a7a7e" kindref="member" tooltip="Move qword from Xmm to Mm register (SSE2).">movdq2q</ref>,<sp/>kInstMovdq2q,<sp/>MmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2422"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>qword<sp/>from<sp/>Mm<sp/>to<sp/>Xmm<sp/>register<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2423" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae733e7e52774b27be97640b8047807b0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae733e7e52774b27be97640b8047807b0" kindref="member" tooltip="Move qword from Mm to Xmm register (SSE2).">movq2dq</ref>,<sp/>kInstMovq2dq,<sp/>XmmReg,<sp/>MmReg)</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2425"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>high<sp/>packed<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2426" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aedfc61f774caf25bb5e52920e442eddd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aedfc61f774caf25bb5e52920e442eddd" kindref="member" tooltip="Move high packed DP-FP value (SSE2).">movhpd</ref>,<sp/>kInstMovhpd,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2427"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2428" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a60920742f8f0704935a774e7bd9baf50" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movhpd,<sp/>kInstMovhpd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2430"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>low<sp/>packed<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2431" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab34aaff253babe071661f629a27ad593" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab34aaff253babe071661f629a27ad593" kindref="member" tooltip="Move low packed DP-FP value (SSE2).">movlpd</ref>,<sp/>kInstMovlpd,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2432"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2433" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad080be2c9527c1cbfe21f8e50f845b08" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movlpd,<sp/>kInstMovlpd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2435"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>oword<sp/>using<sp/>non-temporal<sp/>hint<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2436" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8a08f6162da0003f2eda60ebdb9b5363" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8a08f6162da0003f2eda60ebdb9b5363" kindref="member" tooltip="Store oword using non-temporal hint (SSE2).">movntdq</ref>,<sp/>kInstMovntdq,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2438"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>store<sp/>dword<sp/>using<sp/>non-temporal<sp/>hint<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2439" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa78aa185a1636c43b1717ecf0d26beae" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa78aa185a1636c43b1717ecf0d26beae" kindref="member" tooltip="Store store dword using non-temporal hint (SSE2).">movnti</ref>,<sp/>kInstMovnti,<sp/>Mem,<sp/>GpReg)</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2441"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>packed<sp/>DP-FP<sp/>values<sp/>using<sp/>non-temporal<sp/>hint<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2442" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2963268c55b12fcc88d08953500806ce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2963268c55b12fcc88d08953500806ce" kindref="member" tooltip="Store packed DP-FP values using non-temporal hint (SSE2).">movntpd</ref>,<sp/>kInstMovntpd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2444"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>unaligned<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2445" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa6e1bf01ac2ad4b9239137a17be6a067" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa6e1bf01ac2ad4b9239137a17be6a067" kindref="member" tooltip="Move unaligned packed DP-FP values (SSE2).">movupd</ref>,<sp/>kInstMovupd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2446"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2447" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac224b2983399517ed37cd994136b7614" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movupd,<sp/>kInstMovupd,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2448"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2449" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a246a47fb155e5f8931f7eab04e8300d1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movupd,<sp/>kInstMovupd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2451"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>multiply<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2452" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab18d07a30e3ee02a12e97b329db098df" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab18d07a30e3ee02a12e97b329db098df" kindref="member" tooltip="Packed DP-FP multiply (SSE2).">mulpd</ref>,<sp/>kInstMulpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2453"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2454" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3121db7961a468669c2ab5883446a847" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mulpd,<sp/>kInstMulpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2456"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>DP-FP<sp/>multiply<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2457" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a58b74bdd23175ae79ac097bddd4037c6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a58b74bdd23175ae79ac097bddd4037c6" kindref="member" tooltip="Scalar DP-FP multiply (SSE2).">mulsd</ref>,<sp/>kInstMulsd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2458"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2459" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a027a9ca18f74c1d8cf16ca6db20c0d83" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(mulsd,<sp/>kInstMulsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2461"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Or<sp/>for<sp/>DP-FP<sp/>Data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2462" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a90c4634cc3fc2412764180d2ed155bf3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a90c4634cc3fc2412764180d2ed155bf3" kindref="member" tooltip="Or for DP-FP Data (SSE2).">orpd</ref>,<sp/>kInstOrpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2463"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2464" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aab5a9fecc0ecfccd2a4632525b138357" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(orpd,<sp/>kInstOrpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2466"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>signed<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2467" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa976b542c04f197c4dc2a80c139536c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packsswb,<sp/>kInstPacksswb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2468"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2469" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a576e6dacbf11f44bb026b937608a3f09" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packsswb,<sp/>kInstPacksswb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2471"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>signed<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2472" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab10d0f66898140a862e8c6c5633168b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packssdw,<sp/>kInstPackssdw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2473"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2474" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a951b9bca81fcb55043468ef6bf35a9c0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packssdw,<sp/>kInstPackssdw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2476"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>unsigned<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2477" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac5f8fe0f2e68208bb47db870edb82fb5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packuswb,<sp/>kInstPackuswb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2478"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2479" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a77ff6c99642e0ca321631bf9fdd7539e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packuswb,<sp/>kInstPackuswb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2481"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>byte<sp/>Add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2482" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a903837f65b5ee7371e6d1262d89b8d53" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddb,<sp/>kInstPaddb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2483"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2484" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a827599bab0a8f7757a7819961189bd5f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddb,<sp/>kInstPaddb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2486"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>word<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2487" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adc9898ebce5a67dde5ee13ab810ce61c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddw,<sp/>kInstPaddw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2488"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2489" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a768e0a12c047ff08be7da8067ab48a50" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddw,<sp/>kInstPaddw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2491"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>dword<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2492" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af611b9541a470fb015b03206627e3ea2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddd,<sp/>kInstPaddd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2493"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2494" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a93a07c5fa3d3c3519c3fc5df477e87b7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddd,<sp/>kInstPaddd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2496"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>qword<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2497" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a214930eabc9b96554749139ddb2df069" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a214930eabc9b96554749139ddb2df069" kindref="member" tooltip="Packed qword add (SSE2).">paddq</ref>,<sp/>kInstPaddq,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2498"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2499" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0ef88bc678e9330840637bb4cf8c16a6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddq,<sp/>kInstPaddq,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2501"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>qword<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2502" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0650f9bcaf5b91c86fd105081df1912a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddq,<sp/>kInstPaddq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2503"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2504" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac6f05451e9c8b3d54c8d197876a89547" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddq,<sp/>kInstPaddq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2506"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2507" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1accbd619504682ae22a77f6e774664c5c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsb,<sp/>kInstPaddsb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2508"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2509" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac4efef46aedac85244e2c81a93afeea0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsb,<sp/>kInstPaddsb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2511"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2512" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9c53d2ff187f2c5def7047590e4bca35" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsw,<sp/>kInstPaddsw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2513"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2514" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab8bebf715054ca3e0e498d2ebf3d03c2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddsw,<sp/>kInstPaddsw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2516"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>unsigned<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2517" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a363552ec79358bc40173f2a7db93ae33" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusb,<sp/>kInstPaddusb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2518"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2519" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a924be893e7a45ddc04475f25aef58b8b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusb,<sp/>kInstPaddusb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2521"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>add<sp/>unsigned<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2522" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0b4e17702f523f9df3ca249739f2dc10" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusw,<sp/>kInstPaddusw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2523"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2524" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a645f78b9107b0c2e46c1b1b52a676a76" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(paddusw,<sp/>kInstPaddusw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2526"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2527" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aeb74d56b287138abc7d2d03ea6ef4126" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pand,<sp/>kInstPand,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2528"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2529" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7bfdbeaa57ecf42a63cf470384009c32" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pand,<sp/>kInstPand,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2531"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>And-not<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2532" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab3e6951b8a2f16a3bba6094191900d23" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pandn,<sp/>kInstPandn,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2533"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2534" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36017be9e32a2a02267c3f554972fab9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pandn,<sp/>kInstPandn,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2536"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Spin<sp/>loop<sp/>hint<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2537" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aba5154fbf0ace805977076b06d07e4ac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aba5154fbf0ace805977076b06d07e4ac" kindref="member" tooltip="Spin loop hint (SSE2).">pause</ref>,<sp/>kInstPause)</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2539"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>average<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2540" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6c52b6e58b0b53b724cf714828c86623" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgb,<sp/>kInstPavgb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2541"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2542" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad2fd4d8f98e9d81d8cd08799efc1cbcf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgb,<sp/>kInstPavgb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2544"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>average<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2545" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a39a44d6d44ec5f72cc49cba2c860b555" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgw,<sp/>kInstPavgw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2546"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2547" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a10031cff4e0932830baac9a04d8f680f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pavgw,<sp/>kInstPavgw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2549"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>bytes<sp/>for<sp/>equal<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2550" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a884cfb86ff739138754a98b02937511f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqb,<sp/>kInstPcmpeqb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2551"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2552" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a88bbd2fc0a4fa02620cd16304e8684b7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqb,<sp/>kInstPcmpeqb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2554"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>words<sp/>for<sp/>equal<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2555" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aee3bcd32e3aa77326446def9e67b2586" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqw,<sp/>kInstPcmpeqw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2556"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2557" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aba8f1f25188ada3252b2674fdc885ec2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqw,<sp/>kInstPcmpeqw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2559"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>dwords<sp/>for<sp/>equal<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2560" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aee2703540ab2edf9dfd0d190f82699cf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqd,<sp/>kInstPcmpeqd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2561"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2562" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa590714657d14cb99f5c973892216259" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqd,<sp/>kInstPcmpeqd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2564"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>bytes<sp/>for<sp/>greater<sp/>than<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2565" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abd7ed377367c8689f9047bdfce855368" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtb,<sp/>kInstPcmpgtb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2566"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2567" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7ea861ddcfae240174e70e1747f35f92" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtb,<sp/>kInstPcmpgtb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2569"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>words<sp/>for<sp/>greater<sp/>than<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2570" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36c2312c2a5359b2b43871c6cd3ca586" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtw,<sp/>kInstPcmpgtw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2571"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2572" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a81952a5ccd770bf2a0e502cae75def8e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtw,<sp/>kInstPcmpgtw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2574"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>dwords<sp/>for<sp/>greater<sp/>than<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2575" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a126c3edc4bdb2b4d00c6914217f9ea00" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtd,<sp/>kInstPcmpgtd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2576"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2577" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a680cbc35fdf19c353434212a8c69a4a3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtd,<sp/>kInstPcmpgtd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2579"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>word<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2580" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a74c3efbab0b5114cdb059ae8a5ae0689" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pextrw,<sp/>kInstPextrw,<sp/>GpReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2582"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Insert<sp/>word<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2583" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a102f6781f6b124a5c4e22f49b19924b6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrw,<sp/>kInstPinsrw,<sp/>XmmReg,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2584"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2585" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a94927a6ea13d26dc991609713f0ff242" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrw,<sp/>kInstPinsrw,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2587"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>signed<sp/>integer<sp/>word<sp/>maximum<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2588" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a528f9ec30c3cbe2ad0f54e6d6ecddb92" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxsw,<sp/>kInstPmaxsw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2589"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2590" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a343a8dd597ef9d205f6dc0b791a68c89" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxsw,<sp/>kInstPmaxsw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2592"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>unsigned<sp/>integer<sp/>byte<sp/>maximum<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2593" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7045cf159f66279017ed12c23f4e0925" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxub,<sp/>kInstPmaxub,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2594"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2595" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab80275ba7ab9126acb070a7a562af000" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxub,<sp/>kInstPmaxub,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2597"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>signed<sp/>integer<sp/>word<sp/>minimum<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2598" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac86144e6831ce229a5a81d03b5461b7d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminsw,<sp/>kInstPminsw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2599"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2600" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1113b8a108b638882cc33db06f08be6f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminsw,<sp/>kInstPminsw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2602"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>unsigned<sp/>integer<sp/>byte<sp/>minimum<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2603" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae7095e64f376dca20d73997fde0cd4b3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminub,<sp/>kInstPminub,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2604"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2605" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aaad62bc84bc5902a10abaaf93bf9d53b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminub,<sp/>kInstPminub,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2607"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>byte<sp/>mask<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2608" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aadc3f7e8486d75b128cf4538b4a9b31b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovmskb,<sp/>kInstPmovmskb,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2610"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2611" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3cd1b018054e0875b4733d83ea227ed0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhw,<sp/>kInstPmulhw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2612"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2613" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aecf0b2bce9e65183f66129061d822786" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhw,<sp/>kInstPmulhw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2615"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>unsigned<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2616" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2c2effbfabebf5b7835af8ec1dcb50bb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhuw,<sp/>kInstPmulhuw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2617"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2618" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9fbe4270337d4c55f57b4845d10ae7ea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhuw,<sp/>kInstPmulhuw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2620"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>low<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2621" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9d89b5ea508bba0133a895b3d87f6798" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmullw,<sp/>kInstPmullw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2622"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2623" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad3f0f6f2ba63a3e0bfa758798ab6598b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmullw,<sp/>kInstPmullw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2625"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>to<sp/>qword<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2626" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab0a16f3726ddcde115ee3146e8e5e31a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab0a16f3726ddcde115ee3146e8e5e31a" kindref="member" tooltip="Packed multiply to qword (SSE2).">pmuludq</ref>,<sp/>kInstPmuludq,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2627"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2628" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a716c885102f7a523908f96719bba425f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmuludq,<sp/>kInstPmuludq,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2630"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>to<sp/>qword<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2631" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5b1f5a29572e8bffbf2d1526e5157c4b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmuludq,<sp/>kInstPmuludq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2632"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2633" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a071265fc42027e851eff00a37aed0678" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmuludq,<sp/>kInstPmuludq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2635"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Or<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2636" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af50f9bcc7a216138a464e094c8c3d339" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(por,<sp/>kInstPor,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2637"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2638" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab1b44c234ae39c6ecfbeb6dd68001965" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(por,<sp/>kInstPor,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2640"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2641" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a97021b8fdc12dd0274bb87b64b465af8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pslld,<sp/>kInstPslld,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2642"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2643" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a341e1f6dc621880c83031b2f967cf123" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pslld,<sp/>kInstPslld,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2644"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2645" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a590b6a2ef488cd82822c857b9d2dcc79" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(pslld,<sp/>kInstPslld,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2647"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2648" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa542c755be51ec5c9ef3f7211d433461" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllq,<sp/>kInstPsllq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2649"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2650" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a086156f21d067281596022d6b01e6c09" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllq,<sp/>kInstPsllq,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2651"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2652" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a63362d2e2b8ae39a73e9cf09a28705fa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psllq,<sp/>kInstPsllq,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2654"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2655" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a23f124889c4b4a0c213d8336971ab2c7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllw,<sp/>kInstPsllw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2656"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2657" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5965637cf741c23bc89fb781a8865994" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psllw,<sp/>kInstPsllw,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2658"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2659" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac4dc476f406b8cc0adefcb7d1a990e05" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psllw,<sp/>kInstPsllw,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2661"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>left<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2662" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa1daf0547a2947dfe97edf7011ad7bdb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa1daf0547a2947dfe97edf7011ad7bdb" kindref="member" tooltip="Packed shift left logical (SSE2).">pslldq</ref>,<sp/>kInstPslldq,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2664"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>arithmetic<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2665" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9ed1911919e8dce9ef579b495210162c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrad,<sp/>kInstPsrad,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2666"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2667" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1fbb272a26c6c97996ada937d686d153" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrad,<sp/>kInstPsrad,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2668"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2669" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6d1dc5d94d5eb81a6fd0127d460442a1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrad,<sp/>kInstPsrad,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2671"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>arithmetic<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2672" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aba397d10355c84da890904b1fd5aa8dc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psraw,<sp/>kInstPsraw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2673"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2674" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5b31f6f7501a39772989da396afcc87e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psraw,<sp/>kInstPsraw,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2675"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2676" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7951585ab1ad43b145c13e338c87f105" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psraw,<sp/>kInstPsraw,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2678"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2679" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4614ee037edec8d0cd3688f42d8eec8c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubb,<sp/>kInstPsubb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2680"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2681" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abe9e5f18c18c01ca3db239a12ecacdc8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubb,<sp/>kInstPsubb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2683"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2684" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a24616b061443177742bee2b4d0854ae3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubw,<sp/>kInstPsubw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2685"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2686" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abe669bd4e715b09bd55dcce6ef6e1774" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubw,<sp/>kInstPsubw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2688"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2689" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a014420d63fe871a9cf497c999211d7b4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubd,<sp/>kInstPsubd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2690"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2691" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af4ce7d30022c2880a79c6e644630219b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubd,<sp/>kInstPsubd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2693"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2694" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a315d9a93448db72ca47a5e1c51db3908" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a315d9a93448db72ca47a5e1c51db3908" kindref="member" tooltip="Packed subtract (SSE2).">psubq</ref>,<sp/>kInstPsubq,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2695"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2696" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0873f1ee7b44e27532fb14ce66969a74" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubq,<sp/>kInstPsubq,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2698"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2699" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af10d67ea40c3fe8a97a388bf74a889fa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubq,<sp/>kInstPsubq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2700"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2701" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1addff194dcb93942807f5cc2aff4c3ee5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubq,<sp/>kInstPsubq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2703"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>and<sp/>add<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2704" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a13cc85e975a29c03cfd2ff4819f53b93" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddwd,<sp/>kInstPmaddwd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2705"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2706" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a17a750d54570abd02e1edf8adffc4b81" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddwd,<sp/>kInstPmaddwd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2708"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shuffle<sp/>packed<sp/>dwords<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2709" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aca074118efd81dc2b608470b68fd731a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aca074118efd81dc2b608470b68fd731a" kindref="member" tooltip="Shuffle packed dwords (SSE2).">pshufd</ref>,<sp/>kInstPshufd,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2710"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2711" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acc1e9b64fa164fb2a71966c1b39c7af3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pshufd,<sp/>kInstPshufd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2713"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shuffle<sp/>packed<sp/>high<sp/>words<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2714" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a420de56e952575b9ccfecb31146bee74" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a420de56e952575b9ccfecb31146bee74" kindref="member" tooltip="Shuffle packed high words (SSE2).">pshufhw</ref>,<sp/>kInstPshufhw,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2715"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2716" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad9ecf3584c799ca177c850f662a596b5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pshufhw,<sp/>kInstPshufhw,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2718"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shuffle<sp/>packed<sp/>low<sp/>Words<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2719" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5d2f19c6f5433998e9b61597494fb618" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5d2f19c6f5433998e9b61597494fb618" kindref="member" tooltip="Shuffle packed low Words (SSE2).">pshuflw</ref>,<sp/>kInstPshuflw,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2720"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2721" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4b0017cc8f3d5fffb0a1420124db9b69" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pshuflw,<sp/>kInstPshuflw,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2723"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2724" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1affec6c9cedb4d7cfd5edd01da86ad1a1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrld,<sp/>kInstPsrld,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2725"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2726" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1afb12d7c9ef5b5ddf189484b61b4b3088" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrld,<sp/>kInstPsrld,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2727"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2728" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af539a7e215bec2cee742f4b077b80223" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrld,<sp/>kInstPsrld,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2730"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2731" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a506a935d74a44277cff8f96d5a6c1230" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlq,<sp/>kInstPsrlq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2732"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2733" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9001762c75286c118179d416bd1cf7da" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlq,<sp/>kInstPsrlq,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2734"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2735" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a182721b2de257bdde0d40852ee6deb18" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrlq,<sp/>kInstPsrlq,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2737"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>OWord<sp/>shift<sp/>right<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2738" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5f17518f0389a06a5e8635f0b156972f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5f17518f0389a06a5e8635f0b156972f" kindref="member" tooltip="OWord shift right logical (SSE2).">psrldq</ref>,<sp/>kInstPsrldq,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2740"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shift<sp/>right<sp/>logical<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2741" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a17d23fe6b9d1b6f53be68c1274505a8e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlw,<sp/>kInstPsrlw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2742"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2743" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aeeac7b69374ce677488cfa4a7c4d2089" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psrlw,<sp/>kInstPsrlw,<sp/>XmmReg,<sp/>Mem)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2744"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2745" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a08dd9d1fdb247337c21c6a214a0ce600" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2i(psrlw,<sp/>kInstPsrlw,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2747"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2748" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6d8006863446801bbf21e76029a620d9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsb,<sp/>kInstPsubsb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2749"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2750" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a473185b3c0c4beb7d89b725f71ad3a48" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsb,<sp/>kInstPsubsb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2752"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2753" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a936082c2adfb6f6b38bbb4bb814f4839" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsw,<sp/>kInstPsubsw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2754"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2755" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a01ecd6f6d1f9e2fba162205a2fc8ca05" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubsw,<sp/>kInstPsubsw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2757"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>unsigned<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2758" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acbe4c6727104e8cab8d53a8dd7df23a2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusb,<sp/>kInstPsubusb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2759"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2760" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1d9b81bd302c60ef26c0ea7d548143ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusb,<sp/>kInstPsubusb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2762"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>subtract<sp/>with<sp/>unsigned<sp/>saturation<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2763" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4d21cc312714e044f93726516c9d624b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusw,<sp/>kInstPsubusw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2764"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2765" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad38201988f57265a9c1cf0d8349b87ad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psubusw,<sp/>kInstPsubusw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2767"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2768" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a81273ed2f2138b7321ff6b84fa3d51b5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhbw,<sp/>kInstPunpckhbw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2769"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2770" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9d76a2bd9f65d7c6e1b336855aca6c5f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhbw,<sp/>kInstPunpckhbw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2772"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2773" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2706c8952cc4155de813fdb6d9697b78" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhwd,<sp/>kInstPunpckhwd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2774"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2775" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2179fa12d7456db007a46d922ee5b160" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhwd,<sp/>kInstPunpckhwd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2777"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2778" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad93f9db0d12b955b48367ac7d8a9ff2c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhdq,<sp/>kInstPunpckhdq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2779"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2780" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9d49efa68b776d4d023240f97b2196c4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhdq,<sp/>kInstPunpckhdq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2782"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>high<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2783" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a54cb8da0c8bd2322ea32702203d2f128" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a54cb8da0c8bd2322ea32702203d2f128" kindref="member" tooltip="Unpack high data (SSE2).">punpckhqdq</ref>,<sp/>kInstPunpckhqdq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2784"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2785" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3b15acc24850405092fc074bee44e4e9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckhqdq,<sp/>kInstPunpckhqdq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2787"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>low<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2788" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a571d965a858dd83f86ed4e885a76b967" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklbw,<sp/>kInstPunpcklbw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2789"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2790" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aea3df5e9d74fdb7b087e674262324b42" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklbw,<sp/>kInstPunpcklbw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2792"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>low<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2793" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aebe4df740a06842ffec90aec395c4c76" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklwd,<sp/>kInstPunpcklwd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2794"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2795" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adb9573644379d89dffafaa8f8305bce3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklwd,<sp/>kInstPunpcklwd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2797"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>low<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2798" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a24e006c37983f566652468d7897aec51" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckldq,<sp/>kInstPunpckldq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2799"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2800" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad349aba71bfbe08b08e76197d6cf1981" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpckldq,<sp/>kInstPunpckldq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2802"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>low<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2803" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a03b18be0df803fad90a1118ef09a2017" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a03b18be0df803fad90a1118ef09a2017" kindref="member" tooltip="Unpack low data (SSE2).">punpcklqdq</ref>,<sp/>kInstPunpcklqdq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2804"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2805" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a85847b6063670b46bf99a291efc79377" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(punpcklqdq,<sp/>kInstPunpcklqdq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2807"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xor<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2808" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae1a1a01b64075ff0be490de8fc2f5681" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pxor,<sp/>kInstPxor,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2809"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2810" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1a0204368ab7bbb0e767afe7bbbabedc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pxor,<sp/>kInstPxor,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2812"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shuffle<sp/>DP-FP<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2813" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6998ebdb00659e9c3aaf658bd7fae8e0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6998ebdb00659e9c3aaf658bd7fae8e0" kindref="member" tooltip="Shuffle DP-FP (SSE2).">shufpd</ref>,<sp/>kInstShufpd,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2814"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2815" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a636f13ee29e0415f6a363fe17230628a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(shufpd,<sp/>kInstShufpd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2817"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compute<sp/>square<sp/>roots<sp/>of<sp/>packed<sp/>DP-FP<sp/>Values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2818" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a714df0767868cca5915654b13a886ff7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a714df0767868cca5915654b13a886ff7" kindref="member" tooltip="Compute square roots of packed DP-FP Values (SSE2).">sqrtpd</ref>,<sp/>kInstSqrtpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2819"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2820" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad7b99f5d7091810519ca3b5409d25c1a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sqrtpd,<sp/>kInstSqrtpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2822"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compute<sp/>square<sp/>root<sp/>of<sp/>scalar<sp/>DP-FP<sp/>value<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2823" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0844bca6aee89271e66032b3d5b194ab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0844bca6aee89271e66032b3d5b194ab" kindref="member" tooltip="Compute square root of scalar DP-FP value (SSE2).">sqrtsd</ref>,<sp/>kInstSqrtsd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2824"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2825" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3294b0ad5d88fa9c996481ca7c29d8b3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(sqrtsd,<sp/>kInstSqrtsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2827"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2828" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a599d69565902f9c87517504084cb23cb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a599d69565902f9c87517504084cb23cb" kindref="member" tooltip="Packed DP-FP subtract (SSE2).">subpd</ref>,<sp/>kInstSubpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2829"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2830" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4e0c94902d7c3da7c6ec46ef5e7f776f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(subpd,<sp/>kInstSubpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2832"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>DP-FP<sp/>subtract<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2833" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad069c1fc8e3285bd26909eddad107553" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad069c1fc8e3285bd26909eddad107553" kindref="member" tooltip="Scalar DP-FP subtract (SSE2).">subsd</ref>,<sp/>kInstSubsd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2834"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2835" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab2a4ec38cf4e876f34eac05bc3a79607" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(subsd,<sp/>kInstSubsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2837"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Scalar<sp/>unordered<sp/>DP-FP<sp/>compare<sp/>and<sp/>set<sp/>EFLAGS<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2838" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a80330d759287846bf519e56347240eac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a80330d759287846bf519e56347240eac" kindref="member" tooltip="Scalar unordered DP-FP compare and set EFLAGS (SSE2).">ucomisd</ref>,<sp/>kInstUcomisd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2839"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2840" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8746cf5e5942afc461b7ccb5b7b76c66" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(ucomisd,<sp/>kInstUcomisd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2842"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>and<sp/>interleave<sp/>high<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2843" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5e177785d3def1330a0c7455a5bd86f1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5e177785d3def1330a0c7455a5bd86f1" kindref="member" tooltip="Unpack and interleave high packed DP-FP values (SSE2).">unpckhpd</ref>,<sp/>kInstUnpckhpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2844"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2845" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a520b66b0d328d48546eece18ddd9dd9b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(unpckhpd,<sp/>kInstUnpckhpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2847"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Unpack<sp/>and<sp/>interleave<sp/>low<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2848" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5927198e0ab1b1b593106f77ce7b1996" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5927198e0ab1b1b593106f77ce7b1996" kindref="member" tooltip="Unpack and interleave low packed DP-FP values (SSE2).">unpcklpd</ref>,<sp/>kInstUnpcklpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2849"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2850" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa7a6edf658e1fd250ea9fb02a930bd18" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(unpcklpd,<sp/>kInstUnpcklpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2852"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xor<sp/>for<sp/>DP-FP<sp/>data<sp/>(SSE2).</highlight></codeline>
<codeline lineno="2853" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae8ff8afa7c49acf2e987e6042389b4f0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae8ff8afa7c49acf2e987e6042389b4f0" kindref="member" tooltip="Xor for DP-FP data (SSE2).">xorpd</ref>,<sp/>kInstXorpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2854"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2855" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af9e565733d6fce1ed761e31f1e88d497" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(xorpd,<sp/>kInstXorpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"></highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SSE3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2860"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2861"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>add/subtract<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2862" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af79fadba4388af8ab5262b0a6d596ac5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af79fadba4388af8ab5262b0a6d596ac5" kindref="member" tooltip="Packed DP-FP add/subtract (SSE3).">addsubpd</ref>,<sp/>kInstAddsubpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2863"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2864" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a930ad30139b5fa4a625b85c205be631f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addsubpd,<sp/>kInstAddsubpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2866"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>add/subtract<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2867" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad0f0d24ecf0458d2ba5827e452b811a5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad0f0d24ecf0458d2ba5827e452b811a5" kindref="member" tooltip="Packed SP-FP add/subtract (SSE3).">addsubps</ref>,<sp/>kInstAddsubps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2868"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2869" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a30925c17cf0fd04064adcff454bd4099" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(addsubps,<sp/>kInstAddsubps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2871"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Store<sp/>integer<sp/>with<sp/>truncation<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2872" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1e93fa8b5f78df0b94930918d287eed4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1e93fa8b5f78df0b94930918d287eed4" kindref="member" tooltip="Store integer with truncation (SSE3).">fisttp</ref>,<sp/>kInstFisttp,<sp/>Mem)</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2874"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>horizontal<sp/>add<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2875" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36727effd4148c1b2252765feaeb27ff" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36727effd4148c1b2252765feaeb27ff" kindref="member" tooltip="Packed DP-FP horizontal add (SSE3).">haddpd</ref>,<sp/>kInstHaddpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2876"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2877" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8c3f3912fd0f734fc2c4b9084965ab1c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(haddpd,<sp/>kInstHaddpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2879"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>horizontal<sp/>add<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2880" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7301eee68732b30c75a8e349fc6962e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7301eee68732b30c75a8e349fc6962e7" kindref="member" tooltip="Packed SP-FP horizontal add (SSE3).">haddps</ref>,<sp/>kInstHaddps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2881"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2882" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab59ba9c9eadd368b6c49872d6f848bed" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(haddps,<sp/>kInstHaddps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2884"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>DP-FP<sp/>horizontal<sp/>subtract<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2885" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3bbe915def622bb482d230568518af12" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3bbe915def622bb482d230568518af12" kindref="member" tooltip="Packed DP-FP horizontal subtract (SSE3).">hsubpd</ref>,<sp/>kInstHsubpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2886"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2887" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a65329f0a6476eb3eb9d5e0d8a78eefa3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(hsubpd,<sp/>kInstHsubpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2889"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>SP-FP<sp/>horizontal<sp/>subtract<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2890" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2cbf52ff00a543b3192c85fb586e949d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2cbf52ff00a543b3192c85fb586e949d" kindref="member" tooltip="Packed SP-FP horizontal subtract (SSE3).">hsubps</ref>,<sp/>kInstHsubps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2891"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2892" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2efe5bdf095181c258777a730d962de6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(hsubps,<sp/>kInstHsubps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2894"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>unaligned<sp/>integer<sp/>128<sp/>bits<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2895" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8efb84c61f61dce456e21473eef13097" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8efb84c61f61dce456e21473eef13097" kindref="member" tooltip="Load unaligned integer 128 bits (SSE3).">lddqu</ref>,<sp/>kInstLddqu,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2897"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Setup<sp/>monitor<sp/>address<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2898" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a218c80e9a9a250ee46e492c35790f1f6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a218c80e9a9a250ee46e492c35790f1f6" kindref="member" tooltip="Setup monitor address (SSE3).">monitor</ref>,<sp/>kInstMonitor)</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2900"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>one<sp/>DP-FP<sp/>and<sp/>duplicate<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2901" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acdd918bb75969394540f8e991d84b115" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acdd918bb75969394540f8e991d84b115" kindref="member" tooltip="Move one DP-FP and duplicate (SSE3).">movddup</ref>,<sp/>kInstMovddup,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2902"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2903" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a26111636b975cd84fb19299c4d2f93ae" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movddup,<sp/>kInstMovddup,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2905"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>packed<sp/>SP-FP<sp/>high<sp/>and<sp/>duplicate<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2906" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a378847bc542df777b0ca562a4f5813a7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a378847bc542df777b0ca562a4f5813a7" kindref="member" tooltip="Move packed SP-FP high and duplicate (SSE3).">movshdup</ref>,<sp/>kInstMovshdup,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2907"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2908" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a19a262f1c0612a5bdebac15ceefba242" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movshdup,<sp/>kInstMovshdup,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2910"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>packed<sp/>SP-FP<sp/>low<sp/>and<sp/>duplicate<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2911" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab6538b05dc8e42a2357fcabcda667519" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab6538b05dc8e42a2357fcabcda667519" kindref="member" tooltip="Move packed SP-FP low and duplicate (SSE3).">movsldup</ref>,<sp/>kInstMovsldup,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2912"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2913" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acc0e5f12fb343bab7094dbb699da47f9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movsldup,<sp/>kInstMovsldup,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2915"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Monitor<sp/>wait<sp/>(SSE3).</highlight></codeline>
<codeline lineno="2916" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aeeb927331cae84bf3cc940fab5896ae6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aeeb927331cae84bf3cc940fab5896ae6" kindref="member" tooltip="Monitor wait (SSE3).">mwait</ref>,<sp/>kInstMwait)</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SSSE3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2922"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2923" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa44275cd2b22e7590d51d6ca2622695a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa44275cd2b22e7590d51d6ca2622695a" kindref="member" tooltip="Packed sign (SSSE3).">psignb</ref>,<sp/>kInstPsignb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2924"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2925" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acb4c4618dda5e7fca4c3bcabfcdda8ce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignb,<sp/>kInstPsignb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2927"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2928" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acb93e24e1d09f12e18c18d131112f355" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignb,<sp/>kInstPsignb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2929"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2930" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab10725cd8ed21adeeb11934139b7626d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignb,<sp/>kInstPsignb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2932"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2933" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3b8ddb6d347649bbf38b0e34b77064b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3b8ddb6d347649bbf38b0e34b77064b8" kindref="member" tooltip="Packed sign (SSSE3).">psignw</ref>,<sp/>kInstPsignw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2934"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2935" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a02f9e77e6737a54a11bfda097228f228" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignw,<sp/>kInstPsignw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2937"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2938" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad30dfa6133cc020e31c29b13f83957cd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignw,<sp/>kInstPsignw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2939"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2940" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abc47412a9a0804780fb322cc2c913233" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignw,<sp/>kInstPsignw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2942"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2943" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0ecfdf29e2a82c59c25bea16d011fb54" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0ecfdf29e2a82c59c25bea16d011fb54" kindref="member" tooltip="Packed sign (SSSE3).">psignd</ref>,<sp/>kInstPsignd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2944"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2945" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a85b71d8f8df9e4aae4543a97939b3810" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignd,<sp/>kInstPsignd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2947"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>sign<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2948" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af2161806ced00128cf549656bdad162d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignd,<sp/>kInstPsignd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2949"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2950" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8447ea4025aa08c05206e8f7afcc24ce" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(psignd,<sp/>kInstPsignd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2952"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2953" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a72de60bcfa226c631e630fd9df223b3f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a72de60bcfa226c631e630fd9df223b3f" kindref="member" tooltip="Packed horizontal add (SSSE3).">phaddw</ref>,<sp/>kInstPhaddw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2954"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2955" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a58c76bfc9c1ff3d248b7a74a161d2307" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddw,<sp/>kInstPhaddw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2957"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2958" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abcd417893efadabfaf7b93933e4fd9e1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddw,<sp/>kInstPhaddw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2959"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2960" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1b73448c2fe534eb842ad0eb719b5032" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddw,<sp/>kInstPhaddw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2962"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2963" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a78932b83e50eb16d06e859824940b4f9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a78932b83e50eb16d06e859824940b4f9" kindref="member" tooltip="Packed horizontal add (SSSE3).">phaddd</ref>,<sp/>kInstPhaddd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2964"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2965" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a99254be8df0201a3f94d3020d826985e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddd,<sp/>kInstPhaddd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2967"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2968" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4b9c624af7cad57c14d6d78d50ea1fbd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddd,<sp/>kInstPhaddd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2969"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2970" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acd730fa489c3fbc54b107b1a3961f49b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddd,<sp/>kInstPhaddd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2972"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>and<sp/>saturate<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2973" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2a9407d72cd191061aee62f46a8623b7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2a9407d72cd191061aee62f46a8623b7" kindref="member" tooltip="Packed horizontal add and saturate (SSSE3).">phaddsw</ref>,<sp/>kInstPhaddsw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2974"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2975" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4bc430ad861e9d89aff4c007ed24124b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddsw,<sp/>kInstPhaddsw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2977"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>add<sp/>and<sp/>saturate<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2978" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2a78d9867520f0175c8de51ad5c3332e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddsw,<sp/>kInstPhaddsw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2979"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2980" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8f0bc0494d348b6ef578840bed25902f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phaddsw,<sp/>kInstPhaddsw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2982"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2983" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac3f4f33bda7f6493c3d4c4ecdd7d9eb4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac3f4f33bda7f6493c3d4c4ecdd7d9eb4" kindref="member" tooltip="Packed horizontal subtract (SSSE3).">phsubw</ref>,<sp/>kInstPhsubw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2984"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2985" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae74cb6c79fbde8fa9e316e5b1faa48cb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubw,<sp/>kInstPhsubw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2987"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2988" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae5bf159751a09c82bdc85c69bfd86966" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubw,<sp/>kInstPhsubw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2989"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2990" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa8719e60e176d286148a8271b2dc882c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubw,<sp/>kInstPhsubw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2992"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2993" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2766372a6d61eb8a0a114376516ff4f4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2766372a6d61eb8a0a114376516ff4f4" kindref="member" tooltip="Packed horizontal subtract (SSSE3).">phsubd</ref>,<sp/>kInstPhsubd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2994"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2995" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7cfe004332adb535908983b9ffe05f0b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubd,<sp/>kInstPhsubd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2997"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="2998" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6bf9068269d0ba48ee126ff4685630cb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubd,<sp/>kInstPhsubd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2999"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3000" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a92b17a05930473d526c8efcc8af68fbe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubd,<sp/>kInstPhsubd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3002"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>and<sp/>saturate<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3003" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a18d0e203015ccec5648f206bd5ebd683" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a18d0e203015ccec5648f206bd5ebd683" kindref="member" tooltip="Packed horizontal subtract and saturate (SSSE3).">phsubsw</ref>,<sp/>kInstPhsubsw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3004"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3005" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aedd8cec51fdb4de5d0887ffacfd5e25f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubsw,<sp/>kInstPhsubsw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3007"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>subtract<sp/>and<sp/>saturate<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3008" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a86c8e56d52f95d55574ebb012a121f34" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubsw,<sp/>kInstPhsubsw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3009"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3010" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aabe6f3d4c191faeceaa510dc62683ce4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phsubsw,<sp/>kInstPhsubsw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3012"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>and<sp/>add<sp/>packed<sp/>signed<sp/>and<sp/>unsigned<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3013" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a19c292bf19f9215e8db3e49145c30bc7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a19c292bf19f9215e8db3e49145c30bc7" kindref="member" tooltip="Multiply and add packed signed and unsigned bytes (SSSE3).">pmaddubsw</ref>,<sp/>kInstPmaddubsw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3014"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3015" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a13e34ae5fca85c1a9f23b0ad128c60f0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddubsw,<sp/>kInstPmaddubsw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3017"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>and<sp/>add<sp/>packed<sp/>signed<sp/>and<sp/>unsigned<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3018" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a34a59487a9207674185f586a53f02b21" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddubsw,<sp/>kInstPmaddubsw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3019"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3020" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab6d7d8e577dd517b70da709fa06dda4d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaddubsw,<sp/>kInstPmaddubsw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3022"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3023" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aaed9ac4b4e4409e991b66e77e868d672" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aaed9ac4b4e4409e991b66e77e868d672" kindref="member" tooltip="Packed absolute value (SSSE3).">pabsb</ref>,<sp/>kInstPabsb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3024"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3025" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad5ec1ef27ec14ef499573d83c177379b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsb,<sp/>kInstPabsb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3027"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3028" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4857e9b9d9f58c2fee2d544e6a551ed0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsb,<sp/>kInstPabsb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3029"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3030" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0741bccb3c62aaca868a0e2c7166bd9d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsb,<sp/>kInstPabsb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3032"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3033" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36de3ecd267a9989377efa4d441460de" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a36de3ecd267a9989377efa4d441460de" kindref="member" tooltip="Packed absolute value (SSSE3).">pabsw</ref>,<sp/>kInstPabsw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3034"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3035" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af9841512daf6120f450c771ad547a218" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsw,<sp/>kInstPabsw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3037"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3038" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a648537f9bfc5bcca0b4b493c3de1770f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsw,<sp/>kInstPabsw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3039"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3040" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aac0901e89705e452f7dafe46590e53bd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsw,<sp/>kInstPabsw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3042"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3043" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7fc24ddef92ce81ffa6e244d1c9edbd1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7fc24ddef92ce81ffa6e244d1c9edbd1" kindref="member" tooltip="Packed absolute value (SSSE3).">pabsd</ref>,<sp/>kInstPabsd,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3044"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3045" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa98afbd8e00619264ce2f46ff6ba8f82" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsd,<sp/>kInstPabsd,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3047"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>absolute<sp/>value<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3048" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a28b92ba355a81ef8ee6927af5f5cdac3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsd,<sp/>kInstPabsd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3049"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3050" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa8f607c302e921cccfbbdc7eb3dcdf69" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pabsd,<sp/>kInstPabsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3052"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>with<sp/>round<sp/>and<sp/>scale<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3053" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2aab58b03d498b0f401bd2a4ad6378ac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2aab58b03d498b0f401bd2a4ad6378ac" kindref="member" tooltip="Packed multiply high with round and scale (SSSE3).">pmulhrsw</ref>,<sp/>kInstPmulhrsw,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3054"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3055" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aac4db2c03362a3b196116960926e2cea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhrsw,<sp/>kInstPmulhrsw,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3057"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>multiply<sp/>high<sp/>with<sp/>round<sp/>and<sp/>scale<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3058" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adaf78a64a999aaf9a4237eb969e26d9e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhrsw,<sp/>kInstPmulhrsw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3059"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3060" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a19f22cef6f2a80052261dec1064b609e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulhrsw,<sp/>kInstPmulhrsw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3062"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shuffle<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3063" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a24c1107e633aee812cc01d5a3c843d9d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a24c1107e633aee812cc01d5a3c843d9d" kindref="member" tooltip="Packed shuffle bytes (SSSE3).">pshufb</ref>,<sp/>kInstPshufb,<sp/>MmReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3064"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3065" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af9d869b3f9003cabb9d2efc37cc37885" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pshufb,<sp/>kInstPshufb,<sp/>MmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3067"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shuffle<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3068" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adefb81a0ceed75bde1244b80b6c80f20" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pshufb,<sp/>kInstPshufb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3069"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3070" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3716df33e059c8c1881245c42285f6a2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pshufb,<sp/>kInstPshufb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3072"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shuffle<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3073" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7efc4555593d9353a37d0af87bd01f7a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7efc4555593d9353a37d0af87bd01f7a" kindref="member" tooltip="Packed shuffle bytes (SSSE3).">palignr</ref>,<sp/>kInstPalignr,<sp/>MmReg,<sp/>MmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3074"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3075" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac64b289129a07af153106dae3e4b4e82" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(palignr,<sp/>kInstPalignr,<sp/>MmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3077"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>shuffle<sp/>bytes<sp/>(SSSE3).</highlight></codeline>
<codeline lineno="3078" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a628a5e9b99d9639c84bcd9696f04ee38" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(palignr,<sp/>kInstPalignr,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3079"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3080" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a63c8b1c16f640542c0a6cff98ef32850" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(palignr,<sp/>kInstPalignr,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SSE4.1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3086"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Blend<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3087" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa078fa4e03ad648be4e56223b4feae07" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa078fa4e03ad648be4e56223b4feae07" kindref="member" tooltip="Blend packed DP-FP values (SSE4.1).">blendpd</ref>,<sp/>kInstBlendpd,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3088"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3089" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1c8849b3ac70e99ac9d592957c185fd3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(blendpd,<sp/>kInstBlendpd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3091"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Blend<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3092" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7864078be39ff19f71a3a5c1dae8bf67" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7864078be39ff19f71a3a5c1dae8bf67" kindref="member" tooltip="Blend packed SP-FP values (SSE4.1).">blendps</ref>,<sp/>kInstBlendps,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3093"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3094" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad02614b24ebb17202d0ab2b0149308ad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(blendps,<sp/>kInstBlendps,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3096"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>blend<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3097" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a684786ae6fdae41735db543f0791bc94" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a684786ae6fdae41735db543f0791bc94" kindref="member" tooltip="Variable blend packed DP-FP values (SSE4.1).">blendvpd</ref>,<sp/>kInstBlendvpd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3098"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3099" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a79d59cbc02b571114dc23fbdc4394656" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(blendvpd,<sp/>kInstBlendvpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3101"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>blend<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3102" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9c8936aca362113587ae28323cdb7bea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9c8936aca362113587ae28323cdb7bea" kindref="member" tooltip="Variable blend packed SP-FP values (SSE4.1).">blendvps</ref>,<sp/>kInstBlendvps,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3103"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3104" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aafee6101429abb8e39cff586b62fdc5f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(blendvps,<sp/>kInstBlendvps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3106"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Dot<sp/>product<sp/>of<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3107" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1edc248cacb5c41f915d62a1aa3e97e3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1edc248cacb5c41f915d62a1aa3e97e3" kindref="member" tooltip="Dot product of packed DP-FP values (SSE4.1).">dppd</ref>,<sp/>kInstDppd,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3108"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3109" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a30455597f12647769482c45ae3aa50db" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(dppd,<sp/>kInstDppd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3111"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Dot<sp/>product<sp/>of<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3112" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab80aede68af6ecd54555f9daa6ff050e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab80aede68af6ecd54555f9daa6ff050e" kindref="member" tooltip="Dot product of packed SP-FP values (SSE4.1).">dpps</ref>,<sp/>kInstDpps,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3113"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3114" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab413d4464917f185c1dca4fb27b67116" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(dpps,<sp/>kInstDpps,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3116"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>packed<sp/>SP-FP<sp/>value<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3117" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af116bc5e349673b53fb56a5e3a9cd8b3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af116bc5e349673b53fb56a5e3a9cd8b3" kindref="member" tooltip="Extract packed SP-FP value (SSE4.1).">extractps</ref>,<sp/>kInstExtractps,<sp/>GpReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3118"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3119" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acd83fce70ea7200d6384dc6381568b39" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(extractps,<sp/>kInstExtractps,<sp/>Mem,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3121"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>oword<sp/>non-temporal<sp/>aligned<sp/>hint<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3122" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac465f359d830843b27d2393673a100fd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac465f359d830843b27d2393673a100fd" kindref="member" tooltip="Load oword non-temporal aligned hint (SSE4.1).">movntdqa</ref>,<sp/>kInstMovntdqa,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3124"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compute<sp/>multiple<sp/>packed<sp/>sums<sp/>of<sp/>absolute<sp/>difference<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3125" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a103106269cd310496f750b506a08a74a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a103106269cd310496f750b506a08a74a" kindref="member" tooltip="Compute multiple packed sums of absolute difference (SSE4.1).">mpsadbw</ref>,<sp/>kInstMpsadbw,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3126"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3127" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2924ba4f961f9564f6b1f8fad6233f2c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(mpsadbw,<sp/>kInstMpsadbw,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3129"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pack<sp/>with<sp/>unsigned<sp/>saturation<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3130" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af4285b24766ac4001060cc9b68ff6fe9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af4285b24766ac4001060cc9b68ff6fe9" kindref="member" tooltip="Pack with unsigned saturation (SSE4.1).">packusdw</ref>,<sp/>kInstPackusdw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3131"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3132" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aacd4bd5b64a6843b333e6ea8df63b019" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(packusdw,<sp/>kInstPackusdw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3134"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>blend<sp/>packed<sp/>bytes<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3135" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab2afcf846845781b4402017ffc45fba4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab2afcf846845781b4402017ffc45fba4" kindref="member" tooltip="Variable blend packed bytes (SSE4.1).">pblendvb</ref>,<sp/>kInstPblendvb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3136"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3137" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a263ad44156d58cedefff71a4bddc350c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pblendvb,<sp/>kInstPblendvb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3139"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Blend<sp/>packed<sp/>words<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3140" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a17e09b8eae53bea01776b0784ff3a630" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a17e09b8eae53bea01776b0784ff3a630" kindref="member" tooltip="Blend packed words (SSE4.1).">pblendw</ref>,<sp/>kInstPblendw,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3141"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3142" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae55e60acc23edbeaea0d84553469d29c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pblendw,<sp/>kInstPblendw,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3143"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3144"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>packed<sp/>qword<sp/>data<sp/>for<sp/>equal<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3145" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1d1bf7a9b3a4ddb8a609e7b942e2947c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a1d1bf7a9b3a4ddb8a609e7b942e2947c" kindref="member" tooltip="Compare packed qword data for equal (SSE4.1).">pcmpeqq</ref>,<sp/>kInstPcmpeqq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3146"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3147" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4a380562c098fb9a58bfd85945b092f2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpeqq,<sp/>kInstPcmpeqq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3149"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>byte<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3150" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5edf15feace7075dcc97b51ce7b54c35" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5edf15feace7075dcc97b51ce7b54c35" kindref="member" tooltip="Extract byte (SSE4.1).">pextrb</ref>,<sp/>kInstPextrb,<sp/>GpReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3151"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3152" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acc91c69f3d66554be3afceb0cf6c1c89" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pextrb,<sp/>kInstPextrb,<sp/>Mem,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3154"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>dword<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3155" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a56821453ab19683155133e80266e926e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a56821453ab19683155133e80266e926e" kindref="member" tooltip="Extract dword (SSE4.1).">pextrd</ref>,<sp/>kInstPextrd,<sp/>GpReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3156"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3157" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a961ec929e9073a7481bb640523e76c29" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pextrd,<sp/>kInstPextrd,<sp/>Mem,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3159"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>qword<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3160" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac1ece4cb778c208659c2514f8cc58a16" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac1ece4cb778c208659c2514f8cc58a16" kindref="member" tooltip="Extract qword (SSE4.1).">pextrq</ref>,<sp/>kInstPextrq,<sp/>GpReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3161"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3162" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a61214a30ba3e862312da126958e1f1da" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pextrq,<sp/>kInstPextrq,<sp/>Mem,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3164"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extract<sp/>word<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3165" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8a62853abe5e79d657443bdbe7b6733d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pextrw,<sp/>kInstPextrw,<sp/>Mem,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3167"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>horizontal<sp/>word<sp/>minimum<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3168" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af5fa5350bad4ea90c2a6b9086dde4849" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af5fa5350bad4ea90c2a6b9086dde4849" kindref="member" tooltip="Packed horizontal word minimum (SSE4.1).">phminposuw</ref>,<sp/>kInstPhminposuw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3169"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3170" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae51a0c2b68bade5a5aea23c1b5b23a4a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(phminposuw,<sp/>kInstPhminposuw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3172"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Insert<sp/>byte<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3173" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a85bbd19193f8f1e3ed9682c4c83469af" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a85bbd19193f8f1e3ed9682c4c83469af" kindref="member" tooltip="Insert byte (SSE4.1).">pinsrb</ref>,<sp/>kInstPinsrb,<sp/>XmmReg,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3174"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3175" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae05b3e16d2a77873c0284dd1b73a92b4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrb,<sp/>kInstPinsrb,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3177"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Insert<sp/>dword<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3178" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a585373816acbe6be43070c2d11bb7e7d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a585373816acbe6be43070c2d11bb7e7d" kindref="member" tooltip="Insert dword (SSE4.1).">pinsrd</ref>,<sp/>kInstPinsrd,<sp/>XmmReg,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3179"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3180" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a308377a0968644423f0581862df94157" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrd,<sp/>kInstPinsrd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3182"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Insert<sp/>qword<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3183" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aac5bb3d272b361ad825a564a1f654807" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aac5bb3d272b361ad825a564a1f654807" kindref="member" tooltip="Insert qword (SSE4.1).">pinsrq</ref>,<sp/>kInstPinsrq,<sp/>XmmReg,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3184"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3185" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adcf75160fe6704753dfadd64c9226056" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pinsrq,<sp/>kInstPinsrq,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3187"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Maximum<sp/>of<sp/>packed<sp/>word<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3188" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a26c2aad0b743389dcdf4365960292851" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a26c2aad0b743389dcdf4365960292851" kindref="member" tooltip="Maximum of packed word integers (SSE4.1).">pmaxuw</ref>,<sp/>kInstPmaxuw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3189"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3190" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adc63f449c478472a7ba813b5985b902f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxuw,<sp/>kInstPmaxuw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3192"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Maximum<sp/>of<sp/>packed<sp/>signed<sp/>byte<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3193" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5db2c89280e73ba5b95778bfa2a7a871" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5db2c89280e73ba5b95778bfa2a7a871" kindref="member" tooltip="Maximum of packed signed byte integers (SSE4.1).">pmaxsb</ref>,<sp/>kInstPmaxsb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3194"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3195" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abe729d5df3304581281a30fb9aade811" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxsb,<sp/>kInstPmaxsb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3197"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Maximum<sp/>of<sp/>packed<sp/>signed<sp/>dword<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3198" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acb7f88c10bc7cef61a8f39abd6a709fc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1acb7f88c10bc7cef61a8f39abd6a709fc" kindref="member" tooltip="Maximum of packed signed dword integers (SSE4.1).">pmaxsd</ref>,<sp/>kInstPmaxsd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3199"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3200" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a277ccc805cc337b61a6907dd7a84652e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxsd,<sp/>kInstPmaxsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3202"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Maximum<sp/>of<sp/>packed<sp/>unsigned<sp/>dword<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3203" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9dbe12976e76ebd60333836fcba87f8d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a9dbe12976e76ebd60333836fcba87f8d" kindref="member" tooltip="Maximum of packed unsigned dword integers (SSE4.1).">pmaxud</ref>,<sp/>kInstPmaxud,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3204"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3205" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a11bb6955b1a3606c47a577f0e56f5695" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmaxud,kInstPmaxud<sp/>,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3207"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Minimum<sp/>of<sp/>packed<sp/>signed<sp/>byte<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3208" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab4737cc38da378a4cb1b5546ba6441fc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab4737cc38da378a4cb1b5546ba6441fc" kindref="member" tooltip="Minimum of packed signed byte integers (SSE4.1).">pminsb</ref>,<sp/>kInstPminsb,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3209"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3210" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa550fd10cc0ed21489091d33fbb88f08" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminsb,<sp/>kInstPminsb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3212"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Minimum<sp/>of<sp/>packed<sp/>word<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3213" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4797c789b617f65cb4c15d34f7e1098d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4797c789b617f65cb4c15d34f7e1098d" kindref="member" tooltip="Minimum of packed word integers (SSE4.1).">pminuw</ref>,<sp/>kInstPminuw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3214"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3215" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a114f17300690d9425873373b2022304b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminuw,<sp/>kInstPminuw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3217"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Minimum<sp/>of<sp/>packed<sp/>dword<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3218" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6467560b5f9fdafdd1c2655fffbc36ab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6467560b5f9fdafdd1c2655fffbc36ab" kindref="member" tooltip="Minimum of packed dword integers (SSE4.1).">pminud</ref>,<sp/>kInstPminud,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3219"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3220" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0a6779d3f74401dcdbc4f2081bea0a05" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminud,<sp/>kInstPminud,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3222"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Minimum<sp/>of<sp/>packed<sp/>dword<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3223" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7103c5ded68920fa9e4929070e48c3d2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7103c5ded68920fa9e4929070e48c3d2" kindref="member" tooltip="Minimum of packed dword integers (SSE4.1).">pminsd</ref>,<sp/>kInstPminsd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3224"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3225" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aff586ad5c2c1fe007d75e647ddf43198" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pminsd,<sp/>kInstPminsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3227"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>sign<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3228" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae486864abff3913d2b8d5b49ef6ef99e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae486864abff3913d2b8d5b49ef6ef99e" kindref="member" tooltip="Packed move with sign extend (SSE4.1).">pmovsxbw</ref>,<sp/>kInstPmovsxbw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3229"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3230" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3a914363794eb95f2b34cc90c07b12af" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxbw,<sp/>kInstPmovsxbw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3232"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>sign<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3233" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4cbea0e9812b7fb5869c68e6e6a9e618" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4cbea0e9812b7fb5869c68e6e6a9e618" kindref="member" tooltip="Packed move with sign extend (SSE4.1).">pmovsxbd</ref>,<sp/>kInstPmovsxbd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3234"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3235" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a12c32471c4a8b9f2c169eac58f36f3b2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxbd,<sp/>kInstPmovsxbd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3237"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>sign<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3238" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae2cd8f31ba691946ad70d2db4a9002cf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae2cd8f31ba691946ad70d2db4a9002cf" kindref="member" tooltip="Packed move with sign extend (SSE4.1).">pmovsxbq</ref>,<sp/>kInstPmovsxbq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3239"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3240" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8169596331d69bbbfbcf0cb5067dc69d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxbq,<sp/>kInstPmovsxbq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3242"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>sign<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3243" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac3fb64ac95151ab93b94c6e4a35bc0f8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac3fb64ac95151ab93b94c6e4a35bc0f8" kindref="member" tooltip="Packed move with sign extend (SSE4.1).">pmovsxwd</ref>,<sp/>kInstPmovsxwd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3244"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3245" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a961dd8ea2607e01ab759178c3b26c04e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxwd,<sp/>kInstPmovsxwd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3247"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3248" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a74020a94c59d5d1dde906594cb67148a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a74020a94c59d5d1dde906594cb67148a" kindref="member" tooltip="(SSE4.1).">pmovsxwq</ref>,<sp/>kInstPmovsxwq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3249"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3250" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4b9344f1a80a02892934be60005d1049" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxwq,<sp/>kInstPmovsxwq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3252"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3253" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae5cf4cf618d721480c62903fcf7062b3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae5cf4cf618d721480c62903fcf7062b3" kindref="member" tooltip="(SSE4.1).">pmovsxdq</ref>,<sp/>kInstPmovsxdq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3254"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3255" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac4060e97971ce582234c02921804d87e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovsxdq,<sp/>kInstPmovsxdq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3257"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>zero<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3258" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4477a5ae8bb9ecbba29c75abead15daf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4477a5ae8bb9ecbba29c75abead15daf" kindref="member" tooltip="Packed move with zero extend (SSE4.1).">pmovzxbw</ref>,<sp/>kInstPmovzxbw,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3259"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3260" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1adebd7984ffdf55c0d7ba93b7e1a7ca75" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxbw,<sp/>kInstPmovzxbw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3262"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>zero<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3263" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af81f2d61b81a56ca8478e171940a0df7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af81f2d61b81a56ca8478e171940a0df7" kindref="member" tooltip="Packed move with zero extend (SSE4.1).">pmovzxbd</ref>,<sp/>kInstPmovzxbd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3264"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3265" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae33411152102f0f9cfd277ddb3d9acd9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxbd,<sp/>kInstPmovzxbd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3267"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>zero<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3268" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5817de4ab3ae2d2d5d64dc46de698665" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5817de4ab3ae2d2d5d64dc46de698665" kindref="member" tooltip="Packed move with zero extend (SSE4.1).">pmovzxbq</ref>,<sp/>kInstPmovzxbq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3269"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3270" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3ac8f6b5a8125f14b455b3a2ffb54fea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxbq,<sp/>kInstPmovzxbq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3272"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>move<sp/>with<sp/>zero<sp/>extend<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3273" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a129012abf702a2f8bb491fd023b23720" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a129012abf702a2f8bb491fd023b23720" kindref="member" tooltip="Packed move with zero extend (SSE4.1).">pmovzxwd</ref>,<sp/>kInstPmovzxwd,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3274"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3275" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa5382c0f290c115a852264c1317a263c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxwd,<sp/>kInstPmovzxwd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3277"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3278" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a828c31b54542e3f3f09f88ea1a59c6e1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a828c31b54542e3f3f09f88ea1a59c6e1" kindref="member" tooltip="(SSE4.1).">pmovzxwq</ref>,<sp/>kInstPmovzxwq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3279"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3280" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a81b1e3618a465cad1a07f9ab3411112f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxwq,<sp/>kInstPmovzxwq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3282"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3283" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab5a495937b56fd1e743765b6bbb36896" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab5a495937b56fd1e743765b6bbb36896" kindref="member" tooltip="(SSE4.1).">pmovzxdq</ref>,<sp/>kInstPmovzxdq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3284"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3285" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abc492612fb97622699a6c825b241ab49" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmovzxdq,<sp/>kInstPmovzxdq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3287"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>packed<sp/>signed<sp/>qword<sp/>integers<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3288" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a405e89d93473994c6fcc1192e121baed" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a405e89d93473994c6fcc1192e121baed" kindref="member" tooltip="Multiply packed signed qword integers (SSE4.1).">pmuldq</ref>,<sp/>kInstPmuldq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3289"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3290" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1abb5a7615c6b7db74aa50ac058a9d41fa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmuldq,<sp/>kInstPmuldq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3292"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Multiply<sp/>packed<sp/>signed<sp/>integers<sp/>and<sp/>store<sp/>low<sp/>result<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3293" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a846af1ff224b4feed650f9704343bda0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a846af1ff224b4feed650f9704343bda0" kindref="member" tooltip="Multiply packed signed integers and store low result (SSE4.1).">pmulld</ref>,<sp/>kInstPmulld,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3294"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3295" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a80e07764f04127b3be50c6dbac955115" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pmulld,<sp/>kInstPmulld,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3297"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Logical<sp/>compare<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3298" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0e6f0aeca4a62d20dbafbf8b52a85d1a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0e6f0aeca4a62d20dbafbf8b52a85d1a" kindref="member" tooltip="Logical compare (SSE4.1).">ptest</ref>,<sp/>kInstPtest,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3299"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3300" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a831d0904c51a4dcae606c54c5d223592" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(ptest,<sp/>kInstPtest,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3302"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Round<sp/>packed<sp/>SP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3303" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a398d772482d6c16c52a771a6b69c3ab6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a398d772482d6c16c52a771a6b69c3ab6" kindref="member" tooltip="Round packed SP-FP values (SSE4.1).">roundps</ref>,<sp/>kInstRoundps,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3304"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3305" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa6e18cf5b501d1d019ed955745adaa3e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(roundps,<sp/>kInstRoundps,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3307"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Round<sp/>scalar<sp/>SP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3308" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a42b15924d329dbc5a66a76fb4c678051" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a42b15924d329dbc5a66a76fb4c678051" kindref="member" tooltip="Round scalar SP-FP values (SSE4.1).">roundss</ref>,<sp/>kInstRoundss,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3309"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3310" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8364b72851086dfad1f0ff978206f31f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(roundss,<sp/>kInstRoundss,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3312"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Round<sp/>packed<sp/>DP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3313" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2950ef3bc38c3e672c2d2b6f75af40cc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2950ef3bc38c3e672c2d2b6f75af40cc" kindref="member" tooltip="Round packed DP-FP values (SSE4.1).">roundpd</ref>,<sp/>kInstRoundpd,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3314"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3315" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a60be84c619925fc229ea9849c01118aa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(roundpd,<sp/>kInstRoundpd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3317"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Round<sp/>scalar<sp/>DP-FP<sp/>values<sp/>(SSE4.1).</highlight></codeline>
<codeline lineno="3318" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8ef2d060625be52e17c8c2f02b5dbb00" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8ef2d060625be52e17c8c2f02b5dbb00" kindref="member" tooltip="Round scalar DP-FP values (SSE4.1).">roundsd</ref>,<sp/>kInstRoundsd,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3319"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3320" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aad4a3dfec2ace0305ff7fa11664c536a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(roundsd,<sp/>kInstRoundsd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SSE4.2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3326"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>explicit<sp/>length<sp/>strings,<sp/>return<sp/>index<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="3327" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4d1fab56942fd793475e6897f8ad711b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a4d1fab56942fd793475e6897f8ad711b" kindref="member" tooltip="Packed compare explicit length strings, return index (SSE4.2).">pcmpestri</ref>,<sp/>kInstPcmpestri,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3328"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3329" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aab73d5c3e40b980730da10af3841be5f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pcmpestri,<sp/>kInstPcmpestri,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3331"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>explicit<sp/>length<sp/>strings,<sp/>return<sp/>mask<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="3332" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac2b21c454ae0658bbde448f5d228c4f8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac2b21c454ae0658bbde448f5d228c4f8" kindref="member" tooltip="Packed compare explicit length strings, return mask (SSE4.2).">pcmpestrm</ref>,<sp/>kInstPcmpestrm,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3333"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3334" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6e94470f48a0eddf2525dd6000c9f254" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pcmpestrm,<sp/>kInstPcmpestrm,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3336"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>implicit<sp/>length<sp/>strings,<sp/>return<sp/>index<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="3337" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8ca738291123fd8f4c78fb680b1d61a8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a8ca738291123fd8f4c78fb680b1d61a8" kindref="member" tooltip="Packed compare implicit length strings, return index (SSE4.2).">pcmpistri</ref>,<sp/>kInstPcmpistri,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3338"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3339" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a5ac5ff69ef2940fa31987296f6a42e53" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pcmpistri,<sp/>kInstPcmpistri,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3341"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>compare<sp/>implicit<sp/>length<sp/>strings,<sp/>return<sp/>mask<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="3342" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7a98b72b5e538cd2ddbbe3a47d933bfc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a7a98b72b5e538cd2ddbbe3a47d933bfc" kindref="member" tooltip="Packed compare implicit length strings, return mask (SSE4.2).">pcmpistrm</ref>,<sp/>kInstPcmpistrm,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3343"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3344" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0d9e1b5d715e4a04c21e8e52da829197" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pcmpistrm,<sp/>kInstPcmpistrm,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3346"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compare<sp/>packed<sp/>data<sp/>for<sp/>greater<sp/>than<sp/>(SSE4.2).</highlight></codeline>
<codeline lineno="3347" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aee63d248fd7aa0599634a0cdf620dbf3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aee63d248fd7aa0599634a0cdf620dbf3" kindref="member" tooltip="Compare packed data for greater than (SSE4.2).">pcmpgtq</ref>,<sp/>kInstPcmpgtq,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3348"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3349" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac8aae0ef41b76629f74f1673cd4abfb6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(pcmpgtq,<sp/>kInstPcmpgtq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"></highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[AESNI]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3355"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>a<sp/>single<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>decryption<sp/>flow.</highlight></codeline>
<codeline lineno="3356" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab0289a9566a7229ce4cf7ad8a09f2787" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ab0289a9566a7229ce4cf7ad8a09f2787" kindref="member" tooltip="Perform a single round of the AES decryption flow.">aesdec</ref>,<sp/>kInstAesdec,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3357"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3358" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a74e74f3f914969fcfe01c57271926514" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(aesdec,<sp/>kInstAesdec,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3360"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>the<sp/>last<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>decryption<sp/>flow.</highlight></codeline>
<codeline lineno="3361" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a71cdf864316de41fcc2ab74274dcd21c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a71cdf864316de41fcc2ab74274dcd21c" kindref="member" tooltip="Perform the last round of the AES decryption flow.">aesdeclast</ref>,<sp/>kInstAesdeclast,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3362"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3363" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aee601847c1c658ed9bfacb4f37e80911" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(aesdeclast,<sp/>kInstAesdeclast,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3365"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>a<sp/>single<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>encryption<sp/>flow.</highlight></codeline>
<codeline lineno="3366" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3c19d5c6b84495e1b32fa1ef827a5090" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a3c19d5c6b84495e1b32fa1ef827a5090" kindref="member" tooltip="Perform a single round of the AES encryption flow.">aesenc</ref>,<sp/>kInstAesenc,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3367"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3368" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac311ff7ca7e2fa64a0292cb4385532ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(aesenc,<sp/>kInstAesenc,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3370"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>the<sp/>last<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>encryption<sp/>flow.</highlight></codeline>
<codeline lineno="3371" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad53c07f087b7119de6eda91b575174b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad53c07f087b7119de6eda91b575174b8" kindref="member" tooltip="Perform the last round of the AES encryption flow.">aesenclast</ref>,<sp/>kInstAesenclast,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3372"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3373" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aa5ca25dc97da1a704a86724580f73d5a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(aesenclast,<sp/>kInstAesenclast,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3375"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>the<sp/>InvMixColumns<sp/>transformation.</highlight></codeline>
<codeline lineno="3376" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac9f0c71ca41f98f31914bd5f40731dc4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac9f0c71ca41f98f31914bd5f40731dc4" kindref="member" tooltip="Perform the InvMixColumns transformation.">aesimc</ref>,<sp/>kInstAesimc,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3377"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3378" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a587f093ba4d0d1ec059c45470aaeedf7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(aesimc,<sp/>kInstAesimc,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3380"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Assist<sp/>in<sp/>expanding<sp/>the<sp/>AES<sp/>cipher<sp/>key.</highlight></codeline>
<codeline lineno="3381" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a714d9f1b39e6a3d52d324ebb800b4fc8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a714d9f1b39e6a3d52d324ebb800b4fc8" kindref="member" tooltip="Assist in expanding the AES cipher key.">aeskeygenassist</ref>,<sp/>kInstAeskeygenassist,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3382"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3383" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af7bb8684863db50c9c30510fab079e44" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(aeskeygenassist,<sp/>kInstAeskeygenassist,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[PCLMULQDQ]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3388"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3389"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Carry-less<sp/>multiplication<sp/>quadword.</highlight></codeline>
<codeline lineno="3390" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2b0d7bf8ef77e5f3524055af4d8fff1a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2b0d7bf8ef77e5f3524055af4d8fff1a" kindref="member" tooltip="Carry-less multiplication quadword.">pclmulqdq</ref>,<sp/>kInstPclmulqdq,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3391"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3392" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a0536059b069571a5505a68911b3fcfcb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(pclmulqdq,<sp/>kInstPclmulqdq,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"></highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[AVX]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3397"><highlight class="normal"></highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/>INST_3x(vaddpd,<sp/>kInstVaddpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/>INST_3x(vaddpd,<sp/>kInstVaddpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/>INST_3x(vaddpd,<sp/>kInstVaddpd,<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/>INST_3x(vaddpd,<sp/>kInstVaddpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/>INST_3x(vaddps,<sp/>kInstVaddps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/>INST_3x(vaddps,<sp/>kInstVaddps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/>INST_3x(vaddps,<sp/>kInstVaddps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>INST_3x(vaddps,<sp/>kInstVaddps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/>INST_3x(vaddsd,<sp/>kInstVaddsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/>INST_3x(vaddsd,<sp/>kInstVaddsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/>INST_3x(vaddss,<sp/>kInstVaddss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/>INST_3x(vaddss,<sp/>kInstVaddss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight></codeline>
<codeline lineno="3414"><highlight class="normal"><sp/><sp/>INST_3x(vaddsubpd,<sp/>kInstVaddsubpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/>INST_3x(vaddsubpd,<sp/>kInstVaddsubpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/>INST_3x(vaddsubpd,<sp/>kInstVaddsubpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/>INST_3x(vaddsubpd,<sp/>kInstVaddsubpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/>INST_3x(vaddsubps,<sp/>kInstVaddsubps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/>INST_3x(vaddsubps,<sp/>kInstVaddsubps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/>INST_3x(vaddsubps,<sp/>kInstVaddsubps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/>INST_3x(vaddsubps,<sp/>kInstVaddsubps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"></highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/>INST_3x(vandpd,<sp/>kInstVandpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/>INST_3x(vandpd,<sp/>kInstVandpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/>INST_3x(vandpd,<sp/>kInstVandpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/>INST_3x(vandpd,<sp/>kInstVandpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"></highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/>INST_3x(vandps,<sp/>kInstVandps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/>INST_3x(vandps,<sp/>kInstVandps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/>INST_3x(vandps,<sp/>kInstVandps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/>INST_3x(vandps,<sp/>kInstVandps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/>INST_3x(vandnpd,<sp/>kInstVandnpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/>INST_3x(vandnpd,<sp/>kInstVandnpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/>INST_3x(vandnpd,<sp/>kInstVandnpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/>INST_3x(vandnpd,<sp/>kInstVandnpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"></highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/>INST_3x(vandnps,<sp/>kInstVandnps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/>INST_3x(vandnps,<sp/>kInstVandnps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/>INST_3x(vandnps,<sp/>kInstVandnps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/>INST_3x(vandnps,<sp/>kInstVandnps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/>INST_4i(vblendpd,<sp/>kInstVblendpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/>INST_4i(vblendpd,<sp/>kInstVblendpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/>INST_4i(vblendpd,<sp/>kInstVblendpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/>INST_4i(vblendpd,<sp/>kInstVblendpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/>INST_4i(vblendps,<sp/>kInstVblendps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/>INST_4i(vblendps,<sp/>kInstVblendps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/>INST_4i(vblendps,<sp/>kInstVblendps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/>INST_4i(vblendps,<sp/>kInstVblendps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"></highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/>INST_4x(vblendvpd,<sp/>kInstVblendvpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/>INST_4x(vblendvpd,<sp/>kInstVblendvpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/>INST_4x(vblendvpd,<sp/>kInstVblendvpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/>INST_4x(vblendvpd,<sp/>kInstVblendvpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"></highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/>INST_4x(vblendvps,<sp/>kInstVblendvps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/>INST_4x(vblendvps,<sp/>kInstVblendvps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/>INST_4x(vblendvps,<sp/>kInstVblendvps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/>INST_4x(vblendvps,<sp/>kInstVblendvps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/>INST_2x(vbroadcastf128,<sp/>kInstVbroadcastf128,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"></highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/>INST_2x(vbroadcastsd,<sp/>kInstVbroadcastsd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/>INST_2x(vbroadcastss,<sp/>kInstVbroadcastss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/>INST_2x(vbroadcastss,<sp/>kInstVbroadcastss,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/>INST_4i(vcmppd,<sp/>kInstVcmppd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/>INST_4i(vcmppd,<sp/>kInstVcmppd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/>INST_4i(vcmppd,<sp/>kInstVcmppd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/>INST_4i(vcmppd,<sp/>kInstVcmppd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/>INST_4i(vcmpps,<sp/>kInstVcmpps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/>INST_4i(vcmpps,<sp/>kInstVcmpps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/>INST_4i(vcmpps,<sp/>kInstVcmpps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/>INST_4i(vcmpps,<sp/>kInstVcmpps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/>INST_4i(vcmpsd,<sp/>kInstVcmpsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/>INST_4i(vcmpsd,<sp/>kInstVcmpsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/>INST_4i(vcmpss,<sp/>kInstVcmpss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/>INST_4i(vcmpss,<sp/>kInstVcmpss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"></highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/>INST_2x(vcomisd,<sp/>kInstVcomisd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/>INST_2x(vcomisd,<sp/>kInstVcomisd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"></highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/>INST_2x(vcomiss,<sp/>kInstVcomiss,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/>INST_2x(vcomiss,<sp/>kInstVcomiss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/>INST_2x(vcvtdq2pd,<sp/>kInstVcvtdq2pd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/>INST_2x(vcvtdq2pd,<sp/>kInstVcvtdq2pd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/>INST_2x(vcvtdq2pd,<sp/>kInstVcvtdq2pd,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/>INST_2x(vcvtdq2pd,<sp/>kInstVcvtdq2pd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"></highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/>INST_2x(vcvtdq2ps,<sp/>kInstVcvtdq2ps,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/>INST_2x(vcvtdq2ps,<sp/>kInstVcvtdq2ps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/>INST_2x(vcvtdq2ps,<sp/>kInstVcvtdq2ps,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/>INST_2x(vcvtdq2ps,<sp/>kInstVcvtdq2ps,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/>INST_2x(vcvtpd2dq,<sp/>kInstVcvtpd2dq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/>INST_2x(vcvtpd2dq,<sp/>kInstVcvtpd2dq,<sp/>XmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/>INST_2x(vcvtpd2dq,<sp/>kInstVcvtpd2dq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/>INST_2x(vcvtpd2ps,<sp/>kInstVcvtpd2ps,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/>INST_2x(vcvtpd2ps,<sp/>kInstVcvtpd2ps,<sp/>XmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/>INST_2x(vcvtpd2ps,<sp/>kInstVcvtpd2ps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/>INST_2x(vcvtps2dq,<sp/>kInstVcvtps2dq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/>INST_2x(vcvtps2dq,<sp/>kInstVcvtps2dq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/>INST_2x(vcvtps2dq,<sp/>kInstVcvtps2dq,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/>INST_2x(vcvtps2dq,<sp/>kInstVcvtps2dq,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/>INST_2x(vcvtps2pd,<sp/>kInstVcvtps2pd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/>INST_2x(vcvtps2pd,<sp/>kInstVcvtps2pd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/>INST_2x(vcvtps2pd,<sp/>kInstVcvtps2pd,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/>INST_2x(vcvtps2pd,<sp/>kInstVcvtps2pd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/>INST_2x(vcvtsd2si,<sp/>kInstVcvtsd2si,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/>INST_2x(vcvtsd2si,<sp/>kInstVcvtsd2si,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"></highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/>INST_3x(vcvtsd2ss,<sp/>kInstVcvtsd2ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/>INST_3x(vcvtsd2ss,<sp/>kInstVcvtsd2ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/>INST_3x(vcvtsi2sd,<sp/>kInstVcvtsi2sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/>INST_3x(vcvtsi2sd,<sp/>kInstVcvtsi2sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/>INST_3x(vcvtsi2ss,<sp/>kInstVcvtsi2ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/>INST_3x(vcvtsi2ss,<sp/>kInstVcvtsi2ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/>INST_3x(vcvtss2sd,<sp/>kInstVcvtss2sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/>INST_3x(vcvtss2sd,<sp/>kInstVcvtss2sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/>INST_2x(vcvtss2si,<sp/>kInstVcvtss2si,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/>INST_2x(vcvtss2si,<sp/>kInstVcvtss2si,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/>INST_2x(vcvttpd2dq,<sp/>kInstVcvttpd2dq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/>INST_2x(vcvttpd2dq,<sp/>kInstVcvttpd2dq,<sp/>XmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/>INST_2x(vcvttpd2dq,<sp/>kInstVcvttpd2dq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"></highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/>INST_2x(vcvttps2dq,<sp/>kInstVcvttps2dq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/>INST_2x(vcvttps2dq,<sp/>kInstVcvttps2dq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/>INST_2x(vcvttps2dq,<sp/>kInstVcvttps2dq,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/>INST_2x(vcvttps2dq,<sp/>kInstVcvttps2dq,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/>INST_2x(vcvttsd2si,<sp/>kInstVcvttsd2si,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/>INST_2x(vcvttsd2si,<sp/>kInstVcvttsd2si,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"></highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/>INST_2x(vcvttss2si,<sp/>kInstVcvttss2si,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/>INST_2x(vcvttss2si,<sp/>kInstVcvttss2si,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"></highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/>INST_3x(vdivpd,<sp/>kInstVdivpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/>INST_3x(vdivpd,<sp/>kInstVdivpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/>INST_3x(vdivpd,<sp/>kInstVdivpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/>INST_3x(vdivpd,<sp/>kInstVdivpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/>INST_3x(vdivps,<sp/>kInstVdivps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/>INST_3x(vdivps,<sp/>kInstVdivps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/>INST_3x(vdivps,<sp/>kInstVdivps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/>INST_3x(vdivps,<sp/>kInstVdivps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/>INST_3x(vdivsd,<sp/>kInstVdivsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/>INST_3x(vdivsd,<sp/>kInstVdivsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/>INST_3x(vdivss,<sp/>kInstVdivss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/>INST_3x(vdivss,<sp/>kInstVdivss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/>INST_4i(vdppd,<sp/>kInstVdppd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/>INST_4i(vdppd,<sp/>kInstVdppd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"></highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/>INST_4i(vdpps,<sp/>kInstVdpps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/>INST_4i(vdpps,<sp/>kInstVdpps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/>INST_4i(vdpps,<sp/>kInstVdpps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/>INST_4i(vdpps,<sp/>kInstVdpps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/>INST_3i(vextractf128,<sp/>kInstVextractf128,<sp/>XmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/>INST_3i(vextractf128,<sp/>kInstVextractf128,<sp/>Mem,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/>INST_3i(vextractps,<sp/>kInstVextractps,<sp/>GpReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/>INST_3i(vextractps,<sp/>kInstVextractps,<sp/>Mem,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"></highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/>INST_3x(vhaddpd,<sp/>kInstVhaddpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/>INST_3x(vhaddpd,<sp/>kInstVhaddpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/>INST_3x(vhaddpd,<sp/>kInstVhaddpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/>INST_3x(vhaddpd,<sp/>kInstVhaddpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/>INST_3x(vhaddps,<sp/>kInstVhaddps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/>INST_3x(vhaddps,<sp/>kInstVhaddps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/>INST_3x(vhaddps,<sp/>kInstVhaddps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/>INST_3x(vhaddps,<sp/>kInstVhaddps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"></highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/>INST_3x(vhsubpd,<sp/>kInstVhsubpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/>INST_3x(vhsubpd,<sp/>kInstVhsubpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/>INST_3x(vhsubpd,<sp/>kInstVhsubpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/>INST_3x(vhsubpd,<sp/>kInstVhsubpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/>INST_3x(vhsubps,<sp/>kInstVhsubps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/>INST_3x(vhsubps,<sp/>kInstVhsubps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/>INST_3x(vhsubps,<sp/>kInstVhsubps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/>INST_3x(vhsubps,<sp/>kInstVhsubps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/>INST_4i(vinsertf128,<sp/>kInstVinsertf128,<sp/>YmmReg,<sp/>YmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/>INST_4i(vinsertf128,<sp/>kInstVinsertf128,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3606"><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/>INST_4i(vinsertps,<sp/>kInstVinsertps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/>INST_4i(vinsertps,<sp/>kInstVinsertps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/>INST_2x(vlddqu,<sp/>kInstVlddqu,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/>INST_2x(vlddqu,<sp/>kInstVlddqu,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/>INST_1x(vldmxcsr,<sp/>kInstVldmxcsr,<sp/>Mem)</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"></highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/>INST_2x(vmaskmovdqu,<sp/>kInstVmaskmovdqu,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"></highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/>INST_3x(vmaskmovps,<sp/>kInstVmaskmovps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/>INST_3x(vmaskmovps,<sp/>kInstVmaskmovps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/>INST_3x(vmaskmovpd,<sp/>kInstVmaskmovpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/>INST_3x(vmaskmovpd,<sp/>kInstVmaskmovpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"></highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/>INST_3x(vmaskmovps,<sp/>kInstVmaskmovps,<sp/>Mem,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/>INST_3x(vmaskmovps,<sp/>kInstVmaskmovps,<sp/>Mem,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/>INST_3x(vmaskmovpd,<sp/>kInstVmaskmovpd,<sp/>Mem,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/>INST_3x(vmaskmovpd,<sp/>kInstVmaskmovpd,<sp/>Mem,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/>INST_3x(vmaxpd,<sp/>kInstVmaxpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/>INST_3x(vmaxpd,<sp/>kInstVmaxpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3631"><highlight class="normal"><sp/><sp/>INST_3x(vmaxpd,<sp/>kInstVmaxpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/>INST_3x(vmaxpd,<sp/>kInstVmaxpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/>INST_3x(vmaxps,<sp/>kInstVmaxps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/>INST_3x(vmaxps,<sp/>kInstVmaxps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/>INST_3x(vmaxps,<sp/>kInstVmaxps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/>INST_3x(vmaxps,<sp/>kInstVmaxps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/>INST_3x(vmaxsd,<sp/>kInstVmaxsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/>INST_3x(vmaxsd,<sp/>kInstVmaxsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/>INST_3x(vmaxss,<sp/>kInstVmaxss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/>INST_3x(vmaxss,<sp/>kInstVmaxss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"></highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/>INST_3x(vminpd,<sp/>kInstVminpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/>INST_3x(vminpd,<sp/>kInstVminpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/>INST_3x(vminpd,<sp/>kInstVminpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/>INST_3x(vminpd,<sp/>kInstVminpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3649"><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/>INST_3x(vminps,<sp/>kInstVminps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/>INST_3x(vminps,<sp/>kInstVminps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/>INST_3x(vminps,<sp/>kInstVminps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/>INST_3x(vminps,<sp/>kInstVminps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/>INST_3x(vminsd,<sp/>kInstVminsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/>INST_3x(vminsd,<sp/>kInstVminsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"></highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/>INST_3x(vminss,<sp/>kInstVminss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/>INST_3x(vminss,<sp/>kInstVminss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/>INST_2x(vmovapd,<sp/>kInstVmovapd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/>INST_2x(vmovapd,<sp/>kInstVmovapd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/>INST_2x(vmovapd,<sp/>kInstVmovapd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/>INST_2x(vmovapd,<sp/>kInstVmovapd,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/>INST_2x(vmovapd,<sp/>kInstVmovapd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/>INST_2x(vmovapd,<sp/>kInstVmovapd,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/>INST_2x(vmovaps,<sp/>kInstVmovaps,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/>INST_2x(vmovaps,<sp/>kInstVmovaps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/>INST_2x(vmovaps,<sp/>kInstVmovaps,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/>INST_2x(vmovaps,<sp/>kInstVmovaps,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/>INST_2x(vmovaps,<sp/>kInstVmovaps,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/>INST_2x(vmovaps,<sp/>kInstVmovaps,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/>INST_2x(vmovd,<sp/>kInstVmovd,<sp/>XmmReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/>INST_2x(vmovd,<sp/>kInstVmovd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/>INST_2x(vmovd,<sp/>kInstVmovd,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/>INST_2x(vmovd,<sp/>kInstVmovd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/>INST_2x(vmovq,<sp/>kInstVmovq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/>INST_2x(vmovq,<sp/>kInstVmovq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/>INST_2x(vmovq,<sp/>kInstVmovq,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/>INST_2x(vmovddup,<sp/>kInstVmovddup,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/>INST_2x(vmovddup,<sp/>kInstVmovddup,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/>INST_2x(vmovddup,<sp/>kInstVmovddup,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/>INST_2x(vmovddup,<sp/>kInstVmovddup,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqa,<sp/>kInstVmovdqa,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqa,<sp/>kInstVmovdqa,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqa,<sp/>kInstVmovdqa,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqa,<sp/>kInstVmovdqa,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqa,<sp/>kInstVmovdqa,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqa,<sp/>kInstVmovdqa,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqu,<sp/>kInstVmovdqu,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqu,<sp/>kInstVmovdqu,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqu,<sp/>kInstVmovdqu,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqu,<sp/>kInstVmovdqu,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqu,<sp/>kInstVmovdqu,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/>INST_2x(vmovdqu,<sp/>kInstVmovdqu,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/>INST_3x(vmovhlps,<sp/>kInstVmovhlps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/>INST_3x(vmovhpd,<sp/>kInstVmovhpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/>INST_2x(vmovhpd,<sp/>kInstVmovhpd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"></highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/>INST_3x(vmovhps,<sp/>kInstVmovhps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/>INST_2x(vmovhps,<sp/>kInstVmovhps,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/>INST_3x(vmovlhps,<sp/>kInstVmovlhps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/>INST_3x(vmovlpd,<sp/>kInstVmovlpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/>INST_2x(vmovlpd,<sp/>kInstVmovlpd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/>INST_3x(vmovlps,<sp/>kInstVmovlps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/>INST_2x(vmovlps,<sp/>kInstVmovlps,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"></highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/>INST_2x(vmovmskpd,<sp/>kInstVmovmskpd,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/>INST_2x(vmovmskpd,<sp/>kInstVmovmskpd,<sp/>GpReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/>INST_2x(vmovmskps,<sp/>kInstVmovmskps,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/>INST_2x(vmovmskps,<sp/>kInstVmovmskps,<sp/>GpReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"></highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/>INST_2x(vmovntdq,<sp/>kInstVmovntdq,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/>INST_2x(vmovntdq,<sp/>kInstVmovntdq,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"></highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/>INST_2x(vmovntdqa,<sp/>kInstVmovntdqa,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/>INST_2x(vmovntpd,<sp/>kInstVmovntpd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/>INST_2x(vmovntpd,<sp/>kInstVmovntpd,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"></highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/>INST_2x(vmovntps,<sp/>kInstVmovntps,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/>INST_2x(vmovntps,<sp/>kInstVmovntps,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/>INST_3x(vmovsd,<sp/>kInstVmovsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/>INST_2x(vmovsd,<sp/>kInstVmovsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/>INST_2x(vmovsd,<sp/>kInstVmovsd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/>INST_2x(vmovshdup,<sp/>kInstVmovshdup,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/>INST_2x(vmovshdup,<sp/>kInstVmovshdup,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/>INST_2x(vmovshdup,<sp/>kInstVmovshdup,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/>INST_2x(vmovshdup,<sp/>kInstVmovshdup,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3743"><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/>INST_2x(vmovsldup,<sp/>kInstVmovsldup,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/>INST_2x(vmovsldup,<sp/>kInstVmovsldup,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/>INST_2x(vmovsldup,<sp/>kInstVmovsldup,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/>INST_2x(vmovsldup,<sp/>kInstVmovsldup,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"></highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/>INST_3x(vmovss,<sp/>kInstVmovss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/>INST_2x(vmovss,<sp/>kInstVmovss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/>INST_2x(vmovss,<sp/>kInstVmovss,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/>INST_2x(vmovupd,<sp/>kInstVmovupd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/>INST_2x(vmovupd,<sp/>kInstVmovupd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/>INST_2x(vmovupd,<sp/>kInstVmovupd,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/>INST_2x(vmovupd,<sp/>kInstVmovupd,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/>INST_2x(vmovupd,<sp/>kInstVmovupd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/>INST_2x(vmovupd,<sp/>kInstVmovupd,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/>INST_2x(vmovups,<sp/>kInstVmovups,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/>INST_2x(vmovups,<sp/>kInstVmovups,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/>INST_2x(vmovups,<sp/>kInstVmovups,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/>INST_2x(vmovups,<sp/>kInstVmovups,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/>INST_2x(vmovups,<sp/>kInstVmovups,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/>INST_2x(vmovups,<sp/>kInstVmovups,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"></highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/>INST_4i(vmpsadbw,<sp/>kInstVmpsadbw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/>INST_4i(vmpsadbw,<sp/>kInstVmpsadbw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/>INST_3x(vmulpd,<sp/>kInstVmulpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/>INST_3x(vmulpd,<sp/>kInstVmulpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/>INST_3x(vmulpd,<sp/>kInstVmulpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/>INST_3x(vmulpd,<sp/>kInstVmulpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/>INST_3x(vmulps,<sp/>kInstVmulps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/>INST_3x(vmulps,<sp/>kInstVmulps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/>INST_3x(vmulps,<sp/>kInstVmulps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/>INST_3x(vmulps,<sp/>kInstVmulps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/>INST_3x(vmulsd,<sp/>kInstVmulsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/>INST_3x(vmulsd,<sp/>kInstVmulsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/>INST_3x(vmulss,<sp/>kInstVmulss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/>INST_3x(vmulss,<sp/>kInstVmulss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"></highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/>INST_3x(vorpd,<sp/>kInstVorpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/>INST_3x(vorpd,<sp/>kInstVorpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/>INST_3x(vorpd,<sp/>kInstVorpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/>INST_3x(vorpd,<sp/>kInstVorpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"></highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/>INST_3x(vorps,<sp/>kInstVorps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/>INST_3x(vorps,<sp/>kInstVorps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/>INST_3x(vorps,<sp/>kInstVorps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/>INST_3x(vorps,<sp/>kInstVorps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3795"><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/>INST_2x(vpabsb,<sp/>kInstVpabsb,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/>INST_2x(vpabsb,<sp/>kInstVpabsb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/>INST_2x(vpabsd,<sp/>kInstVpabsd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/>INST_2x(vpabsd,<sp/>kInstVpabsd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/>INST_2x(vpabsw,<sp/>kInstVpabsw,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/>INST_2x(vpabsw,<sp/>kInstVpabsw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"></highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/>INST_3x(vpackssdw,<sp/>kInstVpackssdw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/>INST_3x(vpackssdw,<sp/>kInstVpackssdw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/>INST_3x(vpacksswb,<sp/>kInstVpacksswb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/>INST_3x(vpacksswb,<sp/>kInstVpacksswb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/>INST_3x(vpackusdw,<sp/>kInstVpackusdw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/>INST_3x(vpackusdw,<sp/>kInstVpackusdw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/>INST_3x(vpackuswb,<sp/>kInstVpackuswb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/>INST_3x(vpackuswb,<sp/>kInstVpackuswb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"><sp/><sp/>INST_3x(vpaddb,<sp/>kInstVpaddb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"><sp/><sp/>INST_3x(vpaddb,<sp/>kInstVpaddb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3819"><highlight class="normal"></highlight></codeline>
<codeline lineno="3820"><highlight class="normal"><sp/><sp/>INST_3x(vpaddd,<sp/>kInstVpaddd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/>INST_3x(vpaddd,<sp/>kInstVpaddd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/>INST_3x(vpaddq,<sp/>kInstVpaddq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/>INST_3x(vpaddq,<sp/>kInstVpaddq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/>INST_3x(vpaddw,<sp/>kInstVpaddw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/>INST_3x(vpaddw,<sp/>kInstVpaddw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/>INST_3x(vpaddsb,<sp/>kInstVpaddsb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/>INST_3x(vpaddsb,<sp/>kInstVpaddsb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832"><highlight class="normal"><sp/><sp/>INST_3x(vpaddsw,<sp/>kInstVpaddsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/>INST_3x(vpaddsw,<sp/>kInstVpaddsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/>INST_3x(vpaddusb,<sp/>kInstVpaddusb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/>INST_3x(vpaddusb,<sp/>kInstVpaddusb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3837"><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/>INST_3x(vpaddusw,<sp/>kInstVpaddusw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/>INST_3x(vpaddusw,<sp/>kInstVpaddusw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"></highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/>INST_4i(vpalignr,<sp/>kInstVpalignr,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/>INST_4i(vpalignr,<sp/>kInstVpalignr,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/>INST_3x(vpand,<sp/>kInstVpand,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/>INST_3x(vpand,<sp/>kInstVpand,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/>INST_3x(vpandn,<sp/>kInstVpandn,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/>INST_3x(vpandn,<sp/>kInstVpandn,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/>INST_3x(vpavgb,<sp/>kInstVpavgb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/>INST_3x(vpavgb,<sp/>kInstVpavgb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/>INST_3x(vpavgw,<sp/>kInstVpavgw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/>INST_3x(vpavgw,<sp/>kInstVpavgw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/>INST_4x(vpblendvb,<sp/>kInstVpblendvb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/>INST_4x(vpblendvb,<sp/>kInstVpblendvb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/>INST_4i(vpblendw,<sp/>kInstVpblendw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/>INST_4i(vpblendw,<sp/>kInstVpblendw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqb,<sp/>kInstVpcmpeqb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqb,<sp/>kInstVpcmpeqb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqd,<sp/>kInstVpcmpeqd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqd,<sp/>kInstVpcmpeqd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3867"><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqq,<sp/>kInstVpcmpeqq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqq,<sp/>kInstVpcmpeqq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqw,<sp/>kInstVpcmpeqw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqw,<sp/>kInstVpcmpeqw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtb,<sp/>kInstVpcmpgtb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtb,<sp/>kInstVpcmpgtb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtd,<sp/>kInstVpcmpgtd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtd,<sp/>kInstVpcmpgtd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"></highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtq,<sp/>kInstVpcmpgtq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtq,<sp/>kInstVpcmpgtq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtw,<sp/>kInstVpcmpgtw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtw,<sp/>kInstVpcmpgtw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/>INST_3i(vpcmpestri,<sp/>kInstVpcmpestri,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/>INST_3i(vpcmpestri,<sp/>kInstVpcmpestri,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/>INST_3i(vpcmpestrm,<sp/>kInstVpcmpestrm,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/>INST_3i(vpcmpestrm,<sp/>kInstVpcmpestrm,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/>INST_3i(vpcmpistri,<sp/>kInstVpcmpistri,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/>INST_3i(vpcmpistri,<sp/>kInstVpcmpistri,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/>INST_3i(vpcmpistrm,<sp/>kInstVpcmpistrm,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"><sp/><sp/>INST_3i(vpcmpistrm,<sp/>kInstVpcmpistrm,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/>INST_3x(vpermilpd,<sp/>kInstVpermilpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/>INST_3x(vpermilpd,<sp/>kInstVpermilpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/>INST_3x(vpermilpd,<sp/>kInstVpermilpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/>INST_3x(vpermilpd,<sp/>kInstVpermilpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"><sp/><sp/>INST_3i(vpermilpd,<sp/>kInstVpermilpd,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/>INST_3i(vpermilpd,<sp/>kInstVpermilpd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/>INST_3i(vpermilpd,<sp/>kInstVpermilpd,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/>INST_3i(vpermilpd,<sp/>kInstVpermilpd,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/>INST_3x(vpermilps,<sp/>kInstVpermilps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/>INST_3x(vpermilps,<sp/>kInstVpermilps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/>INST_3x(vpermilps,<sp/>kInstVpermilps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/>INST_3x(vpermilps,<sp/>kInstVpermilps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/>INST_3i(vpermilps,<sp/>kInstVpermilps,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/>INST_3i(vpermilps,<sp/>kInstVpermilps,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/>INST_3i(vpermilps,<sp/>kInstVpermilps,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/>INST_3i(vpermilps,<sp/>kInstVpermilps,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/>INST_4i(vperm2f128,<sp/>kInstVperm2f128,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/>INST_4i(vperm2f128,<sp/>kInstVperm2f128,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/>INST_3i(vpextrb,<sp/>kInstVpextrb,<sp/>GpReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/>INST_3i(vpextrb,<sp/>kInstVpextrb,<sp/>Mem,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"></highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/>INST_3i(vpextrd,<sp/>kInstVpextrd,<sp/>GpReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/>INST_3i(vpextrd,<sp/>kInstVpextrd,<sp/>Mem,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/>INST_3i(vpextrw,<sp/>kInstVpextrw,<sp/>GpReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/>INST_3i(vpextrw,<sp/>kInstVpextrw,<sp/>Mem,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/>INST_3x(vphaddd,<sp/>kInstVphaddd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/>INST_3x(vphaddd,<sp/>kInstVphaddd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"></highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/>INST_3x(vphaddsw,<sp/>kInstVphaddsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/>INST_3x(vphaddsw,<sp/>kInstVphaddsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"></highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/>INST_3x(vphaddw,<sp/>kInstVphaddw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/>INST_3x(vphaddw,<sp/>kInstVphaddw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/>INST_2x(vphminposuw,<sp/>kInstVphminposuw,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/>INST_2x(vphminposuw,<sp/>kInstVphminposuw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/>INST_3x(vphsubd,<sp/>kInstVphsubd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/>INST_3x(vphsubd,<sp/>kInstVphsubd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"></highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/>INST_3x(vphsubsw,<sp/>kInstVphsubsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/>INST_3x(vphsubsw,<sp/>kInstVphsubsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/>INST_3x(vphsubw,<sp/>kInstVphsubw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/>INST_3x(vphsubw,<sp/>kInstVphsubw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"></highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/>INST_4i(vpinsrb,<sp/>kInstVpinsrb,<sp/>XmmReg,<sp/>XmmReg,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/>INST_4i(vpinsrb,<sp/>kInstVpinsrb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"></highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/>INST_4i(vpinsrd,<sp/>kInstVpinsrd,<sp/>XmmReg,<sp/>XmmReg,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/>INST_4i(vpinsrd,<sp/>kInstVpinsrd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"></highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/>INST_4i(vpinsrw,<sp/>kInstVpinsrw,<sp/>XmmReg,<sp/>XmmReg,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/>INST_4i(vpinsrw,<sp/>kInstVpinsrw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"></highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/>INST_3x(vpmaddubsw,<sp/>kInstVpmaddubsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/>INST_3x(vpmaddubsw,<sp/>kInstVpmaddubsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/>INST_3x(vpmaddwd,<sp/>kInstVpmaddwd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/>INST_3x(vpmaddwd,<sp/>kInstVpmaddwd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsb,<sp/>kInstVpmaxsb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsb,<sp/>kInstVpmaxsb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsd,<sp/>kInstVpmaxsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsd,<sp/>kInstVpmaxsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsw,<sp/>kInstVpmaxsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsw,<sp/>kInstVpmaxsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxub,<sp/>kInstVpmaxub,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxub,<sp/>kInstVpmaxub,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxud,<sp/>kInstVpmaxud,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxud,<sp/>kInstVpmaxud,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxuw,<sp/>kInstVpmaxuw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxuw,<sp/>kInstVpmaxuw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/>INST_3x(vpminsb,<sp/>kInstVpminsb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/>INST_3x(vpminsb,<sp/>kInstVpminsb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/>INST_3x(vpminsd,<sp/>kInstVpminsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/>INST_3x(vpminsd,<sp/>kInstVpminsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"></highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/>INST_3x(vpminsw,<sp/>kInstVpminsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/>INST_3x(vpminsw,<sp/>kInstVpminsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"></highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/>INST_3x(vpminub,<sp/>kInstVpminub,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/>INST_3x(vpminub,<sp/>kInstVpminub,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"></highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/>INST_3x(vpminud,<sp/>kInstVpminud,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/>INST_3x(vpminud,<sp/>kInstVpminud,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"></highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/>INST_3x(vpminuw,<sp/>kInstVpminuw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/>INST_3x(vpminuw,<sp/>kInstVpminuw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/>INST_2x(vpmovmskb,<sp/>kInstVpmovmskb,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbd,<sp/>kInstVpmovsxbd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbd,<sp/>kInstVpmovsxbd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"></highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbq,<sp/>kInstVpmovsxbq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbq,<sp/>kInstVpmovsxbq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"></highlight></codeline>
<codeline lineno="4008"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbw,<sp/>kInstVpmovsxbw,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbw,<sp/>kInstVpmovsxbw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight></codeline>
<codeline lineno="4011"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxdq,<sp/>kInstVpmovsxdq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxdq,<sp/>kInstVpmovsxdq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxwd,<sp/>kInstVpmovsxwd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxwd,<sp/>kInstVpmovsxwd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"></highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxwq,<sp/>kInstVpmovsxwq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxwq,<sp/>kInstVpmovsxwq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbd,<sp/>kInstVpmovzxbd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbd,<sp/>kInstVpmovzxbd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"></highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbq,<sp/>kInstVpmovzxbq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbq,<sp/>kInstVpmovzxbq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbw,<sp/>kInstVpmovzxbw,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbw,<sp/>kInstVpmovzxbw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"></highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxdq,<sp/>kInstVpmovzxdq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxdq,<sp/>kInstVpmovzxdq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxwd,<sp/>kInstVpmovzxwd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxwd,<sp/>kInstVpmovzxwd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxwq,<sp/>kInstVpmovzxwq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxwq,<sp/>kInstVpmovzxwq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4037"><highlight class="normal"></highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/>INST_3x(vpmuldq,<sp/>kInstVpmuldq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/>INST_3x(vpmuldq,<sp/>kInstVpmuldq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhrsw,<sp/>kInstVpmulhrsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhrsw,<sp/>kInstVpmulhrsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"></highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhuw,<sp/>kInstVpmulhuw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhuw,<sp/>kInstVpmulhuw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"></highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhw,<sp/>kInstVpmulhw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhw,<sp/>kInstVpmulhw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/>INST_3x(vpmulld,<sp/>kInstVpmulld,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/>INST_3x(vpmulld,<sp/>kInstVpmulld,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/>INST_3x(vpmullw,<sp/>kInstVpmullw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/>INST_3x(vpmullw,<sp/>kInstVpmullw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"></highlight></codeline>
<codeline lineno="4056"><highlight class="normal"><sp/><sp/>INST_3x(vpmuludq,<sp/>kInstVpmuludq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/>INST_3x(vpmuludq,<sp/>kInstVpmuludq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"></highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/>INST_3x(vpor,<sp/>kInstVpor,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/>INST_3x(vpor,<sp/>kInstVpor,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/>INST_3x(vpsadbw,<sp/>kInstVpsadbw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/>INST_3x(vpsadbw,<sp/>kInstVpsadbw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"></highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/>INST_3x(vpshufb,<sp/>kInstVpshufb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"><sp/><sp/>INST_3x(vpshufb,<sp/>kInstVpshufb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/>INST_3i(vpshufd,<sp/>kInstVpshufd,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/>INST_3i(vpshufd,<sp/>kInstVpshufd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"></highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/>INST_3i(vpshufhw,<sp/>kInstVpshufhw,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/>INST_3i(vpshufhw,<sp/>kInstVpshufhw,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/>INST_3i(vpshuflw,<sp/>kInstVpshuflw,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/>INST_3i(vpshuflw,<sp/>kInstVpshuflw,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/>INST_3x(vpsignb,<sp/>kInstVpsignb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/>INST_3x(vpsignb,<sp/>kInstVpsignb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"></highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/>INST_3x(vpsignd,<sp/>kInstVpsignd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/>INST_3x(vpsignd,<sp/>kInstVpsignd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"></highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/>INST_3x(vpsignw,<sp/>kInstVpsignw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/>INST_3x(vpsignw,<sp/>kInstVpsignw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/>INST_3x(vpslld,<sp/>kInstVpslld,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/>INST_3x(vpslld,<sp/>kInstVpslld,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/>INST_3i(vpslld,<sp/>kInstVpslld,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/>INST_3i(vpslldq,<sp/>kInstVpslldq,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/>INST_3x(vpsllq,<sp/>kInstVpsllq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/>INST_3x(vpsllq,<sp/>kInstVpsllq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/>INST_3i(vpsllq,<sp/>kInstVpsllq,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/>INST_3x(vpsllw,<sp/>kInstVpsllw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/>INST_3x(vpsllw,<sp/>kInstVpsllw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/>INST_3i(vpsllw,<sp/>kInstVpsllw,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/>INST_3x(vpsrad,<sp/>kInstVpsrad,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/>INST_3x(vpsrad,<sp/>kInstVpsrad,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/>INST_3i(vpsrad,<sp/>kInstVpsrad,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/>INST_3x(vpsraw,<sp/>kInstVpsraw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/>INST_3x(vpsraw,<sp/>kInstVpsraw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/>INST_3i(vpsraw,<sp/>kInstVpsraw,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/>INST_3x(vpsrld,<sp/>kInstVpsrld,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/>INST_3x(vpsrld,<sp/>kInstVpsrld,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/>INST_3i(vpsrld,<sp/>kInstVpsrld,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/>INST_3i(vpsrldq,<sp/>kInstVpsrldq,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"></highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlq,<sp/>kInstVpsrlq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlq,<sp/>kInstVpsrlq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/>INST_3i(vpsrlq,<sp/>kInstVpsrlq,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"></highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlw,<sp/>kInstVpsrlw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlw,<sp/>kInstVpsrlw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/>INST_3i(vpsrlw,<sp/>kInstVpsrlw,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"></highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/>INST_3x(vpsubb,<sp/>kInstVpsubb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/>INST_3x(vpsubb,<sp/>kInstVpsubb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/>INST_3x(vpsubd,<sp/>kInstVpsubd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/>INST_3x(vpsubd,<sp/>kInstVpsubd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"></highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/>INST_3x(vpsubq,<sp/>kInstVpsubq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/>INST_3x(vpsubq,<sp/>kInstVpsubq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"></highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/>INST_3x(vpsubw,<sp/>kInstVpsubw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/>INST_3x(vpsubw,<sp/>kInstVpsubw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"></highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/>INST_3x(vpsubsb,<sp/>kInstVpsubsb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/>INST_3x(vpsubsb,<sp/>kInstVpsubsb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"></highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/>INST_3x(vpsubsw,<sp/>kInstVpsubsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/>INST_3x(vpsubsw,<sp/>kInstVpsubsw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/>INST_3x(vpsubusb,<sp/>kInstVpsubusb,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/>INST_3x(vpsubusb,<sp/>kInstVpsubusb,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"></highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/>INST_3x(vpsubusw,<sp/>kInstVpsubusw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/>INST_3x(vpsubusw,<sp/>kInstVpsubusw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4145"><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/>INST_2x(vptest,<sp/>kInstVptest,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/>INST_2x(vptest,<sp/>kInstVptest,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/>INST_2x(vptest,<sp/>kInstVptest,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/>INST_2x(vptest,<sp/>kInstVptest,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"></highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhbw,<sp/>kInstVpunpckhbw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhbw,<sp/>kInstVpunpckhbw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4153"><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhdq,<sp/>kInstVpunpckhdq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhdq,<sp/>kInstVpunpckhdq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"></highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhqdq,<sp/>kInstVpunpckhqdq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhqdq,<sp/>kInstVpunpckhqdq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"></highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhwd,<sp/>kInstVpunpckhwd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhwd,<sp/>kInstVpunpckhwd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"></highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklbw,<sp/>kInstVpunpcklbw,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklbw,<sp/>kInstVpunpcklbw,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckldq,<sp/>kInstVpunpckldq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckldq,<sp/>kInstVpunpckldq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"></highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklqdq,<sp/>kInstVpunpcklqdq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklqdq,<sp/>kInstVpunpcklqdq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklwd,<sp/>kInstVpunpcklwd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklwd,<sp/>kInstVpunpcklwd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"></highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/>INST_3x(vpxor,<sp/>kInstVpxor,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/>INST_3x(vpxor,<sp/>kInstVpxor,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"></highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/>INST_2x(vrcpps,<sp/>kInstVrcpps,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/>INST_2x(vrcpps,<sp/>kInstVrcpps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/>INST_2x(vrcpps,<sp/>kInstVrcpps,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/>INST_2x(vrcpps,<sp/>kInstVrcpps,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/>INST_3x(vrcpss,<sp/>kInstVrcpss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/>INST_3x(vrcpss,<sp/>kInstVrcpss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/>INST_2x(vrsqrtps,<sp/>kInstVrsqrtps,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/>INST_2x(vrsqrtps,<sp/>kInstVrsqrtps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/>INST_2x(vrsqrtps,<sp/>kInstVrsqrtps,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"><sp/><sp/>INST_2x(vrsqrtps,<sp/>kInstVrsqrtps,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/>INST_3x(vrsqrtss,<sp/>kInstVrsqrtss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/>INST_3x(vrsqrtss,<sp/>kInstVrsqrtss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/>INST_3i(vroundpd,<sp/>kInstVroundpd,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/>INST_3i(vroundpd,<sp/>kInstVroundpd,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/>INST_3i(vroundpd,<sp/>kInstVroundpd,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/>INST_3i(vroundpd,<sp/>kInstVroundpd,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"></highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/>INST_3i(vroundps,<sp/>kInstVroundps,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/>INST_3i(vroundps,<sp/>kInstVroundps,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/>INST_3i(vroundps,<sp/>kInstVroundps,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/>INST_3i(vroundps,<sp/>kInstVroundps,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"></highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/>INST_4i(vroundsd,<sp/>kInstVroundsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/>INST_4i(vroundsd,<sp/>kInstVroundsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/>INST_4i(vroundss,<sp/>kInstVroundss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"><sp/><sp/>INST_4i(vroundss,<sp/>kInstVroundss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4209"><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/>INST_4i(vshufpd,<sp/>kInstVshufpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/>INST_4i(vshufpd,<sp/>kInstVshufpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/>INST_4i(vshufpd,<sp/>kInstVshufpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/>INST_4i(vshufpd,<sp/>kInstVshufpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/>INST_4i(vshufps,<sp/>kInstVshufps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/>INST_4i(vshufps,<sp/>kInstVshufps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/>INST_4i(vshufps,<sp/>kInstVshufps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/>INST_4i(vshufps,<sp/>kInstVshufps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/>INST_2x(vsqrtpd,<sp/>kInstVsqrtpd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/>INST_2x(vsqrtpd,<sp/>kInstVsqrtpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/>INST_2x(vsqrtpd,<sp/>kInstVsqrtpd,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/>INST_2x(vsqrtpd,<sp/>kInstVsqrtpd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"></highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/>INST_2x(vsqrtps,<sp/>kInstVsqrtps,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/>INST_2x(vsqrtps,<sp/>kInstVsqrtps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/>INST_2x(vsqrtps,<sp/>kInstVsqrtps,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/>INST_2x(vsqrtps,<sp/>kInstVsqrtps,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/>INST_3x(vsqrtsd,<sp/>kInstVsqrtsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/>INST_3x(vsqrtsd,<sp/>kInstVsqrtsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/>INST_3x(vsqrtss,<sp/>kInstVsqrtss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/>INST_3x(vsqrtss,<sp/>kInstVsqrtss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4235"><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/>INST_1x(vstmxcsr,<sp/>kInstVstmxcsr,<sp/>Mem)</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"></highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/>INST_3x(vsubpd,<sp/>kInstVsubpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/>INST_3x(vsubpd,<sp/>kInstVsubpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/>INST_3x(vsubpd,<sp/>kInstVsubpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/>INST_3x(vsubpd,<sp/>kInstVsubpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4242"><highlight class="normal"></highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/>INST_3x(vsubps,<sp/>kInstVsubps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/>INST_3x(vsubps,<sp/>kInstVsubps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/>INST_3x(vsubps,<sp/>kInstVsubps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/>INST_3x(vsubps,<sp/>kInstVsubps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/>INST_3x(vsubsd,<sp/>kInstVsubsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/>INST_3x(vsubsd,<sp/>kInstVsubsd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"></highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/>INST_3x(vsubss,<sp/>kInstVsubss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/>INST_3x(vsubss,<sp/>kInstVsubss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/>INST_2x(vtestps,<sp/>kInstVtestps,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/>INST_2x(vtestps,<sp/>kInstVtestps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/>INST_2x(vtestps,<sp/>kInstVtestps,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/>INST_2x(vtestps,<sp/>kInstVtestps,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"></highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/>INST_2x(vtestpd,<sp/>kInstVtestpd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/>INST_2x(vtestpd,<sp/>kInstVtestpd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/>INST_2x(vtestpd,<sp/>kInstVtestpd,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/>INST_2x(vtestpd,<sp/>kInstVtestpd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/>INST_2x(vucomisd,<sp/>kInstVucomisd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/>INST_2x(vucomisd,<sp/>kInstVucomisd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"></highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/>INST_2x(vucomiss,<sp/>kInstVucomiss,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/>INST_2x(vucomiss,<sp/>kInstVucomiss,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/>INST_3x(vunpckhpd,<sp/>kInstVunpckhpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/>INST_3x(vunpckhpd,<sp/>kInstVunpckhpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/>INST_3x(vunpckhpd,<sp/>kInstVunpckhpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/>INST_3x(vunpckhpd,<sp/>kInstVunpckhpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/>INST_3x(vunpckhps,<sp/>kInstVunpckhps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/>INST_3x(vunpckhps,<sp/>kInstVunpckhps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/>INST_3x(vunpckhps,<sp/>kInstVunpckhps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/>INST_3x(vunpckhps,<sp/>kInstVunpckhps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/>INST_3x(vunpcklpd,<sp/>kInstVunpcklpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/>INST_3x(vunpcklpd,<sp/>kInstVunpcklpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/>INST_3x(vunpcklpd,<sp/>kInstVunpcklpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/>INST_3x(vunpcklpd,<sp/>kInstVunpcklpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/>INST_3x(vunpcklps,<sp/>kInstVunpcklps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/>INST_3x(vunpcklps,<sp/>kInstVunpcklps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/>INST_3x(vunpcklps,<sp/>kInstVunpcklps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"><sp/><sp/>INST_3x(vunpcklps,<sp/>kInstVunpcklps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4289"><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/>INST_3x(vxorpd,<sp/>kInstVxorpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/>INST_3x(vxorpd,<sp/>kInstVxorpd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/>INST_3x(vxorpd,<sp/>kInstVxorpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/>INST_3x(vxorpd,<sp/>kInstVxorpd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"></highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/>INST_3x(vxorps,<sp/>kInstVxorps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/>INST_3x(vxorps,<sp/>kInstVxorps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/>INST_3x(vxorps,<sp/>kInstVxorps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/>INST_3x(vxorps,<sp/>kInstVxorps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"></highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/>INST_0x(vzeroall,<sp/>kInstVzeroall)</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"><sp/><sp/>INST_0x(vzeroupper,<sp/>kInstVzeroupper)</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[AVX+AESNI]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4306"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4307"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>a<sp/>single<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>decryption<sp/>flow<sp/>(AVX+AESNI).</highlight></codeline>
<codeline lineno="4308" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af42ee665c5106babfaa354ef430242d3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1af42ee665c5106babfaa354ef430242d3" kindref="member" tooltip="Perform a single round of the AES decryption flow (AVX+AESNI).">vaesdec</ref>,<sp/>kInstVaesdec,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4309"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4310" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a2b7b6fcc6b1df3b578b516b6b0a74380" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(vaesdec,<sp/>kInstVaesdec,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4312"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>the<sp/>last<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>decryption<sp/>flow<sp/>(AVX+AESNI).</highlight></codeline>
<codeline lineno="4313" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a93931b2cbdafe61135978030c9eefc9b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a93931b2cbdafe61135978030c9eefc9b" kindref="member" tooltip="Perform the last round of the AES decryption flow (AVX+AESNI).">vaesdeclast</ref>,<sp/>kInstVaesdeclast,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4314"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4315" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aad859b39347d459a54d2aea0e5285341" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(vaesdeclast,<sp/>kInstVaesdeclast,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4317"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>a<sp/>single<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>encryption<sp/>flow<sp/>(AVX+AESNI).</highlight></codeline>
<codeline lineno="4318" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6c8b13bb7ebb60d4d40a59b1d939d4ae" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a6c8b13bb7ebb60d4d40a59b1d939d4ae" kindref="member" tooltip="Perform a single round of the AES encryption flow (AVX+AESNI).">vaesenc</ref>,<sp/>kInstVaesenc,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4319"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4320" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a80a1e72c444885a5996ddca43f63aa8e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(vaesenc,<sp/>kInstVaesenc,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4322"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>the<sp/>last<sp/>round<sp/>of<sp/>the<sp/>AES<sp/>encryption<sp/>flow<sp/>(AVX+AESNI).</highlight></codeline>
<codeline lineno="4323" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae46eb8391754b78da6895ea127c8e420" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ae46eb8391754b78da6895ea127c8e420" kindref="member" tooltip="Perform the last round of the AES encryption flow (AVX+AESNI).">vaesenclast</ref>,<sp/>kInstVaesenclast,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4324"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4325" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a21631129ebe23e8cf77e6853fca40feb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3x(vaesenclast,<sp/>kInstVaesenclast,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4327"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Perform<sp/>the<sp/>InvMixColumns<sp/>transformation<sp/>(AVX+AESNI).</highlight></codeline>
<codeline lineno="4328" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad00a215a942e3e68ba23f75213c0fbc4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad00a215a942e3e68ba23f75213c0fbc4" kindref="member" tooltip="Perform the InvMixColumns transformation (AVX+AESNI).">vaesimc</ref>,<sp/>kInstVaesimc,<sp/>XmmReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4329"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4330" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a56726126e595167c7bddd063f304e12d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(vaesimc,<sp/>kInstVaesimc,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4332"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Assist<sp/>in<sp/>expanding<sp/>the<sp/>AES<sp/>cipher<sp/>key<sp/>(AVX+AESNI).</highlight></codeline>
<codeline lineno="4333" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a93d7e20dfbcf907dea92ddd47e89a830" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(<ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a93d7e20dfbcf907dea92ddd47e89a830" kindref="member" tooltip="Assist in expanding the AES cipher key (AVX+AESNI).">vaeskeygenassist</ref>,<sp/>kInstVaeskeygenassist,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4334"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="4335" refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a27d154e9045a4ef1cd539cfdb9dd5275" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_3i(vaeskeygenassist,<sp/>kInstVaeskeygenassist,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"></highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[AVX+PCLMULQDQ]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4340"><highlight class="normal"></highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/>INST_4i(vpclmulqdq,<sp/>kInstVpclmulqdq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/>INST_4i(vpclmulqdq,<sp/>kInstVpclmulqdq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"></highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[AVX2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/>INST_2x(vbroadcasti128,<sp/>kInstVbroadcasti128,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/>INST_2x(vbroadcastsd,<sp/>kInstVbroadcastsd,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/>INST_2x(vbroadcastss,<sp/>kInstVbroadcastss,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/>INST_2x(vbroadcastss,<sp/>kInstVbroadcastss,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"></highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/>INST_3i(vextracti128,<sp/>kInstVextracti128,<sp/>XmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/>INST_3i(vextracti128,<sp/>kInstVextracti128,<sp/>Mem,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"></highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/>INST_3x(vgatherdpd,<sp/>kInstVgatherdpd,<sp/>XmmReg,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/>INST_3x(vgatherdpd,<sp/>kInstVgatherdpd,<sp/>YmmReg,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/>INST_3x(vgatherdps,<sp/>kInstVgatherdps,<sp/>XmmReg,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/>INST_3x(vgatherdps,<sp/>kInstVgatherdps,<sp/>YmmReg,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"></highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/>INST_3x(vgatherqpd,<sp/>kInstVgatherqpd,<sp/>XmmReg,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/>INST_3x(vgatherqpd,<sp/>kInstVgatherqpd,<sp/>YmmReg,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/>INST_3x(vgatherqps,<sp/>kInstVgatherqps,<sp/>XmmReg,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/>INST_4i(vinserti128,<sp/>kInstVinserti128,<sp/>YmmReg,<sp/>YmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/>INST_4i(vinserti128,<sp/>kInstVinserti128,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"></highlight></codeline>
<codeline lineno="4372"><highlight class="normal"><sp/><sp/>INST_2x(vmovntdqa,<sp/>kInstVmovntdqa,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4373"><highlight class="normal"></highlight></codeline>
<codeline lineno="4374"><highlight class="normal"><sp/><sp/>INST_4i(vmpsadbw,<sp/>kInstVmpsadbw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4375"><highlight class="normal"><sp/><sp/>INST_4i(vmpsadbw,<sp/>kInstVmpsadbw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"><sp/><sp/>INST_2x(vpabsb,<sp/>kInstVpabsb,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/>INST_2x(vpabsb,<sp/>kInstVpabsb,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"></highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/>INST_2x(vpabsd,<sp/>kInstVpabsd,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/>INST_2x(vpabsd,<sp/>kInstVpabsd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"></highlight></codeline>
<codeline lineno="4383"><highlight class="normal"><sp/><sp/>INST_2x(vpabsw,<sp/>kInstVpabsw,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/>INST_2x(vpabsw,<sp/>kInstVpabsw,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4385"><highlight class="normal"></highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/>INST_3x(vpackssdw,<sp/>kInstVpackssdw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"><sp/><sp/>INST_3x(vpackssdw,<sp/>kInstVpackssdw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4388"><highlight class="normal"></highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/>INST_3x(vpacksswb,<sp/>kInstVpacksswb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/>INST_3x(vpacksswb,<sp/>kInstVpacksswb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"></highlight></codeline>
<codeline lineno="4392"><highlight class="normal"><sp/><sp/>INST_3x(vpackusdw,<sp/>kInstVpackusdw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/>INST_3x(vpackusdw,<sp/>kInstVpackusdw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"></highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/>INST_3x(vpackuswb,<sp/>kInstVpackuswb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/>INST_3x(vpackuswb,<sp/>kInstVpackuswb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"></highlight></codeline>
<codeline lineno="4398"><highlight class="normal"><sp/><sp/>INST_3x(vpaddb,<sp/>kInstVpaddb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/>INST_3x(vpaddb,<sp/>kInstVpaddb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"></highlight></codeline>
<codeline lineno="4401"><highlight class="normal"><sp/><sp/>INST_3x(vpaddd,<sp/>kInstVpaddd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/>INST_3x(vpaddd,<sp/>kInstVpaddd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"></highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/>INST_3x(vpaddq,<sp/>kInstVpaddq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/>INST_3x(vpaddq,<sp/>kInstVpaddq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"></highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/>INST_3x(vpaddw,<sp/>kInstVpaddw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/>INST_3x(vpaddw,<sp/>kInstVpaddw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/>INST_3x(vpaddsb,<sp/>kInstVpaddsb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/>INST_3x(vpaddsb,<sp/>kInstVpaddsb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"></highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/>INST_3x(vpaddsw,<sp/>kInstVpaddsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/>INST_3x(vpaddsw,<sp/>kInstVpaddsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/>INST_3x(vpaddusb,<sp/>kInstVpaddusb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/>INST_3x(vpaddusb,<sp/>kInstVpaddusb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"></highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/>INST_3x(vpaddusw,<sp/>kInstVpaddusw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/>INST_3x(vpaddusw,<sp/>kInstVpaddusw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"></highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/>INST_4i(vpalignr,<sp/>kInstVpalignr,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/>INST_4i(vpalignr,<sp/>kInstVpalignr,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/>INST_3x(vpand,<sp/>kInstVpand,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/>INST_3x(vpand,<sp/>kInstVpand,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"></highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/>INST_3x(vpandn,<sp/>kInstVpandn,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/>INST_3x(vpandn,<sp/>kInstVpandn,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"></highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/>INST_3x(vpavgb,<sp/>kInstVpavgb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/>INST_3x(vpavgb,<sp/>kInstVpavgb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"></highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/>INST_3x(vpavgw,<sp/>kInstVpavgw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/>INST_3x(vpavgw,<sp/>kInstVpavgw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"></highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/>INST_4i(vpblendd,<sp/>kInstVpblendd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/>INST_4i(vpblendd,<sp/>kInstVpblendd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"><sp/><sp/>INST_4i(vpblendd,<sp/>kInstVpblendd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/>INST_4i(vpblendd,<sp/>kInstVpblendd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"></highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/>INST_4x(vpblendvb,<sp/>kInstVpblendvb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/>INST_4x(vpblendvb,<sp/>kInstVpblendvb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"></highlight></codeline>
<codeline lineno="4445"><highlight class="normal"><sp/><sp/>INST_4i(vpblendw,<sp/>kInstVpblendw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/>INST_4i(vpblendw,<sp/>kInstVpblendw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"></highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastb,<sp/>kInstVpbroadcastb,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastb,<sp/>kInstVpbroadcastb,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastb,<sp/>kInstVpbroadcastb,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastb,<sp/>kInstVpbroadcastb,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastd,<sp/>kInstVpbroadcastd,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastd,<sp/>kInstVpbroadcastd,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastd,<sp/>kInstVpbroadcastd,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastd,<sp/>kInstVpbroadcastd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastq,<sp/>kInstVpbroadcastq,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastq,<sp/>kInstVpbroadcastq,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastq,<sp/>kInstVpbroadcastq,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastq,<sp/>kInstVpbroadcastq,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4462"><highlight class="normal"></highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastw,<sp/>kInstVpbroadcastw,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastw,<sp/>kInstVpbroadcastw,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastw,<sp/>kInstVpbroadcastw,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/>INST_2x(vpbroadcastw,<sp/>kInstVpbroadcastw,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqb,<sp/>kInstVpcmpeqb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqb,<sp/>kInstVpcmpeqb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"></highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqd,<sp/>kInstVpcmpeqd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqd,<sp/>kInstVpcmpeqd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqq,<sp/>kInstVpcmpeqq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqq,<sp/>kInstVpcmpeqq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4476"><highlight class="normal"></highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqw,<sp/>kInstVpcmpeqw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpeqw,<sp/>kInstVpcmpeqw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"></highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtb,<sp/>kInstVpcmpgtb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtb,<sp/>kInstVpcmpgtb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"></highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtd,<sp/>kInstVpcmpgtd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtd,<sp/>kInstVpcmpgtd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtq,<sp/>kInstVpcmpgtq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtq,<sp/>kInstVpcmpgtq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4488"><highlight class="normal"></highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtw,<sp/>kInstVpcmpgtw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/>INST_3x(vpcmpgtw,<sp/>kInstVpcmpgtw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/>INST_4i(vperm2i128,<sp/>kInstVperm2i128,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/>INST_4i(vperm2i128,<sp/>kInstVperm2i128,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/>INST_3x(vpermd,<sp/>kInstVpermd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/>INST_3x(vpermd,<sp/>kInstVpermd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"></highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/>INST_3x(vpermps,<sp/>kInstVpermps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"><sp/><sp/>INST_3x(vpermps,<sp/>kInstVpermps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4500"><highlight class="normal"></highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/>INST_3i(vpermpd,<sp/>kInstVpermpd,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/>INST_3i(vpermpd,<sp/>kInstVpermpd,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"></highlight></codeline>
<codeline lineno="4504"><highlight class="normal"><sp/><sp/>INST_3i(vpermq,<sp/>kInstVpermq,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/>INST_3i(vpermq,<sp/>kInstVpermq,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/>INST_3x(vpgatherdd,<sp/>kInstVpgatherdd,<sp/>XmmReg,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/>INST_3x(vpgatherdd,<sp/>kInstVpgatherdd,<sp/>YmmReg,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"></highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/>INST_3x(vpgatherdq,<sp/>kInstVpgatherdq,<sp/>XmmReg,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/>INST_3x(vpgatherdq,<sp/>kInstVpgatherdq,<sp/>YmmReg,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4512"><highlight class="normal"></highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/>INST_3x(vpgatherqd,<sp/>kInstVpgatherqd,<sp/>XmmReg,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"></highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/>INST_3x(vpgatherqq,<sp/>kInstVpgatherqq,<sp/>XmmReg,<sp/>Mem,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/>INST_3x(vpgatherqq,<sp/>kInstVpgatherqq,<sp/>YmmReg,<sp/>Mem,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"></highlight></codeline>
<codeline lineno="4518"><highlight class="normal"><sp/><sp/>INST_2x(vpmovmskb,<sp/>kInstVpmovmskb,<sp/>GpReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4519"><highlight class="normal"></highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbd,<sp/>kInstVpmovsxbd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbd,<sp/>kInstVpmovsxbd,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"></highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbq,<sp/>kInstVpmovsxbq,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbq,<sp/>kInstVpmovsxbq,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbw,<sp/>kInstVpmovsxbw,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxbw,<sp/>kInstVpmovsxbw,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"></highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxdq,<sp/>kInstVpmovsxdq,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxdq,<sp/>kInstVpmovsxdq,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4531"><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxwd,<sp/>kInstVpmovsxwd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxwd,<sp/>kInstVpmovsxwd,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxwq,<sp/>kInstVpmovsxwq,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/>INST_2x(vpmovsxwq,<sp/>kInstVpmovsxwq,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"></highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbd,<sp/>kInstVpmovzxbd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbd,<sp/>kInstVpmovzxbd,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"></highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbq,<sp/>kInstVpmovzxbq,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbq,<sp/>kInstVpmovzxbq,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4543"><highlight class="normal"></highlight></codeline>
<codeline lineno="4544"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbw,<sp/>kInstVpmovzxbw,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxbw,<sp/>kInstVpmovzxbw,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4546"><highlight class="normal"></highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxdq,<sp/>kInstVpmovzxdq,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxdq,<sp/>kInstVpmovzxdq,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"></highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxwd,<sp/>kInstVpmovzxwd,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxwd,<sp/>kInstVpmovzxwd,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"></highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxwq,<sp/>kInstVpmovzxwq,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/>INST_2x(vpmovzxwq,<sp/>kInstVpmovzxwq,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"></highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/>INST_3i(vpshufd,<sp/>kInstVpshufd,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/>INST_3i(vpshufd,<sp/>kInstVpshufd,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"></highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/>INST_3i(vpshufhw,<sp/>kInstVpshufhw,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/>INST_3i(vpshufhw,<sp/>kInstVpshufhw,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"></highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/>INST_3i(vpshuflw,<sp/>kInstVpshuflw,<sp/>YmmReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/>INST_3i(vpshuflw,<sp/>kInstVpshuflw,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/>INST_3i(vpslld,<sp/>kInstVpslld,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"></highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/>INST_3i(vpslldq,<sp/>kInstVpslldq,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/>INST_3i(vpsllq,<sp/>kInstVpsllq,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"></highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/>INST_3i(vpsllw,<sp/>kInstVpsllw,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"></highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/>INST_3i(vpsrad,<sp/>kInstVpsrad,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"></highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/>INST_3i(vpsraw,<sp/>kInstVpsraw,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4576"><highlight class="normal"></highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/>INST_3i(vpsrld,<sp/>kInstVpsrld,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/>INST_3i(vpsrldq,<sp/>kInstVpsrldq,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/>INST_3i(vpsrlq,<sp/>kInstVpsrlq,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/>INST_3i(vpsrlw,<sp/>kInstVpsrlw,<sp/>YmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/>INST_3x(vphaddd,<sp/>kInstVphaddd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/>INST_3x(vphaddd,<sp/>kInstVphaddd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/>INST_3x(vphaddsw,<sp/>kInstVphaddsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/>INST_3x(vphaddsw,<sp/>kInstVphaddsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/>INST_3x(vphaddw,<sp/>kInstVphaddw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/>INST_3x(vphaddw,<sp/>kInstVphaddw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/>INST_3x(vphsubd,<sp/>kInstVphsubd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/>INST_3x(vphsubd,<sp/>kInstVphsubd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"></highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/>INST_3x(vphsubsw,<sp/>kInstVphsubsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/>INST_3x(vphsubsw,<sp/>kInstVphsubsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"></highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/>INST_3x(vphsubw,<sp/>kInstVphsubw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/>INST_3x(vphsubw,<sp/>kInstVphsubw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"></highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/>INST_3x(vpmaddubsw,<sp/>kInstVpmaddubsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/>INST_3x(vpmaddubsw,<sp/>kInstVpmaddubsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"></highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/>INST_3x(vpmaddwd,<sp/>kInstVpmaddwd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/>INST_3x(vpmaddwd,<sp/>kInstVpmaddwd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"></highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/>INST_3x(vpmaskmovd,<sp/>kInstVpmaskmovd,<sp/>Mem,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/>INST_3x(vpmaskmovd,<sp/>kInstVpmaskmovd,<sp/>Mem,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/>INST_3x(vpmaskmovd,<sp/>kInstVpmaskmovd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/>INST_3x(vpmaskmovd,<sp/>kInstVpmaskmovd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"></highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/>INST_3x(vpmaskmovq,<sp/>kInstVpmaskmovq,<sp/>Mem,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/>INST_3x(vpmaskmovq,<sp/>kInstVpmaskmovq,<sp/>Mem,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/>INST_3x(vpmaskmovq,<sp/>kInstVpmaskmovq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/>INST_3x(vpmaskmovq,<sp/>kInstVpmaskmovq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"></highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsb,<sp/>kInstVpmaxsb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsb,<sp/>kInstVpmaxsb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsd,<sp/>kInstVpmaxsd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsd,<sp/>kInstVpmaxsd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsw,<sp/>kInstVpmaxsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxsw,<sp/>kInstVpmaxsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"></highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxub,<sp/>kInstVpmaxub,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxub,<sp/>kInstVpmaxub,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"></highlight></codeline>
<codeline lineno="4631"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxud,<sp/>kInstVpmaxud,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxud,<sp/>kInstVpmaxud,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4633"><highlight class="normal"></highlight></codeline>
<codeline lineno="4634"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxuw,<sp/>kInstVpmaxuw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/>INST_3x(vpmaxuw,<sp/>kInstVpmaxuw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"></highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/>INST_3x(vpminsb,<sp/>kInstVpminsb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/>INST_3x(vpminsb,<sp/>kInstVpminsb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"></highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/>INST_3x(vpminsd,<sp/>kInstVpminsd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/>INST_3x(vpminsd,<sp/>kInstVpminsd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"></highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/>INST_3x(vpminsw,<sp/>kInstVpminsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/>INST_3x(vpminsw,<sp/>kInstVpminsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"></highlight></codeline>
<codeline lineno="4646"><highlight class="normal"><sp/><sp/>INST_3x(vpminub,<sp/>kInstVpminub,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/>INST_3x(vpminub,<sp/>kInstVpminub,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"></highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/>INST_3x(vpminud,<sp/>kInstVpminud,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/>INST_3x(vpminud,<sp/>kInstVpminud,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"></highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/>INST_3x(vpminuw,<sp/>kInstVpminuw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/>INST_3x(vpminuw,<sp/>kInstVpminuw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"></highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/>INST_3x(vpmuldq,<sp/>kInstVpmuldq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/>INST_3x(vpmuldq,<sp/>kInstVpmuldq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"></highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhrsw,<sp/>kInstVpmulhrsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhrsw,<sp/>kInstVpmulhrsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"></highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhuw,<sp/>kInstVpmulhuw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhuw,<sp/>kInstVpmulhuw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"></highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhw,<sp/>kInstVpmulhw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/>INST_3x(vpmulhw,<sp/>kInstVpmulhw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"></highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/>INST_3x(vpmulld,<sp/>kInstVpmulld,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/>INST_3x(vpmulld,<sp/>kInstVpmulld,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"></highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/>INST_3x(vpmullw,<sp/>kInstVpmullw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/>INST_3x(vpmullw,<sp/>kInstVpmullw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"></highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/>INST_3x(vpmuludq,<sp/>kInstVpmuludq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"><sp/><sp/>INST_3x(vpmuludq,<sp/>kInstVpmuludq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4675"><highlight class="normal"></highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/>INST_3x(vpor,<sp/>kInstVpor,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/>INST_3x(vpor,<sp/>kInstVpor,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/>INST_3x(vpsadbw,<sp/>kInstVpsadbw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/>INST_3x(vpsadbw,<sp/>kInstVpsadbw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"></highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/>INST_3x(vpshufb,<sp/>kInstVpshufb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/>INST_3x(vpshufb,<sp/>kInstVpshufb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"></highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/>INST_3x(vpsignb,<sp/>kInstVpsignb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/>INST_3x(vpsignb,<sp/>kInstVpsignb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"></highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/>INST_3x(vpsignd,<sp/>kInstVpsignd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/>INST_3x(vpsignd,<sp/>kInstVpsignd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/>INST_3x(vpsignw,<sp/>kInstVpsignw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/>INST_3x(vpsignw,<sp/>kInstVpsignw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"></highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/>INST_3x(vpslld,<sp/>kInstVpslld,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/>INST_3x(vpslld,<sp/>kInstVpslld,<sp/>YmmReg,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"></highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/>INST_3x(vpsllq,<sp/>kInstVpsllq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/>INST_3x(vpsllq,<sp/>kInstVpsllq,<sp/>YmmReg,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"></highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/>INST_3x(vpsllvd,<sp/>kInstVpsllvd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/>INST_3x(vpsllvd,<sp/>kInstVpsllvd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/>INST_3x(vpsllvd,<sp/>kInstVpsllvd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/>INST_3x(vpsllvd,<sp/>kInstVpsllvd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"></highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/>INST_3x(vpsllvq,<sp/>kInstVpsllvq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/>INST_3x(vpsllvq,<sp/>kInstVpsllvq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/>INST_3x(vpsllvq,<sp/>kInstVpsllvq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/>INST_3x(vpsllvq,<sp/>kInstVpsllvq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/>INST_3x(vpsllw,<sp/>kInstVpsllw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/>INST_3x(vpsllw,<sp/>kInstVpsllw,<sp/>YmmReg,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"></highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/>INST_3x(vpsrad,<sp/>kInstVpsrad,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"><sp/><sp/>INST_3x(vpsrad,<sp/>kInstVpsrad,<sp/>YmmReg,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4715"><highlight class="normal"></highlight></codeline>
<codeline lineno="4716"><highlight class="normal"><sp/><sp/>INST_3x(vpsravd,<sp/>kInstVpsravd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/>INST_3x(vpsravd,<sp/>kInstVpsravd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/>INST_3x(vpsravd,<sp/>kInstVpsravd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/>INST_3x(vpsravd,<sp/>kInstVpsravd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4720"><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/>INST_3x(vpsraw,<sp/>kInstVpsraw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/>INST_3x(vpsraw,<sp/>kInstVpsraw,<sp/>YmmReg,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"></highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/>INST_3x(vpsrld,<sp/>kInstVpsrld,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/>INST_3x(vpsrld,<sp/>kInstVpsrld,<sp/>YmmReg,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4726"><highlight class="normal"></highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlq,<sp/>kInstVpsrlq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlq,<sp/>kInstVpsrlq,<sp/>YmmReg,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"></highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlvd,<sp/>kInstVpsrlvd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlvd,<sp/>kInstVpsrlvd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlvd,<sp/>kInstVpsrlvd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlvd,<sp/>kInstVpsrlvd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"></highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlvq,<sp/>kInstVpsrlvq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlvq,<sp/>kInstVpsrlvq,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlvq,<sp/>kInstVpsrlvq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlvq,<sp/>kInstVpsrlvq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"></highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlw,<sp/>kInstVpsrlw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/>INST_3x(vpsrlw,<sp/>kInstVpsrlw,<sp/>YmmReg,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/>INST_3x(vpsubb,<sp/>kInstVpsubb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/>INST_3x(vpsubb,<sp/>kInstVpsubb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"></highlight></codeline>
<codeline lineno="4746"><highlight class="normal"><sp/><sp/>INST_3x(vpsubd,<sp/>kInstVpsubd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/>INST_3x(vpsubd,<sp/>kInstVpsubd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"></highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/>INST_3x(vpsubq,<sp/>kInstVpsubq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/>INST_3x(vpsubq,<sp/>kInstVpsubq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"></highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/>INST_3x(vpsubsb,<sp/>kInstVpsubsb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/>INST_3x(vpsubsb,<sp/>kInstVpsubsb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4754"><highlight class="normal"></highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/>INST_3x(vpsubsw,<sp/>kInstVpsubsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"><sp/><sp/>INST_3x(vpsubsw,<sp/>kInstVpsubsw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4757"><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/>INST_3x(vpsubusb,<sp/>kInstVpsubusb,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/>INST_3x(vpsubusb,<sp/>kInstVpsubusb,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"></highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/>INST_3x(vpsubusw,<sp/>kInstVpsubusw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/>INST_3x(vpsubusw,<sp/>kInstVpsubusw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"></highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/>INST_3x(vpsubw,<sp/>kInstVpsubw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/>INST_3x(vpsubw,<sp/>kInstVpsubw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhbw,<sp/>kInstVpunpckhbw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhbw,<sp/>kInstVpunpckhbw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"></highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhdq,<sp/>kInstVpunpckhdq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhdq,<sp/>kInstVpunpckhdq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"></highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhqdq,<sp/>kInstVpunpckhqdq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhqdq,<sp/>kInstVpunpckhqdq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"></highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhwd,<sp/>kInstVpunpckhwd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckhwd,<sp/>kInstVpunpckhwd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklbw,<sp/>kInstVpunpcklbw,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklbw,<sp/>kInstVpunpcklbw,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"></highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckldq,<sp/>kInstVpunpckldq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/>INST_3x(vpunpckldq,<sp/>kInstVpunpckldq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"></highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklqdq,<sp/>kInstVpunpcklqdq,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklqdq,<sp/>kInstVpunpcklqdq,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"></highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklwd,<sp/>kInstVpunpcklwd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/>INST_3x(vpunpcklwd,<sp/>kInstVpunpcklwd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"></highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/>INST_3x(vpxor,<sp/>kInstVpxor,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/>INST_3x(vpxor,<sp/>kInstVpxor,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"></highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[FMA3]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4797"><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132pd,<sp/>kInstVfmadd132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132pd,<sp/>kInstVfmadd132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132pd,<sp/>kInstVfmadd132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132pd,<sp/>kInstVfmadd132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"></highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132ps,<sp/>kInstVfmadd132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132ps,<sp/>kInstVfmadd132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132ps,<sp/>kInstVfmadd132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132ps,<sp/>kInstVfmadd132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"></highlight></codeline>
<codeline lineno="4808"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132sd,<sp/>kInstVfmadd132sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132sd,<sp/>kInstVfmadd132sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"></highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132ss,<sp/>kInstVfmadd132ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd132ss,<sp/>kInstVfmadd132ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4813"><highlight class="normal"></highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213pd,<sp/>kInstVfmadd213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213pd,<sp/>kInstVfmadd213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213pd,<sp/>kInstVfmadd213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213pd,<sp/>kInstVfmadd213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"></highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213ps,<sp/>kInstVfmadd213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213ps,<sp/>kInstVfmadd213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213ps,<sp/>kInstVfmadd213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213ps,<sp/>kInstVfmadd213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"></highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213sd,<sp/>kInstVfmadd213sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213sd,<sp/>kInstVfmadd213sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"></highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213ss,<sp/>kInstVfmadd213ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd213ss,<sp/>kInstVfmadd213ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"></highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231pd,<sp/>kInstVfmadd231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231pd,<sp/>kInstVfmadd231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231pd,<sp/>kInstVfmadd231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231pd,<sp/>kInstVfmadd231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"></highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231ps,<sp/>kInstVfmadd231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231ps,<sp/>kInstVfmadd231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231ps,<sp/>kInstVfmadd231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231ps,<sp/>kInstVfmadd231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231sd,<sp/>kInstVfmadd231sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231sd,<sp/>kInstVfmadd231sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231ss,<sp/>kInstVfmadd231ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"><sp/><sp/>INST_3x(vfmadd231ss,<sp/>kInstVfmadd231ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4845"><highlight class="normal"></highlight></codeline>
<codeline lineno="4846"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub132pd,<sp/>kInstVfmaddsub132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub132pd,<sp/>kInstVfmaddsub132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub132pd,<sp/>kInstVfmaddsub132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub132pd,<sp/>kInstVfmaddsub132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub132ps,<sp/>kInstVfmaddsub132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub132ps,<sp/>kInstVfmaddsub132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub132ps,<sp/>kInstVfmaddsub132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub132ps,<sp/>kInstVfmaddsub132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"></highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub213pd,<sp/>kInstVfmaddsub213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub213pd,<sp/>kInstVfmaddsub213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub213pd,<sp/>kInstVfmaddsub213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub213pd,<sp/>kInstVfmaddsub213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"></highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub213ps,<sp/>kInstVfmaddsub213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub213ps,<sp/>kInstVfmaddsub213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub213ps,<sp/>kInstVfmaddsub213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub213ps,<sp/>kInstVfmaddsub213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"></highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub231pd,<sp/>kInstVfmaddsub231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub231pd,<sp/>kInstVfmaddsub231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub231pd,<sp/>kInstVfmaddsub231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub231pd,<sp/>kInstVfmaddsub231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"></highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub231ps,<sp/>kInstVfmaddsub231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub231ps,<sp/>kInstVfmaddsub231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub231ps,<sp/>kInstVfmaddsub231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"><sp/><sp/>INST_3x(vfmaddsub231ps,<sp/>kInstVfmaddsub231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4875"><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132pd,<sp/>kInstVfmsub132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132pd,<sp/>kInstVfmsub132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132pd,<sp/>kInstVfmsub132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132pd,<sp/>kInstVfmsub132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"></highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132ps,<sp/>kInstVfmsub132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132ps,<sp/>kInstVfmsub132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132ps,<sp/>kInstVfmsub132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132ps,<sp/>kInstVfmsub132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"></highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132sd,<sp/>kInstVfmsub132sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132sd,<sp/>kInstVfmsub132sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132ss,<sp/>kInstVfmsub132ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub132ss,<sp/>kInstVfmsub132ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"></highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213pd,<sp/>kInstVfmsub213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213pd,<sp/>kInstVfmsub213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213pd,<sp/>kInstVfmsub213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213pd,<sp/>kInstVfmsub213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213ps,<sp/>kInstVfmsub213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213ps,<sp/>kInstVfmsub213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213ps,<sp/>kInstVfmsub213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213ps,<sp/>kInstVfmsub213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"></highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213sd,<sp/>kInstVfmsub213sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213sd,<sp/>kInstVfmsub213sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"></highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213ss,<sp/>kInstVfmsub213ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub213ss,<sp/>kInstVfmsub213ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"></highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231pd,<sp/>kInstVfmsub231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231pd,<sp/>kInstVfmsub231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231pd,<sp/>kInstVfmsub231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231pd,<sp/>kInstVfmsub231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"></highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231ps,<sp/>kInstVfmsub231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231ps,<sp/>kInstVfmsub231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231ps,<sp/>kInstVfmsub231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231ps,<sp/>kInstVfmsub231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"></highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231sd,<sp/>kInstVfmsub231sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231sd,<sp/>kInstVfmsub231sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"></highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231ss,<sp/>kInstVfmsub231ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/>INST_3x(vfmsub231ss,<sp/>kInstVfmsub231ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"></highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd132pd,<sp/>kInstVfmsubadd132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd132pd,<sp/>kInstVfmsubadd132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd132pd,<sp/>kInstVfmsubadd132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd132pd,<sp/>kInstVfmsubadd132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd132ps,<sp/>kInstVfmsubadd132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd132ps,<sp/>kInstVfmsubadd132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd132ps,<sp/>kInstVfmsubadd132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd132ps,<sp/>kInstVfmsubadd132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd213pd,<sp/>kInstVfmsubadd213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd213pd,<sp/>kInstVfmsubadd213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd213pd,<sp/>kInstVfmsubadd213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd213pd,<sp/>kInstVfmsubadd213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"></highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd213ps,<sp/>kInstVfmsubadd213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd213ps,<sp/>kInstVfmsubadd213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd213ps,<sp/>kInstVfmsubadd213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd213ps,<sp/>kInstVfmsubadd213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd231pd,<sp/>kInstVfmsubadd231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd231pd,<sp/>kInstVfmsubadd231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd231pd,<sp/>kInstVfmsubadd231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd231pd,<sp/>kInstVfmsubadd231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd231ps,<sp/>kInstVfmsubadd231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd231ps,<sp/>kInstVfmsubadd231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd231ps,<sp/>kInstVfmsubadd231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/>INST_3x(vfmsubadd231ps,<sp/>kInstVfmsubadd231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"></highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132pd,<sp/>kInstVfnmadd132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132pd,<sp/>kInstVfnmadd132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132pd,<sp/>kInstVfnmadd132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132pd,<sp/>kInstVfnmadd132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"></highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132ps,<sp/>kInstVfnmadd132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132ps,<sp/>kInstVfnmadd132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132ps,<sp/>kInstVfnmadd132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132ps,<sp/>kInstVfnmadd132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"></highlight></codeline>
<codeline lineno="4964"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132sd,<sp/>kInstVfnmadd132sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132sd,<sp/>kInstVfnmadd132sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132ss,<sp/>kInstVfnmadd132ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd132ss,<sp/>kInstVfnmadd132ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"></highlight></codeline>
<codeline lineno="4970"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213pd,<sp/>kInstVfnmadd213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213pd,<sp/>kInstVfnmadd213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213pd,<sp/>kInstVfnmadd213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213pd,<sp/>kInstVfnmadd213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"></highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213ps,<sp/>kInstVfnmadd213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213ps,<sp/>kInstVfnmadd213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213ps,<sp/>kInstVfnmadd213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213ps,<sp/>kInstVfnmadd213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"></highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213sd,<sp/>kInstVfnmadd213sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213sd,<sp/>kInstVfnmadd213sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"></highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213ss,<sp/>kInstVfnmadd213ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd213ss,<sp/>kInstVfnmadd213ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"></highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231pd,<sp/>kInstVfnmadd231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231pd,<sp/>kInstVfnmadd231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231pd,<sp/>kInstVfnmadd231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231pd,<sp/>kInstVfnmadd231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"></highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231ps,<sp/>kInstVfnmadd231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231ps,<sp/>kInstVfnmadd231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231ps,<sp/>kInstVfnmadd231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231ps,<sp/>kInstVfnmadd231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231sd,<sp/>kInstVfnmadd231sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231sd,<sp/>kInstVfnmadd231sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231ss,<sp/>kInstVfnmadd231ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/>INST_3x(vfnmadd231ss,<sp/>kInstVfnmadd231ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132pd,<sp/>kInstVfnmsub132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132pd,<sp/>kInstVfnmsub132pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132pd,<sp/>kInstVfnmsub132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132pd,<sp/>kInstVfnmsub132pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"></highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132ps,<sp/>kInstVfnmsub132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132ps,<sp/>kInstVfnmsub132ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132ps,<sp/>kInstVfnmsub132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132ps,<sp/>kInstVfnmsub132ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"></highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132sd,<sp/>kInstVfnmsub132sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132sd,<sp/>kInstVfnmsub132sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"></highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132ss,<sp/>kInstVfnmsub132ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub132ss,<sp/>kInstVfnmsub132ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"></highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213pd,<sp/>kInstVfnmsub213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213pd,<sp/>kInstVfnmsub213pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213pd,<sp/>kInstVfnmsub213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5021"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213pd,<sp/>kInstVfnmsub213pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="5022"><highlight class="normal"></highlight></codeline>
<codeline lineno="5023"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213ps,<sp/>kInstVfnmsub213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5024"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213ps,<sp/>kInstVfnmsub213ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213ps,<sp/>kInstVfnmsub213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213ps,<sp/>kInstVfnmsub213ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"></highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213sd,<sp/>kInstVfnmsub213sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213sd,<sp/>kInstVfnmsub213sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"></highlight></codeline>
<codeline lineno="5031"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213ss,<sp/>kInstVfnmsub213ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub213ss,<sp/>kInstVfnmsub213ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"></highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231pd,<sp/>kInstVfnmsub231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231pd,<sp/>kInstVfnmsub231pd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231pd,<sp/>kInstVfnmsub231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231pd,<sp/>kInstVfnmsub231pd,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"></highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231ps,<sp/>kInstVfnmsub231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231ps,<sp/>kInstVfnmsub231ps,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231ps,<sp/>kInstVfnmsub231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231ps,<sp/>kInstVfnmsub231ps,<sp/>YmmReg,<sp/>YmmReg,<sp/>YmmReg)</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"></highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231sd,<sp/>kInstVfnmsub231sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231sd,<sp/>kInstVfnmsub231sd,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"></highlight></codeline>
<codeline lineno="5047"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231ss,<sp/>kInstVfnmsub231ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5048"><highlight class="normal"><sp/><sp/>INST_3x(vfnmsub231ss,<sp/>kInstVfnmsub231ss,<sp/>XmmReg,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[BMI]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/>INST_3x(andn,<sp/>kInstAndn,<sp/>GpReg,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/>INST_3x(andn,<sp/>kInstAndn,<sp/>GpReg,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"></highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/>INST_3x(bextr,<sp/>kInstBextr,<sp/>GpReg,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"><sp/><sp/>INST_3x(bextr,<sp/>kInstBextr,<sp/>GpReg,<sp/>Mem,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5059"><highlight class="normal"></highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/>INST_2x(blsi,<sp/>kInstBlsi,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/>INST_2x(blsi,<sp/>kInstBlsi,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/>INST_2x(blsmsk,<sp/>kInstBlsmsk,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/>INST_2x(blsmsk,<sp/>kInstBlsmsk,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"></highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/>INST_2x(blsr,<sp/>kInstBlsr,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/>INST_2x(blsr,<sp/>kInstBlsr,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"></highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/>INST_2x(tzcnt,<sp/>kInstTzcnt,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/>INST_2x(tzcnt,<sp/>kInstTzcnt,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[LZCNT]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5075"><highlight class="normal"></highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/>INST_2x(lzcnt,<sp/>kInstLzcnt,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/>INST_2x(lzcnt,<sp/>kInstLzcnt,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[BMI2]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5082"><highlight class="normal"></highlight></codeline>
<codeline lineno="5083"><highlight class="normal"><sp/><sp/>INST_3x(bzhi,<sp/>kInstBzhi,<sp/>GpReg,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/>INST_3x(bzhi,<sp/>kInstBzhi,<sp/>GpReg,<sp/>Mem,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"></highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/>INST_3x(mulx,<sp/>kInstMulx,<sp/>GpReg,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"><sp/><sp/>INST_3x(mulx,<sp/>kInstMulx,<sp/>GpReg,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5088"><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/>INST_3x(pdep,<sp/>kInstPdep,<sp/>GpReg,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/>INST_3x(pdep,<sp/>kInstPdep,<sp/>GpReg,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"></highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/>INST_3x(pext,<sp/>kInstPext,<sp/>GpReg,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/>INST_3x(pext,<sp/>kInstPext,<sp/>GpReg,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"></highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/>INST_3i(rorx,<sp/>kInstRorx,<sp/>GpReg,<sp/>GpReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/>INST_3i(rorx,<sp/>kInstRorx,<sp/>GpReg,<sp/>Mem,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"></highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/>INST_3x(sarx,<sp/>kInstSarx,<sp/>GpReg,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/>INST_3x(sarx,<sp/>kInstSarx,<sp/>GpReg,<sp/>Mem,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/>INST_3x(shlx,<sp/>kInstShlx,<sp/>GpReg,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/>INST_3x(shlx,<sp/>kInstShlx,<sp/>GpReg,<sp/>Mem,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"></highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/>INST_3x(shrx,<sp/>kInstShrx,<sp/>GpReg,<sp/>GpReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/>INST_3x(shrx,<sp/>kInstShrx,<sp/>GpReg,<sp/>Mem,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"></highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[RDRAND]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5110"><highlight class="normal"></highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/>INST_1x(rdrand,<sp/>kInstRdrand,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"></highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[F16C]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5116"><highlight class="normal"></highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/>INST_2x(vcvtph2ps,<sp/>kInstVcvtph2ps,<sp/>XmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"><sp/><sp/>INST_2x(vcvtph2ps,<sp/>kInstVcvtph2ps,<sp/>XmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/>INST_2x(vcvtph2ps,<sp/>kInstVcvtph2ps,<sp/>YmmReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/>INST_2x(vcvtph2ps,<sp/>kInstVcvtph2ps,<sp/>YmmReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"></highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/>INST_3i(vcvtps2ph,<sp/>kInstVcvtps2ph,<sp/>XmmReg,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/>INST_3i(vcvtps2ph,<sp/>kInstVcvtps2ph,<sp/>Mem,<sp/>XmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/>INST_3i(vcvtps2ph,<sp/>kInstVcvtps2ph,<sp/>XmmReg,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/>INST_3i(vcvtps2ph,<sp/>kInstVcvtps2ph,<sp/>Mem,<sp/>YmmReg,<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>)</highlight></codeline>
<codeline lineno="5126"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5128"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="5129"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5130"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x86x64<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5131"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5132"><highlight class="normal"></highlight></codeline>
<codeline lineno="5133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5136"><highlight class="normal"></highlight></codeline>
<codeline lineno="5137"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)</highlight></codeline>
<codeline lineno="5138"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="5140"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x86<sp/>{</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5142"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_x86x64</highlight></codeline>
<codeline lineno="5143"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="5144"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5145"><highlight class="comment">//!<sp/>@brief<sp/>X86-only<sp/>assembler.</highlight></codeline>
<codeline lineno="5146"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Assembler<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>X86X64Assembler<sp/>{</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(Assembler)</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"></highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5152"><highlight class="normal"></highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Assembler(<ref refid="structasmjit_1_1BaseRuntime" kindref="compound" tooltip="Base runtime.">BaseRuntime</ref>*<sp/>runtime);</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Assembler();</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"></highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Reloc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5159"><highlight class="normal"></highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1aa05de560f2701e803832407978d63194" kindref="member" tooltip="Reloc code (virtual).">_relocCode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>base)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"></highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Emit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5165"><highlight class="normal"></highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1acfe8b34d536e58e0197bb9de6d0409f9" kindref="member" tooltip="Emit an instruction (virtual).">_emit</ref>(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o3);</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"></highlight></codeline>
<codeline lineno="5168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Options]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>-------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5172"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5173"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac90cd9a5dd8e8f2ef05a91ba2ce06206" kindref="member" tooltip="Force short form of jmp/jcc/other instruction.">short_</ref>()</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca3f497bb7cd655089b1e5470867cbc187" kindref="member" tooltip="Emit short form of the instruction.">kInstOptionShortForm</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5175"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5176"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5177"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad07b9845dec35f20d615ffc524af078a" kindref="member" tooltip="Force long form of jmp/jcc/other instruction.">long_</ref>()</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca0914ab67e09d24f2e0c0d512b70c7f08" kindref="member" tooltip="Emit long form of the instruction.">kInstOptionLongForm</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5180"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5181"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a535457b9596539d18821acf82c33d6e7" kindref="member" tooltip="Condition is likely to be taken.">taken</ref>()</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4df01d78f89add2e942ec79ad211a4f5" kindref="member" tooltip="Condition is likely to be taken (instruction).">kInstOptionTaken</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5184"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5185"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aecb7e0529403c55576b6968d80af2c01" kindref="member" tooltip="Condition is unlikely to be taken.">notTaken</ref>()</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4c436f33ba83c4df5948e49e01a5ef67" kindref="member" tooltip="Condition is unlikely to be taken (instruction).">kInstOptionNotTaken</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5188"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5189"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a658225aaf041bd3642399b5a6e6cbb4d" kindref="member" tooltip="Lock prefix.">lock</ref>()</highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa438db3f8e9ef167e318d3ae4b0043f71" kindref="member" tooltip="Emit instruction with LOCK prefix.">kInstOptionLock</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5191"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5192"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Force<sp/>rex<sp/>prefix.</highlight></codeline>
<codeline lineno="5193"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/>vex3()</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffaf74024a2407f9ae7f6fe757a673578ca" kindref="member" tooltip="Force three-byte VEX prefix to be emitted (instead of more compact two-byte VEX prefix).">kInstOptionVex3</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"></highlight></codeline>
<codeline lineno="5196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[X86-Only<sp/>Instructions]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5199"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5200"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Decimal<sp/>adjust<sp/>AL<sp/>after<sp/>addition<sp/>(32-bit).</highlight></codeline>
<codeline lineno="5201"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(daa,<sp/>kInstDaa)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5202"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Decimal<sp/>adjust<sp/>AL<sp/>after<sp/>subtraction<sp/>(32-bit).</highlight></codeline>
<codeline lineno="5203"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(das,<sp/>kInstDas)</highlight></codeline>
<codeline lineno="5204"><highlight class="normal"></highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Pop<sp/>all<sp/>Gp<sp/>registers<sp/>(EDI|ESI|EBP|EBX|EDX|ECX|EAX).</highlight></codeline>
<codeline lineno="5206"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(popa,<sp/>kInstPopa)</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"></highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Push<sp/>all<sp/>Gp<sp/>registers<sp/>(EAX|ECX|EDX|EBX|original<sp/>ESP|EBP|ESI|EDI).</highlight></codeline>
<codeline lineno="5209"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(pusha,<sp/>kInstPusha)</highlight></codeline>
<codeline lineno="5210"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5212"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="5213"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5214"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x86<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5215"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5216"><highlight class="normal"></highlight></codeline>
<codeline lineno="5217"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86</highlight></codeline>
<codeline lineno="5218"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x64]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5222"><highlight class="normal"></highlight></codeline>
<codeline lineno="5223"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="5224"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5225"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x64<sp/>{</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5228"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_x86x64</highlight></codeline>
<codeline lineno="5229"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="5230"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5231"><highlight class="comment">//!<sp/>@brief<sp/>X64-only<sp/>assembler.</highlight></codeline>
<codeline lineno="5232"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Assembler<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>X86X64Assembler<sp/>{</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/>ASMJIT_NO_COPY(Assembler)</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5238"><highlight class="normal"></highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Assembler(<ref refid="structasmjit_1_1BaseRuntime" kindref="compound" tooltip="Base runtime.">BaseRuntime</ref>*<sp/>runtime);</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>virtual<sp/>~Assembler();</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"></highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Reloc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5245"><highlight class="normal"></highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>virtual<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseAssembler_1aa05de560f2701e803832407978d63194" kindref="member" tooltip="Reloc code (virtual).">_relocCode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>base)<sp/>const;</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"></highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Emit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5251"><highlight class="normal"></highlight></codeline>
<codeline lineno="5252"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>virtual<sp/>Error<sp/><ref refid="structasmjit_1_1BaseAssembler_1acfe8b34d536e58e0197bb9de6d0409f9" kindref="member" tooltip="Emit an instruction (virtual).">_emit</ref>(uint32_t<sp/>code,<sp/>const<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o0,<sp/>const<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o1,<sp/>const<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o2,<sp/>const<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>o3);</highlight></codeline>
<codeline lineno="5253"><highlight class="normal"></highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Options]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5258"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5259"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ac90cd9a5dd8e8f2ef05a91ba2ce06206" kindref="member" tooltip="Force short form of jmp/jcc/other instruction.">short_</ref>()</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca3f497bb7cd655089b1e5470867cbc187" kindref="member" tooltip="Emit short form of the instruction.">kInstOptionShortForm</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5262"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5263"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1ad07b9845dec35f20d615ffc524af078a" kindref="member" tooltip="Force long form of jmp/jcc/other instruction.">long_</ref>()</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca0914ab67e09d24f2e0c0d512b70c7f08" kindref="member" tooltip="Emit long form of the instruction.">kInstOptionLongForm</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5265"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5266"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5267"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a535457b9596539d18821acf82c33d6e7" kindref="member" tooltip="Condition is likely to be taken.">taken</ref>()</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4df01d78f89add2e942ec79ad211a4f5" kindref="member" tooltip="Condition is likely to be taken (instruction).">kInstOptionTaken</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5270"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5271"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1aecb7e0529403c55576b6968d80af2c01" kindref="member" tooltip="Condition is unlikely to be taken.">notTaken</ref>()</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4c436f33ba83c4df5948e49e01a5ef67" kindref="member" tooltip="Condition is unlikely to be taken (instruction).">kInstOptionNotTaken</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5274"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5275"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64Assembler_1a658225aaf041bd3642399b5a6e6cbb4d" kindref="member" tooltip="Lock prefix.">lock</ref>()</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa438db3f8e9ef167e318d3ae4b0043f71" kindref="member" tooltip="Emit instruction with LOCK prefix.">kInstOptionLock</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5277"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5278"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Force<sp/>rex<sp/>prefix.</highlight></codeline>
<codeline lineno="5279"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/>rex()</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa14adbf0db0a92c197f83b863ee3dcda7" kindref="member" tooltip="Force REX prefix to be emitted.">kInstOptionRex</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5282"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Force<sp/>rex<sp/>prefix.</highlight></codeline>
<codeline lineno="5283"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Assembler&amp;<sp/>vex3()</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>|=<sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffaf74024a2407f9ae7f6fe757a673578ca" kindref="member" tooltip="Force three-byte VEX prefix to be emitted (instead of more compact two-byte VEX prefix).">kInstOptionVex3</ref>;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"></highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[X64-Only<sp/>Instructions]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5289"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5290"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>dword<sp/>to<sp/>qword<sp/>(RAX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>EAX).</highlight></codeline>
<codeline lineno="5291"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(cdqe,<sp/>kInstCdqe)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5292"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Convert<sp/>qword<sp/>to<sp/>oword<sp/>(RDX:RAX<sp/>&lt;-<sp/>Sign<sp/>Extend<sp/>RAX).</highlight></codeline>
<codeline lineno="5293"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(cqo,<sp/>kInstCqo)</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5295"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compares<sp/>the<sp/>128-bit<sp/>value<sp/>in<sp/>RDX:RAX<sp/>with<sp/>the<sp/>memory<sp/>operand<sp/>(64-bit).</highlight></codeline>
<codeline lineno="5296"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_1x(cmpxchg16b,<sp/>kInstCmpxchg16b,<sp/>Mem)</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5298"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>dword<sp/>to<sp/>qword<sp/>with<sp/>sign-extension.</highlight></codeline>
<codeline lineno="5299"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movsxd,<sp/>kInstMovsxd,<sp/>GpReg,<sp/>GpReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5300"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5301"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movsxd,<sp/>kInstMovsxd,<sp/>GpReg,<sp/>Mem)</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5303"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Load<sp/>ECX/RCX<sp/>qwords<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>RAX.</highlight></codeline>
<codeline lineno="5304"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(rep_lodsq,<sp/>kInstRepLodsq)</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5306"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Move<sp/>ECX/RCX<sp/>qwords<sp/>from<sp/>DS:[ESI/RSI]<sp/>to<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="5307"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(rep_movsq,<sp/>kInstRepMovsq)</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5309"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fill<sp/>ECX/RCX<sp/>qwords<sp/>at<sp/>ES:[EDI/RDI]<sp/>with<sp/>RAX.</highlight></codeline>
<codeline lineno="5310"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(rep_stosq,<sp/>kInstRepStosq)</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5312"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>qwords<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="5313"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(repe_cmpsq,<sp/>kInstRepeCmpsq)</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5315"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>non-rax<sp/>qword<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="5316"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(repe_scasq,<sp/>kInstRepeScasq)</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5318"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Repeated<sp/>find<sp/>nonmatching<sp/>qwords<sp/>in<sp/>ES:[EDI/RDI]<sp/>and<sp/>DS:[ESI/RDI].</highlight></codeline>
<codeline lineno="5319"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(repne_cmpsq,<sp/>kInstRepneCmpsq)</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5321"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Find<sp/>RAX,<sp/>starting<sp/>at<sp/>ES:[EDI/RDI].</highlight></codeline>
<codeline lineno="5322"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_0x(repne_scasq,<sp/>kInstRepneScasq)</highlight></codeline>
<codeline lineno="5323"><highlight class="normal"></highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/>using<sp/>X86X64Assembler::movq;</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5326"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5327"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>GpReg,<sp/>MmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5328"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5329"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>MmReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5331"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5332"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>GpReg,<sp/>XmmReg)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5333"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="5334"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>INST_2x(movq,<sp/>kInstMovq,<sp/>XmmReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"></highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[AVX]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5339"><highlight class="normal"></highlight></codeline>
<codeline lineno="5340"><highlight class="normal"><sp/><sp/>INST_2x(vmovq,<sp/>kInstVmovq,<sp/>XmmReg,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/>INST_2x(vmovq,<sp/>kInstVmovq,<sp/>GpReg,<sp/>XmmReg)</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"></highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/>INST_3i(vpextrq,<sp/>kInstVpextrq,<sp/>GpReg,<sp/>XmmReg,<sp/>Imm)</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/>INST_3i(vpextrq,<sp/>kInstVpextrq,<sp/>Mem,<sp/>XmmReg,<sp/>Imm)</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"></highlight></codeline>
<codeline lineno="5346"><highlight class="normal"><sp/><sp/>INST_4i(vpinsrq,<sp/>kInstVpinsrq,<sp/>XmmReg,<sp/>XmmReg,<sp/>GpReg,<sp/>Imm)</highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/>INST_4i(vpinsrq,<sp/>kInstVpinsrq,<sp/>XmmReg,<sp/>XmmReg,<sp/>Mem,<sp/>Imm)</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"></highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[FSGSBASE]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5352"><highlight class="normal"></highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/>INST_1x(rdfsbase,<sp/>kInstRdfsbase,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/>INST_1x(rdgsbase,<sp/>kInstRdgsbase,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"><sp/><sp/>INST_1x(wrfsbase,<sp/>kInstWrfsbase,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/>INST_1x(wrgsbase,<sp/>kInstWrgsbase,<sp/>GpReg)</highlight></codeline>
<codeline lineno="5357"><highlight class="normal">};</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="5359"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="5360"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5361"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x64<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5362"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5363"><highlight class="normal"></highlight></codeline>
<codeline lineno="5364"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="5365"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5366"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5367"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[CodeGen-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"></highlight></codeline>
<codeline lineno="5370"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INST_0x</highlight></codeline>
<codeline lineno="5371"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5372"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INST_1x</highlight></codeline>
<codeline lineno="5373"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_1x_</highlight></codeline>
<codeline lineno="5374"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_1i</highlight></codeline>
<codeline lineno="5375"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_1i_</highlight></codeline>
<codeline lineno="5376"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_1cc</highlight></codeline>
<codeline lineno="5377"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5378"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INST_2x</highlight></codeline>
<codeline lineno="5379"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_2x_</highlight></codeline>
<codeline lineno="5380"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_2i</highlight></codeline>
<codeline lineno="5381"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_2i_</highlight></codeline>
<codeline lineno="5382"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_2cc</highlight></codeline>
<codeline lineno="5383"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INST_3x</highlight></codeline>
<codeline lineno="5385"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_3x_</highlight></codeline>
<codeline lineno="5386"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_3i</highlight></codeline>
<codeline lineno="5387"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>INST_3i_</highlight></codeline>
<codeline lineno="5388"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5389"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5390"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5391"><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5393"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_ASMJIT_X86_X86ASSEMBLER_H</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/x86/x86assembler.h"/>
  </compounddef>
</doxygen>
