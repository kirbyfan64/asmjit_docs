<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="compiler_8cpp" kind="file">
    <compoundname>compiler.cpp</compoundname>
    <includes refid="assembler_8h" local="yes">../base/assembler.h</includes>
    <includes refid="compiler_8h" local="yes">../base/compiler.h</includes>
    <includes refid="context__p_8h" local="yes">../base/context_p.h</includes>
    <includes refid="cpu_8h" local="yes">../base/cpu.h</includes>
    <includes refid="intutil_8h" local="yes">../base/intutil.h</includes>
    <includes refid="logger_8h" local="yes">../base/logger.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes refid="apibegin_8h" local="yes">../base/apibegin.h</includes>
    <includes refid="apiend_8h" local="yes">../base/apiend.h</includes>
    <incdepgraph>
      <node id="504">
        <label>../base/globals.h</label>
        <childnode refid="505" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="512">
        <label>../base/apiend.h</label>
      </node>
      <node id="510">
        <label>stdarg.h</label>
      </node>
      <node id="501">
        <label>../base/codegen.h</label>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="518" relation="include">
        </childnode>
        <childnode refid="519" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="514">
        <label>stdint.h</label>
      </node>
      <node id="508">
        <label>stdlib.h</label>
      </node>
      <node id="516">
        <label>../base/error.h</label>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="519">
        <label>../base/zone.h</label>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="511">
        <label>../base/apibegin.h</label>
        <childnode refid="505" relation="include">
        </childnode>
      </node>
      <node id="517">
        <label>../base/logger.h</label>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="500">
        <label>../base/assembler.h</label>
        <childnode refid="501" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="520" relation="include">
        </childnode>
        <childnode refid="521" relation="include">
        </childnode>
        <childnode refid="518" relation="include">
        </childnode>
        <childnode refid="519" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="502">
        <label>../base/defs.h</label>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="515">
        <label>limits.h</label>
      </node>
      <node id="520">
        <label>../base/podlist.h</label>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="499">
        <label>compiler.cpp</label>
        <link refid="compiler.cpp"/>
        <childnode refid="500" relation="include">
        </childnode>
        <childnode refid="522" relation="include">
        </childnode>
        <childnode refid="524" relation="include">
        </childnode>
        <childnode refid="525" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="521">
        <label>../base/podvector.h</label>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="513">
        <label>new</label>
      </node>
      <node id="525">
        <label>../base/cpu.h</label>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="524">
        <label>../base/context_p.h</label>
        <childnode refid="522" relation="include">
        </childnode>
        <childnode refid="519" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="506">
        <label>config.h</label>
      </node>
      <node id="503">
        <label>../base/intutil.h</label>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="518">
        <label>../base/runtime.h</label>
        <childnode refid="516" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="505">
        <label>../build.h</label>
        <childnode refid="506" relation="include">
        </childnode>
        <childnode refid="507" relation="include">
        </childnode>
        <childnode refid="508" relation="include">
        </childnode>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="513" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
        <childnode refid="515" relation="include">
        </childnode>
      </node>
      <node id="507">
        <label>stdio.h</label>
      </node>
      <node id="509">
        <label>string.h</label>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="523">
        <label>../base/func.h</label>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
      <node id="522">
        <label>../base/compiler.h</label>
        <childnode refid="500" relation="include">
        </childnode>
        <childnode refid="501" relation="include">
        </childnode>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
        <childnode refid="523" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="520" relation="include">
        </childnode>
        <childnode refid="521" relation="include">
        </childnode>
        <childnode refid="518" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceasmjit">asmjit</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="compiler_8cpp_1a4885b81a3643f489bcb59697d21cb21d" prot="public" static="no">
        <name>ASMJIT_EXPORTS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/compiler.cpp" line="8" bodyfile="/home/ryan/asmjit/src/asmjit/base/compiler.cpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Export]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASMJIT_EXPORTS</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/assembler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/compiler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/context_p.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/cpu.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/intutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/logger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>C]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Constants]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>noName[1]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/>kBaseCompilerDefaultLookAhead<sp/>=<sp/>64<sp/>};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseCompiler<sp/>-<sp/>Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structasmjit_1_1BaseCompiler_1a7405f38e199666f295043fa1197e8c60" refkind="member"><highlight class="normal">BaseCompiler::BaseCompiler(<ref refid="structasmjit_1_1BaseRuntime" kindref="compound" tooltip="Base runtime.">BaseRuntime</ref>*<sp/>runtime)<sp/>:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen" kindref="compound" tooltip="Abstract class inherited by Assembler and Compiler.">CodeGen</ref>(runtime),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>_nodeFlowId(0),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>_nodeFlags(0),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>_maxLookAhead(kBaseCompilerDefaultLookAhead),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>_targetVarMapping(NULL),</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>_firstNode(NULL),</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>_lastNode(NULL),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>_cursor(NULL),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>_func(NULL),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>_varAllocator(4096<sp/>-<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea296578ff073ac37c73f692864a529129" kindref="member" tooltip="Host memory allocator overhead.">kMemAllocOverhead</ref>),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>_stringAllocator(4096<sp/>-<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea296578ff073ac37c73f692864a529129" kindref="member" tooltip="Host memory allocator overhead.">kMemAllocOverhead</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="structasmjit_1_1BaseCompiler_1ad4e9cfa5d09e28246268e82d3b34eebe" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1BaseCompiler_1ad4e9cfa5d09e28246268e82d3b34eebe" kindref="member" tooltip="Destroy the BaseCompiler instance.">BaseCompiler::~BaseCompiler</ref>()<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a66ebed2ec94250d109a0cea4d9cb7cbc" kindref="member" tooltip="Clear everything and reset all buffers.">reset</ref>();</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseCompiler<sp/>-<sp/>Clear<sp/>/<sp/>Reset]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structasmjit_1_1BaseCompiler_1afff080faca3b4a0ef878392ef8406efe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1afff080faca3b4a0ef878392ef8406efe" kindref="member" tooltip="Clear everything, but keep buffers allocated.">BaseCompiler::clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a9bb0e088212274bee8c2fe7fa5279d6d" kindref="member" tooltip="Called by clear() and reset() to clear all data related to derived class implementation.">_purge</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="structasmjit_1_1BaseCompiler_1a66ebed2ec94250d109a0cea4d9cb7cbc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a66ebed2ec94250d109a0cea4d9cb7cbc" kindref="member" tooltip="Clear everything and reset all buffers.">BaseCompiler::reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a9bb0e088212274bee8c2fe7fa5279d6d" kindref="member" tooltip="Called by clear() and reset() to clear all data related to derived class implementation.">_purge</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1a253ae00df345d8aa7d2c6989496ac986" kindref="member" tooltip="Free all allocated memory at once.">reset</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a4d491c8178d555cded21ef092455122c" kindref="member" tooltip="Variable allocator.">_varAllocator</ref>.<ref refid="structasmjit_1_1Zone_1a253ae00df345d8aa7d2c6989496ac986" kindref="member" tooltip="Free all allocated memory at once.">reset</ref>();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a72e0dd87a5728952e65969dca03bb7a6" kindref="member" tooltip="String/data allocator.">_stringAllocator</ref>.<ref refid="structasmjit_1_1Zone_1a253ae00df345d8aa7d2c6989496ac986" kindref="member" tooltip="Free all allocated memory at once.">reset</ref>();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" kindref="member" tooltip="Targets.">_targets</ref>.<ref refid="structasmjit_1_1PodVector_1a99668159a21d591f41ed803a17475756" kindref="member" tooltip="Clear vector data and free internal buffer.">reset</ref>();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a88ee18bc8626c78793233d684ba8eaef" kindref="member" tooltip="Variables.">_vars</ref>.<ref refid="structasmjit_1_1PodVector_1a99668159a21d591f41ed803a17475756" kindref="member" tooltip="Clear vector data and free internal buffer.">reset</ref>();</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structasmjit_1_1BaseCompiler_1a9bb0e088212274bee8c2fe7fa5279d6d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a9bb0e088212274bee8c2fe7fa5279d6d" kindref="member" tooltip="Called by clear() and reset() to clear all data related to derived class implementation.">BaseCompiler::_purge</ref>()<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" kindref="member" tooltip="Zone memory allocator.">_zoneAllocator</ref>.<ref refid="structasmjit_1_1Zone_1a96ea6f474546d09502ad270af0b82422" kindref="member" tooltip="Free all allocated memory except first block that remains for reuse.">clear</ref>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a4d491c8178d555cded21ef092455122c" kindref="member" tooltip="Variable allocator.">_varAllocator</ref>.<ref refid="structasmjit_1_1Zone_1a96ea6f474546d09502ad270af0b82422" kindref="member" tooltip="Free all allocated memory except first block that remains for reuse.">clear</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a72e0dd87a5728952e65969dca03bb7a6" kindref="member" tooltip="String/data allocator.">_stringAllocator</ref>.<ref refid="structasmjit_1_1Zone_1a96ea6f474546d09502ad270af0b82422" kindref="member" tooltip="Free all allocated memory except first block that remains for reuse.">clear</ref>();</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" kindref="member" tooltip="Options for the next generated instruction (only 8-bits used).">_options</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" kindref="member" tooltip="Last node.">_lastNode</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1afa054f0e028aa072a6b54a38e182812a" kindref="member" tooltip="Current function.">_func</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" kindref="member" tooltip="Targets.">_targets</ref>.<ref refid="structasmjit_1_1PodVector_1abf9316ca4654bb99e739258a1c06d87c" kindref="member" tooltip="Clear vector data, but don&amp;#39;t free an internal buffer.">clear</ref>();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a88ee18bc8626c78793233d684ba8eaef" kindref="member" tooltip="Variables.">_vars</ref>.<ref refid="structasmjit_1_1PodVector_1abf9316ca4654bb99e739258a1c06d87c" kindref="member" tooltip="Clear vector data, but don&amp;#39;t free an internal buffer.">clear</ref>();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1a20674b359509b562f6079bfef6342692" kindref="member" tooltip="Clear the last error code.">clearError</ref>();</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseCompiler<sp/>-<sp/>Node<sp/>Management]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="structasmjit_1_1BaseCompiler_1ab258d8bb815f7c9e3368bdbab6fd6256" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1ab258d8bb815f7c9e3368bdbab6fd6256" kindref="member" tooltip="Set the current node to node and return the previous one.">BaseCompiler::setCursor</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>old<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>old;</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">BaseCompiler::addNode</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" kindref="member" tooltip="Last node.">_lastNode</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref>-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>prev<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref>;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>next<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref>-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>next-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" kindref="member" tooltip="Last node.">_lastNode</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="structasmjit_1_1BaseCompiler_1a0cb4ee83c430e485d57f6c18b6857b9f" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a0cb4ee83c430e485d57f6c18b6857b9f" kindref="member" tooltip="Add node before ref.">BaseCompiler::addNodeBefore</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node,<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>ref)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(ref<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>prev<sp/>=<sp/>ref-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>next<sp/>=<sp/>ref;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>next-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prev)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="structasmjit_1_1BaseCompiler_1aa4d5d57d89518fd8d3224bebb8e9ae4f" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1aa4d5d57d89518fd8d3224bebb8e9ae4f" kindref="member" tooltip="Add node after ref.">BaseCompiler::addNodeAfter</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node,<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>ref)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(ref<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>prev<sp/>=<sp/>ref;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>next<sp/>=<sp/>ref-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>prev-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>next-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" kindref="member" tooltip="Last node.">_lastNode</ref><sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BaseCompiler_nodeRemoved(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node_)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;<ref refid="structasmjit_1_1BaseNode_1a27455b36f9a081b3d6b43ad3707fc180" kindref="member" tooltip="Whether the instruction is an unconditional or conditional jump.">isJmpOrJcc</ref>())<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1JumpNode" kindref="compound" tooltip="Jump node.">JumpNode</ref>*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1JumpNode" kindref="compound" tooltip="Jump node.">JumpNode</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/>target<sp/>=<sp/>node-&gt;getTarget();</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disconnect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1JumpNode" kindref="compound" tooltip="Jump node.">JumpNode</ref>**<sp/>pPrev<sp/>=<sp/>&amp;target-&gt;<ref refid="structasmjit_1_1TargetNode_1a2d5bb92b1cb771d1991d4abf7de57cf6" kindref="member" tooltip="First jump instruction that points to this target (label).">_from</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(*pPrev<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1JumpNode" kindref="compound" tooltip="Jump node.">JumpNode</ref>*<sp/>current<sp/>=<sp/>*pPrev;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(current<sp/>==<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pPrev<sp/>=<sp/>node-&gt;<ref refid="structasmjit_1_1JumpNode_1aa53d2e0da4214825a8103cb2c92d2098" kindref="member" tooltip="Next jump to the same target in a single linked-list.">_jumpNext</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pPrev<sp/>=<sp/>&amp;current-&gt;<ref refid="structasmjit_1_1JumpNode_1aa53d2e0da4214825a8103cb2c92d2098" kindref="member" tooltip="Next jump to the same target in a single linked-list.">_jumpNext</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>target-&gt;<ref refid="structasmjit_1_1TargetNode_1a80f8543c46cdbcb181f8ea61cc9fabff" kindref="member" tooltip="Subtract number of jumps to this target.">subNumRefs</ref>();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="structasmjit_1_1BaseCompiler_1aeca9652a56df1842c3342bfcd774a3b9" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1aeca9652a56df1842c3342bfcd774a3b9" kindref="member" tooltip="Remove node node.">BaseCompiler::removeNode</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>prev<sp/>=<sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>next<sp/>=<sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref><sp/>==<sp/>node)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref><sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" kindref="member" tooltip="Last node.">_lastNode</ref><sp/>==<sp/>node)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" kindref="member" tooltip="Last node.">_lastNode</ref><sp/><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>next-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref><sp/>==<sp/>node)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>BaseCompiler_nodeRemoved(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>node);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="structasmjit_1_1BaseCompiler_1ae87563494bc6261b12d22fdfd094500f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1ae87563494bc6261b12d22fdfd094500f" kindref="member" tooltip="Remove multiple nodes.">BaseCompiler::removeNodes</ref>(<ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>first,<sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(first<sp/>==<sp/>last)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1aeca9652a56df1842c3342bfcd774a3b9" kindref="member" tooltip="Remove node node.">removeNode</ref>(first);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>prev<sp/>=<sp/>first-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref>;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>next<sp/>=<sp/>last-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref><sp/>==<sp/>first)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" kindref="member" tooltip="First node.">_firstNode</ref><sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>prev-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" kindref="member" tooltip="Last node.">_lastNode</ref><sp/>==<sp/>last)</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" kindref="member" tooltip="Last node.">_lastNode</ref><sp/><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>next-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>node<sp/>=<sp/>first;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseNode" kindref="compound" tooltip="Base node.">BaseNode</ref>*<sp/>next<sp/>=<sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1a3db24572d64989296c96d4049d0545b8" kindref="member" tooltip="Get next node in the compiler stream.">getNext</ref>();</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(next<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1ae46a8e6aca8fe70226eeb6386d06ff60" kindref="member" tooltip="Previous node.">_prev</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;<ref refid="structasmjit_1_1BaseNode_1af79d69cd8ec0c96295bef01b73f6f3cd" kindref="member" tooltip="Next node.">_next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref><sp/>==<sp/>node)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" kindref="member" tooltip="Current node.">_cursor</ref><sp/>=<sp/>prev;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseCompiler_nodeRemoved(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>node);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>last)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseCompiler<sp/>-<sp/>Align]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="structasmjit_1_1BaseCompiler_1a463c4a6d099d52ea479a9650e696544a" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1AlignNode" kindref="compound" tooltip="Align node.">AlignNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a463c4a6d099d52ea479a9650e696544a" kindref="member" tooltip="Create a new AlignNode.">BaseCompiler::newAlign</ref>(uint32_t<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1AlignNode" kindref="compound" tooltip="Align node.">AlignNode</ref>*<sp/>node<sp/>=<sp/>newNode&lt;AlignNode&gt;(m);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="structasmjit_1_1BaseCompiler_1af69209313ac46fdbac3de52a613f44ca" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1AlignNode" kindref="compound" tooltip="Align node.">AlignNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1af69209313ac46fdbac3de52a613f44ca" kindref="member" tooltip="Add a new AlignNode.">BaseCompiler::addAlign</ref>(uint32_t<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1AlignNode" kindref="compound" tooltip="Align node.">AlignNode</ref>*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a463c4a6d099d52ea479a9650e696544a" kindref="member" tooltip="Create a new AlignNode.">newAlign</ref>(m);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1AlignNode" kindref="compound" tooltip="Align node.">AlignNode</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseCompiler<sp/>-<sp/>Target]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="structasmjit_1_1BaseCompiler_1a90c68e8beae42497baf524842a472154" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a90c68e8beae42497baf524842a472154" kindref="member" tooltip="Create a new TargetNode.">BaseCompiler::newTarget</ref>()<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/>node<sp/>=<sp/>newNode&lt;TargetNode&gt;(</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1OperandUtil_1ae37a451a0be7a004ea5c802073161601" kindref="member" tooltip="Make label id.">OperandUtil::makeLabelId</ref>(static_cast&lt;uint32_t&gt;(<ref refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" kindref="member" tooltip="Targets.">_targets</ref>.<ref refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" kindref="member" tooltip="Get length.">getLength</ref>())));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL<sp/>||<sp/><ref refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" kindref="member" tooltip="Targets.">_targets</ref>.<ref refid="structasmjit_1_1PodVector_1aad46d8f3462ff753b7405e9e0c028264" kindref="member" tooltip="Append item to vector.">append</ref>(node)<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="structasmjit_1_1BaseCompiler_1a8e765ab9c84303bbc7cd50cd48978f74" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a8e765ab9c84303bbc7cd50cd48978f74" kindref="member" tooltip="Add a new TargetNode.">BaseCompiler::addTarget</ref>()<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a90c68e8beae42497baf524842a472154" kindref="member" tooltip="Create a new TargetNode.">newTarget</ref>();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseCompiler<sp/>-<sp/>Label]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">Error<sp/>BaseCompiler::_newLabel(<ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>*<sp/>dst)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>dst-&gt;_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba2dcaa04fd5ea217510587264bb4ecac8" kindref="member" tooltip="Operand is a label.">kOperandTypeLabel</ref>,<sp/>0,<sp/>0,<sp/>0,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>dst-&gt;_init_packed_d2_d3(0,<sp/>0);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1TargetNode" kindref="compound" tooltip="label node.">TargetNode</ref>*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a90c68e8beae42497baf524842a472154" kindref="member" tooltip="Create a new TargetNode.">newTarget</ref>();</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>dst-&gt;<ref refid="structasmjit_1_1Operand_1a706538f838a8416a7e8e7cc4fa6f1db8" kindref="member" tooltip="Label data.">_label</ref>.id<sp/>=<sp/>node-&gt;<ref refid="structasmjit_1_1TargetNode_1a5023478b496a8a7122d075d1a282e756" kindref="member" tooltip="Get target label id.">getLabelId</ref>();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="structasmjit_1_1BaseCompiler_1a79453ba71cbe71378808768bd51a4326" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a79453ba71cbe71378808768bd51a4326" kindref="member" tooltip="Bind label to the current offset.">BaseCompiler::bind</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>uint32_t<sp/>index<sp/>=<sp/>label.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" kindref="member" tooltip="Targets.">_targets</ref>.<ref refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" kindref="member" tooltip="Get length.">getLength</ref>());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(<ref refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" kindref="member" tooltip="Targets.">_targets</ref>[index]);</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseCompiler<sp/>-<sp/>Embed]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="structasmjit_1_1BaseCompiler_1a869d5617c72c2728059a49a14bbe0362" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a869d5617c72c2728059a49a14bbe0362" kindref="member" tooltip="Create a new EmbedNode.">BaseCompiler::newEmbed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>uint32_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/>node;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/>EmbedNode::kInlineBufferSize)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>clonedData<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a72e0dd87a5728952e65969dca03bb7a6" kindref="member" tooltip="String/data allocator.">_stringAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(size);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clonedData<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>::memcpy(clonedData,<sp/>data,<sp/>size);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/>clonedData;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>node<sp/>=<sp/>newNode&lt;EmbedNode&gt;(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data),<sp/>size);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="structasmjit_1_1BaseCompiler_1ad99bcb737fa3489e3d3d120f979b1793" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1ad99bcb737fa3489e3d3d120f979b1793" kindref="member" tooltip="Add a new EmbedNode.">BaseCompiler::addEmbed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>uint32_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a869d5617c72c2728059a49a14bbe0362" kindref="member" tooltip="Create a new EmbedNode.">newEmbed</ref>(data,<sp/>size);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1EmbedNode" kindref="compound" tooltip="Embed node.">EmbedNode</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseCompiler<sp/>-<sp/>Comment]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="structasmjit_1_1BaseCompiler_1a9a246926cd01ea668fbba41741dff72d" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a9a246926cd01ea668fbba41741dff72d" kindref="member" tooltip="Create a new CommentNode.">BaseCompiler::newComment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref>*<sp/>node;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>str[0])<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>str<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a72e0dd87a5728952e65969dca03bb7a6" kindref="member" tooltip="String/data allocator.">_stringAllocator</ref>.<ref refid="structasmjit_1_1Zone_1a6dde61ffae89af5a1ca189db8767eec5" kindref="member" tooltip="Helper to duplicate string.">sdup</ref>(str);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>node<sp/>=<sp/>newNode&lt;CommentNode&gt;(str);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="structasmjit_1_1BaseCompiler_1a722b06b738b08acdfeb3559796fd4f7c" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a722b06b738b08acdfeb3559796fd4f7c" kindref="member" tooltip="Add a new CommentNode.">BaseCompiler::addComment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref>*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a9a246926cd01ea668fbba41741dff72d" kindref="member" tooltip="Create a new CommentNode.">newComment</ref>(str);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="structasmjit_1_1BaseCompiler_1af501c8ac8635d94c0fa28dbfa2c9701f" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1CommentNode" kindref="compound" tooltip="Comment node.">CommentNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1af501c8ac8635d94c0fa28dbfa2c9701f" kindref="member" tooltip="Emit a single comment line.">BaseCompiler::comment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>fmt,<sp/>...)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[256];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>buf;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fmt)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>ap;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(ap,<sp/>fmt);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>vsnprintf(p,<sp/>254,<sp/>fmt,<sp/>ap);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(ap);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>p[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>p[1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a722b06b738b08acdfeb3559796fd4f7c" kindref="member" tooltip="Add a new CommentNode.">addComment</ref>(fmt);</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseCompiler<sp/>-<sp/>Hint]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="structasmjit_1_1BaseCompiler_1a0d67198e55d11240e7b71a9d9e5e252e" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1HintNode" kindref="compound" tooltip="Hint node.">HintNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1a0d67198e55d11240e7b71a9d9e5e252e" kindref="member" tooltip="Create a new HintNode.">BaseCompiler::newHint</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var,<sp/>uint32_t<sp/>hint,<sp/>uint32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>==<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>vd<sp/>=<sp/>getVd(var);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1HintNode" kindref="compound" tooltip="Hint node.">HintNode</ref>*<sp/>node<sp/>=<sp/>newNode&lt;HintNode&gt;(vd,<sp/>hint,<sp/>value);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="structasmjit_1_1BaseCompiler_1abbd6d4c4b95647520ba3c798e67f67f4" refkind="member"><highlight class="normal"><ref refid="structasmjit_1_1HintNode" kindref="compound" tooltip="Hint node.">HintNode</ref>*<sp/><ref refid="structasmjit_1_1BaseCompiler_1abbd6d4c4b95647520ba3c798e67f67f4" kindref="member" tooltip="Add a new HintNode.">BaseCompiler::addHint</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var,<sp/>uint32_t<sp/>hint,<sp/>uint32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>==<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1HintNode" kindref="compound" tooltip="Hint node.">HintNode</ref>*<sp/>node<sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a0d67198e55d11240e7b71a9d9e5e252e" kindref="member" tooltip="Create a new HintNode.">newHint</ref>(var,<sp/>hint,<sp/>value);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1HintNode" kindref="compound" tooltip="Hint node.">HintNode</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" kindref="member" tooltip="Add node node after current and set current to node.">addNode</ref>(node));</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseCompiler<sp/>-<sp/>Vars]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>BaseCompiler::<sp/>_newVd(uint32_t<sp/>type,<sp/>uint32_t<sp/>size,<sp/>uint32_t<sp/>c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>vd<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1BaseCompiler_1a4d491c8178d555cded21ef092455122c" kindref="member" tooltip="Variable allocator.">_varAllocator</ref>.<ref refid="structasmjit_1_1Zone_1abc452d9549c8a5934637cbcfe830ef04" kindref="member" tooltip="Allocate size bytes of memory.">alloc</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>)));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1abd206220e39b7864268c977d35cfc26d" kindref="member" tooltip="Variable name.">_name</ref><sp/>=<sp/>noName;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1af1a8a994d16ae69eb389a009944f1b13" kindref="member" tooltip="Variable id.">_id</ref><sp/>=<sp/><ref refid="structasmjit_1_1OperandUtil_1a05d51e50d26642b79acc2e8cdff2449c" kindref="member" tooltip="Make variable id.">OperandUtil::makeVarId</ref>(static_cast&lt;uint32_t&gt;(<ref refid="structasmjit_1_1BaseCompiler_1a88ee18bc8626c78793233d684ba8eaef" kindref="member" tooltip="Variables.">_vars</ref>.<ref refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" kindref="member" tooltip="Get length.">getLength</ref>()));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a604d23a483c678cb9102a094665b14ed" kindref="member" tooltip="Context variable id (used by Context only, initially set to kInvalidValue).">_contextId</ref><sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>name[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1abd206220e39b7864268c977d35cfc26d" kindref="member" tooltip="Variable name.">_name</ref><sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a72e0dd87a5728952e65969dca03bb7a6" kindref="member" tooltip="String/data allocator.">_stringAllocator</ref>.<ref refid="structasmjit_1_1Zone_1a6dde61ffae89af5a1ca189db8767eec5" kindref="member" tooltip="Helper to duplicate string.">sdup</ref>(name);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a66408044910637b2977deb7408738efc" kindref="member" tooltip="Variable type.">_type</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1ad11b9474002c5584729c81ac288a4b2e" kindref="member" tooltip="Variable class.">_class</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1afc4a03c6d63d731d75c5ee0d87b5d3f8" kindref="member" tooltip="Variable flags.">_flags</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a0825dd09123aad0a55c213448089ab26" kindref="member" tooltip="Variable priority.">_priority</ref><sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a0d0c7c3e46740060a644baed771809da" kindref="member" tooltip="Variable state (connected with actual BaseVarState).">_state</ref><sp/>=<sp/>kVarStateUnused;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a8e2dd1821323dce7c5fb0e6e1f3a311e" kindref="member" tooltip="Actual register index (only used by Context), during translate.">_regIndex</ref><sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a932ffa440b7237eb45d8fe2d8fc6c612" kindref="member" tooltip="Whether the variable is only used as memory allocated on the stack.">_isStack</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1aedd308a0934f4ff9c4374b3618516857" kindref="member" tooltip="Whether the variable is a function argument passed through memory.">_isMemArg</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a4d63061334343ea9a222a87e17a28eba" kindref="member" tooltip="Whether variable content can be calculated by a simple instruction.">_isCalculated</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a479f07d8219049f22533163cffe7980b" kindref="member" tooltip="Save on unuse (at end of the variable scope).">_saveOnUnuse</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a7b992af1a2835eca8a56c1e6ebd0b1d5" kindref="member" tooltip="Whether variable was changed (connected with actual BaseVarState).">_modified</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>vd-&gt;_reserved0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a76922ee86badaeb0b869404432ccff34" kindref="member" tooltip="Varialbe natural alignment.">_alignment</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(IntUtil::iMin&lt;uint32_t&gt;(size,<sp/>64));</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1aa6bdac1f459bd79e0c0ff700c152f6be" kindref="member" tooltip="Variable size.">_size</ref><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a532c225c5dd3a47b412012e2e1bd19d0" kindref="member" tooltip="Home memory offset.">_memOffset</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a088702cfdcc9556a61893d8d4e0241a2" kindref="member" tooltip="Home memory cell, used by Context (initially NULL).">_memCell</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a2115f81379b916b125c86533f63f287c" kindref="member" tooltip="Register read access statistics.">rReadCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1ab68c535f834061e11edc9866e534b6f3" kindref="member" tooltip="Register write access statistics.">rWriteCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a0bae731ad14f36323953933545c4e284" kindref="member" tooltip="Memory read statistics.">mReadCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a6ef42095624282230f061f4c5f14cf0c" kindref="member" tooltip="Memory write statistics.">mWriteCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a67d619cbc09377832ec49721b80ccc87" kindref="member" tooltip="Temporary link to VarAttr* used by the Context used in various phases, but always set back to NULL wh...">_va</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1BaseCompiler_1a88ee18bc8626c78793233d684ba8eaef" kindref="member" tooltip="Variables.">_vars</ref>.<ref refid="structasmjit_1_1PodVector_1aad46d8f3462ff753b7405e9e0c028264" kindref="member" tooltip="Append item to vector.">append</ref>(vd)<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vd;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" kindref="member" tooltip="Set last error code and propagate it through the error handler.">setError</ref>(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="structasmjit_1_1BaseCompiler_1a9887abcaf860aff3620f790071659a47" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a9887abcaf860aff3620f790071659a47" kindref="member" tooltip="Alloc variable var.">BaseCompiler::alloc</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1abbd6d4c4b95647520ba3c798e67f67f4" kindref="member" tooltip="Add a new HintNode.">addHint</ref>(var,<sp/>kVarHintAlloc,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="structasmjit_1_1BaseCompiler_1a798bd50e7faac48769efd933fa7746d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a9887abcaf860aff3620f790071659a47" kindref="member" tooltip="Alloc variable var.">BaseCompiler::alloc</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var,<sp/>uint32_t<sp/>regIndex)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1abbd6d4c4b95647520ba3c798e67f67f4" kindref="member" tooltip="Add a new HintNode.">addHint</ref>(var,<sp/>kVarHintAlloc,<sp/>regIndex);</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="structasmjit_1_1BaseCompiler_1a3c08591c6376c4d9f042183cd5c3fb61" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a9887abcaf860aff3620f790071659a47" kindref="member" tooltip="Alloc variable var.">BaseCompiler::alloc</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseReg" kindref="compound" tooltip="Base class for all register operands.">BaseReg</ref>&amp;<sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1abbd6d4c4b95647520ba3c798e67f67f4" kindref="member" tooltip="Add a new HintNode.">addHint</ref>(var,<sp/>kVarHintAlloc,<sp/>reg.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>());</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="structasmjit_1_1BaseCompiler_1aa387c6a473cd28b3a7271d964d4864ba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1aa387c6a473cd28b3a7271d964d4864ba" kindref="member" tooltip="Save variable var if modified.">BaseCompiler::save</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1abbd6d4c4b95647520ba3c798e67f67f4" kindref="member" tooltip="Add a new HintNode.">addHint</ref>(var,<sp/>kVarHintSave,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal">}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="structasmjit_1_1BaseCompiler_1ab816e5a2afbf8fd59c119b820f4c5954" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1ab816e5a2afbf8fd59c119b820f4c5954" kindref="member" tooltip="Spill variable var.">BaseCompiler::spill</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1abbd6d4c4b95647520ba3c798e67f67f4" kindref="member" tooltip="Add a new HintNode.">addHint</ref>(var,<sp/>kVarHintSpill,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="structasmjit_1_1BaseCompiler_1a5d9021937d9570df4d89abe454bfcee6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a5d9021937d9570df4d89abe454bfcee6" kindref="member" tooltip="Unuse variable var.">BaseCompiler::unuse</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1abbd6d4c4b95647520ba3c798e67f67f4" kindref="member" tooltip="Add a new HintNode.">addHint</ref>(var,<sp/>kVarHintUnuse,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="structasmjit_1_1BaseCompiler_1a5a9364098d19d82b88c1a60e964369e5" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="structasmjit_1_1BaseCompiler_1a5a9364098d19d82b88c1a60e964369e5" kindref="member" tooltip="Get priority of variable var.">BaseCompiler::getPriority</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>==<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>)</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>vd<sp/>=<sp/>getVdById(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>());</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a66dbd989b502a5dfe51bad41c1a02610" kindref="member" tooltip="Get variable priority.">getPriority</ref>();</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="structasmjit_1_1BaseCompiler_1af4d8526178948d9b59c533f5a07e599e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1af4d8526178948d9b59c533f5a07e599e" kindref="member" tooltip="Set priority of variable var to priority.">BaseCompiler::setPriority</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var,<sp/>uint32_t<sp/>priority)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>==<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(priority<sp/>&gt;<sp/>255)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>priority<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>vd<sp/>=<sp/>getVdById(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>());</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a0825dd09123aad0a55c213448089ab26" kindref="member" tooltip="Variable priority.">_priority</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(priority);</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="structasmjit_1_1BaseCompiler_1a36d1e8d735fb1e7151ee5ccf6ef2bbe4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a36d1e8d735fb1e7151ee5ccf6ef2bbe4" kindref="member" tooltip="Get save-on-unuse var property.">BaseCompiler::getSaveOnUnuse</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>==<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>vd<sp/>=<sp/>getVdById(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>());</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vd-&gt;<ref refid="structasmjit_1_1VarData_1a479f07d8219049f22533163cffe7980b" kindref="member" tooltip="Save on unuse (at end of the variable scope).">_saveOnUnuse</ref>);</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554" refid="structasmjit_1_1BaseCompiler_1a317bae3f4011066c5efc7781cb4bc30e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a317bae3f4011066c5efc7781cb4bc30e" kindref="member" tooltip="Set save-on-unuse var property to value.">BaseCompiler::setSaveOnUnuse</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>==<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>vd<sp/>=<sp/>getVdById(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>());</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1a479f07d8219049f22533163cffe7980b" kindref="member" tooltip="Save on unuse (at end of the variable scope).">_saveOnUnuse</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="structasmjit_1_1BaseCompiler_1a81286497909c2862d4ad440b47be7990" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseCompiler_1a81286497909c2862d4ad440b47be7990" kindref="member" tooltip="Rename variable var to name.">BaseCompiler::rename</ref>(<ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;<sp/>var,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()<sp/>==<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1VarData" kindref="compound" tooltip="Base variable data.">VarData</ref>*<sp/>vd<sp/>=<sp/>getVdById(var.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>());</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1abd206220e39b7864268c977d35cfc26d" kindref="member" tooltip="Variable name.">_name</ref><sp/>=<sp/>noName;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>name[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>vd-&gt;<ref refid="structasmjit_1_1VarData_1abd206220e39b7864268c977d35cfc26d" kindref="member" tooltip="Variable name.">_name</ref><sp/>=<sp/><ref refid="structasmjit_1_1BaseCompiler_1a72e0dd87a5728952e65969dca03bb7a6" kindref="member" tooltip="String/data allocator.">_stringAllocator</ref>.<ref refid="structasmjit_1_1Zone_1a6dde61ffae89af5a1ca189db8767eec5" kindref="member" tooltip="Helper to duplicate string.">sdup</ref>(name);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/base/compiler.cpp"/>
  </compounddef>
</doxygen>
