<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="x86context_8cpp" kind="file">
    <compoundname>x86context.cpp</compoundname>
    <includes refid="build_8h" local="yes">../build.h</includes>
    <incdepgraph>
      <node id="2246">
        <label>../base/globals.h</label>
        <childnode refid="2239" relation="include">
        </childnode>
        <childnode refid="2247" relation="include">
        </childnode>
        <childnode refid="2248" relation="include">
        </childnode>
      </node>
      <node id="2248">
        <label>../base/apiend.h</label>
      </node>
      <node id="2249">
        <label>stdarg.h</label>
      </node>
      <node id="2251">
        <label>stdint.h</label>
      </node>
      <node id="2242">
        <label>stdlib.h</label>
      </node>
      <node id="2247">
        <label>../base/apibegin.h</label>
        <childnode refid="2239" relation="include">
        </childnode>
      </node>
      <node id="2244">
        <label>../base/defs.h</label>
        <childnode refid="2245" relation="include">
        </childnode>
        <childnode refid="2247" relation="include">
        </childnode>
        <childnode refid="2248" relation="include">
        </childnode>
      </node>
      <node id="2252">
        <label>limits.h</label>
      </node>
      <node id="2250">
        <label>new</label>
      </node>
      <node id="2240">
        <label>config.h</label>
      </node>
      <node id="2245">
        <label>../base/intutil.h</label>
        <childnode refid="2246" relation="include">
        </childnode>
        <childnode refid="2247" relation="include">
        </childnode>
        <childnode refid="2248" relation="include">
        </childnode>
      </node>
      <node id="2239">
        <label>../build.h</label>
        <childnode refid="2240" relation="include">
        </childnode>
        <childnode refid="2241" relation="include">
        </childnode>
        <childnode refid="2242" relation="include">
        </childnode>
        <childnode refid="2243" relation="include">
        </childnode>
        <childnode refid="2250" relation="include">
        </childnode>
        <childnode refid="2251" relation="include">
        </childnode>
        <childnode refid="2252" relation="include">
        </childnode>
      </node>
      <node id="2241">
        <label>stdio.h</label>
      </node>
      <node id="2243">
        <label>string.h</label>
        <childnode refid="2244" relation="include">
        </childnode>
        <childnode refid="2246" relation="include">
        </childnode>
        <childnode refid="2249" relation="include">
        </childnode>
        <childnode refid="2247" relation="include">
        </childnode>
        <childnode refid="2248" relation="include">
        </childnode>
      </node>
      <node id="2238">
        <label>x86context.cpp</label>
        <link refid="x86context.cpp"/>
        <childnode refid="2239" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="x86context_8cpp_1a4885b81a3643f489bcb59697d21cb21d" prot="public" static="no">
        <name>ASMJIT_EXPORTS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86context.cpp" line="8" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86context.cpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Export]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASMJIT_EXPORTS</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../build.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)<sp/>||<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/intutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86assembler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86compiler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86context_p.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86cpu.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86func.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x86x64<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Forward<sp/>Declarations]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Error<sp/>X86X64Context_translateOperands(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>Operand*<sp/>opList,<sp/>uint32_t<sp/>opCount);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">X86X64Context::X86X64Context(X86X64Compiler*<sp/>compiler)<sp/>:<sp/>BaseContext(compiler)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>x86<sp/>specific<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiler-&gt;getArch()<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>_zsp<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gafee3a114f6450196ac970f3cc964b19b" kindref="member" tooltip="Gpd register.">x86::esp</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>_zbp<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ga55deb3ba95a959b5461bd4525501e92e" kindref="member" tooltip="Gpd register.">x86::ebp</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>_memSlot.<ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.type<sp/>=<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>_memSlot.setGpdBase(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>_baseRegsCount<sp/>=<sp/>x86::kRegCountGp;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>x64<sp/>specific<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiler-&gt;getArch()<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98ac570137deb519c20e131c51ed65d2426" kindref="member" tooltip="X64 architecture, also called AMD64.">kArchX64</ref>)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>_zsp<sp/>=<sp/>x64::rsp;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>_zbp<sp/>=<sp/>x64::rbp;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>_memSlot._vmem.type<sp/>=<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>_memSlot.setGpdBase(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>_baseRegsCount<sp/>=<sp/>x64::kRegCountGp;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>_state<sp/>=<sp/>&amp;_x86State;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>_emitComments<sp/>=<sp/>compiler-&gt;getLogger()<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1BaseCompiler_1a66ebed2ec94250d109a0cea4d9cb7cbc" kindref="member" tooltip="Clear everything and reset all buffers.">reset</ref>();</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">X86X64Context::~X86X64Context()<sp/>{}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>Reset]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::reset()<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>BaseContext::reset();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>_x86State.reset(0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>_clobberedRegs.reset();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>_stackFrameCell<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>_gaRegs[<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>]<sp/>=<sp/>IntUtil::bits(_baseRegsCount)<sp/>&amp;<sp/>~IntUtil::mask(<ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa72a26d71150e372bcac7bb7023dcb628" kindref="member" tooltip="Index of SPL/SP/ESP/RSP registers.">kRegIndexSp</ref>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>_gaRegs[<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578ebae14f8090017d61ea34f01c8f355096fa" kindref="member" tooltip="X86/X64 Fp register class.">kRegClassFp</ref>]<sp/>=<sp/>IntUtil::bits(<ref refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ae822edf24ff7b052c18a6535f1a6d1a5" kindref="member" tooltip="Count of Fp registers (8).">kRegCountFp</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>_gaRegs[<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>]<sp/>=<sp/>IntUtil::bits(<ref refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ac38cb5c433e088c7070177aa364ab296" kindref="member" tooltip="Count of Mm registers (8).">kRegCountMm</ref>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>_gaRegs[<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>]<sp/>=<sp/>IntUtil::bits(_baseRegsCount);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>_argBaseReg<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;<sp/></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>patcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>_varBaseReg<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;<sp/></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>patcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>_argBaseOffset<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>patcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>_varBaseOffset<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>patcher.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>_argActualDisp<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>translator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>_varActualDisp<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>by<sp/>translator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64SpecialInst]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">X86X64SpecialInst<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>uint8_t<sp/>inReg;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>uint8_t<sp/>outReg;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>uint16_t<sp/>flags;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstCpuid[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>},</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa64bdbf966add3a3fb3785d2b055abb3e" kindref="member" tooltip="Index of BL/BH/BX/EBX/RBX registers.">kRegIndexBx</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" kindref="member" tooltip="Index of DL/DH/DX/EDX/RDX registers.">kRegIndexDx</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal">};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstCbwCdqeCwde[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstCdqCwdCqo[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" kindref="member" tooltip="Index of DL/DH/DX/EDX/RDX registers.">kRegIndexDx</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">};</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstCmpxchg[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>},</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>},</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstCmpxchg8b16b[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" kindref="member" tooltip="Index of DL/DH/DX/EDX/RDX registers.">kRegIndexDx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" kindref="member" tooltip="Index of DL/DH/DX/EDX/RDX registers.">kRegIndexDx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>},</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>},</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa64bdbf966add3a3fb3785d2b055abb3e" kindref="member" tooltip="Index of BL/BH/BX/EBX/RBX registers.">kRegIndexBx</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstDaaDas[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstDiv[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" kindref="member" tooltip="Index of DL/DH/DX/EDX/RDX registers.">kRegIndexDx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>},</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>},</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstMul[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" kindref="member" tooltip="Index of DL/DH/DX/EDX/RDX registers.">kRegIndexDx</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>},</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal">};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstMovPtr[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal">};</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstLahf[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal">};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstSahf[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal">};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstMaskmovqMaskmovdqu[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa2128d2d1988f757b6de2583d0bda1fdb" kindref="member" tooltip="Index of DIL/DI/EDI/RDI registers.">kRegIndexDi</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal">};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstRot[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>},</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal">};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstShlrd[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>},</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal">};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstRdtscRdtscp[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" kindref="member" tooltip="Index of DL/DH/DX/EDX/RDX registers.">kRegIndexDx</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal">};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstRepLod[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0d713e0bcf536538a2b3f097c81a9e7f" kindref="member" tooltip="Index of SIL/SI/ESI/RSI registers.">kRegIndexSi</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal">};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstRepMovCmp[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa2128d2d1988f757b6de2583d0bda1fdb" kindref="member" tooltip="Index of DIL/DI/EDI/RDI registers.">kRegIndexDi</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0d713e0bcf536538a2b3f097c81a9e7f" kindref="member" tooltip="Index of SIL/SI/ESI/RSI registers.">kRegIndexSi</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal">};</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstRepSto[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa2128d2d1988f757b6de2583d0bda1fdb" kindref="member" tooltip="Index of DIL/DI/EDI/RDI registers.">kRegIndexDi</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal">};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstRepSca[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa2128d2d1988f757b6de2583d0bda1fdb" kindref="member" tooltip="Index of DIL/DI/EDI/RDI registers.">kRegIndexDi</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref>,<sp/>kVarAttrInOutReg<sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal">};</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst<sp/>x86SpecialInstBlend[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrOutReg<sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>{<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/>kVarAttrInReg<sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal">};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst*<sp/>X86X64SpecialInst_get(uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand*<sp/>opList,<sp/>uint32_t<sp/>opCount)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(code)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCpuid:</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstCpuid;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCbw:</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCdqe:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCwde:</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstCbwCdqeCwde;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCdq:</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCwd:</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCqo:</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstCdqCwdCqo;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCmpxchg:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstCmpxchg;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCmpxchg8b:</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCmpxchg16b:</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstCmpxchg8b16b;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstDaa:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstDas:</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstDaaDas;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstIdiv:</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstDiv:</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstDiv;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstImul:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opCount<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opCount<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>!(opList[0].isVar()<sp/>&amp;&amp;<sp/>opList[1].isVar()<sp/>&amp;&amp;<sp/>opList[2].isVarOrMem()))</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Fall<sp/>through<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMul:</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstMul;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMovptr:</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstMovPtr;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstLahf:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstLahf;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstSahf:</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstSahf;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMaskmovq:</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMaskmovdqu:</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstMaskmovqMaskmovdqu;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstEnter:</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstLeave:</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRet:</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMonitor:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMwait:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>Monitor/MWait.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPop:</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>Pop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPopa:</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPopf:</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPush:</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>Push.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>supported.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPusha:</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPushf:</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rot<sp/>instruction<sp/>is<sp/>special<sp/>only<sp/>if<sp/>the<sp/>last<sp/>operand<sp/>is<sp/>a<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRcl:</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRcr:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRol:</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRor:</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstSal:</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstSar:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstShl:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstShr:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!opList[1].isVar())</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstRot;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shld/Shrd<sp/>instruction<sp/>is<sp/>special<sp/>only<sp/>if<sp/>the<sp/>last<sp/>operand<sp/>is<sp/>a<sp/>variable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstShld:</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstShrd:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!opList[2].isVar())</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstShlrd;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRdtsc:</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRdtscp:</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstRdtscRdtscp;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepLodsb:</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepLodsd:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepLodsq:</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepLodsw:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstRepLod;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepMovsb:</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepMovsd:</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepMovsq:</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepMovsw:</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstRepMovCmp;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeCmpsb:</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeCmpsd:</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeCmpsq:</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeCmpsw:</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstRepMovCmp;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneCmpsb:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneCmpsd:</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneCmpsq:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneCmpsw:</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstRepMovCmp;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepStosb:</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepStosd:</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepStosq:</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepStosw:</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstRepSto;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeScasb:</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeScasd:</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeScasq:</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeScasw:</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstRepSca;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneScasb:</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneScasd:</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneScasq:</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneScasw:</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstRepSca;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstBlendvpd:</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstBlendvps:</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPblendvb:</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x86SpecialInstBlend;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>EmitLoad]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::emitLoad(VarData*<sp/>vd,<sp/>uint32_t<sp/>regIndex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>reason)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(regIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>Mem<sp/>m<sp/>=<sp/>getVarMem(vd);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>_emitComments;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vd-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>:</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>:</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMov,<sp/><ref refid="group__asmjit__x86x64_1ga89be8bc827d7615648e7074c9b0a11b3" kindref="member" tooltip="Get Gpb-lo register.">gpb_lo</ref>(regIndex),<sp/>m);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>:</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref>:</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMov,<sp/><ref refid="group__asmjit__x86x64_1ga84d074ec698bde54e1b258a5afe0ab21" kindref="member" tooltip="Get Gpw register.">gpw</ref>(regIndex),<sp/>m);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>:</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMov,<sp/><ref refid="group__asmjit__x86x64_1ga7edc123ef6a6bc00b64fe45d9a295c1c" kindref="member" tooltip="Get Gpd register.">gpd</ref>(regIndex),<sp/>m);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref>:</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMov,<sp/>x64::gpq(regIndex),<sp/>m);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>:</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>:</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>FPU.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>:</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovq,<sp/><ref refid="group__asmjit__x86x64_1ga9a8333264f20709b9757ea2fe6d98062" kindref="member" tooltip="Get Mm register.">mm</ref>(regIndex),<sp/>m);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>:</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovdqa,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(regIndex),<sp/>m);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>:</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovss,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(regIndex),<sp/>m);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>:</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovsd,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(regIndex),<sp/>m);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref>:</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovaps,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(regIndex),<sp/>m);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>:</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovapd,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(regIndex),<sp/>m);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">_Comment:</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>node-&gt;setComment(compiler-&gt;_stringAllocator.sformat(</highlight><highlight class="stringliteral">&quot;[%s]<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>reason,<sp/>vd-&gt;getName()));</highlight></codeline>
<codeline lineno="456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>EmitSave]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::emitSave(VarData*<sp/>vd,<sp/>uint32_t<sp/>regIndex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>reason)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(regIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>Mem<sp/>m<sp/>=<sp/>getVarMem(vd);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>_emitComments;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vd-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>:</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>:</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMov,<sp/>m,<sp/><ref refid="group__asmjit__x86x64_1ga89be8bc827d7615648e7074c9b0a11b3" kindref="member" tooltip="Get Gpb-lo register.">gpb_lo</ref>(regIndex));</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>:</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref>:</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMov,<sp/>m,<sp/><ref refid="group__asmjit__x86x64_1ga84d074ec698bde54e1b258a5afe0ab21" kindref="member" tooltip="Get Gpw register.">gpw</ref>(regIndex));</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>:</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>:</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMov,<sp/>m,<sp/><ref refid="group__asmjit__x86x64_1ga7edc123ef6a6bc00b64fe45d9a295c1c" kindref="member" tooltip="Get Gpd register.">gpd</ref>(regIndex));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="491"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref>:</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>:</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMov,<sp/>m,<sp/>x64::gpq(regIndex));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="497"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>:</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>:</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>FPU.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>:</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovq,<sp/>m,<sp/><ref refid="group__asmjit__x86x64_1ga9a8333264f20709b9757ea2fe6d98062" kindref="member" tooltip="Get Mm register.">mm</ref>(regIndex));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>:</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovdqa,<sp/>m,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(regIndex));</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>:</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovss,<sp/>m,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(regIndex));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>:</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovsd,<sp/>m,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(regIndex));</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref>:</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovaps,<sp/>m,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(regIndex));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>:</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovapd,<sp/>m,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(regIndex));</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal">_Comment:</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>node-&gt;setComment(compiler-&gt;_stringAllocator.sformat(</highlight><highlight class="stringliteral">&quot;[%s]<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>reason,<sp/>vd-&gt;getName()));</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>EmitMove]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::emitMove(VarData*<sp/>vd,<sp/>uint32_t<sp/>toRegIndex,<sp/>uint32_t<sp/>fromRegIndex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>reason)<sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(toRegIndex<sp/><sp/><sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(fromRegIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>_emitComments;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vd-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>:</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>:</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>:</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref>:</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>:</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>:</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMov,<sp/><ref refid="group__asmjit__x86x64_1ga7edc123ef6a6bc00b64fe45d9a295c1c" kindref="member" tooltip="Get Gpd register.">gpd</ref>(toRegIndex),<sp/><ref refid="group__asmjit__x86x64_1ga7edc123ef6a6bc00b64fe45d9a295c1c" kindref="member" tooltip="Get Gpd register.">gpd</ref>(fromRegIndex));</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="564"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref>:</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>:</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMov,<sp/>x64::gpq(toRegIndex),<sp/>x64::gpq(fromRegIndex));</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="570"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>:</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>:</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>FPU.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>:</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovq,<sp/><ref refid="group__asmjit__x86x64_1ga9a8333264f20709b9757ea2fe6d98062" kindref="member" tooltip="Get Mm register.">mm</ref>(toRegIndex),<sp/><ref refid="group__asmjit__x86x64_1ga9a8333264f20709b9757ea2fe6d98062" kindref="member" tooltip="Get Mm register.">mm</ref>(fromRegIndex));</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>:</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovaps,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(toRegIndex),<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(fromRegIndex));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>:</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovss,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(toRegIndex),<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(fromRegIndex));</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>:</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovsd,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(toRegIndex),<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(fromRegIndex));</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref>:</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>:</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstMovaps,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(toRegIndex),<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(fromRegIndex));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal">_Comment:</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>node-&gt;setComment(compiler-&gt;_stringAllocator.sformat(</highlight><highlight class="stringliteral">&quot;[%s]<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>reason,<sp/>vd-&gt;getName()));</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>EmitSwap]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::emitSwapGp(VarData*<sp/>aVd,<sp/>VarData*<sp/>bVd,<sp/>uint32_t<sp/>aIndex,<sp/>uint32_t<sp/>bIndex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>reason)<sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(aIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(bIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>comment<sp/>=<sp/>_emitComments;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="622"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/>vType<sp/>=<sp/>IntUtil::iMax(aVd-&gt;getType(),<sp/>bVd-&gt;getType());</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref><sp/>||<sp/>vType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstXchg,<sp/>x64::gpq(aIndex),<sp/>x64::gpq(bIndex));</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="630"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>node<sp/>=<sp/>compiler-&gt;emit(kInstXchg,<sp/><ref refid="group__asmjit__x86x64_1ga7edc123ef6a6bc00b64fe45d9a295c1c" kindref="member" tooltip="Get Gpd register.">gpd</ref>(aIndex),<sp/><ref refid="group__asmjit__x86x64_1ga7edc123ef6a6bc00b64fe45d9a295c1c" kindref="member" tooltip="Get Gpd register.">gpd</ref>(bIndex));</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comment)<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Comment;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">_Comment:</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>node-&gt;setComment(compiler-&gt;_stringAllocator.sformat(</highlight><highlight class="stringliteral">&quot;[%s]<sp/>%s,<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>reason,<sp/>aVd-&gt;getName(),<sp/>bVd-&gt;getName()));</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>EmitPushSequence<sp/>/<sp/>EmitPopSequence]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::emitPushSequence(uint32_t<sp/>regs)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>GpReg<sp/>gpReg(_zsp);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(regs<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(i<sp/>&lt;<sp/>_baseRegsCount);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((regs<sp/>&amp;<sp/>0x1)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstPush,<sp/>gpReg.setIndex(i));</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>regs<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::emitPopSequence(uint32_t<sp/>regs)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>int32_t<sp/>i;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>uint32_t<sp/>mask;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regs<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>GpReg<sp/>gpReg(_zsp);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>_baseRegsCount<sp/>-<sp/>1,<sp/>mask<sp/>=<sp/>0x1<sp/>&lt;&lt;<sp/>static_cast&lt;uint32_t&gt;(i);<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--,<sp/>mask<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((regs<sp/>&amp;<sp/>mask)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstPop,<sp/>gpReg.setIndex(i));</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>EmitConvertVarToVar]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::emitConvertVarToVar(uint32_t<sp/>dstType,<sp/>uint32_t<sp/>dstIndex,<sp/>uint32_t<sp/>srcType,<sp/>uint32_t<sp/>srcIndex)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dstType)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>:</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>:</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>:</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref>:</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>:</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>:</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref>:</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>:</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref>:</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref><sp/>||<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaff3a02be54244818dfead89c641f1296" kindref="member" tooltip="Variable is AVX packed DP-FP number (4 doubles).">kVarTypeYmmPd</ref>)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstCvtpd2ps,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(dstIndex),<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(srcIndex));</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Fall<sp/>through<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>:</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref><sp/>||<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref><sp/>||<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaff3a02be54244818dfead89c641f1296" kindref="member" tooltip="Variable is AVX packed DP-FP number (4 doubles).">kVarTypeYmmPd</ref>)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstCvtsd2ss,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(dstIndex),<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(srcIndex));</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/>_kVarTypeIntStart,<sp/>_kVarTypeIntEnd))<sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>:</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref><sp/>||<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea7af57e49bc6aae8806ce5d6e6eea51f3" kindref="member" tooltip="Variable is AVX packed SP-FP number (8 floats).">kVarTypeYmmPs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstCvtps2pd,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(dstIndex),<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(srcIndex));</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Fall<sp/>through<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>:</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref><sp/>||<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref><sp/>||<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea7af57e49bc6aae8806ce5d6e6eea51f3" kindref="member" tooltip="Variable is AVX packed SP-FP number (8 floats).">kVarTypeYmmPs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstCvtss2sd,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(dstIndex),<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(srcIndex));</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/>_kVarTypeIntStart,<sp/>_kVarTypeIntEnd))<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>EmitMoveVarOnStack<sp/>/<sp/>EmitMoveImmOnStack]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::emitMoveVarOnStack(</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>uint32_t<sp/>dstType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mem*<sp/>dst,</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>uint32_t<sp/>srcType,<sp/>uint32_t<sp/>srcIndex)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(srcIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>Mem<sp/>m0(*dst);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>X86Reg<sp/>r0;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>X86Reg<sp/>r1;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regSize<sp/>=<sp/>compiler-&gt;getRegSize();</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>uint32_t<sp/>instCode;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dstType)<sp/>{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>:</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>:</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>DWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>))</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovGpD;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>DWORD<sp/>(Mm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>))</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovMmD;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>DWORD<sp/>(Xmm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>))</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovXmmD;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>:</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref>:</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>BYTE-&gt;WORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>))<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setSize(1);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" kindref="member" tooltip="Gpb-lo register (AL, BL, CL, DL, ...).">kRegTypeGpbLo</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instCode<sp/>=<sp/>(dstType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref><sp/>&amp;&amp;<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>)<sp/>?<sp/>kInstMovsx<sp/>:<sp/>kInstMovzx;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_ExtendMovGpD;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>DWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>))</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovGpD;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>DWORD<sp/>(Mm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>))</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovMmD;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>DWORD<sp/>(Xmm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>))</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovXmmD;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>:</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>:</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>BYTE-&gt;DWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>))<sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setSize(1);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" kindref="member" tooltip="Gpb-lo register (AL, BL, CL, DL, ...).">kRegTypeGpbLo</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instCode<sp/>=<sp/>(dstType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref><sp/>&amp;&amp;<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>)<sp/>?<sp/>kInstMovsx<sp/>:<sp/>kInstMovzx;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_ExtendMovGpD;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>WORD-&gt;DWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref>))<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setSize(2);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7088b937cbaa2114610046a308697d2e" kindref="member" tooltip="Gpw register.">kRegTypeGpw</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instCode<sp/>=<sp/>(dstType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref><sp/>&amp;&amp;<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>)<sp/>?<sp/>kInstMovsx<sp/>:<sp/>kInstMovzx;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_ExtendMovGpD;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>DWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>))</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovGpD;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>DWORD<sp/>(Mm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>))</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovMmD;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>DWORD<sp/>(Xmm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>))</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovXmmD;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref>:</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>:</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>BYTE-&gt;QWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>))<sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setSize(1);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" kindref="member" tooltip="Gpb-lo register (AL, BL, CL, DL, ...).">kRegTypeGpbLo</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instCode<sp/>=<sp/>(dstType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref><sp/>&amp;&amp;<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>)<sp/>?<sp/>kInstMovsx<sp/>:<sp/>kInstMovzx;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_ExtendMovGpXQ;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>WORD-&gt;QWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref>))<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setSize(2);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7088b937cbaa2114610046a308697d2e" kindref="member" tooltip="Gpw register.">kRegTypeGpw</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instCode<sp/>=<sp/>(dstType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref><sp/>&amp;&amp;<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>)<sp/>?<sp/>kInstMovsx<sp/>:<sp/>kInstMovzx;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_ExtendMovGpXQ;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>DWORD-&gt;QWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>))<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setSize(4);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instCode<sp/>=<sp/>kInstMovsxd;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref><sp/>&amp;&amp;<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>)</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_ExtendMovGpXQ;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_ZeroExtendGpDQ;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>QWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>))</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovGpQ;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>QWORD<sp/>(Mm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>))</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovMmQ;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>QWORD<sp/>(Xmm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>))</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovXmmQ;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>:</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>BYTE-&gt;QWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>))<sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setSize(1);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" kindref="member" tooltip="Gpb-lo register (AL, BL, CL, DL, ...).">kRegTypeGpbLo</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instCode<sp/>=<sp/>kInstMovzx;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_ExtendMovGpXQ;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>WORD-&gt;QWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref>))<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setSize(2);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r1.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7088b937cbaa2114610046a308697d2e" kindref="member" tooltip="Gpw register.">kRegTypeGpw</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>instCode<sp/>=<sp/>kInstMovzx;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_ExtendMovGpXQ;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend<sp/>DWORD-&gt;QWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>))</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_ExtendMovGpDQ;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>QWORD<sp/>(Gp).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>))</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovGpQ;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>QWORD<sp/>(Mm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>))</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovMmQ;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>QWORD<sp/>(Xmm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(srcType,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>,<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>))</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovXmmQ;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>:</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>:</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>FLOAT.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref><sp/>||<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref><sp/>||<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovXmmD;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>:</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>:</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>DOUBLE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref><sp/>||<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref><sp/>||<sp/>srcType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>)</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MovXmmQ;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>:</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref>:</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>:</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extend+Move<sp/>Gp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal">_ExtendMovGpD:</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>m0.setSize(4);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>r0.setSize(4);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>compiler-&gt;emit(instCode,<sp/>r0,<sp/>r1);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>m0,<sp/>r0);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal">_ExtendMovGpXQ:</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regSize<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>m0.setSize(8);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>r0.setSize(8);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(instCode,<sp/>r0,<sp/>r1);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>m0,<sp/>r0);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>m0.setSize(4);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>r0.setSize(4);</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(instCode,<sp/>r0,<sp/>r1);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal">_ExtendMovGpDQ:</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>m0,<sp/>r0);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>m0.adjust(4);</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstAnd,<sp/>m0,<sp/>0);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal">_ZeroExtendGpDQ:</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>m0.setSize(4);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>r0.setSize(4);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_ExtendMovGpDQ;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>Gp.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal">_MovGpD:</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>m0.setSize(4);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>r0.setSize(4);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>m0,<sp/>r0);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal">_MovGpQ:</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>m0.setSize(8);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>r0.setSize(8);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>m0,<sp/>r0);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>Mm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal">_MovMmD:</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>m0.setSize(4);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>r0.setSize(8);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa9a46e468cd5c58fac3670afc952eb814" kindref="member" tooltip="Mm register.">kRegTypeMm</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>compiler-&gt;emit(kInstMovd,<sp/>m0,<sp/>r0);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal">_MovMmQ:</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>m0.setSize(8);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>r0.setSize(8);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa9a46e468cd5c58fac3670afc952eb814" kindref="member" tooltip="Mm register.">kRegTypeMm</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>compiler-&gt;emit(kInstMovq,<sp/>m0,<sp/>r0);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>Xmm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal">_MovXmmD:</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>m0.setSize(4);</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>r0.setSize(16);</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaacea326fc6b0daaa36cc5e706d6656a5" kindref="member" tooltip="Xmm register.">kRegTypeXmm</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>compiler-&gt;emit(kInstMovss,<sp/>m0,<sp/>r0);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal">_MovXmmQ:</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>m0.setSize(8);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>r0.setSize(16);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaacea326fc6b0daaa36cc5e706d6656a5" kindref="member" tooltip="Xmm register.">kRegTypeXmm</ref>,<sp/>srcIndex);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>compiler-&gt;emit(kInstMovlps,<sp/>m0,<sp/>r0);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::emitMoveImmOnStack(uint32_t<sp/>dstType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mem*<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Imm*<sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>Mem<sp/>mem(*dst);</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>Imm<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>(*src);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regSize<sp/>=<sp/>compiler-&gt;getRegSize();</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>stack<sp/>entry<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>native<sp/>register<sp/>size.<sp/>That<sp/>means<sp/>that<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>want<sp/>to<sp/>move<sp/>32-bit<sp/>integer<sp/>on<sp/>the<sp/>stack,<sp/>we<sp/>need<sp/>to<sp/>extend<sp/>it<sp/>to<sp/>64-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>integer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>mem.setSize(regSize);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dstType)<sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>:</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>:</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.truncateTo8Bits();</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>:</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref>:</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.truncateTo16Bits();</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>:</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>:</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">_Move32:</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.truncateTo32Bits();</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref>:</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>:</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">_Move64:</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regSize<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>hi<sp/>=<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.<ref refid="structasmjit_1_1Imm_1abc08fa629bbda8a7e4516db35282a160" kindref="member" tooltip="Get Hi 32-bit signed integer.">getUInt32Hi</ref>();</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lo-Part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.truncateTo32Bits();</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hi-Part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem.adjust(regSize);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.<ref refid="structasmjit_1_1Imm_1a2d0b63993f1f14a6ae20a5f8d3602330" kindref="member" tooltip="Set immediate value to 32-bit unsigned integer val.">setUInt32</ref>(hi);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>:</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Move32;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>:</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Move64;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>:</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Move64;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>:</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>:</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref>:</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>:</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>:</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regSize<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>hi<sp/>=<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.<ref refid="structasmjit_1_1Imm_1abc08fa629bbda8a7e4516db35282a160" kindref="member" tooltip="Get Hi 32-bit signed integer.">getUInt32Hi</ref>();</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lo-Part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.truncateTo32Bits();</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hi-Part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem.adjust(regSize);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.<ref refid="structasmjit_1_1Imm_1a2d0b63993f1f14a6ae20a5f8d3602330" kindref="member" tooltip="Set immediate value to 32-bit unsigned integer val.">setUInt32</ref>(hi);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zero<sp/>part<sp/>-<sp/>performing<sp/>AND<sp/>should<sp/>generate<sp/>shorter<sp/>code,<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8-bit<sp/>immediate<sp/>can<sp/>be<sp/>used<sp/>instead<sp/>of<sp/>32-bit<sp/>immediate<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>MOV<sp/>instruction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem.adjust(regSize);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.<ref refid="structasmjit_1_1Imm_1a2d0b63993f1f14a6ae20a5f8d3602330" kindref="member" tooltip="Set immediate value to 32-bit unsigned integer val.">setUInt32</ref>(0);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstAnd,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem.adjust(regSize);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstAnd,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lo-Hi<sp/>parts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Zero<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem.adjust(regSize);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.<ref refid="structasmjit_1_1Imm_1a2d0b63993f1f14a6ae20a5f8d3602330" kindref="member" tooltip="Set immediate value to 32-bit unsigned integer val.">setUInt32</ref>(0);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstAnd,<sp/>mem,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>EmitMoveImmToReg]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::emitMoveImmToReg(uint32_t<sp/>dstType,<sp/>uint32_t<sp/>dstIndex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Imm*<sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(dstIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>X86Reg<sp/>r0;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>Imm<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>(*src);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(dstType)<sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>:</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>:</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.truncateTo8Bits();</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Move32;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>:</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref>:</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.truncateTo16Bits();</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Move32;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>:</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>:</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">_Move32Truncate:</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.truncateTo32Bits();</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">_Move32:</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r0.setSize(4);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>,<sp/>dstIndex);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>r0,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref>:</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>:</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>GPD<sp/>register<sp/>will<sp/>clear<sp/>the<sp/>HI-DWORD<sp/>of<sp/>GPQ<sp/>register<sp/>in<sp/>64-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>.<ref refid="structasmjit_1_1Imm_1a385c2bb2b657e908f91d0a755cc930b1" kindref="member" tooltip="Get whether the immediate can be casted to 32-bit unsigned integer.">isUInt32</ref>())</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Move32Truncate;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r0.setSize(8);</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>r0.setCode(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>,<sp/>dstIndex);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>r0,<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>:</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>:</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>EmitMoveImmToReg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>:</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>EmitMoveImmToReg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>:</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>:</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>:</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref>:</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>:</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>EmitMoveImmToReg.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>Register<sp/>Management]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_DEBUG)</highlight></codeline>
<codeline lineno="1198"><highlight class="preprocessor"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context_checkStateVars(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>VarState*<sp/>state<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getState();</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>VarData**<sp/>sVars<sp/>=<sp/>state-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regIndex;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regMask;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regCount<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getRegsCount(C);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>uint32_t<sp/>occupied<sp/>=<sp/>state-&gt;_occupied.get(C);</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>uint32_t<sp/>modified<sp/>=<sp/>state-&gt;_modified.get(C);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(regIndex<sp/>=<sp/>0,<sp/>regMask<sp/>=<sp/>1;<sp/>regIndex<sp/>&lt;<sp/>regCount;<sp/>regIndex++,<sp/>regMask<sp/>&lt;&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>sVars[regIndex];</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>((occupied<sp/>&amp;<sp/>regMask)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>((modified<sp/>&amp;<sp/>regMask)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>((occupied<sp/>&amp;<sp/>regMask)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>((modified<sp/>&amp;<sp/>regMask)<sp/>==<sp/>(static_cast&lt;uint32_t&gt;(vd-&gt;isModified())<sp/>&lt;&lt;<sp/>regIndex));</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd-&gt;getClass()<sp/>==<sp/>C);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd-&gt;getState()<sp/>==<sp/>kVarStateReg);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd-&gt;getRegIndex()<sp/>==<sp/>regIndex);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::_checkState()<sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>X86X64Context_checkStateVars&lt;kRegClassGp&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>X86X64Context_checkStateVars&lt;kRegClassMm&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>X86X64Context_checkStateVars&lt;kRegClassXy&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="1234"><highlight class="preprocessor"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::_checkState()<sp/>{}</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_DEBUG</highlight></codeline>
<codeline lineno="1236"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>State<sp/>-<sp/>Load]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context_loadStateVars(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>VarState*<sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>VarState*<sp/>cur<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getState();</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>VarData**<sp/>cVars<sp/>=<sp/>cur-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>VarData**<sp/>sVars<sp/>=<sp/>src-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regIndex;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>uint32_t<sp/>modified<sp/>=<sp/>src-&gt;_modified.get(C);</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regCount<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getRegsCount(C);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(regIndex<sp/>=<sp/>0;<sp/>regIndex<sp/>&lt;<sp/>regCount;<sp/>regIndex++,<sp/>modified<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>sVars[regIndex];</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>cVars[regIndex]<sp/>=<sp/>vd;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>vd-&gt;setState(kVarStateReg);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>vd-&gt;setRegIndex(regIndex);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>vd-&gt;setModified(modified<sp/>&amp;<sp/>0x1);</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::loadState(BaseVarState*<sp/>src_)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/>VarState*<sp/>cur<sp/>=<sp/>getState();</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>VarState*<sp/>src<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">VarState*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src_);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>VarData**<sp/>vdArray<sp/>=<sp/>_contextVd.getData();</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>uint32_t<sp/>vdCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_contextVd.getLength());</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>allocated<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>X86X64Context_loadStateVars&lt;kRegClassGp&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>src);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>X86X64Context_loadStateVars&lt;kRegClassMm&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>src);</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>X86X64Context_loadStateVars&lt;kRegClassXy&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>src);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>masks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>cur-&gt;_occupied<sp/>=<sp/>src-&gt;_occupied;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/>cur-&gt;_modified<sp/>=<sp/>src-&gt;_modified;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>states<sp/>of<sp/>other<sp/>variables<sp/>and<sp/>clear<sp/>their<sp/>&apos;Modified&apos;<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vdCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>vState<sp/>=<sp/>src-&gt;_cells[i].getState();</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vState<sp/>==<sp/>kVarStateReg)</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>vdArray[i]-&gt;setState(vState);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>vdArray[i]-&gt;setRegIndex(<ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/>vdArray[i]-&gt;setModified(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>ASMJIT_CONTEXT_CHECK_STATE</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>State<sp/>-<sp/>Save]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal">BaseVarState*<sp/>X86X64Context::saveState()<sp/>{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>VarData**<sp/>vdArray<sp/>=<sp/>_contextVd.getData();</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>uint32_t<sp/>vdCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_contextVd.getLength());</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>IntUtil::alignTo&lt;size_t&gt;(</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VarState)<sp/>+<sp/>vdCount<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(StateCell),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*));</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>VarState*<sp/>cur<sp/>=<sp/>getState();</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>VarState*<sp/>dst<sp/>=<sp/>_zoneAllocator.allocT&lt;VarState&gt;(size);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>links.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>::memcpy(dst-&gt;_list,<sp/>cur-&gt;_list,<sp/><ref refid="structasmjit_1_1x86x64_1_1VarState_1a8310bbd50a763958e2bd2a76279be331a2e21256c6c1b021ed9005c46478f60a9" kindref="member" tooltip="Count of all registers in VarState.">VarState::kAllCount</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VarData*));</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>masks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>dst-&gt;_occupied<sp/>=<sp/>cur-&gt;_occupied;</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>dst-&gt;_modified<sp/>=<sp/>cur-&gt;_modified;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>cells.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vdCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">VarData*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vdArray[i]);</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/>StateCell&amp;<sp/>cell<sp/>=<sp/>dst-&gt;_cells[i];</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.reset();</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.setState(vd-&gt;getState());</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dst;</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>State<sp/>-<sp/>Switch]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context_switchStateVars(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>VarState*<sp/>src)<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>VarState*<sp/>dst<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getState();</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>VarData**<sp/>dstVars<sp/>=<sp/>dst-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>VarData**<sp/>srcVars<sp/>=<sp/>src-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regIndex;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regMask;</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regCount<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getRegsCount(C);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>StateCell*<sp/>cells<sp/>=<sp/>src-&gt;_cells;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>didWork;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(regIndex<sp/>=<sp/>0,<sp/>regMask<sp/>=<sp/>0x1;<sp/>regIndex<sp/>&lt;<sp/>regCount;<sp/>regIndex++,<sp/>regMask<sp/>&lt;&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>dVd<sp/>=<sp/>dstVars[regIndex];</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>sVd<sp/>=<sp/>srcVars[regIndex];</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dVd<sp/>==<sp/>sVd)</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dVd<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StateCell&amp;<sp/>cell<sp/>=<sp/>cells[dVd-&gt;getContextId()];</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell.getState()<sp/>!=<sp/>kVarStateReg)<sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell.getState()<sp/>==<sp/>kVarStateMem)</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;spill&lt;C&gt;(dVd);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;unuse&lt;C&gt;(dVd);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dVd<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sVd<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dVd<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>sVd<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">_MoveOrLoad:</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sVd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;move&lt;C&gt;(sVd,<sp/>regIndex);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;load&lt;C&gt;(sVd,<sp/>regIndex);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dVd<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>sVd<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StateCell&amp;<sp/>cell<sp/>=<sp/>cells[dVd-&gt;getContextId()];</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell.getState()<sp/>==<sp/>kVarStateReg)</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell.getState()<sp/>==<sp/>kVarStateMem)</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;spill&lt;C&gt;(dVd);</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;unuse&lt;C&gt;(dVd);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StateCell&amp;<sp/>cell<sp/>=<sp/>cells[dVd-&gt;getContextId()];</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell.getState()<sp/>==<sp/>kVarStateReg)<sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dVd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref><sp/>&amp;&amp;<sp/>sVd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C<sp/>==<sp/><ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;swapGp(dVd,<sp/>sVd);</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;spill&lt;C&gt;(dVd);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;move&lt;C&gt;(sVd,<sp/>regIndex);</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell.getState()<sp/>==<sp/>kVarStateMem)</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;spill&lt;C&gt;(dVd);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;unuse&lt;C&gt;(dVd);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_MoveOrLoad;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(didWork);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/>uint32_t<sp/>dstModified<sp/>=<sp/>dst-&gt;_modified.get(C);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/>uint32_t<sp/>srcModified<sp/>=<sp/>src-&gt;_modified.get(C);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dstModified<sp/>!=<sp/>srcModified)<sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(regIndex<sp/>=<sp/>0,<sp/>regMask<sp/>=<sp/>0x1;<sp/>regIndex<sp/>&lt;<sp/>regCount;<sp/>regIndex++,<sp/>regMask<sp/>&lt;&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>dstVars[regIndex];</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((dstModified<sp/>&amp;<sp/>regMask)<sp/>&amp;&amp;<sp/>!(srcModified<sp/>&amp;<sp/>regMask))<sp/>{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;save&lt;C&gt;(vd);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(dstModified<sp/>&amp;<sp/>regMask)<sp/>&amp;&amp;<sp/>(srcModified<sp/>&amp;<sp/>regMask))<sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;modify&lt;C&gt;(vd);</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1453"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::switchState(BaseVarState*<sp/>src_)<sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(src_<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>VarState*<sp/>cur<sp/>=<sp/>getState();</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>VarState*<sp/>src<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">VarState*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src_);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>if<sp/>both<sp/>states<sp/>are<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur<sp/>==<sp/>src)</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Switch<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/>X86X64Context_switchStateVars&lt;kRegClassGp&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>src);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>X86X64Context_switchStateVars&lt;kRegClassMm&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>src);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/>X86X64Context_switchStateVars&lt;kRegClassXy&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>src);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>changed<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>VarData**<sp/>vdArray<sp/>=<sp/>_contextVd.getData();</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/>uint32_t<sp/>vdCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_contextVd.getLength());</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/>StateCell*<sp/>cells<sp/>=<sp/>src-&gt;_cells;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vdCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">VarData*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(vdArray[i]);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>StateCell&amp;<sp/>cell<sp/>=<sp/>cells[i];</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>vState<sp/>=<sp/>cell.getState();</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vState<sp/>!=<sp/>kVarStateReg)<sp/>{</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd-&gt;setState(vState);</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd-&gt;setModified(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/>ASMJIT_CONTEXT_CHECK_STATE</highlight></codeline>
<codeline lineno="1487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>State<sp/>-<sp/>Intersect]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context::intersectStates(BaseVarState*<sp/>a_,<sp/>BaseVarState*<sp/>b_)<sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/>VarState*<sp/>aState<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">VarState*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(a_);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/>VarState*<sp/>bState<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">VarState*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(b_);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>Intersect<sp/>states.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/>ASMJIT_CONTEXT_CHECK_STATE</highlight></codeline>
<codeline lineno="1499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>GetJccFlow<sp/>/<sp/>GetOppositeJccFlow]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1505"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="1506"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>BaseNode*<sp/>X86X64Context_getJccFlow(JumpNode*<sp/>jNode)<sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jNode-&gt;isTaken())</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jNode-&gt;getTarget();</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jNode-&gt;getNext();</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1513"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="1514"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>BaseNode*<sp/>X86X64Context_getOppositeJccFlow(JumpNode*<sp/>jNode)<sp/>{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jNode-&gt;isTaken())</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jNode-&gt;getNext();</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>jNode-&gt;getTarget();</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>SingleVarInst]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1525"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="1526"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context_prepareSingleVarInst(uint32_t<sp/>code,<sp/>VarAttr*<sp/>va)<sp/>{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(code)<sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>andn<sp/><sp/><sp/><sp/><sp/>reg,<sp/>reg<sp/>;<sp/>Set<sp/>all<sp/>bits<sp/>in<sp/>reg<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>xor/pxor<sp/>reg,<sp/>reg<sp/>;<sp/>Set<sp/>all<sp/>bits<sp/>in<sp/>reg<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>sub/psub<sp/>reg,<sp/>reg<sp/>;<sp/>Set<sp/>all<sp/>bits<sp/>in<sp/>reg<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>pcmpgt<sp/><sp/><sp/>reg,<sp/>reg<sp/>;<sp/>Set<sp/>all<sp/>bits<sp/>in<sp/>reg<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>pcmpeq<sp/><sp/><sp/>reg,<sp/>reg<sp/>;<sp/>Set<sp/>all<sp/>bits<sp/>in<sp/>reg<sp/>to<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPandn<sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstXor<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstXorpd<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstXorps<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPxor<sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstSub:</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPsubb<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPsubw<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPsubd<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPsubq<sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPsubsb<sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPsubsw<sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPsubusb<sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPsubusw<sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPcmpeqb<sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPcmpeqw<sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPcmpeqd<sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPcmpeqq<sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPcmpgtb<sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPcmpgtw<sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPcmpgtd<sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPcmpgtq<sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;delFlags(kVarAttrInReg);</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>and<sp/><sp/><sp/><sp/><sp/><sp/>reg,<sp/>reg<sp/>;<sp/>Nop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>or<sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg,<sp/>reg<sp/>;<sp/>Nop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>xchg<sp/><sp/><sp/><sp/><sp/>reg,<sp/>reg<sp/>;<sp/>Nop.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstAnd<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstAndpd<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstAndps<sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPand<sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstOr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstOrpd<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstOrps<sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPor<sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstXchg<sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;delFlags(kVarAttrOutReg);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>Helpers]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1558"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="1559"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1560"><highlight class="comment">//!<sp/>@brief<sp/>Add<sp/>unreachable-flow<sp/>data<sp/>to<sp/>the<sp/>unreachable<sp/>flow<sp/>list.</highlight></codeline>
<codeline lineno="1561"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Error<sp/>X86X64Context_addUnreachableNode(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>BaseNode*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/>PodList&lt;BaseNode*&gt;::Link*<sp/>link<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_zoneAllocator.allocT&lt;PodList&lt;BaseNode*&gt;::Link&gt;();</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;setError(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/>link-&gt;setValue(node);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_unreachableList.append(link);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1572"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="1573"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1574"><highlight class="comment">//!<sp/>@brief<sp/>Add<sp/>jump-flow<sp/>data<sp/>to<sp/>the<sp/>jcc<sp/>flow<sp/>list.</highlight></codeline>
<codeline lineno="1575"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Error<sp/>X86X64Context_addJccNode(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>BaseNode*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>PodList&lt;BaseNode*&gt;::Link*<sp/>link<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_zoneAllocator.allocT&lt;PodList&lt;BaseNode*&gt;::Link&gt;();</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(link<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_PROPAGATE_ERROR(self-&gt;setError(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>));</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/>link-&gt;setValue(node);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_jccList.append(link);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1587"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="1588"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1589"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>mask<sp/>of<sp/>all<sp/>registers<sp/>actually<sp/>used<sp/>to<sp/>pass<sp/>function<sp/>arguments.</highlight></codeline>
<codeline lineno="1590"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>RegMask<sp/>X86X64Context_getUsedArgs(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>X86X64CallNode*<sp/>node,<sp/>X86X64FuncDecl*<sp/>decl)<sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/>RegMask<sp/>regs;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/>regs.reset();</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>uint32_t<sp/>argCount<sp/>=<sp/>decl-&gt;getArgCount();</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>argCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/>decl-&gt;getArg(i);</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg.hasRegIndex())</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>regs.add(x86VarTypeToClass(arg.getVarType()),<sp/>IntUtil::mask(arg.getRegIndex()));</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>regs;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>SArg<sp/>Insertion]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SArgData<sp/>{</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/>VarData*<sp/>sVd;</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/>VarData*<sp/>cVd;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/>SArgNode*<sp/>sArg;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/>uint32_t<sp/>aType;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SARG(_Dst_,<sp/>S0,<sp/>S1,<sp/>S2,<sp/>S3,<sp/>S4,<sp/>S5,<sp/>S6,<sp/>S7,<sp/>S8,<sp/>S9,<sp/>S10,<sp/>S11,<sp/>S12,<sp/>S13,<sp/>S14,<sp/>S15,<sp/>S16,<sp/>S17,<sp/>S18,<sp/>S19,<sp/>S20)<sp/>\</highlight></codeline>
<codeline lineno="1619"><highlight class="preprocessor"><sp/><sp/>(S0<sp/><sp/>&lt;&lt;<sp/><sp/>0)<sp/>|<sp/>(S1<sp/><sp/>&lt;&lt;<sp/><sp/>1)<sp/>|<sp/>(S2<sp/><sp/>&lt;&lt;<sp/><sp/>2)<sp/>|<sp/>(S3<sp/><sp/>&lt;&lt;<sp/><sp/>3)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="1620"><highlight class="preprocessor"><sp/><sp/>(S4<sp/><sp/>&lt;&lt;<sp/><sp/>4)<sp/>|<sp/>(S5<sp/><sp/>&lt;&lt;<sp/><sp/>5)<sp/>|<sp/>(S6<sp/><sp/>&lt;&lt;<sp/><sp/>6)<sp/>|<sp/>(S7<sp/><sp/>&lt;&lt;<sp/><sp/>7)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="1621"><highlight class="preprocessor"><sp/><sp/>(S8<sp/><sp/>&lt;&lt;<sp/><sp/>8)<sp/>|<sp/>(S9<sp/><sp/>&lt;&lt;<sp/><sp/>9)<sp/>|<sp/>(S10<sp/>&lt;&lt;<sp/>10)<sp/>|<sp/>(S11<sp/>&lt;&lt;<sp/>11)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="1622"><highlight class="preprocessor"><sp/><sp/>(S12<sp/>&lt;&lt;<sp/>12)<sp/>|<sp/>(S13<sp/>&lt;&lt;<sp/>13)<sp/>|<sp/>(S14<sp/>&lt;&lt;<sp/>14)<sp/>|<sp/>(S15<sp/>&lt;&lt;<sp/>15)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="1623"><highlight class="preprocessor"><sp/><sp/>(S16<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(S17<sp/>&lt;&lt;<sp/>17)<sp/>|<sp/>(S18<sp/>&lt;&lt;<sp/>18)<sp/>|<sp/>(S19<sp/>&lt;&lt;<sp/>19)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="1624"><highlight class="preprocessor"><sp/><sp/>(S20<sp/>&lt;&lt;<sp/>20)</highlight></codeline>
<codeline lineno="1625"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>A<sp/>0<sp/></highlight><highlight class="comment">/*<sp/>Auto-convert<sp/>(doesn&apos;t<sp/>need<sp/>conversion<sp/>step).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>X86X64Context_sArgConvTable[<ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dst<sp/>&lt;-<sp/>|<sp/>i8|<sp/>u8|i16|u16|i32|u32|i64|u64|<sp/>iP|<sp/>uP|f32|f64|mmx|xmm|xSs|xPs|xSd|xPd|ymm|yPs|yPd|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//--------+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/>SARG(i8<sp/><sp/><sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/>SARG(u8<sp/><sp/><sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/>SARG(i16<sp/><sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>SARG(u16<sp/><sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>SARG(i32<sp/><sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/>SARG(u32<sp/><sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>SARG(i64<sp/><sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/>SARG(u64<sp/><sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/>SARG(iPtr<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/>SARG(uPtr<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>A<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/>SARG(f32<sp/><sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/>SARG(f64<sp/><sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>A<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/>SARG(mmx<sp/><sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/>SARG(<ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref><sp/><sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>SARG(xSs<sp/><sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/>SARG(xPs<sp/><sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/>SARG(xSd<sp/><sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>SARG(xPd<sp/><sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>SARG(<ref refid="group__asmjit__x86x64_1ga670a05a7edf855537e6d4d30c4ccb135" kindref="member" tooltip="Get Xmm register.">ymm</ref><sp/><sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>),</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>SARG(yPs<sp/><sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>),</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>SARG(yPd<sp/><sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>1<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>0<sp/>,<sp/>1<sp/>,<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1650"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>A</highlight></codeline>
<codeline lineno="1652"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#undef<sp/>SARG</highlight></codeline>
<codeline lineno="1653"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>X86X64Context_mustConvertSArg(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>uint32_t<sp/>aType,<sp/>uint32_t<sp/>sType)<sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(X86X64Context_sArgConvTable[aType]<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>sType))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>X86X64Context_typeOfConvertedSArg(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>uint32_t<sp/>aType,<sp/>uint32_t<sp/>sType)<sp/>{</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(X86X64Context_mustConvertSArg(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>aType,<sp/>sType));</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(aType,<sp/>_kVarTypeIntStart,<sp/>_kVarTypeIntEnd))</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aType;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>)</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>)</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(aType,<sp/>_kVarTypeXmmStart,<sp/>_kVarTypeXmmEnd))</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aType;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(aType,<sp/>_kVarTypeYmmStart,<sp/>_kVarTypeYmmEnd))</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aType;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aType;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Error<sp/>X86X64Context_insertSArgNode(</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/>X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>X86X64CallNode*<sp/>call,</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/>VarData*<sp/>sVd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*<sp/>gaRegs,</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncInOut&amp;<sp/>arg,<sp/>uint32_t<sp/>argIndex,</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/>SArgData*<sp/>sArgList,<sp/>uint32_t&amp;<sp/>sArgCount)<sp/>{</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getCompiler();</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/>uint32_t<sp/>aType<sp/>=<sp/>arg.getVarType();</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sType<sp/>=<sp/>sVd-&gt;getType();</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>locate<sp/>or<sp/>create<sp/>sArgBase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sArgCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sArgList[i].sVd<sp/>==<sp/>sVd<sp/>&amp;&amp;<sp/>sArgList[i].cVd<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/>SArgData*<sp/>sArgData<sp/>=<sp/>&amp;sArgList[i];</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>sArgCount)<sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/>sArgData-&gt;sVd<sp/>=<sp/>sVd;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>sArgData-&gt;cVd<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/>sArgData-&gt;sArg<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>sArgData-&gt;aType<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/>sArgCount++;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VarInfo&amp;<sp/>sInfo<sp/>=<sp/>_varInfo[sType];</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/>uint32_t<sp/>sClass<sp/>=<sp/>sInfo.<ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a6dd256c61848d49c6a6c1f5c922c288b" kindref="member" tooltip="Get variable class, see kRegClass.">getClass</ref>();</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X86X64Context_mustConvertSArg(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>aType,<sp/>sType))<sp/>{</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cType<sp/>=<sp/>X86X64Context_typeOfConvertedSArg(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>aType,<sp/>sType);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VarInfo&amp;<sp/>cInfo<sp/>=<sp/>_varInfo[cType];</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cClass<sp/>=<sp/>cInfo.<ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a6dd256c61848d49c6a6c1f5c922c288b" kindref="member" tooltip="Get variable class, see kRegClass.">getClass</ref>();</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++i<sp/>&lt;<sp/>sArgCount)<sp/>{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sArgData<sp/>=<sp/>&amp;sArgList[i];</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sArgData-&gt;sVd<sp/>!=<sp/>sVd)</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sArgData-&gt;cVd-&gt;getType()<sp/>!=<sp/>cType<sp/>||<sp/>sArgData-&gt;aType<sp/>!=<sp/>aType)</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sArgData-&gt;sArg-&gt;_args<sp/>|=<sp/>IntUtil::mask(argIndex);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>cVd<sp/>=<sp/>compiler-&gt;_newVd(cType,<sp/>cInfo.getSize(),<sp/>cInfo.getClass(),<sp/>NULL);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cVd<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>;</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>SArgNode*<sp/>sArg<sp/>=<sp/>compiler-&gt;newNode&lt;SArgNode&gt;(call,<sp/>sVd,<sp/>cVd);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sArg<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>VarInst*<sp/>vi<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;newVarInst(2);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_PROPAGATE_ERROR(self-&gt;_registerContextVar(cVd));</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_PROPAGATE_ERROR(self-&gt;_registerContextVar(sVd));</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/>vi-&gt;_vaCount<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>vi-&gt;_count.reset();</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/>vi-&gt;_count.add(sClass);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>vi-&gt;_count.add(cClass);</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>vi-&gt;_start.reset();</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/>vi-&gt;_inRegs.reset();</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/>vi-&gt;_outRegs.reset();</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/>vi-&gt;_clobberedRegs.reset();</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sClass<sp/>&lt;=<sp/>cClass)<sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_list[0].setup(sVd,<sp/>kVarAttrInReg<sp/>,<sp/>0,<sp/>gaRegs[sClass]);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_list[1].setup(cVd,<sp/>kVarAttrOutReg,<sp/>0,<sp/>gaRegs[cClass]);</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_start.set(cClass,<sp/>sClass<sp/>!=<sp/>cClass);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_list[0].setup(cVd,<sp/>kVarAttrOutReg,<sp/>0,<sp/>gaRegs[cClass]);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_list[1].setup(sVd,<sp/>kVarAttrInReg<sp/>,<sp/>0,<sp/>gaRegs[sClass]);</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_start.set(sClass,<sp/>1);</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>sArg-&gt;setVarInst(vi);</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/>sArg-&gt;_args<sp/>|=<sp/>IntUtil::mask(argIndex);</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;addNodeBefore(sArg,<sp/>call);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>::memmove(sArgData<sp/>+<sp/>1,<sp/>sArgData,<sp/>(sArgCount<sp/>-<sp/>i)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(SArgData));</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>sArgData-&gt;sVd<sp/>=<sp/>sVd;</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/>sArgData-&gt;cVd<sp/>=<sp/>cVd;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>sArgData-&gt;sArg<sp/>=<sp/>sArg;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/>sArgData-&gt;aType<sp/>=<sp/>aType;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/>sArgCount++;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>SArgNode*<sp/>sArg<sp/>=<sp/>sArgData-&gt;sArg;</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_PROPAGATE_ERROR(self-&gt;_registerContextVar(sVd));</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sArg<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sArg<sp/>=<sp/>compiler-&gt;newNode&lt;SArgNode&gt;(call,<sp/>sVd,<sp/>(VarData*)NULL);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sArg<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarInst*<sp/>vi<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;newVarInst(1);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_vaCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_count.reset();</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_count.add(sClass);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_start.reset();</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_inRegs.reset();</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_outRegs.reset();</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_clobberedRegs.reset();</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;_list[0].setup(sVd,<sp/>kVarAttrInReg,<sp/>0,<sp/>gaRegs[sClass]);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sArg-&gt;setVarInst(vi);</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sArgData-&gt;sArg<sp/>=<sp/>sArg;</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;addNodeBefore(sArg,<sp/>call);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/>sArg-&gt;_args<sp/>|=<sp/>IntUtil::mask(argIndex);</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1810"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>Fetch]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1816"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="1817"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1818"><highlight class="comment">//!<sp/>@brief<sp/>Prepare<sp/>the<sp/>given<sp/>function<sp/>@a<sp/>func.</highlight></codeline>
<codeline lineno="1819"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1820"><highlight class="comment">//!<sp/>For<sp/>each<sp/>node:</highlight></codeline>
<codeline lineno="1821"><highlight class="comment">//!<sp/>-<sp/>Create<sp/>and<sp/>assign<sp/>groupId<sp/>and<sp/>flowId.</highlight></codeline>
<codeline lineno="1822"><highlight class="comment">//!<sp/>-<sp/>Collect<sp/>all<sp/>variables<sp/>and<sp/>merge<sp/>them<sp/>to<sp/>vaList.</highlight></codeline>
<codeline lineno="1823"><highlight class="comment"></highlight><highlight class="normal">Error<sp/>X86X64Context::fetch()<sp/>{</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/>X86X64FuncNode*<sp/>func<sp/>=<sp/>getFunc();</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>uint32_t<sp/>arch<sp/>=<sp/>compiler-&gt;getArch();</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node_<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>stop<sp/>=<sp/>getStop();</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/>uint32_t<sp/>groupId<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/>uint32_t<sp/>flowId<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/>VarAttr<sp/>vaTmpList[80];</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/>SArgData<sp/>sArgList[80];</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>PodList&lt;BaseNode*&gt;::Link*<sp/>jLink<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>func-&gt;clearFuncFlags(</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/>kFuncFlagIsNaked<sp/>|</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" kindref="member" tooltip="Whether to emit register load/save sequence using push/pop pairs.">kFuncFlagPushPop</ref><sp/>|</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea04a47eab8f496c62b46ee10b0db1b02c" kindref="member" tooltip="Whether to emit EMMS instruction in epilog (auto-detected).">kFuncFlagEmms</ref><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea5a7da13edc4314da69d0c84c5a743c2b" kindref="member" tooltip="Whether to emit SFence instruction in epilog (auto-detected).">kFuncFlagSFence</ref><sp/><sp/>|</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eae2310ea543f281708f892f3b7db37952" kindref="member" tooltip="Whether to emit LFence instruction in epilog (auto-detected).">kFuncFlagLFence</ref><sp/><sp/>);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;getHint(kFuncHintNaked<sp/><sp/>)<sp/>!=<sp/>0)<sp/>func-&gt;addFuncFlags(kFuncFlagIsNaked);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;getHint(kFuncHintCompact)<sp/>!=<sp/>0)<sp/>func-&gt;addFuncFlags(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" kindref="member" tooltip="Whether to emit register load/save sequence using push/pop pairs.">kFuncFlagPushPop</ref><sp/>|<sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea6e3366da1c4c93b998d9deeaf3f42c3e" kindref="member" tooltip="Whether to emit &amp;quot;enter&amp;quot; instead of three instructions in case that the function is not naked or misal...">kFuncFlagEnter</ref><sp/>|<sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eadeccd860e44737b6746fc18c553b9683" kindref="member" tooltip="Whether to emit &amp;quot;leave&amp;quot; instead of two instructions in case that the function is not naked or misalig...">kFuncFlagLeave</ref>);</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;getHint(<ref refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffab728a139b384786e1183e880eb722ceb" kindref="member" tooltip="Use push/pop sequences instead of mov sequences in function prolog and epilog.">kFuncHintPushPop</ref>)<sp/>!=<sp/>0)<sp/>func-&gt;addFuncFlags(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" kindref="member" tooltip="Whether to emit register load/save sequence using push/pop pairs.">kFuncFlagPushPop</ref>);</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;getHint(<ref refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffa6edbcdb990dad842a5575e987a36dad0" kindref="member" tooltip="Add emms instruction to the function epilog.">kFuncHintEmms</ref><sp/><sp/><sp/>)<sp/>!=<sp/>0)<sp/>func-&gt;addFuncFlags(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea04a47eab8f496c62b46ee10b0db1b02c" kindref="member" tooltip="Whether to emit EMMS instruction in epilog (auto-detected).">kFuncFlagEmms</ref><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;getHint(<ref refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffa5d4386a7e7b452a7273753d7af7f0e47" kindref="member" tooltip="Add sfence instruction to the function epilog.">kFuncHintSFence</ref><sp/>)<sp/>!=<sp/>0)<sp/>func-&gt;addFuncFlags(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea5a7da13edc4314da69d0c84c5a743c2b" kindref="member" tooltip="Whether to emit SFence instruction in epilog (auto-detected).">kFuncFlagSFence</ref><sp/>);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;getHint(<ref refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffaef76692b9c047ec20dd93dfa26442d0d" kindref="member" tooltip="Add lfence instruction to the function epilog.">kFuncHintLFence</ref><sp/>)<sp/>!=<sp/>0)<sp/>func-&gt;addFuncFlags(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eae2310ea543f281708f892f3b7db37952" kindref="member" tooltip="Whether to emit LFence instruction in epilog (auto-detected).">kFuncFlagLFence</ref><sp/>);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Global<sp/>allocable<sp/>registers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/>uint32_t*<sp/>gaRegs<sp/>=<sp/>_gaRegs;</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!func-&gt;hasFuncFlag(kFuncFlagIsNaked))</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/>gaRegs[<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>]<sp/>&amp;=<sp/>~IntUtil::mask(<ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae08e3d836183e8be188e68df5e2db1b6" kindref="member" tooltip="Index of BPL/BP/EBP/RBP registers.">kRegIndexBp</ref>);</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allowed<sp/>index<sp/>registers<sp/>(Gp/Xmm/Ymm).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>indexMask<sp/>=<sp/>IntUtil::bits(_baseRegsCount)<sp/>&amp;<sp/>~(IntUtil::mask(4,<sp/>12));</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[VI<sp/>Macros]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VI_BEGIN()<sp/>\</highlight></codeline>
<codeline lineno="1870"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1871"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uint32_t<sp/>vaCount<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="1872"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RegCount<sp/>regCount;<sp/>\</highlight></codeline>
<codeline lineno="1873"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1874"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RegMask<sp/>inRegs;<sp/>\</highlight></codeline>
<codeline lineno="1875"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RegMask<sp/>outRegs;<sp/>\</highlight></codeline>
<codeline lineno="1876"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RegMask<sp/>clobberedRegs;<sp/>\</highlight></codeline>
<codeline lineno="1877"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1878"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>regCount.reset();<sp/>\</highlight></codeline>
<codeline lineno="1879"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>inRegs.reset();<sp/>\</highlight></codeline>
<codeline lineno="1880"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>outRegs.reset();<sp/>\</highlight></codeline>
<codeline lineno="1881"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>clobberedRegs.reset()</highlight></codeline>
<codeline lineno="1882"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VI_END(_Node_)<sp/>\</highlight></codeline>
<codeline lineno="1884"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(vaCount<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>clobberedRegs.isEmpty())<sp/>\</highlight></codeline>
<codeline lineno="1885"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>break;<sp/>\</highlight></codeline>
<codeline lineno="1886"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1887"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VarInst*<sp/>vi<sp/>=<sp/>newVarInst(vaCount);<sp/>\</highlight></codeline>
<codeline lineno="1888"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(vi<sp/>==<sp/>NULL)<sp/>\</highlight></codeline>
<codeline lineno="1889"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>_NoMemory;<sp/>\</highlight></codeline>
<codeline lineno="1890"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1891"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>RegCount<sp/>vaIndex;<sp/>\</highlight></codeline>
<codeline lineno="1892"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vaIndex.makeIndex(regCount);<sp/>\</highlight></codeline>
<codeline lineno="1893"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1894"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vi-&gt;_vaCount<sp/>=<sp/>vaCount;<sp/>\</highlight></codeline>
<codeline lineno="1895"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vi-&gt;_count<sp/>=<sp/>regCount;<sp/>\</highlight></codeline>
<codeline lineno="1896"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vi-&gt;_start<sp/>=<sp/>vaIndex;<sp/>\</highlight></codeline>
<codeline lineno="1897"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1898"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vi-&gt;_inRegs<sp/>=<sp/>inRegs;<sp/>\</highlight></codeline>
<codeline lineno="1899"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vi-&gt;_outRegs<sp/>=<sp/>outRegs;<sp/>\</highlight></codeline>
<codeline lineno="1900"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vi-&gt;_clobberedRegs<sp/>=<sp/>clobberedRegs;<sp/>\</highlight></codeline>
<codeline lineno="1901"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1902"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>vaTmpList;<sp/>\</highlight></codeline>
<codeline lineno="1903"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>while<sp/>(vaCount)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1904"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();<sp/>\</highlight></codeline>
<codeline lineno="1905"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1906"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>class_<sp/>=<sp/>vd-&gt;getClass();<sp/>\</highlight></codeline>
<codeline lineno="1907"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>index<sp/>=<sp/>vaIndex.get(class_);<sp/>\</highlight></codeline>
<codeline lineno="1908"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1909"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>vaIndex.add(class_);<sp/>\</highlight></codeline>
<codeline lineno="1910"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1911"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(va-&gt;_inRegs)<sp/>\</highlight></codeline>
<codeline lineno="1912"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;_allocableRegs<sp/>=<sp/>va-&gt;_inRegs;<sp/>\</highlight></codeline>
<codeline lineno="1913"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(va-&gt;_outRegIndex<sp/>!=<sp/>kInvalidReg)<sp/>\</highlight></codeline>
<codeline lineno="1914"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;_allocableRegs<sp/>=<sp/>IntUtil::mask(va-&gt;_outRegIndex);<sp/>\</highlight></codeline>
<codeline lineno="1915"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="1916"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;_allocableRegs<sp/>&amp;=<sp/>~inRegs._regs[class_];<sp/>\</highlight></codeline>
<codeline lineno="1917"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1918"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>vd-&gt;_va<sp/>=<sp/>NULL;<sp/>\</highlight></codeline>
<codeline lineno="1919"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>vi-&gt;getVa(index)[0]<sp/>=<sp/>va[0];<sp/>\</highlight></codeline>
<codeline lineno="1920"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1921"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>va++;<sp/>\</highlight></codeline>
<codeline lineno="1922"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>vaCount--;<sp/>\</highlight></codeline>
<codeline lineno="1923"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1924"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1925"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Node_-&gt;setVarInst(vi);<sp/>\</highlight></codeline>
<codeline lineno="1926"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="1927"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VI_ADD_VAR(_Vd_,<sp/>_Va_,<sp/>_Flags_,<sp/>_NewAllocable_)<sp/>\</highlight></codeline>
<codeline lineno="1929"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1930"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASMJIT_ASSERT(_Vd_-&gt;_va<sp/>==<sp/>NULL);<sp/>\</highlight></codeline>
<codeline lineno="1931"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1932"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Va_<sp/>=<sp/>&amp;vaTmpList[vaCount++];<sp/>\</highlight></codeline>
<codeline lineno="1933"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Va_-&gt;setup(_Vd_,<sp/>_Flags_,<sp/>0,<sp/>_NewAllocable_);<sp/>\</highlight></codeline>
<codeline lineno="1934"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Va_-&gt;addVarCount(1);<sp/>\</highlight></codeline>
<codeline lineno="1935"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Vd_-&gt;setVa(_Va_);<sp/>\</highlight></codeline>
<codeline lineno="1936"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1937"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(_registerContextVar(_Vd_)<sp/>!=<sp/>kErrorOk)<sp/>\</highlight></codeline>
<codeline lineno="1938"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>_NoMemory;<sp/>\</highlight></codeline>
<codeline lineno="1939"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>regCount.add(_Vd_-&gt;getClass());<sp/>\</highlight></codeline>
<codeline lineno="1940"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="1941"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VI_MERGE_VAR(_Vd_,<sp/>_Va_,<sp/>_Flags_,<sp/>_NewAllocable_)<sp/>\</highlight></codeline>
<codeline lineno="1943"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1944"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Va_<sp/>=<sp/>_Vd_-&gt;getVa();<sp/>\</highlight></codeline>
<codeline lineno="1945"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1946"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(_Va_<sp/>==<sp/>NULL)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="1947"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_Va_<sp/>=<sp/>&amp;vaTmpList[vaCount++];<sp/>\</highlight></codeline>
<codeline lineno="1948"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_Va_-&gt;setup(_Vd_,<sp/>0,<sp/>0,<sp/>_NewAllocable_);<sp/>\</highlight></codeline>
<codeline lineno="1949"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>_Vd_-&gt;setVa(_Va_);<sp/>\</highlight></codeline>
<codeline lineno="1950"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1951"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(_registerContextVar(_Vd_)<sp/>!=<sp/>kErrorOk)<sp/>\</highlight></codeline>
<codeline lineno="1952"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>_NoMemory;<sp/>\</highlight></codeline>
<codeline lineno="1953"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>regCount.add(_Vd_-&gt;getClass());<sp/>\</highlight></codeline>
<codeline lineno="1954"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="1955"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1956"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Va_-&gt;addFlags(_Flags_);<sp/>\</highlight></codeline>
<codeline lineno="1957"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>_Va_-&gt;addVarCount(1);<sp/>\</highlight></codeline>
<codeline lineno="1958"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight></codeline>
<codeline lineno="1959"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Loop]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1965"><highlight class="normal">_Do:</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node_-&gt;isFetched())<sp/>{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal">_NextGroup:</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jLink<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jLink<sp/>=<sp/>_jccList.getFirst();</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jLink<sp/>=<sp/>jLink-&gt;getNext();</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jLink<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Done;</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>X86X64Context_getOppositeJccFlow(static_cast&lt;JumpNode*&gt;(jLink-&gt;getValue()));</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/>flowId++;</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>node_-&gt;getNext();</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>node_-&gt;setFlowId(flowId);</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(node_-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Align/Embed]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeAlign:</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeEmbed:</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Hint]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeHint:<sp/>{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HintNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">HintNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_BEGIN();</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;getHint()<sp/>==<sp/>kVarHintAlloc)<sp/>{</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HintNode*<sp/>cur<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>remain[<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba439b8f1c6f3216f72ccb85f90410f61b" kindref="member" tooltip="Count of X86/X64 register classes.">kRegClassCount</ref>];</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RegMask<sp/>inRegs;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remain[<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>]<sp/>=<sp/>_baseRegsCount<sp/>-<sp/>1<sp/>-<sp/>func-&gt;hasFuncFlag(kFuncFlagIsNaked);</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remain[<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578ebae14f8090017d61ea34f01c8f355096fa" kindref="member" tooltip="X86/X64 Fp register class.">kRegClassFp</ref>]<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ae822edf24ff7b052c18a6535f1a6d1a5" kindref="member" tooltip="Count of Fp registers (8).">kRegCountFp</ref>;</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remain[<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>]<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ac38cb5c433e088c7070177aa364ab296" kindref="member" tooltip="Count of Mm registers (8).">kRegCountMm</ref>;</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remain[<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>]<sp/>=<sp/>_baseRegsCount;</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inRegs.reset();</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merge<sp/>as<sp/>many<sp/>alloc-hints<sp/>as<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">VarData*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cur-&gt;getVd());</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>vd-&gt;getVa();</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regClass<sp/>=<sp/>vd-&gt;getClass();</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>cur-&gt;getValue();</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regMask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>handle<sp/>both<sp/>kInvalidReg<sp/>and<sp/>kInvalidValue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regIndex<sp/>&lt;<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regMask<sp/>=<sp/>IntUtil::mask(regIndex);</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((inRegs._regs[regClass]<sp/>&amp;<sp/>regMask)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remain[regClass]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_ADD_VAR(vd,<sp/>va,<sp/>kVarAttrInReg,<sp/>gaRegs[regClass]);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regMask<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inRegs._regs[regClass]<sp/>^=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(regMask);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setInRegs(regMask);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setInRegIndex(regIndex);</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remain[regClass]--;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regMask<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((inRegs._regs[regClass]<sp/>&amp;<sp/>regMask)<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>va-&gt;getInRegs()<sp/>!=<sp/>regMask)</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inRegs._regs[regClass]<sp/>^=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(va-&gt;getInRegs()<sp/>|<sp/>regMask);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setInRegs(regMask);</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setInRegIndex(regIndex);</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur<sp/>!=<sp/>node)</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;removeNode(cur);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">HintNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node-&gt;getNext());</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur<sp/>==<sp/>NULL<sp/>||<sp/>cur-&gt;getType()<sp/>!=<sp/>kNodeTypeHint<sp/>||<sp/>cur-&gt;getHint()<sp/>!=<sp/>kVarHintAlloc)</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>node-&gt;getNext();</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">VarData*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node-&gt;getVd());</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(node-&gt;getHint())<sp/>{</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kVarHintSpill:</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>=<sp/>kVarAttrInMem;</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kVarHintSave:</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>=<sp/>kVarAttrInMem;</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kVarHintSaveAndUnuse:</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>=<sp/>kVarAttrInMem<sp/>|<sp/>kVarAttrUnuse;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kVarHintUnuse:</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>=<sp/>kVarAttrUnuse;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_ADD_VAR(vd,<sp/>va,<sp/>flags,<sp/>0);</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_END(node_);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Target]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeTarget:<sp/>{</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Inst]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeInst:<sp/>{</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>code<sp/>=<sp/>node-&gt;getCode();</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>flags<sp/>=<sp/>node-&gt;getFlags();</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Operand*<sp/>opList<sp/>=<sp/>node-&gt;getOpList();</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>opCount<sp/>=<sp/>node-&gt;getOpCount();</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opCount)<sp/>{</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InstInfo*<sp/>info<sp/>=<sp/>&amp;_instInfo[code];</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86X64SpecialInst*<sp/>special<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_BEGIN();</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Collect<sp/>instruction<sp/>flags<sp/>and<sp/>merge<sp/>all<sp/>&apos;VarAttr&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;isFp())</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>|=<sp/>kNodeFlagIsFp;</highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;isSpecial()<sp/>&amp;&amp;<sp/>(special<sp/>=<sp/>X86X64SpecialInst_get(code,<sp/>opList,<sp/>opCount))<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags<sp/>|=<sp/>kNodeFlagIsSpecial;</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>gpAllowedMask<sp/>=<sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>opCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Operand*<sp/>op<sp/>=<sp/>&amp;opList[i];</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd;</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va;</highlight></codeline>
<codeline lineno="2126"><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;isVar())<sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(op-&gt;getId());</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_MERGE_VAR(vd,<sp/>va,<sp/>0,<sp/>gaRegs[vd-&gt;getClass()]<sp/>&amp;<sp/>gpAllowedMask);</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;X86Var*&gt;(op)-&gt;isGpb())<sp/>{</highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(static_cast&lt;GpVar*&gt;(op)-&gt;isGpbLo()<sp/>?<sp/>kVarAttrGpbLo<sp/>:<sp/>kVarAttrGpbHi);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>a<sp/>byte<sp/>register<sp/>is<sp/>accessed<sp/>in<sp/>32-bit<sp/>mode<sp/>we<sp/>have<sp/>to<sp/>limit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>allocable<sp/>registers<sp/>for<sp/>that<sp/>variable<sp/>to<sp/>eax/ebx/ecx/edx.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Other<sp/>variables<sp/>are<sp/>not<sp/>affected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;_allocableRegs<sp/>&amp;=<sp/>0x0F;</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>fine<sp/>if<sp/>lo-byte<sp/>register<sp/>is<sp/>accessed<sp/>in<sp/>64-bit<sp/>mode;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>however,<sp/>hi-byte<sp/>has<sp/>to<sp/>be<sp/>checked<sp/>and<sp/>if<sp/>it&apos;s<sp/>used<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>registers<sp/>(Gp/Xmm)<sp/>could<sp/>be<sp/>only<sp/>allocated<sp/>in<sp/>the<sp/>lower<sp/>eight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>half.<sp/>To<sp/>do<sp/>that,<sp/>we<sp/>patch<sp/>&apos;allocableRegs&apos;<sp/>of<sp/>all<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>collected<sp/>until<sp/>now<sp/>and<sp/>change<sp/>the<sp/>allocable<sp/>restriction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>variables<sp/>that<sp/>come<sp/>after.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;GpVar*&gt;(op)-&gt;isGpbHi())<sp/>{</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;_allocableRegs<sp/>&amp;=<sp/>0x0F;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gpAllowedMask<sp/>!=<sp/>0xFF)<sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++)</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vaTmpList[j]._allocableRegs<sp/>&amp;=<sp/>vaTmpList[j].hasFlag(kVarAttrGpbHi)<sp/>?<sp/>0x0F<sp/>:<sp/>0xFF;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gpAllowedMask<sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(special<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>inReg<sp/>=<sp/>special[i].inReg;</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>outReg<sp/>=<sp/>special[i].outReg;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>c;</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;const<sp/>X86Reg*&gt;(op)-&gt;isGp())</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>;</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inReg<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>mask<sp/>=<sp/>IntUtil::mask(inReg);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inRegs.add(c,<sp/>mask);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addInRegs(mask);</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outReg<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>mask<sp/>=<sp/>IntUtil::mask(outReg);</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outRegs.add(c,<sp/>mask);</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setOutRegIndex(outReg);</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(special[i].flags);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>inFlags<sp/>=<sp/>kVarAttrInReg;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>outFlags<sp/>=<sp/>kVarAttrOutReg;</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>combinedFlags;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"></highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>for<sp/>the<sp/>first<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>inFlags<sp/>|<sp/>outFlags;</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Comparison/Test<sp/>instructions<sp/>never<sp/>modify<sp/>the<sp/>source<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;isTest())<sp/>{</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>inFlags;</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>instructions<sp/>typically<sp/>overwrite<sp/>the<sp/>first<sp/>operand,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>some<sp/>exceptions<sp/>based<sp/>on<sp/>the<sp/>operands&apos;<sp/>size<sp/>and<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;isMove())<sp/>{</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cvttsd2si/Cvttss2si.<sp/>In<sp/>32-bit<sp/>mode<sp/>the<sp/>whole<sp/>destination<sp/>is<sp/>replaced.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>64-bit<sp/>mode<sp/>we<sp/>need<sp/>to<sp/>check<sp/>whether<sp/>the<sp/>destination<sp/>operand<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>64-bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>kInstCvttsd2si<sp/>||<sp/>code<sp/>==<sp/>kInstCvttss2si)</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>vd-&gt;getSize()<sp/>&gt;<sp/>4<sp/>?<sp/>(op-&gt;isRegType(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>)<sp/>?<sp/>outFlags<sp/>:<sp/>inFlags<sp/>|<sp/>outFlags)<sp/>:<sp/>outFlags;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Movss/Movsd.<sp/>These<sp/>instructions<sp/>won&apos;t<sp/>overwrite<sp/>the<sp/>whole<sp/>register<sp/>if<sp/>move</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>between<sp/>two<sp/>registers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>kInstMovss<sp/>||<sp/>code<sp/>==<sp/>kInstMovsd)</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>opList[1].isMem()<sp/>?<sp/>outFlags<sp/>:<sp/>inFlags<sp/>|<sp/>outFlags;</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>outFlags;</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Imul.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>kInstImul<sp/>&amp;&amp;<sp/>opCount<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>outFlags;</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>for<sp/>secon/third<sp/>operands.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>inFlags;</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Xchg/Xadd/Imul/Idiv.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;isXchg()<sp/>||<sp/>(code<sp/>==<sp/>kInstImul<sp/>&amp;&amp;<sp/>opCount<sp/>==<sp/>3<sp/>&amp;&amp;<sp/>i<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>inFlags<sp/>|<sp/>outFlags;</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(combinedFlags);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;isMem())<sp/>{</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem*<sp/>m<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Mem*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(op);</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;setMemOpIndex(i);</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1OperandUtil_1ad7ffa13ea065b296ee99988e2827a95a" kindref="member" tooltip="Get whether the id refers to BaseVar.">OperandUtil::isVarId</ref>(m-&gt;getBase())<sp/>&amp;&amp;<sp/>m-&gt;isBaseIndexType())<sp/>{</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(m-&gt;getBase());</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vd-&gt;isStack())<sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_MERGE_VAR(vd,<sp/>va,<sp/>0,<sp/>gaRegs[vd-&gt;getClass()]<sp/>&amp;<sp/>gpAllowedMask);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;getMemType()<sp/>==<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrInReg);</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>inFlags<sp/>=<sp/>kVarAttrInMem;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>outFlags<sp/>=<sp/>kVarAttrOutMem;</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>combinedFlags;</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>for<sp/>the<sp/>first<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>inFlags<sp/>|<sp/>outFlags;</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Comparison/Test<sp/>instructions<sp/>never<sp/>modify<sp/>the<sp/>source<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;isTest())<sp/>{</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>inFlags;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>instructions<sp/>typically<sp/>overwrite<sp/>the<sp/>first<sp/>operand,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>are<sp/>some<sp/>exceptions<sp/>based<sp/>on<sp/>the<sp/>operands&apos;<sp/>size<sp/>and<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;isMove())<sp/>{</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Movss.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>kInstMovss)</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>vd-&gt;getSize()<sp/>==<sp/>4<sp/>?<sp/>outFlags<sp/>:<sp/>inFlags<sp/>|<sp/>outFlags;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Movsd.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(code<sp/>==<sp/>kInstMovsd)</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>vd-&gt;getSize()<sp/>==<sp/>8<sp/>?<sp/>outFlags<sp/>:<sp/>inFlags<sp/>|<sp/>outFlags;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>outFlags;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>for<sp/>the<sp/>second<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>inFlags;</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info-&gt;isXchg())</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>combinedFlags<sp/>=<sp/>inFlags<sp/>|<sp/>outFlags;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(combinedFlags);</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1OperandUtil_1ad7ffa13ea065b296ee99988e2827a95a" kindref="member" tooltip="Get whether the id refers to BaseVar.">OperandUtil::isVarId</ref>(m-&gt;getIndex()))<sp/>{</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restrict<sp/>allocation<sp/>to<sp/>all<sp/>registers<sp/>except<sp/>ESP/RSP/R12.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(m-&gt;getIndex());</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_MERGE_VAR(vd,<sp/>va,<sp/>0,<sp/>gaRegs[<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>]<sp/>&amp;<sp/>gpAllowedMask);</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;andAllocableRegs(indexMask);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrInReg);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;setFlags(flags);</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vaCount)<sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>instructions<sp/>which<sp/>result<sp/>in<sp/>zeros/ones<sp/>or<sp/>nop<sp/>if<sp/>used<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>destination<sp/>and<sp/>source<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vaCount<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>opCount<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>opList[0].isVar()<sp/>&amp;&amp;<sp/>opList[1].isVar()<sp/>&amp;&amp;<sp/>!node-&gt;hasMemOp())</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64Context_prepareSingleVarInst(code,<sp/>&amp;vaTmpList[0]);</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"></highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_END(node_);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"></highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>conditional/unconditional<sp/>jump.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;isJmpOrJcc())<sp/>{</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JumpNode*<sp/>jNode<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">JumpNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node);</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseNode*<sp/>jNext<sp/>=<sp/>jNode-&gt;getNext();</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetNode*<sp/>jTarget<sp/>=<sp/>jNode-&gt;getTarget();</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>jump<sp/>is<sp/>unconditional<sp/>we<sp/>put<sp/>next<sp/>node<sp/>to<sp/>unreachable<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>so<sp/>we<sp/>can<sp/>eliminate<sp/>possible<sp/>dead<sp/>code.<sp/>We<sp/>have<sp/>to<sp/>do<sp/>this<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>cases<sp/>since<sp/>we<sp/>are<sp/>unable<sp/>to<sp/>translate<sp/>without<sp/>fetch()<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>also<sp/>advance<sp/>our<sp/>node<sp/>pointer<sp/>to<sp/>the<sp/>target<sp/>node<sp/>to<sp/>simulate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>natural<sp/>flow<sp/>of<sp/>the<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jNode-&gt;isJmp())<sp/>{</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!jNext-&gt;isFetched())</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASMJIT_PROPAGATE_ERROR(X86X64Context_addUnreachableNode(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>jNext));</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"></highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>jTarget;</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Do;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jTarget-&gt;isFetched())<sp/>{</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>jTargetFlowId<sp/>=<sp/>jTarget-&gt;getFlowId();</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>kNodeFlagIsTaken<sp/>flag<sp/>to<sp/>true<sp/>if<sp/>this<sp/>is<sp/>a<sp/>conditional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>backward<sp/>jump.<sp/>This<sp/>behavior<sp/>can<sp/>be<sp/>overridden<sp/>by<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kCondHintUnlikely<sp/>when<sp/>the<sp/>instruction<sp/>is<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!jNode-&gt;isTaken()<sp/>&amp;&amp;<sp/>opCount<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>jTargetFlowId<sp/>&lt;=<sp/>flowId)<sp/>{</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jNode-&gt;addFlags(kNodeFlagIsTaken);</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jNext-&gt;isFetched())<sp/>{</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>jTarget;</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Do;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASMJIT_PROPAGATE_ERROR(X86X64Context_addJccNode(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>jNode));</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>X86X64Context_getJccFlow(jNode);</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Do;</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Func]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeFunc:<sp/>{</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node_<sp/>==<sp/>func);</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64FuncDecl*<sp/>decl<sp/>=<sp/>func-&gt;getDecl();</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_BEGIN();</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0,<sp/>argCount<sp/>=<sp/>decl-&gt;getArgCount();<sp/>i<sp/>&lt;<sp/>argCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/>decl-&gt;getArg(i);</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>func-&gt;getArg(i);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Overlapped<sp/>function<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;getVa()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compiler-&gt;setError(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afae9cd29c4aecbbf8c96e5800dc01b7f37" kindref="member" tooltip="Tried to generate a function with overlapped arguments.">kErrorCompilerOverlappedArgs</ref>);</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_ADD_VAR(vd,<sp/>va,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aType<sp/>=<sp/>arg.getVarType();</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>vType<sp/>=<sp/>vd-&gt;getType();</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.hasRegIndex())<sp/>{</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86VarTypeToClass(aType)<sp/>==<sp/>vd-&gt;getClass())<sp/>{</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrOutReg);</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setOutRegIndex(arg.getRegIndex());</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrOutConv);</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x86VarTypeToClass(aType)<sp/>==<sp/>vd-&gt;getClass())<sp/>||</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref><sp/>&amp;&amp;<sp/>aType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>)<sp/>||</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(vType<sp/>==<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref><sp/>&amp;&amp;<sp/>aType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrOutMem);</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>Not<sp/>implemented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_END(node_);</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"></highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeEnd:<sp/>{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NextGroup;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"></highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Ret]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeRet:<sp/>{</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RetNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RetNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64FuncDecl*<sp/>decl<sp/>=<sp/>func-&gt;getDecl();</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decl-&gt;hasRet())<sp/>{</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncInOut&amp;<sp/>ret<sp/>=<sp/>decl-&gt;getRet(0);</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>retClass<sp/>=<sp/>x86VarTypeToClass(ret.getVarType());</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_BEGIN();</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Operand*<sp/>op<sp/>=<sp/>&amp;node-&gt;_ret[i];</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"></highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;isVar())<sp/>{</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(op-&gt;getId());</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va;</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;getClass()<sp/>==<sp/>retClass)<sp/>{</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>Fix<sp/>RetNode<sp/>fetch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_MERGE_VAR(vd,<sp/>va,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setInRegs(i<sp/>==<sp/>0<sp/>?<sp/>IntUtil::mask(<ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>)<sp/>:<sp/>IntUtil::mask(<ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" kindref="member" tooltip="Index of DL/DH/DX/EDX/RDX registers.">kRegIndexDx</ref>));</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrInReg);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inRegs.add(retClass,<sp/>va-&gt;getInRegs());</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_END(node_);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Call]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeCall:<sp/>{</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64CallNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">X86X64CallNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64FuncDecl*<sp/>decl<sp/>=<sp/>node-&gt;getDecl();</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"></highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Operand*<sp/>target<sp/>=<sp/>&amp;node-&gt;_target;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Operand*<sp/>argList<sp/>=<sp/>node-&gt;_args;</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Operand*<sp/>retList<sp/>=<sp/>node-&gt;_ret;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;addFuncFlags(kFuncFlagIsCaller);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;mergeCallStackSize(node-&gt;_x86Decl.getArgStackSize());</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;_usedArgs<sp/>=<sp/>X86X64Context_getUsedArgs(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>node,<sp/>decl);</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>argCount<sp/>=<sp/>decl-&gt;getArgCount();</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>sArgCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>gpAllocableMask<sp/>=<sp/>gaRegs[<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>]<sp/>&amp;<sp/>~node-&gt;_usedArgs.get(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd;</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_BEGIN();</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function-call<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target-&gt;isVar())<sp/>{</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(target-&gt;getId());</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_MERGE_VAR(vd,<sp/>va,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"></highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrInReg<sp/>|<sp/>kVarAttrInCall);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va-&gt;getInRegs()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addAllocableRegs(gpAllocableMask);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(target-&gt;isMem())<sp/>{</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem*<sp/>m<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Mem*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(target);</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1OperandUtil_1ad7ffa13ea065b296ee99988e2827a95a" kindref="member" tooltip="Get whether the id refers to BaseVar.">OperandUtil::isVarId</ref>(m-&gt;getBase())<sp/>&amp;&amp;<sp/>m-&gt;isBaseIndexType())<sp/>{</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(m-&gt;getBase());</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vd-&gt;isStack())<sp/>{</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_MERGE_VAR(vd,<sp/>va,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;getMemType()<sp/>==<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrInReg<sp/>|<sp/>kVarAttrInCall);</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va-&gt;getInRegs()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addAllocableRegs(gpAllocableMask);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrInMem<sp/>|<sp/>kVarAttrInCall);</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1OperandUtil_1ad7ffa13ea065b296ee99988e2827a95a" kindref="member" tooltip="Get whether the id refers to BaseVar.">OperandUtil::isVarId</ref>(m-&gt;getIndex()))<sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restrict<sp/>allocation<sp/>to<sp/>all<sp/>registers<sp/>except<sp/>ESP/RSP/R12.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(m-&gt;getIndex());</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_MERGE_VAR(vd,<sp/>va,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"></highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrInReg<sp/>|<sp/>kVarAttrInCall);</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((va-&gt;getInRegs()<sp/>&amp;<sp/>~indexMask)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;andAllocableRegs(gpAllocableMask<sp/>&amp;<sp/>indexMask);</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function-call<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>argCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Operand*<sp/>op<sp/>=<sp/>&amp;argList[i];</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op-&gt;isVar())</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(op-&gt;getId());</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/>decl-&gt;getArg(i);</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"></highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.hasRegIndex())<sp/>{</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_MERGE_VAR(vd,<sp/>va,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>argType<sp/>=<sp/>arg.getVarType();</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>argClass<sp/>=<sp/>x86VarTypeToClass(argType);</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"></highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;getClass()<sp/>==<sp/>argClass)<sp/>{</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addInRegs(IntUtil::mask(arg.getRegIndex()));</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrInReg<sp/>|<sp/>kVarAttrInArg);</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrInConv<sp/>|<sp/>kVarAttrInArg);</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>this<sp/>is<sp/>a<sp/>stack-based<sp/>argument<sp/>we<sp/>insert<sp/>SArgNode<sp/>instead<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>VarAttr.<sp/>It<sp/>improves<sp/>the<sp/>code,<sp/>because<sp/>the<sp/>argument<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>moved<sp/>onto<sp/>stack<sp/>as<sp/>soon<sp/>as<sp/>it<sp/>is<sp/>ready<sp/>and<sp/>the<sp/>register<sp/>used<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>variable<sp/>can<sp/>be<sp/>reused<sp/>for<sp/>something<sp/>else.<sp/>It<sp/>is<sp/>also<sp/>much<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>easier<sp/>to<sp/>handle<sp/>argument<sp/>conversions,<sp/>because<sp/>there<sp/>will<sp/>be<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>most<sp/>only<sp/>one<sp/>node<sp/>per<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(X86X64Context_insertSArgNode(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>node,<sp/>vd,<sp/>gaRegs,<sp/>arg,<sp/>i,<sp/>sArgList,<sp/>sArgCount)<sp/>!=<sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>)</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function-call<sp/>return(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Operand*<sp/>op<sp/>=<sp/>&amp;retList[i];</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op-&gt;isVar())</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncInOut&amp;<sp/>ret<sp/>=<sp/>decl-&gt;getRet(i);</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret.hasRegIndex())<sp/>{</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>retType<sp/>=<sp/>ret.getVarType();</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>retClass<sp/>=<sp/>x86VarTypeToClass(retType);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(op-&gt;getId());</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_MERGE_VAR(vd,<sp/>va,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"></highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;getClass()<sp/>==<sp/>retClass)<sp/>{</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setOutRegIndex(ret.getRegIndex());</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrOutReg<sp/>|<sp/>kVarAttrOutRet);</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrOutConv<sp/>|<sp/>kVarAttrOutRet);</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"></highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>clobbered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clobberedRegs.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::bits(_baseRegsCount)<sp/>&amp;<sp/>(~decl-&gt;getPreserved(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>)));</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clobberedRegs.set(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578ebae14f8090017d61ea34f01c8f355096fa" kindref="member" tooltip="X86/X64 Fp register class.">kRegClassFp</ref>,<sp/>IntUtil::bits(<ref refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ae822edf24ff7b052c18a6535f1a6d1a5" kindref="member" tooltip="Count of Fp registers (8).">kRegCountFp</ref><sp/><sp/><sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clobberedRegs.set(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>,<sp/>IntUtil::bits(<ref refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ac38cb5c433e088c7070177aa364ab296" kindref="member" tooltip="Count of Mm registers (8).">kRegCountMm</ref><sp/><sp/><sp/>)<sp/>&amp;<sp/>(~decl-&gt;getPreserved(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>)));</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clobberedRegs.set(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>,<sp/>IntUtil::bits(_baseRegsCount)<sp/>&amp;<sp/>(~decl-&gt;getPreserved(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>)));</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"></highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VI_END(node_);</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node_<sp/>!=<sp/>stop);</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal">_Done:</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Failure]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2581"><highlight class="normal"></highlight></codeline>
<codeline lineno="2582"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>compiler-&gt;setError(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>Analyze]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2590"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="2591"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LivenessTarget<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2592"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Previous.</highlight></codeline>
<codeline lineno="2593"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>LivenessTarget*<sp/>prev;</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2595"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Target<sp/>node.</highlight></codeline>
<codeline lineno="2596"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>TargetNode*<sp/>node;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2597"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Jumped<sp/>from.</highlight></codeline>
<codeline lineno="2598"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>JumpNode*<sp/>from;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal">Error<sp/>X86X64Context::analyze()<sp/>{</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/>FuncNode*<sp/>func<sp/>=<sp/>getFunc();</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node<sp/>=<sp/>func-&gt;getEnd();</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/>JumpNode*<sp/>from<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/>uint32_t<sp/>bLen<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/>((_contextVd.getLength()<sp/>+<sp/>VarBits::kEntityBits<sp/>-<sp/>1)<sp/>/<sp/>VarBits::kEntityBits));</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/>LivenessTarget*<sp/>ltCur<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/>LivenessTarget*<sp/>ltUnused<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bLen<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/>VarBits*<sp/>bCur<sp/>=<sp/>newBits(bLen);</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bCur<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"></highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>bits<sp/>for<sp/>code<sp/>visited<sp/>first<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2622"><highlight class="normal">_OnVisit:</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;hasLiveness())<sp/>{</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bCur-&gt;_addBitsDelSource(node-&gt;getLiveness(),<sp/>bCur,<sp/>bLen))</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnPatch;</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnDone;</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/>VarBits*<sp/>bTmp<sp/>=<sp/>copyBits(bCur,<sp/>bLen);</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/>VarInst*<sp/>vi<sp/>=<sp/>node-&gt;getVarInst&lt;VarInst&gt;();</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bTmp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>node-&gt;setLiveness(bTmp);</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"></highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>vaCount<sp/>=<sp/>vi-&gt;getVaCount();</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vaCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>vi-&gt;getVa(i);</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>flags<sp/>=<sp/>va-&gt;getFlags();</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>ctxId<sp/>=<sp/>vd-&gt;getContextId();</highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((flags<sp/>&amp;<sp/>kVarAttrOutAll)<sp/>&amp;&amp;<sp/>!(flags<sp/>&amp;<sp/>kVarAttrInAll))<sp/>{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write-Only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bTmp-&gt;setBit(ctxId);</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bCur-&gt;delBit(ctxId);</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read-Only<sp/>or<sp/>Read/Write.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bTmp-&gt;setBit(ctxId);</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bCur-&gt;setBit(ctxId);</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"></highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;getType()<sp/>==<sp/>kNodeTypeTarget)</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnTarget;</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>func)</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnDone;</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node-&gt;getPrev());</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;getPrev();</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Patch<sp/>already<sp/>generated<sp/>liveness<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal">_OnPatch:</highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node-&gt;hasLiveness());</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/>VarBits*<sp/>bNode<sp/>=<sp/>node-&gt;getLiveness();</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bNode-&gt;_addBitsDelSource(bCur,<sp/>bLen))</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnDone;</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;getType()<sp/>==<sp/>kNodeTypeTarget)</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnTarget;</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node<sp/>==<sp/>func)</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnDone;</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;getPrev();</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal">_OnTarget:</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;TargetNode*&gt;(node)-&gt;getNumRefs()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>a<sp/>new<sp/>LivenessTarget<sp/>on<sp/>the<sp/>stack<sp/>if<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltCur<sp/>==<sp/>NULL<sp/>||<sp/>ltCur-&gt;node<sp/>!=<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LivenessTarget*<sp/>ltTmp<sp/>=<sp/>ltUnused;</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"></highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltTmp<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ltUnused<sp/>=<sp/>ltUnused-&gt;prev;</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ltTmp<sp/>=<sp/>_zoneAllocator.allocT&lt;LivenessTarget&gt;(</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(LivenessTarget)<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(VarBits)<sp/>+<sp/>bLen<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uintptr_t));</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltTmp<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NoMemory;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltTmp-&gt;prev<sp/>=<sp/>ltCur;</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltTmp-&gt;node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TargetNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node);</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltCur<sp/>=<sp/>ltTmp;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TargetNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node)-&gt;getFrom();</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(from<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/>ltCur-&gt;from;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnJumpNext;</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Visit/Patch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltCur-&gt;from<sp/>=<sp/>from;</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bCur-&gt;copyBits(node-&gt;getLiveness(),<sp/>bLen);</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!from-&gt;hasLiveness())<sp/>{</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>from;</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnVisit;</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bCur-&gt;delBits(from-&gt;getLiveness(),<sp/>bLen))<sp/>{</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>from;</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnPatch;</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal">_OnJumpNext:</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>=<sp/>from-&gt;getJumpNext();</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(from<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pop<sp/>the<sp/>current<sp/>LivenessTarget<sp/>from<sp/>the<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>LivenessTarget*<sp/>ltTmp<sp/>=<sp/>ltCur;</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltCur<sp/>=<sp/>ltCur-&gt;prev;</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltTmp-&gt;prev<sp/>=<sp/>ltUnused;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ltUnused<sp/>=<sp/>ltTmp;</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"></highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/>bCur-&gt;copyBits(node-&gt;getLiveness(),<sp/>bLen);</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/>node<sp/>=<sp/>node-&gt;getPrev();</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;isJmp()<sp/>||<sp/>!node-&gt;isFetched())</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnDone;</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node-&gt;hasLiveness())</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnVisit;</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bCur-&gt;delBits(node-&gt;getLiveness(),<sp/>bLen))</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnPatch;</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"></highlight></codeline>
<codeline lineno="2758"><highlight class="normal">_OnDone:</highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ltCur<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>ltCur-&gt;node;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/>from<sp/>=<sp/>ltCur-&gt;from;</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_OnJumpNext;</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal">_NoMemory:</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setError(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afad67d4600b430546fd73a6a83b950818e" kindref="member" tooltip="Heap memory allocation failed.">kErrorNoHeapMemory</ref>);</highlight></codeline>
<codeline lineno="2769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>Annotate]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context_annotateVariable(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/>StringBuilder&amp;<sp/>sb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VarData*<sp/>vd)<sp/>{</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>vd-&gt;getName();</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>name[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/>sb.appendString(name);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/>sb.appendChar(</highlight><highlight class="charliteral">&apos;v&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/>sb.appendUInt(vd-&gt;getId()<sp/>&amp;<sp/><ref refid="group__asmjit__base_1gga1941577d59c9d0f61a4bcde8c19ec9c5a57978d4fcf92c565ed3798a59dfd3eda" kindref="member" tooltip="Operand id to real index mask.">kOperandIdNum</ref>);</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2786"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context_annotateOperand(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/>StringBuilder&amp;<sp/>sb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand*<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;isVar())<sp/>{</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>X86X64Context_annotateVariable(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>sb,<sp/>self-&gt;_compiler-&gt;getVdById(op-&gt;getId()));</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;isMem())<sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mem*<sp/>m<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Mem*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(op);</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isAbsolute<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/>sb.appendChar(</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(m-&gt;getMemType())<sp/>{</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>:</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>:</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[base<sp/>+<sp/>index<sp/>&lt;&lt;<sp/>shift<sp/>+<sp/>displacement]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64Context_annotateVariable(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>sb,<sp/>self-&gt;_compiler-&gt;getVdById(m-&gt;getBase()));</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"></highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7cae82bd56fa0b87db8b547e91bd69ac096" kindref="member" tooltip="Memory operand refers to the memory location specified by a label.">kMemTypeLabel</ref>:</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[label<sp/>+<sp/>index<sp/>&lt;&lt;<sp/>shift<sp/>+<sp/>displacement]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendFormat(</highlight><highlight class="stringliteral">&quot;L%u&quot;</highlight><highlight class="normal">,<sp/>m-&gt;getBase());</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"></highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca1af22cea9780418b75dcac75808743ac" kindref="member" tooltip="Memory operand is an absolute memory location.">kMemTypeAbsolute</ref>:</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[absolute]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isAbsolute<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendUInt(static_cast&lt;uint32_t&gt;(m-&gt;getDisplacement()),<sp/>16);</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;hasIndex())<sp/>{</highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendChar(</highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>X86X64Context_annotateVariable(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>sb,<sp/>self-&gt;_compiler-&gt;getVdById(m-&gt;getIndex()));</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;getShift())<sp/>{</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendChar(</highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendChar(</highlight><highlight class="stringliteral">&quot;1248&quot;</highlight><highlight class="normal">[m-&gt;getShift()<sp/>&amp;<sp/>3]);</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;getDisplacement()<sp/>&amp;&amp;<sp/>!isAbsolute)<sp/>{</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>base<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>dispOffset<sp/>=<sp/>m-&gt;getDisplacement();</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"></highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>prefix<sp/>=<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dispOffset<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dispOffset<sp/>=<sp/>-dispOffset;</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendChar(prefix);</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>((loggerOptions<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>kLoggerOptionHexDisplacement))<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>dispOffset<sp/>&gt;<sp/>9)<sp/>{</highlight></codeline>
<codeline lineno="2841"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendString(&quot;0x&quot;,<sp/>2);</highlight></codeline>
<codeline lineno="2842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="2843"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2844"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendUInt(static_cast&lt;uint32_t&gt;(dispOffset),<sp/>base);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/>sb.appendChar(</highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;isImm())<sp/>{</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Imm*<sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Imm*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(op);</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>val<sp/>=<sp/>i-&gt;getInt64();</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2855"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>((loggerOptions<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>kLoggerOptionHexImmediate))<sp/>&amp;&amp;<sp/>static_cast&lt;uint64_t&gt;(val)<sp/>&gt;<sp/>9)</highlight></codeline>
<codeline lineno="2856"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendUInt(static_cast&lt;uint64_t&gt;(val),<sp/>16);</highlight></codeline>
<codeline lineno="2857"><highlight class="comment"><sp/><sp/><sp/><sp/>else*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendInt(val,<sp/>10);</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;isLabel())<sp/>{</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/>sb.appendFormat(</highlight><highlight class="stringliteral">&quot;L%u&quot;</highlight><highlight class="normal">,<sp/>op-&gt;getId());</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/>sb.appendString(</highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2866"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>X86X64Context_annotateInstruction(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/>StringBuilder&amp;<sp/>sb,<sp/>uint32_t<sp/>code,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand*<sp/>opList,<sp/>uint32_t<sp/>opCount)<sp/>{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/>sb.appendString(_instInfo[code].getName());</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>opCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendChar(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendString(</highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/>X86X64Context_annotateOperand(</highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>sb,<sp/>&amp;opList[i]);</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal">Error<sp/>X86X64Context::annotate()<sp/>{</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/>FuncNode*<sp/>func<sp/>=<sp/>getFunc();</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node_<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>end<sp/>=<sp/>func-&gt;getEnd();</highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/>Zone&amp;<sp/>sa<sp/>=<sp/>_compiler-&gt;_stringAllocator;</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/>StringBuilderT&lt;128&gt;<sp/>sb;</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/>uint32_t<sp/>maxLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2892"><highlight class="normal"></highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node_<sp/>!=<sp/>end)<sp/>{</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;getComment()<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;getType()<sp/>==<sp/>kNodeTypeInst)<sp/>{</highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64Context_annotateInstruction(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>sb,<sp/>node-&gt;getCode(),<sp/>node-&gt;getOpList(),<sp/>node-&gt;getOpCount());</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_-&gt;setComment(static_cast&lt;char*&gt;(sa.dup(sb.getData(),<sp/>sb.getLength()<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxLen<sp/>=<sp/>IntUtil::iMax&lt;uint32_t&gt;(maxLen,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(sb.getLength()));</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"></highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.clear();</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>node_-&gt;getNext();</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/>_annotationLength<sp/>=<sp/>maxLen<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="2911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64BaseAlloc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">X86X64BaseAlloc<sp/>{</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"></highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64BaseAlloc(X86X64Context*<sp/>context)<sp/>{</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/>_context<sp/>=<sp/>context;</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/>_compiler<sp/>=<sp/>context-&gt;getCompiler();</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>~X86X64BaseAlloc()<sp/>{}</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"></highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2932"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>context.</highlight></codeline>
<codeline lineno="2933"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64Context*<sp/>getContext()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_context;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2934"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>current<sp/>state<sp/>(always<sp/>the<sp/>same<sp/>instance<sp/>as<sp/>X86X64Context::_x86State).</highlight></codeline>
<codeline lineno="2935"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarState*<sp/>getState()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_context-&gt;getState();<sp/>}</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2937"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>node.</highlight></codeline>
<codeline lineno="2938"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>BaseNode*<sp/>getNode()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_node;<sp/>}</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2940"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>VarAttr<sp/>list<sp/>(all).</highlight></codeline>
<codeline lineno="2941"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarAttr*<sp/>getVaList()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_vaList[0];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2942"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>VarAttr<sp/>list<sp/>(per<sp/>class).</highlight></codeline>
<codeline lineno="2943"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>VarAttr*<sp/>getVaListByClass(uint32_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_vaList[c];<sp/>}</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2945"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>VarAttr<sp/>count<sp/>(all).</highlight></codeline>
<codeline lineno="2946"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getVaCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_vaCount;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2947"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>VarAttr<sp/>count<sp/>(per<sp/>class).</highlight></codeline>
<codeline lineno="2948"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getVaCountByClass(uint32_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_count.get(c);<sp/>}</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2950"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>all<sp/>variables<sp/>of<sp/>class<sp/>@a<sp/>c<sp/>are<sp/>done.</highlight></codeline>
<codeline lineno="2951"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isVaDone(uint32_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_done.get(c)<sp/>==<sp/>_count.get(c);<sp/>}</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2953"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>how<sp/>many<sp/>variables<sp/>have<sp/>been<sp/>allocated.</highlight></codeline>
<codeline lineno="2954"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getVaDone(uint32_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_done.get(c);<sp/>}</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addVaDone(uint32_t<sp/>c,<sp/>uint32_t<sp/>n<sp/>=<sp/>1)<sp/>{<sp/>_done.add(c,<sp/>n);<sp/>}</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2958"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>number<sp/>of<sp/>allocable<sp/>registers<sp/>per<sp/>class.</highlight></codeline>
<codeline lineno="2959"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getGaRegs(uint32_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_context-&gt;_gaRegs[c];</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"></highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Init<sp/>/<sp/>Cleanup]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2966"><highlight class="normal"></highlight></codeline>
<codeline lineno="2967"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>to<sp/>prevent<sp/>calling<sp/>these<sp/>methods<sp/>by<sp/>X86X64Context::translate().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2969"><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(BaseNode*<sp/>node,<sp/>VarInst*<sp/>vi);</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Unuse]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unuseBefore();</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"></highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unuseAfter();</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2987"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Context.</highlight></codeline>
<codeline lineno="2988"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>X86X64Context*<sp/>_context;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2989"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compiler.</highlight></codeline>
<codeline lineno="2990"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>_compiler;</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2992"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Node.</highlight></codeline>
<codeline lineno="2993"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>BaseNode*<sp/>_node;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2995"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>instructions.</highlight></codeline>
<codeline lineno="2996"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>VarInst*<sp/>_vi;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2997"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>VarAttr<sp/>list<sp/>(per<sp/>register<sp/>class).</highlight></codeline>
<codeline lineno="2998"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>VarAttr*<sp/>_vaList[4];</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3000"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>all<sp/>VarAttr&apos;s.</highlight></codeline>
<codeline lineno="3001"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/>_vaCount;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3003"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>VarAttr&apos;s<sp/>total<sp/>counter.</highlight></codeline>
<codeline lineno="3004"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>RegCount<sp/>_count;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3005"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>VarAttr&apos;s<sp/>done<sp/>counter.</highlight></codeline>
<codeline lineno="3006"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>RegCount<sp/>_done;</highlight></codeline>
<codeline lineno="3007"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64BaseAlloc<sp/>-<sp/>Init<sp/>/<sp/>Cleanup]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3012"><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64BaseAlloc::init(BaseNode*<sp/>node,<sp/>VarInst*<sp/>vi)<sp/>{</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/>_node<sp/>=<sp/>node;</highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/>_vi<sp/>=<sp/>vi;</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>set<sp/>the<sp/>correct<sp/>cursor<sp/>in<sp/>case<sp/>any<sp/>instruction<sp/>is<sp/>emitted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>during<sp/>the<sp/>allocation<sp/>phase;<sp/>it<sp/>has<sp/>to<sp/>be<sp/>emitted<sp/>before<sp/>the<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>instruction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/>_compiler-&gt;_setCursor(node-&gt;getPrev());</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>the<sp/>lists<sp/>of<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>vi-&gt;getVaList();</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/>_vaList[<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>]<sp/>=<sp/>va;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/>_vaList[<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578ebae14f8090017d61ea34f01c8f355096fa" kindref="member" tooltip="X86/X64 Fp register class.">kRegClassFp</ref>]<sp/>=<sp/>va<sp/>+<sp/>vi-&gt;getVaStart(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578ebae14f8090017d61ea34f01c8f355096fa" kindref="member" tooltip="X86/X64 Fp register class.">kRegClassFp</ref>);</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/>_vaList[<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>]<sp/>=<sp/>va<sp/>+<sp/>vi-&gt;getVaStart(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>);</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/><sp/><sp/>_vaList[<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>]<sp/>=<sp/>va<sp/>+<sp/>vi-&gt;getVaStart(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>);</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>counters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/>_vaCount<sp/>=<sp/>vi-&gt;getVaCount();</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/>_count<sp/>=<sp/>vi-&gt;_count;</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/>_done.reset();</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect<sp/>Vd-&gt;Va.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_vaCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;_vaList[0][i];</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/>vd-&gt;setVa(va);</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3044"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64BaseAlloc::cleanup()<sp/>{</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Disconnect<sp/>Vd-&gt;Va.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_vaCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;_vaList[0][i];</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/>vd-&gt;setVa(NULL);</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3055"><highlight class="normal"></highlight></codeline>
<codeline lineno="3056"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64BaseAlloc<sp/>-<sp/>Unuse]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64BaseAlloc::unuseBefore()<sp/>{</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/>VarAttr*<sp/>list<sp/>=<sp/>getVaListByClass(C);</highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>getVaCountByClass(C);</highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>checkFlags<sp/>=</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/>kVarAttrInOutReg<sp/>|</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/>kVarAttrInMem<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/>kVarAttrInArg<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/><sp/><sp/>kVarAttrInCall<sp/><sp/><sp/>|</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/>kVarAttrInConv<sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="3071"><highlight class="normal"></highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((va-&gt;getFlags()<sp/>&amp;<sp/>checkFlags)<sp/>==<sp/>kVarAttrOutReg)<sp/>{</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;unuse&lt;C&gt;(va-&gt;getVd());</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3082"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64BaseAlloc::unuseAfter()<sp/>{</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/>VarAttr*<sp/>list<sp/>=<sp/>getVaListByClass(C);</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>getVaCountByClass(C);</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"></highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va-&gt;getFlags()<sp/>&amp;<sp/>kVarAttrUnuse)</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;unuse&lt;C&gt;(va-&gt;getVd());</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64VarAlloc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3098"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="3099"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="3100"><highlight class="comment">//!<sp/>@brief<sp/>Register<sp/>allocator<sp/>context<sp/>(asm<sp/>instructions).</highlight></codeline>
<codeline lineno="3101"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">X86X64VarAlloc<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>X86X64BaseAlloc<sp/>{</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64VarAlloc(X86X64Context*<sp/>context)<sp/>:<sp/>X86X64BaseAlloc(context)<sp/>{}</highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>~X86X64VarAlloc()<sp/>{}</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"></highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Run]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>run(BaseNode*<sp/>node);</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Init<sp/>/<sp/>Cleanup]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>to<sp/>prevent<sp/>calling<sp/>these<sp/>methods<sp/>by<sp/>X86X64Context::translate().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(BaseNode*<sp/>node,<sp/>VarInst*<sp/>vi);</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Plan<sp/>/<sp/>Spill<sp/>/<sp/>Alloc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>plan();</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spill();</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"></highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alloc();</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[GuessAlloc<sp/>/<sp/>GuessSpill]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3142"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Guess<sp/>which<sp/>register<sp/>is<sp/>the<sp/>best<sp/>candidate<sp/>for<sp/>&apos;vd&apos;<sp/>from</highlight></codeline>
<codeline lineno="3143"><highlight class="comment"><sp/><sp/>//!<sp/>&apos;allocableRegs&apos;.</highlight></codeline>
<codeline lineno="3144"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="3145"><highlight class="comment"><sp/><sp/>//!<sp/>The<sp/>guess<sp/>is<sp/>based<sp/>on<sp/>looking<sp/>ahead<sp/>and<sp/>inspecting<sp/>register<sp/>allocator</highlight></codeline>
<codeline lineno="3146"><highlight class="comment"><sp/><sp/>//!<sp/>instructions.<sp/>The<sp/>main<sp/>reason<sp/>is<sp/>to<sp/>prevent<sp/>allocation<sp/>to<sp/>a<sp/>register</highlight></codeline>
<codeline lineno="3147"><highlight class="comment"><sp/><sp/>//!<sp/>which<sp/>is<sp/>needed<sp/>by<sp/>next<sp/>instruction(s).<sp/>The<sp/>guess<sp/>look<sp/>tries<sp/>to<sp/>go<sp/>as<sp/>far</highlight></codeline>
<codeline lineno="3148"><highlight class="comment"><sp/><sp/>//!<sp/>as<sp/>possible,<sp/>after<sp/>the<sp/>remaining<sp/>registers<sp/>are<sp/>zero,<sp/>the<sp/>mask<sp/>of<sp/>previous</highlight></codeline>
<codeline lineno="3149"><highlight class="comment"><sp/><sp/>//!<sp/>registers<sp/>(called<sp/>&apos;safeRegs&apos;)<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="3150"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>guessAlloc(VarData*<sp/>vd,<sp/>uint32_t<sp/>allocableRegs);</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3153"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Guess<sp/>whether<sp/>to<sp/>move<sp/>the<sp/>given<sp/>&apos;vd&apos;<sp/>instead<sp/>of<sp/>spill.</highlight></codeline>
<codeline lineno="3154"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3155"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>guessSpill(VarData*<sp/>vd,<sp/>uint32_t<sp/>allocableRegs);</highlight></codeline>
<codeline lineno="3156"><highlight class="normal"></highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Modified]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>modified();</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"></highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3168"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Will<sp/>alloc<sp/>to<sp/>these<sp/>registers.</highlight></codeline>
<codeline lineno="3169"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>RegMask<sp/>_willAlloc;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3170"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Will<sp/>spill<sp/>these<sp/>registers.</highlight></codeline>
<codeline lineno="3171"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>RegMask<sp/>_willSpill;</highlight></codeline>
<codeline lineno="3172"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::X86X64VarAlloc<sp/>-<sp/>Run]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal">ASMJIT_INLINE<sp/>Error<sp/>X86X64VarAlloc::run(BaseNode*<sp/>node_)<sp/>{</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/>VarInst*<sp/>vi<sp/>=<sp/>node_-&gt;getVarInst&lt;VarInst&gt;();</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="3183"><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>allocator;<sp/>connect<sp/>Vd-&gt;Va.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/>init(node_,<sp/>vi);</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unuse<sp/>overwritten<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/>unuseBefore&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/>unuseBefore&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/>unuseBefore&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"></highlight></codeline>
<codeline lineno="3192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Plan<sp/>the<sp/>allocation.<sp/>Planner<sp/>assigns<sp/>input/output<sp/>registers<sp/>for<sp/>each</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variable<sp/>and<sp/>decides<sp/>whether<sp/>to<sp/>allocate<sp/>it<sp/>in<sp/>register<sp/>or<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/>plan&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/>plan&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/>plan&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Spill<sp/>all<sp/>variables<sp/>marked<sp/>by<sp/>plan().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/>spill&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/>spill&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"><sp/><sp/>spill&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Alloc<sp/>all<sp/>variables<sp/>marked<sp/>by<sp/>plan().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal"><sp/><sp/>alloc&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/>alloc&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/>alloc&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"></highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Translate<sp/>node<sp/>operands.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;getType()<sp/>==<sp/>kNodeTypeInst)<sp/>{</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/>ASMJIT_PROPAGATE_ERROR(X86X64Context_translateOperands(_context,<sp/>node-&gt;getOpList(),<sp/>node-&gt;getOpCount()));</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;getType()<sp/>==<sp/>kNodeTypeSArg)<sp/>{</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/>SArgNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">SArgNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/>X86X64CallNode*<sp/>call<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">X86X64CallNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node-&gt;getCall());</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/>X86X64FuncDecl*<sp/>decl<sp/>=<sp/>call-&gt;getDecl();</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>argIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>argMask<sp/>=<sp/>node-&gt;_args;</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>sVd<sp/>=<sp/>node-&gt;getSVd();</highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>cVd<sp/>=<sp/>node-&gt;getCVd();</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(sVd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cVd<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(cVd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;emitConvertVarToVar(</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cVd-&gt;getType(),<sp/>cVd-&gt;getRegIndex(),</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sVd-&gt;getType(),<sp/>sVd-&gt;getRegIndex());</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sVd<sp/>=<sp/>cVd;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(argMask<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argMask<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/>decl-&gt;getArg(argIndex);</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(arg.hasStackOffset());</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem<sp/>dst<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(_context-&gt;_zsp,<sp/>-static_cast&lt;int&gt;(_context-&gt;getRegSize())<sp/>+<sp/>arg.getStackOffset());</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;emitMoveVarOnStack(arg.getVarType(),<sp/>&amp;dst,<sp/>sVd-&gt;getType(),<sp/>sVd-&gt;getRegIndex());</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>argIndex++;</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>argMask<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>variables<sp/>as<sp/>modified.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/>modified&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/>modified&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/>modified&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanup;<sp/>disconnect<sp/>Vd-&gt;Va.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/>cleanup();</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>clobbered<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/>_context-&gt;_clobberedRegs.add(_willAlloc);</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/>_context-&gt;_clobberedRegs.add(vi-&gt;_clobberedRegs);</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unuse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/>unuseAfter&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/>unuseAfter&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/>unuseAfter&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="3268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"></highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64VarAlloc<sp/>-<sp/>Init<sp/>/<sp/>Cleanup]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64VarAlloc::init(BaseNode*<sp/>node,<sp/>VarInst*<sp/>vi)<sp/>{</highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/>X86X64BaseAlloc::init(node,<sp/>vi);</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"></highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>will<sp/>block<sp/>planner<sp/>from<sp/>assigning<sp/>them<sp/>during<sp/>planning.<sp/>Planner<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>more<sp/>registers<sp/>when<sp/>assigning<sp/>registers<sp/>to<sp/>variables<sp/>that<sp/>don&apos;t<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>specific<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3280"><highlight class="normal"><sp/><sp/>_willAlloc<sp/>=<sp/>vi-&gt;_inRegs;</highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/>_willAlloc.add(vi-&gt;_outRegs);</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/>_willSpill.reset();</highlight></codeline>
<codeline lineno="3283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64VarAlloc::cleanup()<sp/>{</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/>X86X64BaseAlloc::cleanup();</highlight></codeline>
<codeline lineno="3287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64VarAlloc<sp/>-<sp/>Plan<sp/>/<sp/>Spill<sp/>/<sp/>Alloc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64VarAlloc::plan()<sp/>{</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isVaDone(C))</highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"></highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/>uint32_t<sp/>willAlloc<sp/>=<sp/>_willAlloc.get(C);</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/>uint32_t<sp/>willFree<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3302"><highlight class="normal"></highlight></codeline>
<codeline lineno="3303"><highlight class="normal"><sp/><sp/>VarAttr*<sp/>list<sp/>=<sp/>getVaListByClass(C);</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>getVaCountByClass(C);</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"></highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/>VarState*<sp/>state<sp/>=<sp/>getState();</highlight></codeline>
<codeline lineno="3307"><highlight class="normal"><sp/><sp/>VarData**<sp/>sVars<sp/>=<sp/>state-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>&apos;willAlloc&apos;<sp/>and<sp/>&apos;willFree&apos;<sp/>masks<sp/>based<sp/>on<sp/>mandatory<sp/>masks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="3313"><highlight class="normal"></highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>vaFlags<sp/>=<sp/>va-&gt;getFlags();</highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>vd-&gt;getRegIndex();</highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>regMask<sp/>=<sp/>(regIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>?<sp/>IntUtil::mask(regIndex)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vaFlags<sp/>&amp;<sp/>kVarAttrInOutReg)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Planning<sp/>register<sp/>allocation.<sp/>First<sp/>check<sp/>whether<sp/>the<sp/>variable<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>allocated<sp/>in<sp/>register<sp/>and<sp/>if<sp/>it<sp/>can<sp/>stay<sp/>allocated<sp/>there.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>conditions<sp/>may<sp/>happen:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a)<sp/>Allocated<sp/>register<sp/>is<sp/>one<sp/>of<sp/>the<sp/>mandatoryRegs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>b)<sp/>Allocated<sp/>register<sp/>is<sp/>one<sp/>of<sp/>the<sp/>allocableRegs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>mandatoryRegs<sp/>=<sp/>va-&gt;getInRegs();</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>allocableRegs<sp/>=<sp/>va-&gt;getAllocableRegs();</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"></highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regMask<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>path<sp/>for<sp/>planning<sp/>output-only<sp/>registers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vaFlags<sp/>&amp;<sp/>kVarAttrInOutReg)<sp/>==<sp/>kVarAttrOutReg)<sp/>{</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>outRegIndex<sp/>=<sp/>va-&gt;getOutRegIndex();</highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mandatoryRegs<sp/>=<sp/>(outRegIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>?<sp/>IntUtil::mask(outRegIndex)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal"></highlight></codeline>
<codeline lineno="3335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mandatoryRegs<sp/>|<sp/>allocableRegs)<sp/>&amp;<sp/>regMask)<sp/>{</highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setOutRegIndex(regIndex);</highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrAllocOutDone);</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mandatoryRegs<sp/>&amp;<sp/>regMask)<sp/>{</highlight></codeline>
<codeline lineno="3340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>&apos;a&apos;<sp/>-<sp/>&apos;willAlloc&apos;<sp/>contains<sp/>initially<sp/>all<sp/>inRegs<sp/>from<sp/>all<sp/>VarAttr&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>((willAlloc<sp/>&amp;<sp/>regMask)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>&apos;b&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setOutRegIndex(regIndex);</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>willAlloc<sp/>|=<sp/>regMask;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"></highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mandatoryRegs<sp/>|<sp/>allocableRegs)<sp/>&amp;<sp/>regMask)<sp/>{</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setInRegIndex(regIndex);</highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mandatoryRegs<sp/>&amp;<sp/>regMask)<sp/>{</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>&apos;a&apos;<sp/>-<sp/>&apos;willAlloc&apos;<sp/>contains<sp/>initially<sp/>all<sp/>inRegs<sp/>from<sp/>all<sp/>VarAttr&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>((willAlloc<sp/>&amp;<sp/>regMask)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case<sp/>&apos;b&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addInRegs(regMask);</highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>willAlloc<sp/>|=<sp/>regMask;</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3367"><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"></highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Variable<sp/>is<sp/>not<sp/>allocated<sp/>or<sp/>allocated<sp/>in<sp/>register<sp/>that<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>match<sp/>inRegs<sp/>or<sp/>allocableRegs.<sp/>The<sp/>next<sp/>step<sp/>is<sp/>to<sp/>pick<sp/>the<sp/>best</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>register<sp/>for<sp/>this<sp/>variable.<sp/>If<sp/>inRegs<sp/>contains<sp/>any<sp/>register<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>decision<sp/>is<sp/>simple<sp/>-<sp/>we<sp/>have<sp/>to<sp/>follow,<sp/>in<sp/>other<sp/>case<sp/>will<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>advantage<sp/>of<sp/>guessAlloc()<sp/>to<sp/>find<sp/>a<sp/>register<sp/>(or<sp/>registers)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>looking<sp/>ahead.<sp/>But<sp/>the<sp/>best<sp/>way<sp/>to<sp/>find<sp/>a<sp/>good<sp/>register<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>here<sp/>since<sp/>now<sp/>we<sp/>have<sp/>no<sp/>information<sp/>about<sp/>the<sp/>registers<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>be<sp/>freed.<sp/>So<sp/>instead<sp/>of<sp/>finding<sp/>register<sp/>here,<sp/>we<sp/>just<sp/>mark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>current<sp/>register<sp/>(if<sp/>variable<sp/>is<sp/>allocated)<sp/>as<sp/>&apos;willFree&apos;<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>planner<sp/>can<sp/>use<sp/>this<sp/>information<sp/>in<sp/>second<sp/>step<sp/>to<sp/>plan<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocation<sp/>of<sp/>other<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>willFree<sp/>|=<sp/>regMask;</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Memory<sp/>access<sp/>-<sp/>if<sp/>variable<sp/>is<sp/>allocated<sp/>it<sp/>has<sp/>to<sp/>be<sp/>freed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regMask<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>willFree<sp/>|=<sp/>regMask;</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"></highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Occupied<sp/>registers<sp/>without<sp/>&apos;willFree&apos;<sp/>registers;<sp/>contains<sp/>basically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>registers<sp/>we<sp/>can<sp/>use<sp/>to<sp/>allocate<sp/>variables<sp/>without<sp/>inRegs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>speficied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/>uint32_t<sp/>occupied<sp/>=<sp/>state-&gt;_occupied.get(C)<sp/>&amp;<sp/>~willFree;</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>uint32_t<sp/>willSpill<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"></highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>best<sp/>registers<sp/>for<sp/>variables<sp/>that<sp/>are<sp/>not<sp/>allocated<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="3412"><highlight class="normal"></highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>vaFlags<sp/>=<sp/>va-&gt;getFlags();</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vaFlags<sp/>&amp;<sp/>kVarAttrInOutReg)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vaFlags<sp/>&amp;<sp/>kVarAttrInOutReg)<sp/>==<sp/>kVarAttrOutReg)<sp/>{</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vaFlags<sp/>&amp;<sp/>kVarAttrAllocOutDone)</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>skip<sp/>all<sp/>registers<sp/>that<sp/>have<sp/>assigned<sp/>outRegIndex.<sp/>The<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>important<sp/>thing<sp/>is<sp/>to<sp/>not<sp/>forget<sp/>to<sp/>spill<sp/>it<sp/>if<sp/>occupied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va-&gt;hasOutRegIndex())<sp/>{</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>outRegs<sp/>=<sp/>IntUtil::mask(va-&gt;getOutRegIndex());</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>willSpill<sp/>|=<sp/>occupied<sp/>&amp;<sp/>outRegs;</highlight></codeline>
<codeline lineno="3425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vaFlags<sp/>&amp;<sp/>kVarAttrAllocInDone)</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3431"><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>skip<sp/>all<sp/>registers<sp/>that<sp/>have<sp/>assigned<sp/>inRegIndex<sp/>(it<sp/>indicates<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>register<sp/>to<sp/>allocate<sp/>into<sp/>is<sp/>known).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va-&gt;hasInRegIndex())<sp/>{</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>inRegs<sp/>=<sp/>va-&gt;getInRegs();</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>willSpill<sp/>|=<sp/>occupied<sp/>&amp;<sp/>inRegs;</highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"></highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>m<sp/>=<sp/>va-&gt;getInRegs();</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va-&gt;hasOutRegIndex())</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>|=<sp/>IntUtil::mask(va-&gt;getOutRegIndex());</highlight></codeline>
<codeline lineno="3444"><highlight class="normal"></highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>va-&gt;getAllocableRegs()<sp/>&amp;<sp/>~(willAlloc<sp/>^<sp/>m);</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>guessAlloc&lt;C&gt;(vd,<sp/>m);</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(m<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"></highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>candidateRegs<sp/>=<sp/>m<sp/>&amp;<sp/>~occupied;</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex;</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regMask;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"></highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidateRegs<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidateRegs<sp/>=<sp/>m<sp/>&amp;<sp/>occupied<sp/>&amp;<sp/>~state-&gt;_modified.get(C);</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidateRegs<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidateRegs<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3458"><highlight class="normal"></highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>regIndex<sp/>=<sp/>IntUtil::findFirstBit(candidateRegs);</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>regMask<sp/>=<sp/>IntUtil::mask(regIndex);</highlight></codeline>
<codeline lineno="3461"><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vaFlags<sp/>&amp;<sp/>kVarAttrInOutReg)<sp/>==<sp/>kVarAttrOutReg)<sp/>{</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setOutRegIndex(regIndex);</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setInRegIndex(regIndex);</highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setInRegs(regMask);</highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3469"><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>willAlloc<sp/>|=<sp/>regMask;</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>willSpill<sp/>|=<sp/>regMask<sp/>&amp;<sp/>occupied;</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>willFree<sp/>&amp;=<sp/>~regMask;</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>occupied<sp/>|=<sp/>regMask;</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vaFlags<sp/>&amp;<sp/>kVarAttrInOutMem)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>vd-&gt;getRegIndex();</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref><sp/>&amp;&amp;<sp/>(vaFlags<sp/>&amp;<sp/>kVarAttrInOutMem)<sp/>!=<sp/>kVarAttrOutMem)<sp/>{</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>willSpill<sp/>|=<sp/>IntUtil::mask(regIndex);</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>calculated<sp/>masks<sp/>back<sp/>to<sp/>the<sp/>allocator;<sp/>needed<sp/>by<sp/>spill()<sp/>and<sp/>alloc().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/>_willSpill.set(C,<sp/>willSpill);</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/>_willAlloc.set(C,<sp/>willAlloc);</highlight></codeline>
<codeline lineno="3487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"></highlight></codeline>
<codeline lineno="3489"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3490"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64VarAlloc::spill()<sp/>{</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/>uint32_t<sp/>m<sp/>=<sp/>_willSpill.get(C);</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"></highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"></highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/>VarState*<sp/>state<sp/>=<sp/>getState();</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/>VarData**<sp/>sVars<sp/>=<sp/>state-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Available<sp/>registers<sp/>for<sp/>decision<sp/>if<sp/>move<sp/>has<sp/>any<sp/>benefit<sp/>over<sp/>spill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/>uint32_t<sp/>availableRegs<sp/>=<sp/>getGaRegs(C)<sp/>&amp;<sp/>~(state-&gt;_occupied.get(C)<sp/>|<sp/>m<sp/>|<sp/>_willAlloc.get(C));</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"></highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>always<sp/>advance<sp/>one<sp/>more<sp/>to<sp/>destroy<sp/>the<sp/>bit<sp/>that<sp/>we<sp/>have<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bitIndex<sp/>=<sp/>IntUtil::findFirstBit(m)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"></highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>bitIndex;</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>&gt;&gt;=<sp/>bitIndex;</highlight></codeline>
<codeline lineno="3509"><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>sVars[i];</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd-&gt;getVa()<sp/>==<sp/>NULL<sp/>||<sp/>(vd-&gt;getVa()-&gt;getFlags()<sp/>&amp;<sp/>kVarAttrInOutReg)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;isModified()<sp/>&amp;&amp;<sp/>availableRegs)<sp/>{</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>m<sp/>=<sp/>guessSpill&lt;C&gt;(vd,<sp/>availableRegs);</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>IntUtil::findFirstBit(m);</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regMask<sp/>=<sp/>IntUtil::mask(regIndex);</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"></highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;move&lt;C&gt;(vd,<sp/>regIndex);</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>availableRegs<sp/>^=<sp/>regMask;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/>_context-&gt;spill&lt;C&gt;(vd);</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"></highlight></codeline>
<codeline lineno="3531"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3532"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64VarAlloc::alloc()<sp/>{</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isVaDone(C))</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"></highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/>VarAttr*<sp/>list<sp/>=<sp/>getVaListByClass(C);</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>getVaCountByClass(C);</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"></highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/>VarState*<sp/>state<sp/>=<sp/>getState();</highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/>VarData**<sp/>sVars<sp/>=<sp/>state-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"></highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>didWork;</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Alloc<sp/>&apos;in&apos;<sp/>regs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>aVa<sp/>=<sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>aVd<sp/>=<sp/>aVa-&gt;getVd();</highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((aVa-&gt;getFlags()<sp/>&amp;<sp/>(kVarAttrInReg<sp/>|<sp/>kVarAttrAllocInDone))<sp/>!=<sp/>kVarAttrInReg)</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"></highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aIndex<sp/>=<sp/>aVd-&gt;getRegIndex();</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bIndex<sp/>=<sp/>aVa-&gt;getInRegIndex();</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shouldn&apos;t<sp/>be<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(aIndex<sp/>!=<sp/>bIndex);</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"></highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>bVd<sp/>=<sp/>getState()-&gt;getListByClass(C)[bIndex];</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bVd<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gp<sp/>registers<sp/>only<sp/>-<sp/>Swap<sp/>two<sp/>registers<sp/>if<sp/>we<sp/>can<sp/>solve<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocation<sp/>tasks<sp/>by<sp/>a<sp/>single<sp/>&apos;xchg&apos;<sp/>instruction,<sp/>swapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>registers<sp/>required<sp/>by<sp/>the<sp/>instruction/node<sp/>or<sp/>one<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>required<sp/>with<sp/>another<sp/>non-required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C<sp/>==<sp/><ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref><sp/>&amp;&amp;<sp/>aIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>bVa<sp/>=<sp/>bVd-&gt;getVa();</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;swapGp(aVd,<sp/>bVd);</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aVa-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"></highlight></codeline>
<codeline lineno="3574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doublehit,<sp/>two<sp/>registers<sp/>allocated<sp/>by<sp/>a<sp/>single<sp/>swap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bVa<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>bVa-&gt;getInRegIndex()<sp/>==<sp/>aIndex)<sp/>{</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bVa-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"></highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;move&lt;C&gt;(aVd,<sp/>bIndex);</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"></highlight></codeline>
<codeline lineno="3587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aVa-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;alloc&lt;C&gt;(aVd,<sp/>bIndex);</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"></highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aVa-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(didWork);</highlight></codeline>
<codeline lineno="3604"><highlight class="normal"></highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Alloc<sp/>&apos;out&apos;<sp/>regs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"></highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((va-&gt;getFlags()<sp/>&amp;<sp/>(kVarAttrInOutReg<sp/>|<sp/>kVarAttrAllocOutDone))<sp/>!=<sp/>kVarAttrOutReg)</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"></highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>va-&gt;getOutRegIndex();</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(regIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;getRegIndex()<sp/>!=<sp/>regIndex)<sp/>{</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(sVars[regIndex]<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;attach&lt;C&gt;(vd,<sp/>regIndex,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrAllocOutDone);</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64VarAlloc<sp/>-<sp/>GuessAlloc<sp/>/<sp/>GuessSpill]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"></highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal">ASMJIT_INLINE<sp/>uint32_t<sp/>X86X64VarAlloc::guessAlloc(VarData*<sp/>vd,<sp/>uint32_t<sp/>allocableRegs)<sp/>{</highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(allocableRegs<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3633"><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>now<sp/>if<sp/>there<sp/>is<sp/>only<sp/>one<sp/>bit<sp/>(register)<sp/>set<sp/>in<sp/>&apos;allocableRegs&apos;<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::isPowerOf2(allocableRegs))</highlight></codeline>
<codeline lineno="3636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allocableRegs;</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight></codeline>
<codeline lineno="3638"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/>uint32_t<sp/>safeRegs<sp/>=<sp/>allocableRegs;</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/>uint32_t<sp/>maxLookAhead<sp/>=<sp/>_compiler-&gt;getMaxLookAhead();</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>ahead<sp/>and<sp/>calculate<sp/>mask<sp/>of<sp/>special<sp/>registers<sp/>on<sp/>both<sp/>-<sp/>input/output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node<sp/>=<sp/>_node;</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>maxLookAhead;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>on<sp/>&apos;RetNode&apos;<sp/>and<sp/>&apos;EndNode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;hasFlag(kNodeFlagIsRet))</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"></highlight></codeline>
<codeline lineno="3649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>on<sp/>conditional<sp/>jump,<sp/>we<sp/>don&apos;t<sp/>follow<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;hasFlag(kNodeFlagIsJcc))</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"></highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>on<sp/>non-conditional<sp/>jump.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;hasFlag(kNodeFlagIsJmp))</highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>static_cast&lt;JumpNode*&gt;(node)-&gt;getTarget();</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"></highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;getNext();</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/>VarInst*<sp/>vi<sp/>=<sp/>node-&gt;getVarInst&lt;VarInst&gt;();</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>vi-&gt;findVaByClass(C,<sp/>vd);</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>inRegs<sp/>=<sp/>va-&gt;getInRegs();</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inRegs<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safeRegs<sp/>=<sp/>allocableRegs;</highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocableRegs<sp/>&amp;=<sp/>inRegs;</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocableRegs<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_UseSafeRegs;</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allocableRegs;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"></highlight></codeline>
<codeline lineno="3676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>safeRegs<sp/>=<sp/>allocableRegs;</highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allocableRegs<sp/>&amp;=<sp/>~(vi-&gt;_inRegs.get(C)<sp/>|<sp/>vi-&gt;_outRegs.get(C)<sp/>|<sp/>vi-&gt;_clobberedRegs.get(C));</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"></highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocableRegs<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal">_UseSafeRegs:</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>safeRegs;</highlight></codeline>
<codeline lineno="3686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3689"><highlight class="normal">ASMJIT_INLINE<sp/>uint32_t<sp/>X86X64VarAlloc::guessSpill(VarData*<sp/>vd,<sp/>uint32_t<sp/>allocableRegs)<sp/>{</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(allocableRegs<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"></highlight></codeline>
<codeline lineno="3695"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3696"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64VarAlloc<sp/>-<sp/>Modified]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight></codeline>
<codeline lineno="3699"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3700"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64VarAlloc::modified()<sp/>{</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/>VarAttr*<sp/>list<sp/>=<sp/>getVaListByClass(C);</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>getVaCountByClass(C);</highlight></codeline>
<codeline lineno="3703"><highlight class="normal"></highlight></codeline>
<codeline lineno="3704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3705"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="3706"><highlight class="normal"></highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va-&gt;hasFlag(kVarAttrOutReg))<sp/>{</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"></highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>vd-&gt;getRegIndex();</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regMask<sp/>=<sp/>IntUtil::mask(regIndex);</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"></highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vd-&gt;setModified(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;_x86State._modified.add(C,<sp/>regMask);</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64CallAlloc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3723"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="3724"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="3725"><highlight class="comment">//!<sp/>@brief<sp/>Register<sp/>allocator<sp/>context<sp/>(function<sp/>call).</highlight></codeline>
<codeline lineno="3726"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">X86X64CallAlloc<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>X86X64BaseAlloc<sp/>{</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"></highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64CallAlloc(X86X64Context*<sp/>context)<sp/>:<sp/>X86X64BaseAlloc(context)<sp/>{}</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>~X86X64CallAlloc()<sp/>{}</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"></highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3738"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>node.</highlight></codeline>
<codeline lineno="3739"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86X64CallNode*<sp/>getNode()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">X86X64CallNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_node);<sp/>}</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Run]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"></highlight></codeline>
<codeline lineno="3745"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Error<sp/>run(X86X64CallNode*<sp/>node);</highlight></codeline>
<codeline lineno="3746"><highlight class="normal"></highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Init<sp/>/<sp/>Cleanup]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>to<sp/>prevent<sp/>calling<sp/>these<sp/>methods<sp/>from<sp/>X86X64Context::translate().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"></highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>init(X86X64CallNode*<sp/>node,<sp/>VarInst*<sp/>vi);</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cleanup();</highlight></codeline>
<codeline lineno="3756"><highlight class="normal"></highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Plan<sp/>/<sp/>Alloc<sp/>/<sp/>Spill<sp/>/<sp/>Move]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>plan();</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>spill();</highlight></codeline>
<codeline lineno="3766"><highlight class="normal"></highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>alloc();</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"></highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[AllocImmsOnStack]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3773"><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>allocImmsOnStack();</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Duplicate]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>duplicate();</highlight></codeline>
<codeline lineno="3782"><highlight class="normal"></highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[GuessAlloc<sp/>/<sp/>GuessSpill]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3786"><highlight class="normal"></highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>guessAlloc(VarData*<sp/>vd,<sp/>uint32_t<sp/>allocableRegs);</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"></highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>guessSpill(VarData*<sp/>vd,<sp/>uint32_t<sp/>allocableRegs);</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"></highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Save]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>save();</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Clobber]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3803"><highlight class="normal"></highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clobber();</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"></highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Ret]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ret();</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"></highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3817"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Will<sp/>alloc<sp/>to<sp/>these<sp/>registers.</highlight></codeline>
<codeline lineno="3818"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>RegMask<sp/>_willAlloc;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3819"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Will<sp/>spill<sp/>these<sp/>registers.</highlight></codeline>
<codeline lineno="3820"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>RegMask<sp/>_willSpill;</highlight></codeline>
<codeline lineno="3821"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"></highlight></codeline>
<codeline lineno="3823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::X86X64CallAlloc<sp/>-<sp/>Run]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal">ASMJIT_INLINE<sp/>Error<sp/>X86X64CallAlloc::run(X86X64CallNode*<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/>VarInst*<sp/>vi<sp/>=<sp/>node-&gt;getVarInst&lt;VarInst&gt;();</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="3832"><highlight class="normal"></highlight></codeline>
<codeline lineno="3833"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>allocator;<sp/>prepare<sp/>basics<sp/>and<sp/>connect<sp/>Vd-&gt;Va.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/>init(node,<sp/>vi);</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Plan<sp/>register<sp/>allocation.<sp/>Planner<sp/>is<sp/>only<sp/>able<sp/>to<sp/>assign<sp/>one<sp/>register<sp/>per</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>variable.<sp/>If<sp/>any<sp/>variable<sp/>is<sp/>used<sp/>multiple<sp/>times<sp/>it<sp/>will<sp/>be<sp/>handled<sp/>later.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/>plan&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/>plan&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/>plan&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Spill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3843"><highlight class="normal"><sp/><sp/>spill&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/>spill&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/>spill&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Alloc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"><sp/><sp/>alloc&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/>alloc&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/>alloc&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unuse<sp/>clobbered<sp/>registers<sp/>that<sp/>are<sp/>not<sp/>used<sp/>to<sp/>pass<sp/>function<sp/>arguments<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>variables<sp/>used<sp/>to<sp/>pass<sp/>function<sp/>arguments<sp/>that<sp/>will<sp/>be<sp/>reused<sp/>later<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/>save&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/>save&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/>save&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>immediates<sp/>in<sp/>registers<sp/>and<sp/>on<sp/>the<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/>allocImmsOnStack();</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"></highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Duplicate.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/>duplicate&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/>duplicate&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/>duplicate&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Translate<sp/>call<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/>ASMJIT_PROPAGATE_ERROR(X86X64Context_translateOperands(_context,<sp/>&amp;node-&gt;_target,<sp/>1));</highlight></codeline>
<codeline lineno="3868"><highlight class="normal"></highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clobber.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/>clobber&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/>clobber&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/>clobber&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>any<sp/>instruction<sp/>has<sp/>to<sp/>be<sp/>emitted<sp/>to<sp/>properly<sp/>handle<sp/>function<sp/>return<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>has<sp/>to<sp/>be<sp/>emitted<sp/>right<sp/>after<sp/>the<sp/>call,<sp/>thus<sp/>the<sp/>cursor<sp/>has<sp/>to<sp/>be<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/>_compiler-&gt;_setCursor(node);</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/>ret();</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unuse.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/>unuseAfter&lt;kRegClassGp&gt;();</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/>unuseAfter&lt;kRegClassMm&gt;();</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/>unuseAfter&lt;kRegClassXy&gt;();</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanup;<sp/>disconnect<sp/>Vd-&gt;Va.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/>cleanup();</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="3890"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::X86X64CallAlloc<sp/>-<sp/>Init<sp/>/<sp/>Cleanup]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3895"><highlight class="normal"></highlight></codeline>
<codeline lineno="3896"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64CallAlloc::init(X86X64CallNode*<sp/>node,<sp/>VarInst*<sp/>vi)<sp/>{</highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/>X86X64BaseAlloc::init(node,<sp/>vi);</highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>mask<sp/>of<sp/>all<sp/>registers<sp/>that<sp/>will<sp/>be<sp/>used<sp/>to<sp/>pass<sp/>function<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/>_willAlloc<sp/>=<sp/>node-&gt;_usedArgs;</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/>_willSpill.reset();</highlight></codeline>
<codeline lineno="3902"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64CallAlloc::cleanup()<sp/>{</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/>X86X64BaseAlloc::cleanup();</highlight></codeline>
<codeline lineno="3906"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3907"><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3909"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::X86X64CallAlloc<sp/>-<sp/>Plan<sp/>/<sp/>Spill<sp/>/<sp/>Alloc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3910"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3911"><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="3913"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64CallAlloc::plan()<sp/>{</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/>uint32_t<sp/>clobbered<sp/>=<sp/>_vi-&gt;_clobberedRegs.get(C);</highlight></codeline>
<codeline lineno="3916"><highlight class="normal"></highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/>uint32_t<sp/>willAlloc<sp/>=<sp/>_willAlloc.get(C);</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/>uint32_t<sp/>willFree<sp/>=<sp/>clobbered<sp/>&amp;<sp/>~willAlloc;</highlight></codeline>
<codeline lineno="3919"><highlight class="normal"></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/>VarAttr*<sp/>list<sp/>=<sp/>getVaListByClass(C);</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>getVaCountByClass(C);</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"></highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/>VarState*<sp/>state<sp/>=<sp/>getState();</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/>VarData**<sp/>sVars<sp/>=<sp/>state-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>&apos;willAlloc&apos;<sp/>and<sp/>&apos;willFree&apos;<sp/>masks<sp/>based<sp/>on<sp/>mandatory<sp/>masks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="3930"><highlight class="normal"></highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>vaFlags<sp/>=<sp/>va-&gt;getFlags();</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>vd-&gt;getRegIndex();</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>regMask<sp/>=<sp/>(regIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>?<sp/>IntUtil::mask(regIndex)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"></highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vaFlags<sp/>&amp;<sp/>kVarAttrInReg)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Planning<sp/>register<sp/>allocation.<sp/>First<sp/>check<sp/>whether<sp/>the<sp/>variable<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already<sp/>allocated<sp/>in<sp/>register<sp/>and<sp/>if<sp/>it<sp/>can<sp/>stay<sp/>there.<sp/>Function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>arguments<sp/>are<sp/>passed<sp/>either<sp/>in<sp/>a<sp/>specific<sp/>register<sp/>or<sp/>in<sp/>stack<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>care<sp/>mostly<sp/>of<sp/>mandatory<sp/>registers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>inRegs<sp/>=<sp/>va-&gt;getInRegs();</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inRegs<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inRegs<sp/>=<sp/>va-&gt;getAllocableRegs();</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"></highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regMask<sp/>&amp;<sp/>inRegs)<sp/>{</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setInRegIndex(regIndex);</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>willFree<sp/>|=<sp/>regMask;</highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Memory<sp/>access<sp/>-<sp/>if<sp/>variable<sp/>is<sp/>allocated<sp/>it<sp/>has<sp/>to<sp/>be<sp/>freed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regMask<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>willFree<sp/>|=<sp/>regMask;</highlight></codeline>
<codeline lineno="3959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Occupied<sp/>registers<sp/>without<sp/>&apos;willFree&apos;<sp/>registers;<sp/>contains<sp/>basically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>the<sp/>registers<sp/>we<sp/>can<sp/>use<sp/>to<sp/>allocate<sp/>variables<sp/>without<sp/>inRegs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>speficied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/>uint32_t<sp/>occupied<sp/>=<sp/>state-&gt;_occupied.get(C)<sp/>&amp;<sp/>~willFree;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/>uint32_t<sp/>willSpill<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>best<sp/>registers<sp/>for<sp/>variables<sp/>that<sp/>are<sp/>not<sp/>allocated<sp/>yet.<sp/>Only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>useful<sp/>for<sp/>Gp<sp/>registers<sp/>used<sp/>as<sp/>call<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>vaFlags<sp/>=<sp/>va-&gt;getFlags();</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((vaFlags<sp/>&amp;<sp/>kVarAttrAllocInDone)<sp/>!=<sp/>0<sp/>||<sp/>(vaFlags<sp/>&amp;<sp/>kVarAttrInReg)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>registers<sp/>except<sp/>Gp<sp/>used<sp/>by<sp/>call<sp/>itself<sp/>must<sp/>have<sp/>inRegIndex.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>m<sp/>=<sp/>va-&gt;getInRegs();</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C<sp/>!=<sp/><ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref><sp/>||<sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(m<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;setInRegIndex(IntUtil::findFirstBit(m));</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>willSpill<sp/>|=<sp/>occupied<sp/>&amp;<sp/>m;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"></highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>va-&gt;getAllocableRegs()<sp/>&amp;<sp/>~(willAlloc<sp/>^<sp/>m);</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>guessAlloc&lt;C&gt;(vd,<sp/>m);</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(m<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>candidateRegs<sp/>=<sp/>m<sp/>&amp;<sp/>~occupied;</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidateRegs<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>candidateRegs<sp/>=<sp/>m<sp/>&amp;<sp/>occupied<sp/>&amp;<sp/>~state-&gt;_modified.get(C);</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(candidateRegs<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>candidateRegs<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(vaFlags<sp/>&amp;<sp/>(kVarAttrOutReg<sp/>|<sp/>kVarAttrUnuse))<sp/>&amp;&amp;<sp/>(candidateRegs<sp/>&amp;<sp/>~clobbered))</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>candidateRegs<sp/>&amp;=<sp/>~clobbered;</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>IntUtil::findFirstBit(candidateRegs);</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>regMask<sp/>=<sp/>IntUtil::mask(regIndex);</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"></highlight></codeline>
<codeline lineno="4009"><highlight class="normal"><sp/><sp/><sp/><sp/>va-&gt;setInRegIndex(regIndex);</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/>va-&gt;setInRegs(regMask);</highlight></codeline>
<codeline lineno="4011"><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"><sp/><sp/><sp/><sp/>willAlloc<sp/>|=<sp/>regMask;</highlight></codeline>
<codeline lineno="4013"><highlight class="normal"><sp/><sp/><sp/><sp/>willSpill<sp/>|=<sp/>regMask<sp/>&amp;<sp/>occupied;</highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><sp/><sp/>willFree<sp/>&amp;=<sp/>~regMask;</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"></highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/>occupied<sp/>|=<sp/>regMask;</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"></highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>calculated<sp/>masks<sp/>back<sp/>to<sp/>the<sp/>allocator;<sp/>needed<sp/>by<sp/>spill()<sp/>and<sp/>alloc().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/>_willSpill.set(C,<sp/>willSpill);</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/>_willAlloc.set(C,<sp/>willAlloc);</highlight></codeline>
<codeline lineno="4023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"></highlight></codeline>
<codeline lineno="4025"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="4026"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64CallAlloc::spill()<sp/>{</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/>uint32_t<sp/>m<sp/>=<sp/>_willSpill.get(C);</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"></highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"></highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/>VarState*<sp/>state<sp/>=<sp/>getState();</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/>VarData**<sp/>sVars<sp/>=<sp/>state-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Available<sp/>registers<sp/>for<sp/>decision<sp/>if<sp/>move<sp/>has<sp/>any<sp/>benefit<sp/>over<sp/>spill.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/>uint32_t<sp/>availableRegs<sp/>=<sp/>getGaRegs(C)<sp/>&amp;<sp/>~(state-&gt;_occupied.get(C)<sp/>|<sp/>m<sp/>|<sp/>_willAlloc.get(C));</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"></highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>always<sp/>advance<sp/>one<sp/>more<sp/>to<sp/>destroy<sp/>the<sp/>bit<sp/>that<sp/>we<sp/>have<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>bitIndex<sp/>=<sp/>IntUtil::findFirstBit(m)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>bitIndex;</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>&gt;&gt;=<sp/>bitIndex;</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"></highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>sVars[i];</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd-&gt;getVa()<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;isModified()<sp/>&amp;&amp;<sp/>availableRegs)<sp/>{</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>m<sp/>=<sp/>guessSpill&lt;C&gt;(vd,<sp/>availableRegs);</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>IntUtil::findFirstBit(m);</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regMask<sp/>=<sp/>IntUtil::mask(regIndex);</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;move&lt;C&gt;(vd,<sp/>regIndex);</highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>availableRegs<sp/>^=<sp/>regMask;</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4062"><highlight class="normal"></highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/>_context-&gt;spill&lt;C&gt;(vd);</highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4065"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="4068"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64CallAlloc::alloc()<sp/>{</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isVaDone(C))</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"></highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/>VarAttr*<sp/>list<sp/>=<sp/>getVaListByClass(C);</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>getVaCountByClass(C);</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"></highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/>VarState*<sp/>state<sp/>=<sp/>getState();</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/>VarData**<sp/>sVars<sp/>=<sp/>state-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="4077"><highlight class="normal"></highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>didWork;</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"></highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>aVa<sp/>=<sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>aVd<sp/>=<sp/>aVa-&gt;getVd();</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"></highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((aVa-&gt;getFlags()<sp/>&amp;<sp/>(kVarAttrInReg<sp/>|<sp/>kVarAttrAllocInDone))<sp/>!=<sp/>kVarAttrInReg)</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"></highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>aIndex<sp/>=<sp/>aVd-&gt;getRegIndex();</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bIndex<sp/>=<sp/>aVa-&gt;getInRegIndex();</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"></highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shouldn&apos;t<sp/>be<sp/>the<sp/>same.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(aIndex<sp/>!=<sp/>bIndex);</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>bVd<sp/>=<sp/>getState()-&gt;getListByClass(C)[bIndex];</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bVd<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>bVa<sp/>=<sp/>bVd-&gt;getVa();</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Gp<sp/>registers<sp/>only<sp/>-<sp/>Swap<sp/>two<sp/>registers<sp/>if<sp/>we<sp/>can<sp/>solve<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocation<sp/>tasks<sp/>by<sp/>a<sp/>single<sp/>&apos;xchg&apos;<sp/>instruction,<sp/>swapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>two<sp/>registers<sp/>required<sp/>by<sp/>the<sp/>instruction/node<sp/>or<sp/>one<sp/>register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>required<sp/>with<sp/>another<sp/>non-required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C<sp/>==<sp/><ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;swapGp(aVd,<sp/>bVd);</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"></highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aVa-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="4109"><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Doublehit,<sp/>two<sp/>registers<sp/>allocated<sp/>by<sp/>a<sp/>single<sp/>swap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bVa<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>bVa-&gt;getInRegIndex()<sp/>==<sp/>aIndex)<sp/>{</highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bVa-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"></highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;move&lt;C&gt;(aVd,<sp/>bIndex);</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"></highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aVa-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"></highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;alloc&lt;C&gt;(aVd,<sp/>bIndex);</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"></highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aVa-&gt;addFlags(kVarAttrAllocInDone);</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addVaDone(C);</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"></highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didWork<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(didWork);</highlight></codeline>
<codeline lineno="4140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64CallAlloc<sp/>-<sp/>AllocImmsOnStack]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"></highlight></codeline>
<codeline lineno="4146"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64CallAlloc::allocImmsOnStack()<sp/>{</highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/>X86X64CallNode*<sp/>node<sp/>=<sp/>getNode();</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/>X86X64FuncDecl*<sp/>decl<sp/>=<sp/>node-&gt;getDecl();</highlight></codeline>
<codeline lineno="4149"><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/>uint32_t<sp/>argCount<sp/>=<sp/>decl-&gt;getArgCount();</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/>Operand*<sp/>argList<sp/>=<sp/>node-&gt;_args;</highlight></codeline>
<codeline lineno="4152"><highlight class="normal"></highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>argCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/>Operand&amp;<sp/>op<sp/>=<sp/>argList[i];</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"></highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!op.isImm())</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Imm&amp;<sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Imm&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(op);</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/>decl-&gt;getArg(i);</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.hasStackOffset())<sp/>{</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem<sp/>dst<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(_context-&gt;_zsp,<sp/>-static_cast&lt;int&gt;(_context-&gt;getRegSize())<sp/>+<sp/>arg.getStackOffset());</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;emitMoveImmOnStack(arg.getVarType(),<sp/>&amp;dst,<sp/>&amp;<ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;emitMoveImmToReg(arg.getVarType(),<sp/>arg.getRegIndex(),<sp/>&amp;<ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>);</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64CallAlloc<sp/>-<sp/>Duplicate]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="4177"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64CallAlloc::duplicate()<sp/>{</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/>VarAttr*<sp/>list<sp/>=<sp/>getVaListByClass(C);</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>getVaCountByClass(C);</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;list[i];</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!va-&gt;hasFlag(kVarAttrInReg))</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"></highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>inRegs<sp/>=<sp/>va-&gt;getInRegs();</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inRegs)</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>vd-&gt;getRegIndex();</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(regIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"></highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/>inRegs<sp/>&amp;=<sp/>~IntUtil::mask(regIndex);</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!inRegs)</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4198"><highlight class="normal"></highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>dupIndex<sp/>=<sp/>0;<sp/>inRegs<sp/>!=<sp/>0;<sp/>dupIndex++,<sp/>inRegs<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inRegs<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;emitMove(vd,<sp/>dupIndex,<sp/>regIndex,<sp/></highlight><highlight class="stringliteral">&quot;Duplicate&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;_clobberedRegs.add(C,<sp/>IntUtil::mask(dupIndex));</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"></highlight></codeline>
<codeline lineno="4208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64CallAlloc<sp/>-<sp/>GuessAlloc<sp/>/<sp/>GuessSpill]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4211"><highlight class="normal"></highlight></codeline>
<codeline lineno="4212"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="4213"><highlight class="normal">ASMJIT_INLINE<sp/>uint32_t<sp/>X86X64CallAlloc::guessAlloc(VarData*<sp/>vd,<sp/>uint32_t<sp/>allocableRegs)<sp/>{</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(allocableRegs<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4215"><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>now<sp/>if<sp/>there<sp/>is<sp/>only<sp/>one<sp/>bit<sp/>(register)<sp/>set<sp/>in<sp/>&apos;allocableRegs&apos;<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::isPowerOf2(allocableRegs))</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allocableRegs;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"></highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/>uint32_t<sp/>safeRegs<sp/>=<sp/>allocableRegs;</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/>uint32_t<sp/>maxLookAhead<sp/>=<sp/>_compiler-&gt;getMaxLookAhead();</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"></highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>ahead<sp/>and<sp/>calculate<sp/>mask<sp/>of<sp/>special<sp/>registers<sp/>on<sp/>both<sp/>-<sp/>input/output.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node<sp/>=<sp/>_node;</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>maxLookAhead;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>on<sp/>&apos;RetNode&apos;<sp/>and<sp/>&apos;EndNode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;hasFlag(kNodeFlagIsRet))</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4230"><highlight class="normal"></highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>on<sp/>conditional<sp/>jump,<sp/>we<sp/>don&apos;t<sp/>follow<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;hasFlag(kNodeFlagIsJcc))</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>on<sp/>non-conditional<sp/>jump.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;hasFlag(kNodeFlagIsJmp))</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>static_cast&lt;JumpNode*&gt;(node)-&gt;getTarget();</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;getNext();</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="4241"><highlight class="normal"></highlight></codeline>
<codeline lineno="4242"><highlight class="normal"><sp/><sp/><sp/><sp/>VarInst*<sp/>vi<sp/>=<sp/>node-&gt;getVarInst&lt;VarInst&gt;();</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>vi-&gt;findVaByClass(C,<sp/>vd);</highlight></codeline>
<codeline lineno="4245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>inRegs<sp/>=<sp/>va-&gt;getInRegs();</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inRegs<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safeRegs<sp/>=<sp/>allocableRegs;</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocableRegs<sp/>&amp;=<sp/>inRegs;</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"></highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocableRegs<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_UseSafeRegs;</highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allocableRegs;</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"></highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>safeRegs<sp/>=<sp/>allocableRegs;</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>allocableRegs<sp/>&amp;=<sp/>~(vi-&gt;_inRegs.get(C)<sp/>|<sp/>vi-&gt;_outRegs.get(C)<sp/>|<sp/>vi-&gt;_clobberedRegs.get(C));</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"></highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocableRegs<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"></highlight></codeline>
<codeline lineno="4266"><highlight class="normal">_UseSafeRegs:</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>safeRegs;</highlight></codeline>
<codeline lineno="4268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4269"><highlight class="normal"></highlight></codeline>
<codeline lineno="4270"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="4271"><highlight class="normal">ASMJIT_INLINE<sp/>uint32_t<sp/>X86X64CallAlloc::guessSpill(VarData*<sp/>vd,<sp/>uint32_t<sp/>allocableRegs)<sp/>{</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(allocableRegs<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="4275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"></highlight></codeline>
<codeline lineno="4277"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64CallAlloc<sp/>-<sp/>Save]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4280"><highlight class="normal"></highlight></codeline>
<codeline lineno="4281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="4282"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64CallAlloc::save()<sp/>{</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/>VarState*<sp/>state<sp/>=<sp/>getState();</highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/>VarData**<sp/>sVars<sp/>=<sp/>state-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"></highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/>uint32_t<sp/>affected<sp/>=<sp/>_vi-&gt;_clobberedRegs.get(C)<sp/>&amp;<sp/>state-&gt;_occupied.get(C)<sp/>&amp;<sp/>state-&gt;_modified.get(C);</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>affected<sp/>!=<sp/>0;<sp/>i++,<sp/>affected<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(affected<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>sVars[i];</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd-&gt;isModified());</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"></highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>vd-&gt;getVa();</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va<sp/>==<sp/>NULL<sp/>||<sp/>!(va-&gt;getFlags()<sp/>&amp;<sp/>kVarAttrInAll))<sp/>{</highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;save&lt;C&gt;(vd);</highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4302"><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4304"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64CallAlloc<sp/>-<sp/>Clobber]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4306"><highlight class="normal"></highlight></codeline>
<codeline lineno="4307"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>C&gt;</highlight></codeline>
<codeline lineno="4308"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64CallAlloc::clobber()<sp/>{</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/>VarState*<sp/>state<sp/>=<sp/>getState();</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/>VarData**<sp/>sVars<sp/>=<sp/>state-&gt;getListByClass(C);</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"></highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"><sp/><sp/>uint32_t<sp/>affected<sp/>=<sp/>_vi-&gt;_clobberedRegs.get(C)<sp/>&amp;<sp/>state-&gt;_occupied.get(C);</highlight></codeline>
<codeline lineno="4314"><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>affected<sp/>!=<sp/>0;<sp/>i++,<sp/>affected<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(affected<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="4317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>sVars[i];</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="4319"><highlight class="normal"></highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>vd-&gt;getVa();</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>vdState<sp/>=<sp/>kVarStateUnused;</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vd-&gt;isModified()<sp/>||<sp/>(va<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>(va-&gt;getFlags()<sp/>&amp;<sp/>(kVarAttrOutAll<sp/>|<sp/>kVarAttrUnuse))<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vdState<sp/>=<sp/>kVarStateMem;</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;unuse&lt;C&gt;(vd,<sp/>vdState);</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64CallAlloc<sp/>-<sp/>Ret]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4335"><highlight class="normal"></highlight></codeline>
<codeline lineno="4336"><highlight class="normal">ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64CallAlloc::ret()<sp/>{</highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/>X86X64CallNode*<sp/>node<sp/>=<sp/>getNode();</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/>X86X64FuncDecl*<sp/>decl<sp/>=<sp/>node-&gt;getDecl();</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"></highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/>Operand*<sp/>retList<sp/>=<sp/>node-&gt;_ret;</highlight></codeline>
<codeline lineno="4342"><highlight class="normal"></highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncInOut&amp;<sp/>ret<sp/>=<sp/>decl-&gt;getRet(i);</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/><sp/><sp/>Operand*<sp/>op<sp/>=<sp/>&amp;retList[i];</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ret.hasRegIndex()<sp/>||<sp/>!op-&gt;isVar())</highlight></codeline>
<codeline lineno="4348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4349"><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>_compiler-&gt;getVdById(op-&gt;getId());</highlight></codeline>
<codeline lineno="4351"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>ret.getRegIndex();</highlight></codeline>
<codeline lineno="4352"><highlight class="normal"></highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vd-&gt;getClass())<sp/>{</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>:</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)</highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;unuse&lt;<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>&gt;(vd);</highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;attach&lt;<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>&gt;(vd,<sp/>regIndex,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>:</highlight></codeline>
<codeline lineno="4360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)</highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;unuse&lt;<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>&gt;(vd);</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;attach&lt;<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>&gt;(vd,<sp/>regIndex,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>:</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)</highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;unuse&lt;<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>&gt;(vd);</highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_context-&gt;attach&lt;<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>&gt;(vd,<sp/>regIndex,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>TranslateOperands]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4377"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="4378"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Error<sp/>X86X64Context_translateOperands(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>Operand*<sp/>opList,<sp/>uint32_t<sp/>opCount)<sp/>{</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getCompiler();</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VarInfo*<sp/>varInfo<sp/>=<sp/>_varInfo;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"></highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/>uint32_t<sp/>hasGpdBase<sp/>=<sp/>compiler-&gt;getRegSize()<sp/>==<sp/>4;</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Translate<sp/>variables<sp/>into<sp/>registers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>opCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="4386"><highlight class="normal"><sp/><sp/><sp/><sp/>Operand*<sp/>op<sp/>=<sp/>&amp;opList[i];</highlight></codeline>
<codeline lineno="4387"><highlight class="normal"></highlight></codeline>
<codeline lineno="4388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;isVar())<sp/>{</highlight></codeline>
<codeline lineno="4389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(op-&gt;getId());</highlight></codeline>
<codeline lineno="4390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="4391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="4392"><highlight class="normal"></highlight></codeline>
<codeline lineno="4393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;_vreg.op<sp/>=<sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba8742403556c7e635e7531c58252de1ea" kindref="member" tooltip="Operand is a register.">kOperandTypeReg</ref>;</highlight></codeline>
<codeline lineno="4394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;_vreg.index<sp/>=<sp/>vd-&gt;getRegIndex();</highlight></codeline>
<codeline lineno="4395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(op-&gt;isMem())<sp/>{</highlight></codeline>
<codeline lineno="4397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Mem*<sp/>m<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Mem*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(op);</highlight></codeline>
<codeline lineno="4398"><highlight class="normal"></highlight></codeline>
<codeline lineno="4399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;isBaseIndexType()<sp/>&amp;&amp;<sp/><ref refid="structasmjit_1_1OperandUtil_1ad7ffa13ea065b296ee99988e2827a95a" kindref="member" tooltip="Get whether the id refers to BaseVar.">OperandUtil::isVarId</ref>(m-&gt;getBase()))<sp/>{</highlight></codeline>
<codeline lineno="4400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(m-&gt;getBase());</highlight></codeline>
<codeline lineno="4401"><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;getMemType()<sp/>==<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="4404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;_vmem.base<sp/>=<sp/>vd-&gt;getRegIndex();</highlight></codeline>
<codeline lineno="4405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vd-&gt;isMemArg())</highlight></codeline>
<codeline lineno="4408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;getVarCell(vd);</highlight></codeline>
<codeline lineno="4409"><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>will<sp/>be<sp/>patched<sp/>later<sp/>by<sp/>X86X64Context_patchFuncMem().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;setGpdBase(hasGpdBase);</highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;adjust(vd-&gt;isMemArg()<sp/>?<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argActualDisp<sp/>:<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_varActualDisp);</highlight></codeline>
<codeline lineno="4413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1OperandUtil_1ad7ffa13ea065b296ee99988e2827a95a" kindref="member" tooltip="Get whether the id refers to BaseVar.">OperandUtil::isVarId</ref>(m-&gt;getIndex()))<sp/>{</highlight></codeline>
<codeline lineno="4417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(m-&gt;getIndex());</highlight></codeline>
<codeline lineno="4418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>);</highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd-&gt;getRegIndex()<sp/>!=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa7874db6409f9f1dad031eeb3c2f06088" kindref="member" tooltip="Index of R12B/R12W/R12D/R12 registers (64-bit only).">kRegIndexR12</ref>);</highlight></codeline>
<codeline lineno="4420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op-&gt;_vmem.index<sp/>=<sp/>vd-&gt;getRegIndex();</highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4424"><highlight class="normal"></highlight></codeline>
<codeline lineno="4425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="4426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4427"><highlight class="normal"></highlight></codeline>
<codeline lineno="4428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>TranslatePrologEpilog]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4431"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4432"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="4433"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Error<sp/>X86X64Context_initFunc(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>X86X64FuncNode*<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getCompiler();</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/>X86X64FuncDecl*<sp/>decl<sp/>=<sp/>func-&gt;getDecl();</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"></highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/>RegMask&amp;<sp/>clobberedRegs<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_clobberedRegs;</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regSize<sp/>=<sp/>compiler-&gt;getRegSize();</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"></highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>&quot;Save-Restore&quot;<sp/>registers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/>func-&gt;_saveRestoreRegs.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>clobberedRegs.get(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>)<sp/>&amp;<sp/>decl-&gt;getPreserved(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>));</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"><sp/><sp/>func-&gt;_saveRestoreRegs.set(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578ebae14f8090017d61ea34f01c8f355096fa" kindref="member" tooltip="X86/X64 Fp register class.">kRegClassFp</ref>,<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/>func-&gt;_saveRestoreRegs.set(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>,<sp/>clobberedRegs.get(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>)<sp/>&amp;<sp/>decl-&gt;getPreserved(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>));</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/>func-&gt;_saveRestoreRegs.set(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>,<sp/>clobberedRegs.get(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>)<sp/>&amp;<sp/>decl-&gt;getPreserved(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>));</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!func-&gt;_saveRestoreRegs.has(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(<ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa72a26d71150e372bcac7bb7023dcb628" kindref="member" tooltip="Index of SPL/SP/ESP/RSP registers.">kRegIndexSp</ref>)));</highlight></codeline>
<codeline lineno="4447"><highlight class="normal"></highlight></codeline>
<codeline lineno="4448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>required<sp/>stack<sp/>alignment<sp/>and<sp/>kFuncFlagIsStackMisaligned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>requiredStackAlignment<sp/>=<sp/>IntUtil::iMax(self-&gt;_memMaxAlign,<sp/>self-&gt;getRegSize());</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"></highlight></codeline>
<codeline lineno="4452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(requiredStackAlignment<sp/>&lt;<sp/>16)<sp/>{</highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Require<sp/>16-byte<sp/>alignment<sp/>if<sp/>8-byte<sp/>vars<sp/>are<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(self-&gt;_mem8ByteVarsUsed)</highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requiredStackAlignment<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;_saveRestoreRegs.get(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>)<sp/>||<sp/>func-&gt;_saveRestoreRegs.get(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>))</highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requiredStackAlignment<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IntUtil::inInterval&lt;uint32_t&gt;(func-&gt;getRequiredStackAlignment(),<sp/>8,<sp/>16))</highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>requiredStackAlignment<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;getRequiredStackAlignment()<sp/>&lt;<sp/>requiredStackAlignment)</highlight></codeline>
<codeline lineno="4463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;setRequiredStackAlignment(requiredStackAlignment);</highlight></codeline>
<codeline lineno="4464"><highlight class="normal"></highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;updateRequiredStackAlignment();</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4467"><highlight class="normal"></highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>stack<sp/>pointer<sp/>if<sp/>function<sp/>is<sp/>caller.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isCaller())<sp/>{</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;addFuncFlags(kFuncFlagIsStackAdjusted);</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>stack<sp/>pointer<sp/>if<sp/>manual<sp/>stack<sp/>alignment<sp/>is<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackMisaligned()<sp/>&amp;&amp;<sp/>func-&gt;isNaked())<sp/>{</highlight></codeline>
<codeline lineno="4475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>a<sp/>memory<sp/>cell<sp/>where<sp/>the<sp/>original<sp/>stack<sp/>frame<sp/>will<sp/>be<sp/>stored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"><sp/><sp/><sp/><sp/>MemCell*<sp/>cell<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_newStackCell(regSize,<sp/>regSize);</highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getError();</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"></highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;addFuncFlags(kFuncFlagIsStackAdjusted);</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_stackFrameCell<sp/>=<sp/>cell;</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"></highlight></codeline>
<codeline lineno="4483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decl-&gt;getArgStackSize()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;addFuncFlags(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea1aadaf95fc36acabc2de1980da2e4072" kindref="member" tooltip="Whether it&amp;#39;s required to move arguments to a new stack location, because of manual aligning...">kFuncFlagMoveArgs</ref>);</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;setExtraStackSize(decl-&gt;getArgStackSize());</highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>temporary<sp/>register<sp/>which<sp/>will<sp/>be<sp/>used<sp/>to<sp/>align<sp/>the<sp/>stack<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>fRegMask<sp/>=<sp/>IntUtil::bits(self-&gt;_baseRegsCount);</highlight></codeline>
<codeline lineno="4490"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>stackFrameCopyRegs;</highlight></codeline>
<codeline lineno="4491"><highlight class="normal"></highlight></codeline>
<codeline lineno="4492"><highlight class="normal"><sp/><sp/><sp/><sp/>fRegMask<sp/>&amp;=<sp/>~(decl-&gt;getUsed(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>)<sp/>|<sp/>IntUtil::mask(<ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa72a26d71150e372bcac7bb7023dcb628" kindref="member" tooltip="Index of SPL/SP/ESP/RSP registers.">kRegIndexSp</ref>));</highlight></codeline>
<codeline lineno="4493"><highlight class="normal"><sp/><sp/><sp/><sp/>stackFrameCopyRegs<sp/>=<sp/>fRegMask;</highlight></codeline>
<codeline lineno="4494"><highlight class="normal"></highlight></codeline>
<codeline lineno="4495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>remove<sp/>modified<sp/>registers<sp/>from<sp/>the<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4496"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>tRegMask<sp/>=<sp/>fRegMask<sp/>&amp;<sp/>~self-&gt;getClobberedRegs(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>);</highlight></codeline>
<codeline lineno="4497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tRegMask<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fRegMask<sp/>=<sp/>tRegMask;</highlight></codeline>
<codeline lineno="4499"><highlight class="normal"></highlight></codeline>
<codeline lineno="4500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>remove<sp/>preserved<sp/>registers<sp/>from<sp/>the<sp/>mask.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4501"><highlight class="normal"><sp/><sp/><sp/><sp/>tRegMask<sp/>=<sp/>fRegMask<sp/>&amp;<sp/>~decl-&gt;getPreserved(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>);</highlight></codeline>
<codeline lineno="4502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tRegMask<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fRegMask<sp/>=<sp/>tRegMask;</highlight></codeline>
<codeline lineno="4504"><highlight class="normal"></highlight></codeline>
<codeline lineno="4505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(fRegMask<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="4506"><highlight class="normal"></highlight></codeline>
<codeline lineno="4507"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>fRegIndex<sp/>=<sp/>IntUtil::findFirstBit(fRegMask);</highlight></codeline>
<codeline lineno="4508"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;_stackFrameRegIndex<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fRegIndex);</highlight></codeline>
<codeline lineno="4509"><highlight class="normal"></highlight></codeline>
<codeline lineno="4510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>have<sp/>to<sp/>save<sp/>the<sp/>register<sp/>on<sp/>the<sp/>stack<sp/>(it<sp/>will<sp/>be<sp/>the<sp/>part<sp/>of<sp/>prolog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>epilog),<sp/>however<sp/>we<sp/>shouldn&apos;t<sp/>save<sp/>it<sp/>twice,<sp/>so<sp/>we<sp/>will<sp/>remove<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>&apos;_saveRestoreRegs&apos;<sp/>in<sp/>case<sp/>that<sp/>it<sp/>is<sp/>preserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4513"><highlight class="normal"><sp/><sp/><sp/><sp/>fRegMask<sp/>=<sp/>IntUtil::mask(fRegIndex);</highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fRegMask<sp/>&amp;<sp/>decl-&gt;getPreserved(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;_saveRestoreRegs.del(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>fRegMask);</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;_isStackFrameRegPreserved<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4518"><highlight class="normal"></highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea1aadaf95fc36acabc2de1980da2e4072" kindref="member" tooltip="Whether it&amp;#39;s required to move arguments to a new stack location, because of manual aligning...">kFuncFlagMoveArgs</ref>))<sp/>{</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>maxRegs<sp/>=<sp/>(func-&gt;getArgStackSize()<sp/>+<sp/>regSize<sp/>-<sp/>1)<sp/>/<sp/>regSize;</highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stackFrameCopyRegs<sp/>&amp;=<sp/>~fRegMask;</highlight></codeline>
<codeline lineno="4522"><highlight class="normal"></highlight></codeline>
<codeline lineno="4523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tRegMask<sp/>=<sp/>stackFrameCopyRegs<sp/>&amp;<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getClobberedRegs(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>);</highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>tRegCnt<sp/>=<sp/>IntUtil::bitCount(tRegMask);</highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tRegCnt<sp/>&gt;<sp/>1<sp/>||<sp/>(tRegCnt<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>tRegCnt<sp/>&lt;=<sp/>maxRegs))</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stackFrameCopyRegs<sp/>=<sp/>tRegMask;</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stackFrameCopyRegs<sp/>=<sp/>IntUtil::keepNOnesFromRight(stackFrameCopyRegs,<sp/>IntUtil::iMin&lt;uint32_t&gt;(maxRegs,<sp/>2));</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"></highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;_saveRestoreRegs.add(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>stackFrameCopyRegs<sp/>&amp;<sp/>decl-&gt;getPreserved(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>));</highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>IntUtil::indexNOnesFromRight(func-&gt;_stackFrameCopyGpIndex,<sp/>stackFrameCopyRegs,<sp/>maxRegs);</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>function<sp/>is<sp/>not<sp/>naked<sp/>we<sp/>generate<sp/>standard<sp/>&quot;EBP/RBP&quot;<sp/>stack<sp/>frame.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!func-&gt;isNaked())<sp/>{</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>fRegIndex<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae08e3d836183e8be188e68df5e2db1b6" kindref="member" tooltip="Index of BPL/BP/EBP/RBP registers.">kRegIndexBp</ref>;</highlight></codeline>
<codeline lineno="4538"><highlight class="normal"></highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;_stackFrameRegIndex<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fRegIndex);</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;_isStackFrameRegPreserved<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4542"><highlight class="normal"></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/>ASMJIT_PROPAGATE_ERROR(self-&gt;resolveCellOffsets());</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>stack<sp/>pointer<sp/>if<sp/>requested<sp/>memory<sp/>can&apos;t<sp/>fit<sp/>into<sp/>&quot;Red<sp/>Zone&quot;<sp/>or<sp/>&quot;Spill<sp/>Zone&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(self-&gt;_memAllTotal<sp/>&gt;<sp/>IntUtil::iMax&lt;uint32_t&gt;(func-&gt;getRedZoneSize(),<sp/>func-&gt;getSpillZoneSize()))<sp/>{</highlight></codeline>
<codeline lineno="4547"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;addFuncFlags(kFuncFlagIsStackAdjusted);</highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"></highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>stack<sp/>size<sp/>used<sp/>to<sp/>save<sp/>preserved<sp/>registers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>memGpSize<sp/><sp/>=<sp/>IntUtil::bitCount(func-&gt;_saveRestoreRegs.get(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>))<sp/>*<sp/>regSize;</highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>memMmSize<sp/><sp/>=<sp/>IntUtil::bitCount(func-&gt;_saveRestoreRegs.get(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>))<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>memXmmSize<sp/>=<sp/>IntUtil::bitCount(func-&gt;_saveRestoreRegs.get(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>))<sp/>*<sp/>16;</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"></highlight></codeline>
<codeline lineno="4556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" kindref="member" tooltip="Whether to emit register load/save sequence using push/pop pairs.">kFuncFlagPushPop</ref>))<sp/>{</highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;_pushPopStackSize<sp/>=<sp/>memGpSize;</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;_moveStackSize<sp/>=<sp/>memXmmSize<sp/>+<sp/>IntUtil::alignTo&lt;uint32_t&gt;(memMmSize,<sp/>16);</highlight></codeline>
<codeline lineno="4559"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;_pushPopStackSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;_moveStackSize<sp/>=<sp/>memXmmSize<sp/>+<sp/>IntUtil::alignTo&lt;uint32_t&gt;(memMmSize<sp/>+<sp/>memGpSize,<sp/>16);</highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4565"><highlight class="normal"></highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>adjusted<sp/>stack<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackMisaligned())<sp/>{</highlight></codeline>
<codeline lineno="4568"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;_alignStackSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>function<sp/>is<sp/>aligned,<sp/>the<sp/>RETURN<sp/>address<sp/>is<sp/>stored<sp/>in<sp/>the<sp/>aligned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[ZSP<sp/>-<sp/>PtrSize]<sp/>which<sp/>makes<sp/>current<sp/>ZSP<sp/>unaligned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>v<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(regSize);</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"></highlight></codeline>
<codeline lineno="4575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>to<sp/>store<sp/>function<sp/>frame<sp/>pointer<sp/>we<sp/>have<sp/>to<sp/>count<sp/>it<sp/>as<sp/>well,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>it<sp/>is<sp/>the<sp/>first<sp/>thing<sp/>pushed<sp/>on<sp/>the<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;hasStackFrameReg()<sp/>&amp;&amp;<sp/>func-&gt;isStackFrameRegPreserved())</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>regSize;</highlight></codeline>
<codeline lineno="4579"><highlight class="normal"></highlight></codeline>
<codeline lineno="4580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>push/pop<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>+=<sp/>func-&gt;getPushPopStackSize();</highlight></codeline>
<codeline lineno="4582"><highlight class="normal"></highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Calculate<sp/>the<sp/>final<sp/>offset<sp/>to<sp/>keep<sp/>stack<sp/>alignment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;_alignStackSize<sp/>=<sp/>IntUtil::deltaTo&lt;uint32_t&gt;(v,<sp/>func-&gt;getRequiredStackAlignment());</highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"></highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Memory<sp/>stack<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4588"><highlight class="normal"><sp/><sp/>func-&gt;_memStackSize<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_memAllTotal;</highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/>func-&gt;_alignedMemStackSize<sp/>=<sp/>IntUtil::alignTo&lt;uint32_t&gt;(func-&gt;_memStackSize,<sp/>func-&gt;_requiredStackAlignment);</highlight></codeline>
<codeline lineno="4590"><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isNaked())<sp/>{</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argBaseReg<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa72a26d71150e372bcac7bb7023dcb628" kindref="member" tooltip="Index of SPL/SP/ESP/RSP registers.">kRegIndexSp</ref>;</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackAdjusted())<sp/>{</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackMisaligned())<sp/>{</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argBaseOffset<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getCallStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getAlignedMemStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getMoveStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getAlignStackSize());</highlight></codeline>
<codeline lineno="4601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argBaseOffset<sp/>-=<sp/>regSize;</highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argBaseOffset<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getCallStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getAlignedMemStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getMoveStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getPushPopStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getExtraStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getAlignStackSize());</highlight></codeline>
<codeline lineno="4611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argBaseOffset<sp/>=<sp/>func-&gt;getPushPopStackSize();</highlight></codeline>
<codeline lineno="4615"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4616"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argBaseReg<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae08e3d836183e8be188e68df5e2db1b6" kindref="member" tooltip="Index of BPL/BP/EBP/RBP registers.">kRegIndexBp</ref>;</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argBaseOffset<sp/>=<sp/>regSize;<sp/></highlight><highlight class="comment">//<sp/>Caused<sp/>by<sp/>&quot;push<sp/>zbp&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4621"><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_varBaseReg<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa72a26d71150e372bcac7bb7023dcb628" kindref="member" tooltip="Index of SPL/SP/ESP/RSP registers.">kRegIndexSp</ref>;</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_varBaseOffset<sp/>=<sp/>func-&gt;getCallStackSize();</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"></highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!func-&gt;isStackAdjusted())<sp/>{</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_varBaseOffset<sp/>=<sp/>-</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;_alignStackSize<sp/>+</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;_alignedMemStackSize<sp/>+</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;_moveStackSize);</highlight></codeline>
<codeline lineno="4630"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4631"><highlight class="normal"></highlight></codeline>
<codeline lineno="4632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="4633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4634"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4635"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="4636"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Error<sp/>X86X64Context_patchFuncMem(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>X86X64FuncNode*<sp/>func,<sp/>BaseNode*<sp/>stop)<sp/>{</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getCompiler();</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="4639"><highlight class="normal"></highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;getType()<sp/>==<sp/>kNodeTypeInst)<sp/>{</highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InstNode*<sp/>iNode<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node);</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"></highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iNode-&gt;hasMemOp())<sp/>{</highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mem*<sp/>m<sp/>=<sp/>iNode-&gt;getMemOp&lt;Mem&gt;();</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"></highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m-&gt;getMemType()<sp/>==<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref><sp/>&amp;&amp;<sp/><ref refid="structasmjit_1_1OperandUtil_1ad7ffa13ea065b296ee99988e2827a95a" kindref="member" tooltip="Get whether the id refers to BaseVar.">OperandUtil::isVarId</ref>(m-&gt;getBase()))<sp/>{</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>compiler-&gt;getVdById(m-&gt;getBase());</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vd<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"></highlight></codeline>
<codeline lineno="4651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vd-&gt;isMemArg())<sp/>{</highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;_vmem.base<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argBaseReg;</highlight></codeline>
<codeline lineno="4653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;_vmem.displacement<sp/>+=<sp/>vd-&gt;getMemOffset();</highlight></codeline>
<codeline lineno="4654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;_vmem.displacement<sp/>+=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argBaseOffset;</highlight></codeline>
<codeline lineno="4655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MemCell*<sp/>cell<sp/>=<sp/>vd-&gt;getMemCell();</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(cell<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="4659"><highlight class="normal"></highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;_vmem.base<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_varBaseReg;</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;_vmem.displacement<sp/>+=<sp/>cell-&gt;getOffset();</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m-&gt;_vmem.displacement<sp/>+=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_varBaseOffset;</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"></highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;getNext();</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>stop);</highlight></codeline>
<codeline lineno="4670"><highlight class="normal"></highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="4672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4674"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="4675"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Error<sp/>X86X64Context_translatePrologEpilog(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>X86X64FuncNode*<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getCompiler();</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/>X86X64FuncDecl*<sp/>decl<sp/>=<sp/>func-&gt;getDecl();</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"></highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regSize<sp/>=<sp/>compiler-&gt;getRegSize();</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"></highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/>int32_t<sp/>stackSize<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;getAlignStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;getCallStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;getAlignedMemStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;getMoveStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/>func-&gt;getExtraStackSize());</highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/>int32_t<sp/>stackAlignment<sp/>=<sp/>func-&gt;getRequiredStackAlignment();</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"></highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/>int32_t<sp/>stackBase;</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"><sp/><sp/>int32_t<sp/>stackPtr;</highlight></codeline>
<codeline lineno="4691"><highlight class="normal"></highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackAdjusted())<sp/>{</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/>stackBase<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getCallStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getAlignedMemStackSize());</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4698"><highlight class="normal"><sp/><sp/><sp/><sp/>stackBase<sp/>=<sp/>-</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="4699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getAlignedMemStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getAlignStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getExtraStackSize());</highlight></codeline>
<codeline lineno="4702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4703"><highlight class="normal"></highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i,<sp/>mask;</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regsGp<sp/><sp/>=<sp/>func-&gt;getSaveRestoreRegs(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>);</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regsMm<sp/><sp/>=<sp/>func-&gt;getSaveRestoreRegs(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>);</highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regsXmm<sp/>=<sp/>func-&gt;getSaveRestoreRegs(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>);</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"></highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>earlyPushPop<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useLeaEpilog<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"></highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/>GpReg<sp/>gpReg(self-&gt;_zsp);</highlight></codeline>
<codeline lineno="4713"><highlight class="normal"><sp/><sp/>GpReg<sp/>fpReg(self-&gt;_zbp);</highlight></codeline>
<codeline lineno="4714"><highlight class="normal"></highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/>Mem<sp/>fpOffset;</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Prolog]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"></highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/>compiler-&gt;_setCursor(func-&gt;getEntryNode());</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"></highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiler-&gt;getLogger())</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;comment(</highlight><highlight class="stringliteral">&quot;Prolog&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4725"><highlight class="normal"></highlight></codeline>
<codeline lineno="4726"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Entry.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isNaked())<sp/>{</highlight></codeline>
<codeline lineno="4728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackMisaligned())<sp/>{</highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fpReg.setIndex(func-&gt;getStackFrameRegIndex());</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fpOffset<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(self-&gt;_zsp,<sp/>static_cast&lt;int32_t&gt;(self-&gt;_stackFrameCell-&gt;getOffset()));</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>earlyPushPop<sp/>=<sp/>func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" kindref="member" tooltip="Whether to emit register load/save sequence using push/pop pairs.">kFuncFlagPushPop</ref>);</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(earlyPushPop)</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;emitPushSequence(regsGp);</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"></highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackFrameRegPreserved())</highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstPush,<sp/>fpReg);</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"></highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>fpReg,<sp/>self-&gt;_zsp);</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstPush,<sp/>fpReg);</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>fpReg,<sp/>self-&gt;_zsp);</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" kindref="member" tooltip="Whether to emit register load/save sequence using push/pop pairs.">kFuncFlagPushPop</ref>)<sp/>&amp;&amp;<sp/>!earlyPushPop)<sp/>{</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;emitPushSequence(regsGp);</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackMisaligned()<sp/>&amp;&amp;<sp/>regsGp<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>useLeaEpilog<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"></highlight></codeline>
<codeline lineno="4753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>stack<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackAdjusted())<sp/>{</highlight></codeline>
<codeline lineno="4755"><highlight class="normal"><sp/><sp/><sp/><sp/>stackBase<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(func-&gt;getAlignedMemStackSize()<sp/>+<sp/>func-&gt;getCallStackSize());</highlight></codeline>
<codeline lineno="4756"><highlight class="normal"></highlight></codeline>
<codeline lineno="4757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stackSize)</highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstSub,<sp/>self-&gt;_zsp,<sp/>stackSize);</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"></highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackMisaligned())</highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstAnd,<sp/>self-&gt;_zsp,<sp/>-stackAlignment);</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"></highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackMisaligned()<sp/>&amp;&amp;<sp/>func-&gt;isNaked())</highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>fpOffset,<sp/>fpReg);</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/>stackBase<sp/>=<sp/>-</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(func-&gt;getAlignStackSize()<sp/>+<sp/>func-&gt;getMoveStackSize());</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"></highlight></codeline>
<codeline lineno="4770"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>Xmm/Mm/Gp<sp/>(Mov).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/>stackPtr<sp/>=<sp/>stackBase;</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>mask<sp/>=<sp/>regsXmm;<sp/>mask<sp/>!=<sp/>0;<sp/>i++,<sp/>mask<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMovaps,<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(self-&gt;_zsp,<sp/>stackPtr),<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(i));</highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stackPtr<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>mask<sp/>=<sp/>regsMm;<sp/>mask<sp/>!=<sp/>0;<sp/>i++,<sp/>mask<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="4781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMovq,<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(self-&gt;_zsp,<sp/>stackPtr),<sp/><ref refid="group__asmjit__x86x64_1ga9a8333264f20709b9757ea2fe6d98062" kindref="member" tooltip="Get Mm register.">mm</ref>(i));</highlight></codeline>
<codeline lineno="4782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stackPtr<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"></highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" kindref="member" tooltip="Whether to emit register load/save sequence using push/pop pairs.">kFuncFlagPushPop</ref>))<sp/>{</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>mask<sp/>=<sp/>regsGp;<sp/>mask<sp/>!=<sp/>0;<sp/>i++,<sp/>mask<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(self-&gt;_zsp,<sp/>stackPtr),<sp/>gpReg.<ref refid="structasmjit_1_1x86x64_1_1Mem_1a4d0a35e5747c6be9ede462aa4d8ef79f" kindref="member" tooltip="Set memory operand index register code, variable id, or kInvalidValue.">setIndex</ref>(i));</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stackPtr<sp/>+=<sp/>regSize;</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"></highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Move-Args]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4798"><highlight class="normal"></highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea1aadaf95fc36acabc2de1980da2e4072" kindref="member" tooltip="Whether it&amp;#39;s required to move arguments to a new stack location, because of manual aligning...">kFuncFlagMoveArgs</ref>))<sp/>{</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>argStackPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>argStackSize<sp/>=<sp/>decl-&gt;getArgStackSize();</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"></highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>moveIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>moveCount<sp/>=<sp/>(argStackSize<sp/>+<sp/>regSize<sp/>-<sp/>1)<sp/>/<sp/>regSize;</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"></highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/>GpReg<sp/>r[8];</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>numRegs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"></highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++)</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;_stackFrameCopyGpIndex[i]<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[numRegs++]<sp/>=<sp/>gpReg.setIndex(func-&gt;_stackFrameCopyGpIndex[i]);</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"></highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>dSrc<sp/>=<sp/>func-&gt;getPushPopStackSize()<sp/>+<sp/>regSize;</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>dDst<sp/>=<sp/>func-&gt;getAlignStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getCallStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getAlignedMemStackSize()<sp/>+</highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func-&gt;getMoveStackSize();</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"></highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackFrameRegPreserved())</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dSrc<sp/>+=<sp/>regSize;</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"></highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem<sp/>mSrc<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(fpReg,<sp/>dSrc);</highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem<sp/>mDst<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(self-&gt;_zsp,<sp/>dDst);</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"></highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(moveIndex<sp/>&lt;<sp/>moveCount)<sp/>{</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>numMovs<sp/>=<sp/>IntUtil::iMin&lt;uint32_t&gt;(moveCount<sp/>-<sp/>moveIndex,<sp/>numRegs);</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"></highlight></codeline>
<codeline lineno="4828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numMovs;<sp/>i++)</highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>r[i],<sp/>mSrc.adjusted((moveIndex<sp/>+<sp/>i)<sp/>*<sp/>regSize));</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>numMovs;<sp/>i++)</highlight></codeline>
<codeline lineno="4831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>mDst.adjusted((moveIndex<sp/>+<sp/>i)<sp/>*<sp/>regSize),<sp/>r[i]);</highlight></codeline>
<codeline lineno="4832"><highlight class="normal"></highlight></codeline>
<codeline lineno="4833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>argStackPos<sp/>+=<sp/>numMovs<sp/>*<sp/>regSize;</highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>moveIndex<sp/>+=<sp/>numMovs;</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4836"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4837"><highlight class="normal"></highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiler-&gt;getLogger())</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;comment(</highlight><highlight class="stringliteral">&quot;Body&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4840"><highlight class="normal"></highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4842"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Epilog]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4844"><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/>compiler-&gt;_setCursor(func-&gt;getExitNode());</highlight></codeline>
<codeline lineno="4846"><highlight class="normal"></highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiler-&gt;getLogger())</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;comment(</highlight><highlight class="stringliteral">&quot;Epilog&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"></highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>Xmm/Mm/Gp<sp/>(Mov).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4851"><highlight class="normal"><sp/><sp/>stackPtr<sp/>=<sp/>stackBase;</highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>mask<sp/>=<sp/>regsXmm;<sp/>mask<sp/>!=<sp/>0;<sp/>i++,<sp/>mask<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMovaps,<sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(i),<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(self-&gt;_zsp,<sp/>stackPtr));</highlight></codeline>
<codeline lineno="4855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stackPtr<sp/>+=<sp/>16;</highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4858"><highlight class="normal"></highlight></codeline>
<codeline lineno="4859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>mask<sp/>=<sp/>regsMm;<sp/>mask<sp/>!=<sp/>0;<sp/>i++,<sp/>mask<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="4861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMovq,<sp/><ref refid="group__asmjit__x86x64_1ga9a8333264f20709b9757ea2fe6d98062" kindref="member" tooltip="Get Mm register.">mm</ref>(i),<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(self-&gt;_zsp,<sp/>stackPtr));</highlight></codeline>
<codeline lineno="4862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stackPtr<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="4863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4864"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4865"><highlight class="normal"></highlight></codeline>
<codeline lineno="4866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" kindref="member" tooltip="Whether to emit register load/save sequence using push/pop pairs.">kFuncFlagPushPop</ref>))<sp/>{</highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>mask<sp/>=<sp/>regsGp;<sp/>mask<sp/>!=<sp/>0;<sp/>i++,<sp/>mask<sp/>&gt;&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/>0x1)<sp/>{</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>gpReg.setIndex(i),<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(self-&gt;_zsp,<sp/>stackPtr));</highlight></codeline>
<codeline lineno="4870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stackPtr<sp/>+=<sp/>regSize;</highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4874"><highlight class="normal"></highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLeaEpilog)<sp/>{</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstLea,<sp/>self-&gt;_zsp,<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(fpReg,<sp/>-static_cast&lt;int32_t&gt;(func-&gt;getPushPopStackSize())));</highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!func-&gt;isStackMisaligned())<sp/>{</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackAdjusted()<sp/>&amp;&amp;<sp/>stackSize<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstAdd,<sp/>self-&gt;_zsp,<sp/>stackSize);</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4883"><highlight class="normal"></highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>Gp<sp/>(Push/Pop).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" kindref="member" tooltip="Whether to emit register load/save sequence using push/pop pairs.">kFuncFlagPushPop</ref>)<sp/>&amp;&amp;<sp/>!earlyPushPop)</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;emitPopSequence(regsGp);</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"></highlight></codeline>
<codeline lineno="4888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Emms.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea04a47eab8f496c62b46ee10b0db1b02c" kindref="member" tooltip="Whether to emit EMMS instruction in epilog (auto-detected).">kFuncFlagEmms</ref>))</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstEmms);</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"></highlight></codeline>
<codeline lineno="4892"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>MFence/SFence/LFence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea5a7da13edc4314da69d0c84c5a743c2b" kindref="member" tooltip="Whether to emit SFence instruction in epilog (auto-detected).">kFuncFlagSFence</ref>)<sp/>&amp;<sp/>func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eae2310ea543f281708f892f3b7db37952" kindref="member" tooltip="Whether to emit LFence instruction in epilog (auto-detected).">kFuncFlagLFence</ref>))</highlight></codeline>
<codeline lineno="4894"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMfence);</highlight></codeline>
<codeline lineno="4895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea5a7da13edc4314da69d0c84c5a743c2b" kindref="member" tooltip="Whether to emit SFence instruction in epilog (auto-detected).">kFuncFlagSFence</ref>))</highlight></codeline>
<codeline lineno="4896"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstSfence);</highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eae2310ea543f281708f892f3b7db37952" kindref="member" tooltip="Whether to emit LFence instruction in epilog (auto-detected).">kFuncFlagLFence</ref>))</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstLfence);</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"></highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Leave.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isNaked())<sp/>{</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackMisaligned())<sp/>{</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>self-&gt;_zsp,<sp/>fpOffset);</highlight></codeline>
<codeline lineno="4904"><highlight class="normal"></highlight></codeline>
<codeline lineno="4905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;isStackFrameRegPreserved())</highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstPop,<sp/>fpReg);</highlight></codeline>
<codeline lineno="4907"><highlight class="normal"></highlight></codeline>
<codeline lineno="4908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(earlyPushPop)</highlight></codeline>
<codeline lineno="4909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;emitPopSequence(regsGp);</highlight></codeline>
<codeline lineno="4910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4911"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4912"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLeaEpilog)<sp/>{</highlight></codeline>
<codeline lineno="4914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstPop,<sp/>fpReg);</highlight></codeline>
<codeline lineno="4915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(func-&gt;hasFuncFlag(<ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eadeccd860e44737b6746fc18c553b9683" kindref="member" tooltip="Whether to emit &amp;quot;leave&amp;quot; instead of two instructions in case that the function is not naked or misalig...">kFuncFlagLeave</ref>))<sp/>{</highlight></codeline>
<codeline lineno="4917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstLeave);</highlight></codeline>
<codeline lineno="4918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstMov,<sp/>self-&gt;_zsp,<sp/>fpReg);</highlight></codeline>
<codeline lineno="4921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstPop,<sp/>fpReg);</highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4924"><highlight class="normal"></highlight></codeline>
<codeline lineno="4925"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Emit<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(decl-&gt;getCalleePopsStack())</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstRet,<sp/>static_cast&lt;int32_t&gt;(decl-&gt;getArgStackSize()));</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;emit(kInstRet);</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"></highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="4932"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4933"><highlight class="normal"></highlight></codeline>
<codeline lineno="4934"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4935"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>Translate<sp/>-<sp/>Jump]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4936"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4937"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4938"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="4939"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64Context_translateJump(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>JumpNode*<sp/>jNode,<sp/>TargetNode*<sp/>jTarget)<sp/>{</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getCompiler();</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>extNode<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getExtraBlock();</highlight></codeline>
<codeline lineno="4942"><highlight class="normal"></highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>State<sp/>Change.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/>compiler-&gt;_setCursor(extNode);</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;switchState(jTarget-&gt;getState());</highlight></codeline>
<codeline lineno="4946"><highlight class="normal"></highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>any<sp/>instruction<sp/>was<sp/>added<sp/>during<sp/>switchState()<sp/>we<sp/>have<sp/>to<sp/>wrap<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>generated<sp/>code<sp/>in<sp/>a<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4949"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compiler-&gt;getCursor()<sp/>!=<sp/>extNode)<sp/>{</highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/>TargetNode*<sp/>jTrampolineTarget<sp/>=<sp/>compiler-&gt;newTarget();</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"></highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>jump<sp/>to<sp/>the<sp/>target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;jmp(jTarget-&gt;getLabel());</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"></highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>trampoline-label<sp/>we<sp/>jump<sp/>to<sp/>change<sp/>the<sp/>state.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/>extNode<sp/>=<sp/>compiler-&gt;setCursor(extNode);</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;addNode(jTrampolineTarget);</highlight></codeline>
<codeline lineno="4958"><highlight class="normal"></highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally,<sp/>patch<sp/>the<sp/>jump<sp/>target.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(jNode-&gt;getOpCount()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"><sp/><sp/><sp/><sp/>jNode-&gt;_opList[0]<sp/>=<sp/>jTrampolineTarget-&gt;getLabel();</highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/>jNode-&gt;_target<sp/>=<sp/>jTrampolineTarget;</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4964"><highlight class="normal"></highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>extNode<sp/>and<sp/>load<sp/>the<sp/>state<sp/>back.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;setExtraBlock(extNode);</highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;loadState(jNode-&gt;_state);</highlight></codeline>
<codeline lineno="4968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4969"><highlight class="normal"></highlight></codeline>
<codeline lineno="4970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>Translate<sp/>-<sp/>Ret]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4972"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4973"><highlight class="normal"></highlight></codeline>
<codeline lineno="4974"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Error<sp/>X86X64Context_translateRet(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>RetNode*<sp/>rNode,<sp/>TargetNode*<sp/>exitTarget)<sp/>{</highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node<sp/>=<sp/>rNode-&gt;getNext();</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="4978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(node-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>found<sp/>an<sp/>exit<sp/>label<sp/>we<sp/>just<sp/>return,<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>emit<sp/>jump<sp/>to<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeTarget:</highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;TargetNode*&gt;(node)<sp/>==<sp/>exitTarget)</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_EmitRet;</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"></highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeEmbed:</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeInst:</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeCall:</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeRet:</highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_EmitRet;</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"></highlight></codeline>
<codeline lineno="4992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continue<sp/>iterating.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeComment:</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeAlign:</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeHint:</highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"></highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>node<sp/>to<sp/>be<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeFunc:</highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getCompiler()-&gt;setError(<ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa78799e101ad4020abb524d7ebef96902" kindref="member" tooltip="Invalid state.">kErrorInvalidState</ref>);</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"></highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can&apos;t<sp/>go<sp/>forward<sp/>from<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeEnd:</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5006"><highlight class="normal"></highlight></codeline>
<codeline lineno="5007"><highlight class="normal"><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;getNext();</highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"></highlight></codeline>
<codeline lineno="5010"><highlight class="normal">_EmitRet:</highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getCompiler();</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"></highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;_setCursor(rNode);</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/>compiler-&gt;jmp(exitTarget-&gt;getLabel());</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="5018"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"></highlight></codeline>
<codeline lineno="5020"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5021"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>Translate<sp/>-<sp/>Func]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5022"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight></codeline>
<codeline lineno="5024"><highlight class="normal">Error<sp/>X86X64Context::translate()<sp/>{</highlight></codeline>
<codeline lineno="5025"><highlight class="normal"><sp/><sp/>X86X64Compiler*<sp/>compiler<sp/>=<sp/>getCompiler();</highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/>X86X64FuncNode*<sp/>func<sp/>=<sp/>getFunc();</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"></highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>allocator<sp/>contexts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/>X86X64VarAlloc<sp/>vAlloc(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/>X86X64CallAlloc<sp/>cAlloc(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"></highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Flow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5033"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node_<sp/>=<sp/>func;</highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>next<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="5035"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>stop<sp/>=<sp/>getStop();</highlight></codeline>
<codeline lineno="5036"><highlight class="normal"></highlight></codeline>
<codeline lineno="5037"><highlight class="normal"><sp/><sp/>PodList&lt;BaseNode*&gt;::Link*<sp/>jLink<sp/>=<sp/>_jccList.getFirst();</highlight></codeline>
<codeline lineno="5038"><highlight class="normal"></highlight></codeline>
<codeline lineno="5039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="5040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node_-&gt;isTranslated())<sp/>{</highlight></codeline>
<codeline lineno="5041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Switch<sp/>state<sp/>if<sp/>we<sp/>went<sp/>to<sp/>the<sp/>already<sp/>translated<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;getType()<sp/>==<sp/>kNodeTypeTarget)<sp/>{</highlight></codeline>
<codeline lineno="5043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TargetNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="5044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;_setCursor(node-&gt;getPrev());</highlight></codeline>
<codeline lineno="5045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switchState(node-&gt;getState());</highlight></codeline>
<codeline lineno="5046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5047"><highlight class="normal"></highlight></codeline>
<codeline lineno="5048"><highlight class="normal">_NextGroup:</highlight></codeline>
<codeline lineno="5049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jLink<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_Done;</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>jLink-&gt;getValue();</highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jLink<sp/>=<sp/>jLink-&gt;getNext();</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"></highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseNode*<sp/>jFlow<sp/>=<sp/>X86X64Context_getOppositeJccFlow(static_cast&lt;JumpNode*&gt;(node_));</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadState(node_-&gt;getState());</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"></highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jFlow-&gt;getState())<sp/>{</highlight></codeline>
<codeline lineno="5060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64Context_translateJump(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;JumpNode*&gt;(node_),</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;TargetNode*&gt;(jFlow));</highlight></codeline>
<codeline lineno="5063"><highlight class="normal"></highlight></codeline>
<codeline lineno="5064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>jFlow;</highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;isTranslated())</highlight></codeline>
<codeline lineno="5066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NextGroup;</highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>jFlow;</highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"></highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/>next<sp/>=<sp/>node_-&gt;getNext();</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/>node_-&gt;addFlags(kNodeFlagIsTranslated);</highlight></codeline>
<codeline lineno="5078"><highlight class="normal"></highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(node_-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="5080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Align<sp/>/<sp/>Embed]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5083"><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeAlign:</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeEmbed:</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5087"><highlight class="normal"></highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Target]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5091"><highlight class="normal"></highlight></codeline>
<codeline lineno="5092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeTarget:<sp/>{</highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TargetNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="5094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!node-&gt;hasState());</highlight></codeline>
<codeline lineno="5095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;setState(saveState());</highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"></highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Inst/Call/SArg/Ret]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5102"><highlight class="normal"></highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeInst:</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeCall:</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeSArg:</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>VarAttr&apos;s<sp/>unuse<sp/>flags<sp/>based<sp/>on<sp/>liveness<sp/>of<sp/>the<sp/>next<sp/>node.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!node_-&gt;isJcc())<sp/>{</highlight></codeline>
<codeline lineno="5108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarInst*<sp/>vi<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">VarInst*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_-&gt;getVarInst());</highlight></codeline>
<codeline lineno="5109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarBits*<sp/>liveness<sp/>=<sp/>next-&gt;getLiveness();</highlight></codeline>
<codeline lineno="5110"><highlight class="normal"></highlight></codeline>
<codeline lineno="5111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>liveness<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>vaList<sp/>=<sp/>vi-&gt;getVaList();</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>vaCount<sp/>=<sp/>vi-&gt;getVaCount();</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"></highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vaCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>&amp;vaList[i];</highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="5118"><highlight class="normal"></highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!liveness-&gt;getBit(vd-&gt;getContextId()))</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>va-&gt;addFlags(kVarAttrUnuse);</highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"></highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;getType()<sp/>==<sp/>kNodeTypeCall)<sp/>{</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASMJIT_PROPAGATE_ERROR(cAlloc.run(static_cast&lt;X86X64CallNode*&gt;(node_)));</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Fall<sp/>through<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5130"><highlight class="normal"></highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeHint:</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeRet:<sp/>{</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASMJIT_PROPAGATE_ERROR(vAlloc.run(node_));</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>conditional/unconditional<sp/>jump.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;isJmpOrJcc())<sp/>{</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JumpNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">JumpNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="5138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetNode*<sp/>jTarget<sp/>=<sp/>node-&gt;getTarget();</highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;isJmp())<sp/>{</highlight></codeline>
<codeline lineno="5141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jTarget-&gt;hasState())<sp/>{</highlight></codeline>
<codeline lineno="5142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;_setCursor(node-&gt;getPrev());</highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switchState(jTarget-&gt;getState());</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"></highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NextGroup;</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>jTarget;</highlight></codeline>
<codeline lineno="5149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseNode*<sp/>jNext<sp/>=<sp/>node-&gt;getNext();</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"></highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jTarget-&gt;isTranslated())<sp/>{</highlight></codeline>
<codeline lineno="5155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jNext-&gt;isTranslated())<sp/>{</highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(jNext-&gt;getType()<sp/>==<sp/>kNodeTypeTarget);</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>State<sp/>-<sp/>Do<sp/>intersection<sp/>of<sp/>two<sp/>states<sp/>if<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"></highlight></codeline>
<codeline lineno="5160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseVarState*<sp/>savedState<sp/>=<sp/>saveState();</highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;setState(savedState);</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"></highlight></codeline>
<codeline lineno="5163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64Context_translateJump(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>node,<sp/>jTarget);</highlight></codeline>
<codeline lineno="5164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>jNext;</highlight></codeline>
<codeline lineno="5165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jNext-&gt;isTranslated())<sp/>{</highlight></codeline>
<codeline lineno="5167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(jNext-&gt;getType()<sp/>==<sp/>kNodeTypeTarget);</highlight></codeline>
<codeline lineno="5168"><highlight class="normal"></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseVarState*<sp/>savedState<sp/>=<sp/>saveState();</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;setState(savedState);</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"></highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler-&gt;_setCursor(node);</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switchState(static_cast&lt;TargetNode*&gt;(jNext)-&gt;getState());</highlight></codeline>
<codeline lineno="5174"><highlight class="normal"></highlight></codeline>
<codeline lineno="5175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>jTarget;</highlight></codeline>
<codeline lineno="5176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;setState(saveState());</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>=<sp/>X86X64Context_getJccFlow(node);</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;isRet())<sp/>{</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASMJIT_PROPAGATE_ERROR(</highlight></codeline>
<codeline lineno="5185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64Context_translateRet(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>static_cast&lt;RetNode*&gt;(node_),<sp/>func-&gt;getExitNode()));</highlight></codeline>
<codeline lineno="5186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"></highlight></codeline>
<codeline lineno="5190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[Func]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5193"><highlight class="normal"></highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeFunc:<sp/>{</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(node_<sp/>==<sp/>func);</highlight></codeline>
<codeline lineno="5196"><highlight class="normal"></highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64FuncDecl*<sp/>decl<sp/>=<sp/>func-&gt;getDecl();</highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarInst*<sp/>vi<sp/>=<sp/>func-&gt;getVarInst&lt;VarInst&gt;();</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"></highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>argCount<sp/>=<sp/>func-&gt;_x86Decl.getArgCount();</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight></codeline>
<codeline lineno="5204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>argCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/>decl-&gt;getArg(i);</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"></highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>func-&gt;getArg(i);</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>vi-&gt;findVa(vd);</highlight></codeline>
<codeline lineno="5209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(va<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="5210"><highlight class="normal"></highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va-&gt;getFlags()<sp/>&amp;<sp/>kVarAttrUnuse)</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"></highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>regIndex<sp/>=<sp/>va-&gt;getOutRegIndex();</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(regIndex<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref><sp/>&amp;&amp;<sp/>(va-&gt;getFlags()<sp/>&amp;<sp/>kVarAttrOutConv)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="5216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(vd-&gt;getClass())<sp/>{</highlight></codeline>
<codeline lineno="5217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>:<sp/>attach&lt;kRegClassGp&gt;(vd,<sp/>regIndex,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref>:<sp/>attach&lt;kRegClassMm&gt;(vd,<sp/>regIndex,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>:<sp/>attach&lt;kRegClassXy&gt;(vd,<sp/>regIndex,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(va-&gt;hasFlag(kVarAttrOutConv))<sp/>{</highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>[COMPILER]<sp/>Function<sp/>Argument<sp/>Conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd-&gt;_isMemArg<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd-&gt;setMemOffset(arg.getStackOffset());</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vd-&gt;setState(kVarStateMem);</highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5235"><highlight class="normal"></highlight></codeline>
<codeline lineno="5236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5239"><highlight class="normal"></highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeEnd:<sp/>{</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NextGroup;</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5243"><highlight class="normal"></highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"></highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next<sp/>==<sp/>stop)</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>_NextGroup;</highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>next;</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5252"><highlight class="normal"></highlight></codeline>
<codeline lineno="5253"><highlight class="normal">_Done:</highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/>ASMJIT_PROPAGATE_ERROR(X86X64Context_initFunc(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>func));</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"><sp/><sp/>ASMJIT_PROPAGATE_ERROR(X86X64Context_patchFuncMem(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>func,<sp/>stop));</highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/>ASMJIT_PROPAGATE_ERROR(X86X64Context_translatePrologEpilog(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>func));</highlight></codeline>
<codeline lineno="5257"><highlight class="normal"></highlight></codeline>
<codeline lineno="5258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="5259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"></highlight></codeline>
<codeline lineno="5261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64Context<sp/>-<sp/>Serialize]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5264"><highlight class="normal"></highlight></codeline>
<codeline lineno="5265"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>LoggingEnabled&gt;</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Error<sp/>X86X64Context_serialize(X86X64Context*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>X86X64Assembler*<sp/>assembler,<sp/>BaseNode*<sp/>start,<sp/>BaseNode*<sp/>stop)<sp/>{</highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/>BaseNode*<sp/>node_<sp/>=<sp/>start;</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"><sp/><sp/>StringBuilder&amp;<sp/>sb<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_stringBuilder;</highlight></codeline>
<codeline lineno="5269"><highlight class="normal"></highlight></codeline>
<codeline lineno="5270"><highlight class="normal"><sp/><sp/>BaseLogger*<sp/>logger;</highlight></codeline>
<codeline lineno="5271"><highlight class="normal"><sp/><sp/>uint32_t<sp/>vdCount;</highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/>uint32_t<sp/>annotationLength;</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"></highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LoggingEnabled)<sp/>{</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/>logger<sp/>=<sp/>assembler-&gt;getLogger();</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"></highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/>vdCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_contextVd.getLength());</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/>annotationLength<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_annotationLength;</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"></highlight></codeline>
<codeline lineno="5281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>labels<sp/>on<sp/>Assembler<sp/>side.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/>ASMJIT_PROPAGATE_ERROR(</highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/>assembler-&gt;_registerIndexedLabels(self-&gt;getCompiler()-&gt;_targets.getLength()));</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"></highlight></codeline>
<codeline lineno="5285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LoggingEnabled)<sp/>{</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb.clear();</highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight></codeline>
<codeline lineno="5289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;getComment())<sp/>{</highlight></codeline>
<codeline lineno="5290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendString(node_-&gt;getComment());</highlight></codeline>
<codeline lineno="5291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5292"><highlight class="normal"></highlight></codeline>
<codeline lineno="5293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sb.getLength()<sp/>&lt;<sp/>annotationLength)</highlight></codeline>
<codeline lineno="5294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendChars(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>annotationLength<sp/>-<sp/>sb.getLength());</highlight></codeline>
<codeline lineno="5295"><highlight class="normal"></highlight></codeline>
<codeline lineno="5296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>sb.getLength();</highlight></codeline>
<codeline lineno="5297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sb.appendChars(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>vdCount);</highlight></codeline>
<codeline lineno="5298"><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node_-&gt;hasLiveness())<sp/>{</highlight></codeline>
<codeline lineno="5300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarBits*<sp/>liveness<sp/>=<sp/>node_-&gt;getLiveness();</highlight></codeline>
<codeline lineno="5301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarInst*<sp/>vi<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">VarInst*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_-&gt;getVarInst());</highlight></codeline>
<codeline lineno="5302"><highlight class="normal"></highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vdCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(liveness-&gt;getBit(i))</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.getData()[offset<sp/>+<sp/>i]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5308"><highlight class="normal"></highlight></codeline>
<codeline lineno="5309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vi<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="5310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>vaCount<sp/>=<sp/>vi-&gt;getVaCount();</highlight></codeline>
<codeline lineno="5311"><highlight class="normal"></highlight></codeline>
<codeline lineno="5312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vaCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="5313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarAttr*<sp/>va<sp/>=<sp/>vi-&gt;getVa(i);</highlight></codeline>
<codeline lineno="5314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VarData*<sp/>vd<sp/>=<sp/>va-&gt;getVd();</highlight></codeline>
<codeline lineno="5315"><highlight class="normal"></highlight></codeline>
<codeline lineno="5316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>flags<sp/>=<sp/>va-&gt;getFlags();</highlight></codeline>
<codeline lineno="5317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5318"><highlight class="normal"></highlight></codeline>
<codeline lineno="5319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(flags<sp/>&amp;<sp/>kVarAttrInAll)<sp/>&amp;&amp;<sp/>!(flags<sp/>&amp;<sp/>kVarAttrOutAll))<sp/>c<sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(flags<sp/>&amp;<sp/>kVarAttrInAll)<sp/>&amp;&amp;<sp/><sp/>(flags<sp/>&amp;<sp/>kVarAttrOutAll))<sp/>c<sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>(flags<sp/>&amp;<sp/>kVarAttrInAll)<sp/>&amp;&amp;<sp/><sp/>(flags<sp/>&amp;<sp/>kVarAttrOutAll))<sp/>c<sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5322"><highlight class="normal"></highlight></codeline>
<codeline lineno="5323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((flags<sp/>&amp;<sp/>kVarAttrUnuse))</highlight></codeline>
<codeline lineno="5324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>-=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5325"><highlight class="normal"></highlight></codeline>
<codeline lineno="5326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.getData()[offset<sp/>+<sp/>vd-&gt;getContextId()]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="5327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5330"><highlight class="normal"></highlight></codeline>
<codeline lineno="5331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assembler-&gt;_comment<sp/>=<sp/>sb.getData();</highlight></codeline>
<codeline lineno="5332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5333"><highlight class="normal"></highlight></codeline>
<codeline lineno="5334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(node_-&gt;getType())<sp/>{</highlight></codeline>
<codeline lineno="5335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeAlign:<sp/>{</highlight></codeline>
<codeline lineno="5336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AlignNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">AlignNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="5337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assembler-&gt;align(node-&gt;getSize());</highlight></codeline>
<codeline lineno="5338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5340"><highlight class="normal"></highlight></codeline>
<codeline lineno="5341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeEmbed:<sp/>{</highlight></codeline>
<codeline lineno="5342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EmbedNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">EmbedNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="5343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assembler-&gt;embed(node-&gt;getData(),<sp/>node-&gt;getSize());</highlight></codeline>
<codeline lineno="5344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5346"><highlight class="normal"></highlight></codeline>
<codeline lineno="5347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeComment:<sp/>{</highlight></codeline>
<codeline lineno="5348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CommentNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">CommentNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="5349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(LoggingEnabled)<sp/>{</highlight></codeline>
<codeline lineno="5350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logger-&gt;logFormat(kLoggerStyleComment,</highlight></codeline>
<codeline lineno="5351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;%s;<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>logger-&gt;getIndentation(),<sp/>node-&gt;getComment());</highlight></codeline>
<codeline lineno="5352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5355"><highlight class="normal"></highlight></codeline>
<codeline lineno="5356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeHint:<sp/>{</highlight></codeline>
<codeline lineno="5357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5359"><highlight class="normal"></highlight></codeline>
<codeline lineno="5360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeTarget:<sp/>{</highlight></codeline>
<codeline lineno="5361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TargetNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">TargetNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="5362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assembler-&gt;bind(node-&gt;getLabel());</highlight></codeline>
<codeline lineno="5363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5365"><highlight class="normal"></highlight></codeline>
<codeline lineno="5366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeInst:<sp/>{</highlight></codeline>
<codeline lineno="5367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InstNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">InstNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="5368"><highlight class="normal"></highlight></codeline>
<codeline lineno="5369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>code<sp/>=<sp/>node-&gt;getCode();</highlight></codeline>
<codeline lineno="5370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>opCount<sp/>=<sp/>node-&gt;getOpCount();</highlight></codeline>
<codeline lineno="5371"><highlight class="normal"></highlight></codeline>
<codeline lineno="5372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand*<sp/>opList<sp/>=<sp/>node-&gt;getOpList();</highlight></codeline>
<codeline lineno="5373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assembler-&gt;_options<sp/>=<sp/>node-&gt;getOptions();</highlight></codeline>
<codeline lineno="5374"><highlight class="normal"></highlight></codeline>
<codeline lineno="5375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand*<sp/>o0<sp/>=<sp/>&amp;noOperand;</highlight></codeline>
<codeline lineno="5376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand*<sp/>o1<sp/>=<sp/>&amp;noOperand;</highlight></codeline>
<codeline lineno="5377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand*<sp/>o2<sp/>=<sp/>&amp;noOperand;</highlight></codeline>
<codeline lineno="5378"><highlight class="normal"></highlight></codeline>
<codeline lineno="5379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;isSpecial())<sp/>{</highlight></codeline>
<codeline lineno="5380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(code)<sp/>{</highlight></codeline>
<codeline lineno="5381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCpuid:</highlight></codeline>
<codeline lineno="5382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5383"><highlight class="normal"></highlight></codeline>
<codeline lineno="5384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCbw:</highlight></codeline>
<codeline lineno="5385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCdq:</highlight></codeline>
<codeline lineno="5386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCdqe:</highlight></codeline>
<codeline lineno="5387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCwd:</highlight></codeline>
<codeline lineno="5388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCwde:</highlight></codeline>
<codeline lineno="5389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCqo:</highlight></codeline>
<codeline lineno="5390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5391"><highlight class="normal"></highlight></codeline>
<codeline lineno="5392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCmpxchg:</highlight></codeline>
<codeline lineno="5393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o0<sp/>=<sp/>&amp;opList[1];</highlight></codeline>
<codeline lineno="5394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o1<sp/>=<sp/>&amp;opList[2];</highlight></codeline>
<codeline lineno="5395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5396"><highlight class="normal"></highlight></codeline>
<codeline lineno="5397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCmpxchg8b<sp/>:</highlight></codeline>
<codeline lineno="5398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstCmpxchg16b:</highlight></codeline>
<codeline lineno="5399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o0<sp/>=<sp/>&amp;opList[4];</highlight></codeline>
<codeline lineno="5400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5401"><highlight class="normal"></highlight></codeline>
<codeline lineno="5402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstDaa:</highlight></codeline>
<codeline lineno="5403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstDas:</highlight></codeline>
<codeline lineno="5404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5405"><highlight class="normal"></highlight></codeline>
<codeline lineno="5406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstImul:</highlight></codeline>
<codeline lineno="5407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMul:</highlight></codeline>
<codeline lineno="5408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstIdiv:</highlight></codeline>
<codeline lineno="5409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstDiv:</highlight></codeline>
<codeline lineno="5410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Assume<sp/>&quot;Mul/Div<sp/>dst_hi<sp/>(implicit),<sp/>dst_lo<sp/>(implicit),<sp/>src<sp/>(explicit)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(opCount<sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="5412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o0<sp/>=<sp/>&amp;opList[2];</highlight></codeline>
<codeline lineno="5413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5414"><highlight class="normal"></highlight></codeline>
<codeline lineno="5415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMovptr:</highlight></codeline>
<codeline lineno="5416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5417"><highlight class="normal"></highlight></codeline>
<codeline lineno="5418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstLahf:</highlight></codeline>
<codeline lineno="5419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstSahf:</highlight></codeline>
<codeline lineno="5420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5421"><highlight class="normal"></highlight></codeline>
<codeline lineno="5422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMaskmovq:</highlight></codeline>
<codeline lineno="5423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMaskmovdqu:</highlight></codeline>
<codeline lineno="5424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o0<sp/>=<sp/>&amp;opList[1];</highlight></codeline>
<codeline lineno="5425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o1<sp/>=<sp/>&amp;opList[2];</highlight></codeline>
<codeline lineno="5426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5427"><highlight class="normal"></highlight></codeline>
<codeline lineno="5428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstEnter:</highlight></codeline>
<codeline lineno="5429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o0<sp/>=<sp/>&amp;opList[0];</highlight></codeline>
<codeline lineno="5430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o1<sp/>=<sp/>&amp;opList[1];</highlight></codeline>
<codeline lineno="5431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5432"><highlight class="normal"></highlight></codeline>
<codeline lineno="5433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstLeave:</highlight></codeline>
<codeline lineno="5434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5435"><highlight class="normal"></highlight></codeline>
<codeline lineno="5436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRet:</highlight></codeline>
<codeline lineno="5437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opCount<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="5438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o0<sp/>=<sp/>&amp;opList[0];</highlight></codeline>
<codeline lineno="5439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5440"><highlight class="normal"></highlight></codeline>
<codeline lineno="5441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMonitor:</highlight></codeline>
<codeline lineno="5442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstMwait:</highlight></codeline>
<codeline lineno="5443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5444"><highlight class="normal"></highlight></codeline>
<codeline lineno="5445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPop:</highlight></codeline>
<codeline lineno="5446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o0<sp/>=<sp/>&amp;opList[0];</highlight></codeline>
<codeline lineno="5447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5448"><highlight class="normal"></highlight></codeline>
<codeline lineno="5449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPopa:</highlight></codeline>
<codeline lineno="5450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPopf:</highlight></codeline>
<codeline lineno="5451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5452"><highlight class="normal"></highlight></codeline>
<codeline lineno="5453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPush:</highlight></codeline>
<codeline lineno="5454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o0<sp/>=<sp/>&amp;opList[0];</highlight></codeline>
<codeline lineno="5455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5456"><highlight class="normal"></highlight></codeline>
<codeline lineno="5457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPusha:</highlight></codeline>
<codeline lineno="5458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstPushf:</highlight></codeline>
<codeline lineno="5459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5460"><highlight class="normal"></highlight></codeline>
<codeline lineno="5461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRcl:</highlight></codeline>
<codeline lineno="5462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRcr:</highlight></codeline>
<codeline lineno="5463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRol:</highlight></codeline>
<codeline lineno="5464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRor:</highlight></codeline>
<codeline lineno="5465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstSal:</highlight></codeline>
<codeline lineno="5466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstSar:</highlight></codeline>
<codeline lineno="5467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstShl:</highlight></codeline>
<codeline lineno="5468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstShr:</highlight></codeline>
<codeline lineno="5469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o0<sp/>=<sp/>&amp;opList[0];</highlight></codeline>
<codeline lineno="5470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o1<sp/>=<sp/>&amp;<ref refid="group__asmjit__x86x64_1ga32fe646af6161cb0da35bfc3aa7b8530" kindref="member" tooltip="Gpb-lo register.">cl</ref>;</highlight></codeline>
<codeline lineno="5471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5472"><highlight class="normal"></highlight></codeline>
<codeline lineno="5473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstShld:</highlight></codeline>
<codeline lineno="5474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstShrd:</highlight></codeline>
<codeline lineno="5475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o0<sp/>=<sp/>&amp;opList[0];</highlight></codeline>
<codeline lineno="5476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o1<sp/>=<sp/>&amp;opList[1];</highlight></codeline>
<codeline lineno="5477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o2<sp/>=<sp/>&amp;<ref refid="group__asmjit__x86x64_1ga32fe646af6161cb0da35bfc3aa7b8530" kindref="member" tooltip="Gpb-lo register.">cl</ref>;</highlight></codeline>
<codeline lineno="5478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5479"><highlight class="normal"></highlight></codeline>
<codeline lineno="5480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRdtsc:</highlight></codeline>
<codeline lineno="5481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRdtscp:</highlight></codeline>
<codeline lineno="5482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5483"><highlight class="normal"></highlight></codeline>
<codeline lineno="5484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepLodsb<sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepLodsd<sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepLodsq<sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepLodsw<sp/><sp/>:</highlight></codeline>
<codeline lineno="5485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepMovsb<sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepMovsd<sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepMovsq<sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepMovsw<sp/><sp/>:</highlight></codeline>
<codeline lineno="5486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepStosb<sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepStosd<sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepStosq<sp/><sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepStosw<sp/><sp/>:</highlight></codeline>
<codeline lineno="5487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeCmpsb<sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeCmpsd<sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeCmpsq<sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeCmpsw<sp/>:</highlight></codeline>
<codeline lineno="5488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeScasb<sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeScasd<sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeScasq<sp/>:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepeScasw<sp/>:</highlight></codeline>
<codeline lineno="5489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneCmpsb:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneCmpsd:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneCmpsq:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneCmpsw:</highlight></codeline>
<codeline lineno="5490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneScasb:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneScasd:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneScasq:<sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kInstRepneScasw:</highlight></codeline>
<codeline lineno="5491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5492"><highlight class="normal"></highlight></codeline>
<codeline lineno="5493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="5495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="5498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opCount<sp/>&gt;<sp/>0)<sp/>o0<sp/>=<sp/>&amp;opList[0];</highlight></codeline>
<codeline lineno="5499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opCount<sp/>&gt;<sp/>1)<sp/>o1<sp/>=<sp/>&amp;opList[1];</highlight></codeline>
<codeline lineno="5500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opCount<sp/>&gt;<sp/>2)<sp/>o2<sp/>=<sp/>&amp;opList[2];</highlight></codeline>
<codeline lineno="5501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5502"><highlight class="normal"></highlight></codeline>
<codeline lineno="5503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>this<sp/>form,<sp/>because<sp/>it<sp/>is<sp/>the<sp/>main<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assembler-&gt;emit(code,<sp/>*o0,<sp/>*o1,<sp/>*o2);</highlight></codeline>
<codeline lineno="5505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5507"><highlight class="normal"></highlight></codeline>
<codeline lineno="5508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>scope<sp/>and<sp/>return<sp/>is<sp/>translated<sp/>to<sp/>another<sp/>nodes,<sp/>no<sp/>special</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>handling<sp/>is<sp/>required<sp/>at<sp/>this<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeFunc:</highlight></codeline>
<codeline lineno="5511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeEnd:</highlight></codeline>
<codeline lineno="5512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeRet:<sp/>{</highlight></codeline>
<codeline lineno="5513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5515"><highlight class="normal"></highlight></codeline>
<codeline lineno="5516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Function<sp/>call<sp/>adds<sp/>nodes<sp/>before<sp/>and<sp/>after,<sp/>but<sp/>it&apos;s<sp/>required<sp/>to<sp/>emit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>call<sp/>instruction<sp/>by<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>kNodeTypeCall:<sp/>{</highlight></codeline>
<codeline lineno="5519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>X86X64CallNode*<sp/>node<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">X86X64CallNode*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(node_);</highlight></codeline>
<codeline lineno="5520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assembler-&gt;emit(kInstCall,<sp/>node-&gt;_target,<sp/>noOperand,<sp/>noOperand);</highlight></codeline>
<codeline lineno="5521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5523"><highlight class="normal"></highlight></codeline>
<codeline lineno="5524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="5525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="5526"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5527"><highlight class="normal"></highlight></codeline>
<codeline lineno="5528"><highlight class="normal"><sp/><sp/><sp/><sp/>node_<sp/>=<sp/>node_-&gt;getNext();</highlight></codeline>
<codeline lineno="5529"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node_<sp/>!=<sp/>stop);</highlight></codeline>
<codeline lineno="5530"><highlight class="normal"></highlight></codeline>
<codeline lineno="5531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="5532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5533"><highlight class="normal"></highlight></codeline>
<codeline lineno="5534"><highlight class="normal">Error<sp/>X86X64Context::serialize(BaseAssembler*<sp/>assembler,<sp/>BaseNode*<sp/>start,<sp/>BaseNode*<sp/>stop)<sp/>{</highlight></codeline>
<codeline lineno="5535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!assembler-&gt;hasLogger())</highlight></codeline>
<codeline lineno="5536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Context_serialize&lt;0&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>static_cast&lt;X86X64Assembler*&gt;(assembler),<sp/>start,<sp/>stop);</highlight></codeline>
<codeline lineno="5537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86X64Context_serialize&lt;1&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">X86X64Assembler*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(assembler),<sp/>start,<sp/>stop);</highlight></codeline>
<codeline lineno="5539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5540"><highlight class="normal"></highlight></codeline>
<codeline lineno="5541"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x86x64<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5542"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5543"><highlight class="normal"></highlight></codeline>
<codeline lineno="5544"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5545"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5546"><highlight class="normal"></highlight></codeline>
<codeline lineno="5547"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5548"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86<sp/>||<sp/>ASMJIT_BUILD_X64</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/x86/x86context.cpp"/>
  </compounddef>
</doxygen>
