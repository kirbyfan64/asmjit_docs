<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="x86func_8cpp" kind="file">
    <compoundname>x86func.cpp</compoundname>
    <includes refid="build_8h" local="yes">../build.h</includes>
    <incdepgraph>
      <node id="2376">
        <label>../base/globals.h</label>
        <childnode refid="2369" relation="include">
        </childnode>
        <childnode refid="2377" relation="include">
        </childnode>
        <childnode refid="2378" relation="include">
        </childnode>
      </node>
      <node id="2378">
        <label>../base/apiend.h</label>
      </node>
      <node id="2379">
        <label>stdarg.h</label>
      </node>
      <node id="2381">
        <label>stdint.h</label>
      </node>
      <node id="2372">
        <label>stdlib.h</label>
      </node>
      <node id="2377">
        <label>../base/apibegin.h</label>
        <childnode refid="2369" relation="include">
        </childnode>
      </node>
      <node id="2374">
        <label>../base/defs.h</label>
        <childnode refid="2375" relation="include">
        </childnode>
        <childnode refid="2377" relation="include">
        </childnode>
        <childnode refid="2378" relation="include">
        </childnode>
      </node>
      <node id="2382">
        <label>limits.h</label>
      </node>
      <node id="2380">
        <label>new</label>
      </node>
      <node id="2370">
        <label>config.h</label>
      </node>
      <node id="2375">
        <label>../base/intutil.h</label>
        <childnode refid="2376" relation="include">
        </childnode>
        <childnode refid="2377" relation="include">
        </childnode>
        <childnode refid="2378" relation="include">
        </childnode>
      </node>
      <node id="2368">
        <label>x86func.cpp</label>
        <link refid="x86func.cpp"/>
        <childnode refid="2369" relation="include">
        </childnode>
      </node>
      <node id="2369">
        <label>../build.h</label>
        <childnode refid="2370" relation="include">
        </childnode>
        <childnode refid="2371" relation="include">
        </childnode>
        <childnode refid="2372" relation="include">
        </childnode>
        <childnode refid="2373" relation="include">
        </childnode>
        <childnode refid="2380" relation="include">
        </childnode>
        <childnode refid="2381" relation="include">
        </childnode>
        <childnode refid="2382" relation="include">
        </childnode>
      </node>
      <node id="2371">
        <label>stdio.h</label>
      </node>
      <node id="2373">
        <label>string.h</label>
        <childnode refid="2374" relation="include">
        </childnode>
        <childnode refid="2376" relation="include">
        </childnode>
        <childnode refid="2379" relation="include">
        </childnode>
        <childnode refid="2377" relation="include">
        </childnode>
        <childnode refid="2378" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="x86func_8cpp_1a4885b81a3643f489bcb59697d21cb21d" prot="public" static="no">
        <name>ASMJIT_EXPORTS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86func.cpp" line="8" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86func.cpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Export]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASMJIT_EXPORTS</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../build.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)<sp/>||<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="13"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/globals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/intutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86defs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86func.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x86x64<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::X86X64FuncDecl<sp/>-<sp/>Helpers]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x86ArgIsInt(uint32_t<sp/>aType)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(aType<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntUtil::inInterval&lt;uint32_t&gt;(aType,<sp/>_kVarTypeIntStart,<sp/>_kVarTypeIntEnd);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x86ArgIsFp(uint32_t<sp/>aType)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(aType<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntUtil::inInterval&lt;uint32_t&gt;(aType,<sp/>_kVarTypeFpStart,<sp/>_kVarTypeFpEnd);</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>x86ArgTypeToXmmType(uint32_t<sp/>aType)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aType<sp/>==<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aType;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::X86X64FuncDecl<sp/>-<sp/>SetPrototype]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>R(_Index_)<sp/>kRegIndex##_Index_</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>X86X64FuncDecl_initConv(X86X64FuncDecl*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>uint32_t<sp/>arch,<sp/>uint32_t<sp/>conv)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Setup<sp/>defaults.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argStackSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_redZoneSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_spillZoneSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_convention<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(conv);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_calleePopsStack<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_direction<sp/>=<sp/>kFuncDirRtl;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.reset();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_preserved.reset();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ASMJIT_ARRAY_SIZE(self-&gt;_passedOrderGp);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[i]<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ASMJIT_ARRAY_SIZE(self-&gt;_passedOrderXmm);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[i]<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[X86<sp/>Support]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_preserved.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Bx),<sp/>R(Sp),<sp/>R(Bp),<sp/>R(Si),<sp/>R(Di)));</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(conv)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eab7e3dd2133e72d62ec10577f7aa59e81" kindref="member" tooltip="Cdecl calling convention (used by C runtime).">kFuncConvCDecl</ref>:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b49ad730aef88425b403db4743f1c3e" kindref="member" tooltip="Stdcall calling convention (used by WinAPI).">kFuncConvStdCall</ref>:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_calleePopsStack<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea7e73cd258391478a22a16706e8765989" kindref="member" tooltip="MSVC specific calling convention used by MSVC/Intel compilers for struct/class methods.">kFuncConvMsThisCall</ref>:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_calleePopsStack<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Cx)));</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[0]<sp/>=<sp/>R(Cx);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b0cadb9dec3ae217ff320376f13e404" kindref="member" tooltip="MSVC specific fastcall.">kFuncConvMsFastCall</ref>:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_calleePopsStack<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Cx),<sp/>R(Cx)));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[0]<sp/>=<sp/>R(Cx);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[1]<sp/>=<sp/>R(Dx);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea9914b37ad9535fd37562af85830af3ff" kindref="member" tooltip="Borland specific fastcall with 2 parameters in registers.">kFuncConvBorlandFastCall</ref>:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_calleePopsStack<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_direction<sp/>=<sp/>kFuncDirLtr;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Ax),<sp/>R(Dx),<sp/>R(Cx)));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[0]<sp/>=<sp/>R(Ax);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[1]<sp/>=<sp/>R(Dx);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[2]<sp/>=<sp/>R(Cx);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b441adfcd78f9f09d22c48debce4bdf" kindref="member" tooltip="GCC specific fastcall convention.">kFuncConvGccFastCall</ref>:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_calleePopsStack<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Cx),<sp/>R(Dx)));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[0]<sp/>=<sp/>R(Cx);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[1]<sp/>=<sp/>R(Dx);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ead94574cee35b8c0c82855189c429401e" kindref="member" tooltip="GCC specific regparm(1) convention.">kFuncConvGccRegParm1</ref>:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Ax)));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[0]<sp/>=<sp/>R(Ax);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eacb9583a574e3f1b453751c95791f3056" kindref="member" tooltip="GCC specific regparm(2) convention.">kFuncConvGccRegParm2</ref>:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Ax),<sp/>R(Dx)));</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[0]<sp/>=<sp/>R(Ax);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[1]<sp/>=<sp/>R(Dx);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eaa05e116e3ed2c8a8754b595635c9ece7" kindref="member" tooltip="GCC specific fastcall with 3 parameters in registers.">kFuncConvGccRegParm3</ref>:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Ax),<sp/>R(Dx),<sp/>R(Cx)));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[0]<sp/>=<sp/>R(Ax);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[1]<sp/>=<sp/>R(Dx);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[2]<sp/>=<sp/>R(Cx);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[X64<sp/>Support]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(conv)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea553686702d710c1fb5936db274ffa4b2" kindref="member" tooltip="X64 calling convention for Windows platform (WIN64 ABI).">kFuncConvX64W</ref>:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_spillZoneSize<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Cx),<sp/>R(Dx),<sp/>R(R8),<sp/>R(R9)));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[0]<sp/>=<sp/>R(Cx);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[1]<sp/>=<sp/>R(Dx);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[2]<sp/>=<sp/>R(R8);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[3]<sp/>=<sp/>R(R9);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.set(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>,<sp/>IntUtil::mask(R(Xmm0),<sp/>R(Xmm1),<sp/>R(Xmm2),<sp/>R(Xmm3)));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[0]<sp/>=<sp/>R(Xmm0);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[1]<sp/>=<sp/>R(Xmm1);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[2]<sp/>=<sp/>R(Xmm2);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[3]<sp/>=<sp/>R(Xmm3);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_preserved.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Bx),<sp/>R(Sp),<sp/>R(Bp),<sp/>R(Si),<sp/>R(Di),<sp/>R(R12),<sp/>R(R13),<sp/>R(R14),<sp/>R(R15)));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_preserved.set(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>,<sp/>IntUtil::mask(R(Xmm6),<sp/>R(Xmm7),<sp/>R(Xmm8),<sp/>R(Xmm9),<sp/>R(Xmm10),<sp/>R(Xmm11),<sp/>R(Xmm12),<sp/>R(Xmm13),<sp/>R(Xmm14),<sp/>R(Xmm15)));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea86646a2f15a33883198dc96cd586cba3" kindref="member" tooltip="X64 calling convention for Unix platforms (AMD64 ABI).">kFuncConvX64U</ref>:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_redZoneSize<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Di),<sp/>R(Si),<sp/>R(Dx),<sp/>R(Cx),<sp/>R(R8),<sp/>R(R9)));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[0]<sp/>=<sp/>R(Di);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[1]<sp/>=<sp/>R(Si);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[2]<sp/>=<sp/>R(Dx);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[3]<sp/>=<sp/>R(Cx);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[4]<sp/>=<sp/>R(R8);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[5]<sp/>=<sp/>R(R9);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passed.set(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>,<sp/>IntUtil::mask(R(Xmm0),<sp/>R(Xmm1),<sp/>R(Xmm2),<sp/>R(Xmm3),<sp/>R(Xmm4),<sp/>R(Xmm5),<sp/>R(Xmm6),<sp/>R(Xmm7)));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[0]<sp/>=<sp/>R(Xmm0);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[1]<sp/>=<sp/>R(Xmm1);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[2]<sp/>=<sp/>R(Xmm2);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[3]<sp/>=<sp/>R(Xmm3);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[4]<sp/>=<sp/>R(Xmm4);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[5]<sp/>=<sp/>R(Xmm5);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[6]<sp/>=<sp/>R(Xmm6);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[7]<sp/>=<sp/>R(Xmm7);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_preserved.set(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(R(Bx),<sp/>R(Sp),<sp/>R(Bp),<sp/>R(R12),<sp/>R(R13),<sp/>R(R14),<sp/>R(R15)));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(!</highlight><highlight class="stringliteral">&quot;Reached&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>R</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Error<sp/>X86X64FuncDecl_initFunc(X86X64FuncDecl*<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">,<sp/>uint32_t<sp/>arch,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>uint32_t<sp/>ret,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*<sp/>argList,<sp/>uint32_t<sp/>argCount)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(argCount<sp/>&lt;=<sp/>kFuncArgCount);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>uint32_t<sp/>conv<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_convention;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>uint32_t<sp/>regSize<sp/>=<sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>)<sp/>?<sp/>4<sp/>:<sp/>8;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>int32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>int32_t<sp/>gpPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>int32_t<sp/>xmmPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>int32_t<sp/>stackOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>varMapping;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>varMapping<sp/>=<sp/>x86::_varMapping;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="227"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98ac570137deb519c20e131c51ed65d2426" kindref="member" tooltip="X64 architecture, also called AMD64.">kArchX64</ref>)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>varMapping<sp/>=<sp/>x64::_varMapping;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argCount<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argCount);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int32_t&gt;(argCount);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getArg(i);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>arg._varType<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argList[i]);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>arg._regIndex<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>arg._stackOffset<sp/>=<sp/>kFuncStackInvalid;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>kFuncArgCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argList[i].reset();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0].reset();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[1].reset();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argStackSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_used.reset();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a1e19eaa393e8cb9865b1acd0d728d7bb" kindref="member" tooltip="Invalid variable type.">kVarTypeInvalid</ref>)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>varMapping[ret];</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref>:</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>:</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>64-bit<sp/>value<sp/>is<sp/>returned<sp/>in<sp/>EDX:EAX<sp/>on<sp/>x86.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retCount<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._varType<sp/>=<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._regIndex<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[1]._varType<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ret<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[1]._regIndex<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" kindref="member" tooltip="Index of DL/DH/DX/EDX/RDX registers.">kRegIndexDx</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>Fall<sp/>through<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>:</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>:</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref>:</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>:</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>:</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._varType<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ret);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._regIndex<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._varType<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ret);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._regIndex<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa8f7d148cd10217411d3c9668d8e8410e" kindref="member" tooltip="Index of MM0 register.">kRegIndexMm0</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>:</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._varType<sp/>=<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._regIndex<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa42e860a3f993239a51b62ef823adcb0c" kindref="member" tooltip="Index of FP0 register.">kRegIndexFp0</ref>;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._varType<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._regIndex<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa1406e1cc6aa02b2aee90c5532c9ec7fa" kindref="member" tooltip="Index of XMM0 register.">kRegIndexXmm0</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>:</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._varType<sp/>=<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._regIndex<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa42e860a3f993239a51b62ef823adcb0c" kindref="member" tooltip="Index of FP0 register.">kRegIndexFp0</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._varType<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._regIndex<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa1406e1cc6aa02b2aee90c5532c9ec7fa" kindref="member" tooltip="Index of XMM0 register.">kRegIndexXmm0</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref>:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._varType<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ret);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_retList[0]._regIndex<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa1406e1cc6aa02b2aee90c5532c9ec7fa" kindref="member" tooltip="Index of XMM0 register.">kRegIndexXmm0</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(self-&gt;_argCount<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)</highlight></codeline>
<codeline lineno="325"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>arguments<sp/>(Integer),<sp/>always<sp/>left-to-right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argCount);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getArg(i);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>varType<sp/>=<sp/>varMapping[arg.getVarType()];</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86ArgIsInt(varType)<sp/>&amp;&amp;<sp/>gpPos<sp/>&lt;<sp/>16<sp/>&amp;&amp;<sp/>self-&gt;_passedOrderGp[gpPos]<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._regIndex<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[gpPos++];</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_used.add(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(arg.getRegIndex()));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stack<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>iStart<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argCount<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>iEnd<sp/><sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>iStep<sp/><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(self-&gt;_direction<sp/>==<sp/>kFuncDirLtr)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iEnd<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argCount);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iStep<sp/><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>iStart;<sp/>i<sp/>!=<sp/>iEnd;<sp/>i<sp/>+=<sp/>iStep)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getArg(i);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>varType<sp/>=<sp/>varMapping[arg.getVarType()];</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.hasRegIndex())</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86ArgIsInt(varType))<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stackOffset<sp/>-=<sp/>4;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._stackOffset<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(stackOffset);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86ArgIsFp(varType))<sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_varInfo[varType].<ref refid="structasmjit_1_1x86x64_1_1VarInfo_1afcec061cf7244cc94749cf9c790c1542" kindref="member" tooltip="Get register size in bytes.">getSize</ref>());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stackOffset<sp/>-=<sp/>size;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._stackOffset<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(stackOffset);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98ac570137deb519c20e131c51ed65d2426" kindref="member" tooltip="X64 architecture, also called AMD64.">kArchX64</ref>)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conv<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea553686702d710c1fb5936db274ffa4b2" kindref="member" tooltip="X64 calling convention for Windows platform (WIN64 ABI).">kFuncConvX64W</ref>)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>argMax<sp/>=<sp/>IntUtil::iMin&lt;int32_t&gt;(argCount,<sp/>4);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>arguments<sp/>(Gp/Xmm),<sp/>always<sp/>left-to-right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>argMax;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getArg(i);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>varType<sp/>=<sp/>varMapping[arg.getVarType()];</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86ArgIsInt(varType))<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._regIndex<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[i];</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_used.add(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(arg.getRegIndex()));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86ArgIsFp(varType))<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._varType<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x86ArgTypeToXmmType(varType));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._regIndex<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[i];</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_used.add(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>,<sp/>IntUtil::mask(arg.getRegIndex()));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stack<sp/>arguments<sp/>(always<sp/>right-to-left).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>argCount<sp/>-<sp/>1;<sp/>i<sp/>!=<sp/>-1;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getArg(i);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>varType<sp/>=<sp/>varMapping[arg.getVarType()];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.hasRegIndex())</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86ArgIsInt(varType))<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stackOffset<sp/>-=<sp/>8;<sp/></highlight><highlight class="comment">//<sp/>Always<sp/>8<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._stackOffset<sp/>=<sp/>stackOffset;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86ArgIsFp(varType))<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stackOffset<sp/>-=<sp/>8;<sp/></highlight><highlight class="comment">//<sp/>Always<sp/>8<sp/>bytes<sp/>(float/double).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._stackOffset<sp/>=<sp/>stackOffset;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>32<sp/>bytes<sp/>shadow<sp/>space<sp/>(X64W<sp/>calling<sp/>convention<sp/>specific).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stackOffset<sp/>-=<sp/>4<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>arguments<sp/>(Gp),<sp/>always<sp/>left-to-right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argCount);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getArg(i);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>varType<sp/>=<sp/>varMapping[arg.getVarType()];</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86ArgIsInt(varType)<sp/>&amp;&amp;<sp/>gpPos<sp/>&lt;<sp/>32<sp/>&amp;&amp;<sp/>self-&gt;_passedOrderGp[gpPos]<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._regIndex<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderGp[gpPos++];</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_used.add(<ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref>,<sp/>IntUtil::mask(arg.getRegIndex()));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>arguments<sp/>(Xmm),<sp/>always<sp/>left-to-right.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(argCount);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getArg(i);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>varType<sp/>=<sp/>varMapping[arg.getVarType()];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86ArgIsFp(varType))<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._varType<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x86ArgTypeToXmmType(varType));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._regIndex<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_passedOrderXmm[xmmPos++];</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_used.add(<ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref>,<sp/>IntUtil::mask(arg.getRegIndex()));</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stack<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>argCount<sp/>-<sp/>1;<sp/>i<sp/>!=<sp/>-1;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getArg(i);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>varType<sp/>=<sp/>varMapping[arg.getVarType()];</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arg.hasRegIndex())</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86ArgIsInt(varType))<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stackOffset<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._stackOffset<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(stackOffset);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x86ArgIsFp(varType))<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(_varInfo[varType].<ref refid="structasmjit_1_1x86x64_1_1VarInfo_1afcec061cf7244cc94749cf9c790c1542" kindref="member" tooltip="Get register size in bytes.">getSize</ref>());</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stackOffset<sp/>-=<sp/>size;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arg._stackOffset<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(stackOffset);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="456"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Modify<sp/>the<sp/>stack<sp/>offset,<sp/>thus<sp/>in<sp/>result<sp/>all<sp/>parameters<sp/>would<sp/>have<sp/>positive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>non-zero<sp/>stack<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int32_t&gt;(argCount);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>FuncInOut&amp;<sp/>arg<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;getArg(i);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arg.hasRegIndex())<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg._stackOffset<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(regSize)<sp/>-<sp/>stackOffset);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">-&gt;_argStackSize<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-stackOffset);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1acd36f14135ae05941744899d5f08b7d7" kindref="member" tooltip="Set function prototype.">X86X64FuncDecl::setPrototype</ref>(uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FuncPrototype&amp;<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(conv<sp/>==<sp/>kFuncConvNone<sp/>||<sp/>conv<sp/>&gt;=<sp/>_kFuncConvCount)</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afacf36f8ebff7fdd3f8cff8688b86d399e" kindref="member" tooltip="Invalid argument.">kErrorInvalidArgument</ref>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.getArgCount()<sp/>&gt;<sp/>kFuncArgCount)</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afacf36f8ebff7fdd3f8cff8688b86d399e" kindref="member" tooltip="Invalid argument.">kErrorInvalidArgument</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Validate<sp/>that<sp/>the<sp/>required<sp/>convention<sp/>is<sp/>supported<sp/>by<sp/>the<sp/>current<sp/>asmjit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>configuration,<sp/>if<sp/>only<sp/>one<sp/>target<sp/>is<sp/>compiled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>uint32_t<sp/>arch<sp/>=<sp/>x86GetArchFromCConv(conv);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)<sp/>&amp;&amp;<sp/>!defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="481"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98ac570137deb519c20e131c51ed65d2426" kindref="member" tooltip="X64 architecture, also called AMD64.">kArchX64</ref>)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa78799e101ad4020abb524d7ebef96902" kindref="member" tooltip="Invalid state.">kErrorInvalidState</ref>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86<sp/>&amp;&amp;<sp/>!ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="484"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(ASMJIT_BUILD_X86)<sp/>&amp;&amp;<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="486"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arch<sp/>==<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afa78799e101ad4020abb524d7ebef96902" kindref="member" tooltip="Invalid state.">kErrorInvalidState</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>!ASMJIT_BUILD_X86<sp/>&amp;&amp;<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>ASMJIT_PROPAGATE_ERROR(X86X64FuncDecl_initConv(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>arch,<sp/>conv));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>ASMJIT_PROPAGATE_ERROR(X86X64FuncDecl_initFunc(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>arch,<sp/>p.getRet(),<sp/>p.getArgList(),<sp/>p.getArgCount()));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__base_1gga4d80121b99d57fc3e7269801bc1e98afac9e7c035a2435683482518bae368d997" kindref="member" tooltip="No error (success).">kErrorOk</ref>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::X86X64FuncDecl<sp/>-<sp/>Reset]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>X86X64FuncDecl::reset()<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1a5782543f71c49198a0a066b74f61f194" kindref="member" tooltip="Calling convention.">_convention</ref><sp/>=<sp/>kFuncConvNone;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1af2d18e0a1749d64553d1d8b22deed836" kindref="member" tooltip="Whether a callee pops stack.">_calleePopsStack</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1a80bd04b9c80f76e8e1867b0759102a31" kindref="member" tooltip="Direction for arguments passed on the stack, see kFuncDir.">_direction</ref><sp/>=<sp/>kFuncDirRtl;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1a7fc1348c47876dd81f4cadbf8eaf1e14" kindref="member" tooltip="Reserved #0 (alignment).">_reserved0</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1ad4eb51ba76eb1b55baeb4e5e26c5fb4c" kindref="member" tooltip="Count of arguments (in _argList).">_argCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1a8e068d552d8c03ee4d12ac8cec580725" kindref="member" tooltip="Count of return value(s).">_retCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1abef4b2387f8b5a671ce2398f45ad9a86" kindref="member" tooltip="Count of bytes consumed by arguments on the stack (aligned).">_argStackSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1a0691b53275ed119a0b06e7def430f051" kindref="member" tooltip="Size of &amp;quot;Red Zone&amp;quot;.">_redZoneSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1a211c52c74f2da513a76dfe9e748fbd4d" kindref="member" tooltip="Size of &amp;quot;Spill Zone&amp;quot;.">_spillZoneSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ASMJIT_ARRAY_SIZE(<ref refid="structasmjit_1_1FuncDecl_1aff3fb03a650c4919f003f03d5f80332f" kindref="member" tooltip="Function arguments (including HI arguments) mapped to physical registers and stack offset...">_argList</ref>);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1aff3fb03a650c4919f003f03d5f80332f" kindref="member" tooltip="Function arguments (including HI arguments) mapped to physical registers and stack offset...">_argList</ref>[i].<ref refid="structasmjit_1_1FuncInOut_1ac532e27f8c6d9d911bbb5df2ca210989" kindref="member" tooltip="Reset the function argument to &amp;quot;unassigned state&amp;quot;.">reset</ref>();</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1a511f2df7f8dd1b102ebec16d3dbc0397" kindref="member" tooltip="Function return value(s).">_retList</ref>[0].<ref refid="structasmjit_1_1FuncInOut_1ac532e27f8c6d9d911bbb5df2ca210989" kindref="member" tooltip="Reset the function argument to &amp;quot;unassigned state&amp;quot;.">reset</ref>();</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1a511f2df7f8dd1b102ebec16d3dbc0397" kindref="member" tooltip="Function return value(s).">_retList</ref>[1].<ref refid="structasmjit_1_1FuncInOut_1ac532e27f8c6d9d911bbb5df2ca210989" kindref="member" tooltip="Reset the function argument to &amp;quot;unassigned state&amp;quot;.">reset</ref>();</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a797876f9f4b25b5e77dae0655fbf6e3b" kindref="member" tooltip="Used registers .">_used</ref>.reset();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1ab3db2e0b41b6102046d199a97aecf23a" kindref="member" tooltip="Passed registers (defined by the calling convention).">_passed</ref>.reset();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a365c29d4d4828f6bb6ac06ba30d46f4a" kindref="member" tooltip="Preserved registers (defined by the calling convention).">_preserved</ref>.reset();</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ASMJIT_ARRAY_SIZE(<ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a1cdfbec4850670bf589fad5d3bf711b9" kindref="member" tooltip="Order of registers defined to pass function arguments (Gp).">_passedOrderGp</ref>);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a1cdfbec4850670bf589fad5d3bf711b9" kindref="member" tooltip="Order of registers defined to pass function arguments (Gp).">_passedOrderGp</ref>[i]<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ASMJIT_ARRAY_SIZE(<ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a98314f872dfed04924b16462e70645ca" kindref="member" tooltip="Order of registers defined to pass function arguments (Xmm).">_passedOrderXmm</ref>);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a98314f872dfed04924b16462e70645ca" kindref="member" tooltip="Order of registers defined to pass function arguments (Xmm).">_passedOrderXmm</ref>[i]<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x86x64<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86<sp/>||<sp/>ASMJIT_BUILD_X64</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/x86/x86func.cpp"/>
  </compounddef>
</doxygen>
