<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="func_8h" kind="file">
    <compoundname>func.h</compoundname>
    <includes refid="defs_8h" local="yes">../base/defs.h</includes>
    <includes refid="globals_8h" local="yes">../base/globals.h</includes>
    <includes refid="apibegin_8h" local="yes">../base/apibegin.h</includes>
    <includes refid="apiend_8h" local="yes">../base/apiend.h</includes>
    <includedby refid="compiler_8h" local="yes">compiler.h</includedby>
    <includedby refid="base_8h" local="yes">base.h</includedby>
    <includedby refid="func_8cpp" local="yes">func.cpp</includedby>
    <includedby refid="x86func_8h" local="yes">x86func.h</includedby>
    <incdepgraph>
      <node id="975">
        <label>../base/globals.h</label>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
      </node>
      <node id="983">
        <label>../base/apiend.h</label>
      </node>
      <node id="981">
        <label>stdarg.h</label>
      </node>
      <node id="985">
        <label>stdint.h</label>
      </node>
      <node id="979">
        <label>stdlib.h</label>
      </node>
      <node id="982">
        <label>../base/apibegin.h</label>
        <childnode refid="976" relation="include">
        </childnode>
      </node>
      <node id="973">
        <label>../base/defs.h</label>
        <childnode refid="974" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
      </node>
      <node id="986">
        <label>limits.h</label>
      </node>
      <node id="984">
        <label>new</label>
      </node>
      <node id="977">
        <label>config.h</label>
      </node>
      <node id="974">
        <label>../base/intutil.h</label>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
      </node>
      <node id="976">
        <label>../build.h</label>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="980" relation="include">
        </childnode>
        <childnode refid="984" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
      </node>
      <node id="978">
        <label>stdio.h</label>
      </node>
      <node id="980">
        <label>string.h</label>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
      </node>
      <node id="972">
        <label>func.h</label>
        <link refid="func.h"/>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="996">
        <label>testopcode.cpp</label>
      </node>
      <node id="1008">
        <label>x86context_p.h</label>
      </node>
      <node id="991">
        <label>asmjit.h</label>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="993" relation="include">
        </childnode>
        <childnode refid="995" relation="include">
        </childnode>
        <childnode refid="997" relation="include">
        </childnode>
        <childnode refid="998" relation="include">
        </childnode>
        <childnode refid="999" relation="include">
        </childnode>
        <childnode refid="996" relation="include">
        </childnode>
        <childnode refid="994" relation="include">
        </childnode>
      </node>
      <node id="998">
        <label>testdummy.cpp</label>
      </node>
      <node id="1013">
        <label>func.cpp</label>
      </node>
      <node id="1004">
        <label>x86.h</label>
      </node>
      <node id="1011">
        <label>x86compiler.h</label>
        <childnode refid="1008" relation="include">
        </childnode>
        <childnode refid="1004" relation="include">
        </childnode>
      </node>
      <node id="1005">
        <label>compiler.cpp</label>
      </node>
      <node id="990">
        <label>testsizeof.cpp</label>
      </node>
      <node id="989">
        <label>base.h</label>
        <childnode refid="990" relation="include">
        </childnode>
        <childnode refid="991" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
        <childnode refid="1001" relation="include">
        </childnode>
        <childnode refid="1002" relation="include">
        </childnode>
        <childnode refid="1003" relation="include">
        </childnode>
        <childnode refid="1004" relation="include">
        </childnode>
      </node>
      <node id="1002">
        <label>winremoteruntime.h</label>
        <childnode refid="1003" relation="include">
        </childnode>
      </node>
      <node id="994">
        <label>testx86.cpp</label>
      </node>
      <node id="1012">
        <label>x86func.h</label>
        <childnode refid="1011" relation="include">
        </childnode>
        <childnode refid="1004" relation="include">
        </childnode>
      </node>
      <node id="995">
        <label>genopcode.h</label>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="996" relation="include">
        </childnode>
      </node>
      <node id="1006">
        <label>context_p.h</label>
        <childnode refid="1005" relation="include">
        </childnode>
        <childnode refid="1007" relation="include">
        </childnode>
        <childnode refid="1008" relation="include">
        </childnode>
      </node>
      <node id="993">
        <label>genblend.h</label>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="994" relation="include">
        </childnode>
      </node>
      <node id="1007">
        <label>context.cpp</label>
      </node>
      <node id="1010">
        <label>x86assembler.h</label>
        <childnode refid="1011" relation="include">
        </childnode>
        <childnode refid="1008" relation="include">
        </childnode>
        <childnode refid="1004" relation="include">
        </childnode>
      </node>
      <node id="1001">
        <label>winremoteruntime.cpp</label>
      </node>
      <node id="999">
        <label>testmem.cpp</label>
      </node>
      <node id="1000">
        <label>host.h</label>
        <childnode refid="991" relation="include">
        </childnode>
      </node>
      <node id="1003">
        <label>contrib.h</label>
      </node>
      <node id="992">
        <label>benchx86.cpp</label>
      </node>
      <node id="997">
        <label>testcpu.cpp</label>
      </node>
      <node id="987">
        <label>func.h</label>
        <link refid="func.h"/>
        <childnode refid="988" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="1013" relation="include">
        </childnode>
        <childnode refid="1012" relation="include">
        </childnode>
      </node>
      <node id="988">
        <label>compiler.h</label>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="1005" relation="include">
        </childnode>
        <childnode refid="1006" relation="include">
        </childnode>
        <childnode refid="1009" relation="include">
        </childnode>
        <childnode refid="1011" relation="include">
        </childnode>
        <childnode refid="1008" relation="include">
        </childnode>
      </node>
      <node id="1009">
        <label>x86defs.h</label>
        <childnode refid="1010" relation="include">
        </childnode>
        <childnode refid="1011" relation="include">
        </childnode>
        <childnode refid="1012" relation="include">
        </childnode>
        <childnode refid="1008" relation="include">
        </childnode>
        <childnode refid="1004" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structasmjit_1_1FnVoid" prot="public">asmjit::FnVoid</innerclass>
    <innerclass refid="structasmjit_1_1FnInt8" prot="public">asmjit::FnInt8</innerclass>
    <innerclass refid="structasmjit_1_1FnUInt8" prot="public">asmjit::FnUInt8</innerclass>
    <innerclass refid="structasmjit_1_1FnInt16" prot="public">asmjit::FnInt16</innerclass>
    <innerclass refid="structasmjit_1_1FnUInt16" prot="public">asmjit::FnUInt16</innerclass>
    <innerclass refid="structasmjit_1_1FnInt32" prot="public">asmjit::FnInt32</innerclass>
    <innerclass refid="structasmjit_1_1FnUInt32" prot="public">asmjit::FnUInt32</innerclass>
    <innerclass refid="structasmjit_1_1FnInt64" prot="public">asmjit::FnInt64</innerclass>
    <innerclass refid="structasmjit_1_1FnUInt64" prot="public">asmjit::FnUInt64</innerclass>
    <innerclass refid="structasmjit_1_1FnIntPtr" prot="public">asmjit::FnIntPtr</innerclass>
    <innerclass refid="structasmjit_1_1FnUIntPtr" prot="public">asmjit::FnUIntPtr</innerclass>
    <innerclass refid="structasmjit_1_1FnFloat" prot="public">asmjit::FnFloat</innerclass>
    <innerclass refid="structasmjit_1_1FnDouble" prot="public">asmjit::FnDouble</innerclass>
    <innerclass refid="structasmjit_1_1TypeId" prot="public">asmjit::TypeId</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01T_01_5_01_4" prot="public">asmjit::TypeId&lt; T * &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01void_01_4" prot="public">asmjit::TypeId&lt; void &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01FnVoid_01_4" prot="public">asmjit::TypeId&lt; FnVoid &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01int8__t_01_4" prot="public">asmjit::TypeId&lt; int8_t &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01FnInt8_01_4" prot="public">asmjit::TypeId&lt; FnInt8 &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01uint8__t_01_4" prot="public">asmjit::TypeId&lt; uint8_t &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01FnUInt8_01_4" prot="public">asmjit::TypeId&lt; FnUInt8 &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01int16__t_01_4" prot="public">asmjit::TypeId&lt; int16_t &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01FnInt16_01_4" prot="public">asmjit::TypeId&lt; FnInt16 &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01uint16__t_01_4" prot="public">asmjit::TypeId&lt; uint16_t &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01FnUInt16_01_4" prot="public">asmjit::TypeId&lt; FnUInt16 &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01int32__t_01_4" prot="public">asmjit::TypeId&lt; int32_t &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01FnInt32_01_4" prot="public">asmjit::TypeId&lt; FnInt32 &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01uint32__t_01_4" prot="public">asmjit::TypeId&lt; uint32_t &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01FnUInt32_01_4" prot="public">asmjit::TypeId&lt; FnUInt32 &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01int64__t_01_4" prot="public">asmjit::TypeId&lt; int64_t &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01FnInt64_01_4" prot="public">asmjit::TypeId&lt; FnInt64 &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01uint64__t_01_4" prot="public">asmjit::TypeId&lt; uint64_t &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01FnUInt64_01_4" prot="public">asmjit::TypeId&lt; FnUInt64 &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01float_01_4" prot="public">asmjit::TypeId&lt; float &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01FnFloat_01_4" prot="public">asmjit::TypeId&lt; FnFloat &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01double_01_4" prot="public">asmjit::TypeId&lt; double &gt;</innerclass>
    <innerclass refid="structasmjit_1_1TypeId_3_01FnDouble_01_4" prot="public">asmjit::TypeId&lt; FnDouble &gt;</innerclass>
    <innerclass refid="structasmjit_1_1FuncInOut" prot="public">asmjit::FuncInOut</innerclass>
    <innerclass refid="structasmjit_1_1FuncPrototype" prot="public">asmjit::FuncPrototype</innerclass>
    <innerclass refid="structasmjit_1_1FuncDecl" prot="public">asmjit::FuncDecl</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilderX" prot="public">asmjit::FuncBuilderX</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilder0" prot="public">asmjit::FuncBuilder0</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilder1" prot="public">asmjit::FuncBuilder1</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilder2" prot="public">asmjit::FuncBuilder2</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilder3" prot="public">asmjit::FuncBuilder3</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilder4" prot="public">asmjit::FuncBuilder4</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilder5" prot="public">asmjit::FuncBuilder5</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilder6" prot="public">asmjit::FuncBuilder6</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilder7" prot="public">asmjit::FuncBuilder7</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilder8" prot="public">asmjit::FuncBuilder8</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilder9" prot="public">asmjit::FuncBuilder9</innerclass>
    <innerclass refid="structasmjit_1_1FuncBuilder10" prot="public">asmjit::FuncBuilder10</innerclass>
    <innernamespace refid="namespaceasmjit">asmjit</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="func_8h_1a718e7043704cd127339c194bff5da102" prot="public" static="no">
        <name>ASMJIT_DECLARE_TYPE_CORE</name>
        <param><defname>_PtrId_</defname></param>
        <initializer>template&lt;typename T&gt; \
  struct TypeId { enum { kId = static_cast&lt;int&gt;(::asmjit::kVarTypeInvalid) }; }; \
  \
  template&lt;typename T&gt; \
  struct TypeId&lt;T*&gt; { enum { kId = _PtrId_ }; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="186" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="func_8h_1a7e9fc2d355579c446c79025dba4bfacc" prot="public" static="no">
        <name>ASMJIT_DECLARE_TYPE_ID</name>
        <param><defname>_T_</defname></param>
        <param><defname>_Id_</defname></param>
        <initializer>template&lt;&gt; \
  struct TypeId&lt;_T_&gt; { enum { kId = _Id_ }; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="193" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="func_8h_1a6d683edf560fd55cee8537302550e6fc" prot="public" static="no">
        <name>_TID</name>
        <param><defname>_T_</defname></param>
        <initializer>TypeId&lt;_T_&gt;::kId</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/func.h" line="524" bodyfile="/home/ryan/asmjit/src/asmjit/base/func.h" bodystart="524" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMJIT_BASE_FUNC_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_ASMJIT_BASE_FUNC_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/defs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/globals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Forward<sp/>Declarations]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">FnTypeId;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kFuncConv]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga1cef400cf6e21967f796513f7c44ad2e" kindref="member" tooltip="X86 function calling conventions.">kFuncConv</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Calling<sp/>convention<sp/>is<sp/>invalid<sp/>(can&apos;t<sp/>be<sp/>used).</highlight></codeline>
<codeline lineno="33"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncConvNone<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="34"><highlight class="normal">};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kFuncHint]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="40"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>hints.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga9a688e930dadd3a2a82dd6999e8681ff" kindref="member" tooltip="X86 function hints.">kFuncHint</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Make<sp/>a<sp/>naked<sp/>function<sp/>(default<sp/>true).</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/>//!<sp/>Naked<sp/>function<sp/>is<sp/>function<sp/>without<sp/>using<sp/>standard<sp/>prolog/epilog<sp/>sequence).</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/>//!<sp/>@section<sp/>X86/X64</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/>//!<sp/>Standard<sp/>prolog<sp/>sequence<sp/>is:</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>&quot;push<sp/>zbp&quot;</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>&quot;mov<sp/>zsp,<sp/>zbp&quot;</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>&quot;sub<sp/>zsp,<sp/>StackAdjustment&quot;</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/>//!<sp/>which<sp/>is<sp/>equal<sp/>to:</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>&quot;enter<sp/>StackAdjustment,<sp/>0&quot;</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/>//!<sp/>Standard<sp/>epilog<sp/>sequence<sp/>is:</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>&quot;mov<sp/>zsp,<sp/>zbp&quot;</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>&quot;pop<sp/>zbp&quot;</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>&quot;ret&quot;</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/>//!<sp/>which<sp/>is<sp/>equal<sp/>to:</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>&quot;leave&quot;</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>//!<sp/><sp/><sp/>&quot;ret&quot;</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/>//!<sp/>Naked<sp/>functions<sp/>can<sp/>omit<sp/>the<sp/>prolog/epilog<sp/>sequence.<sp/>The<sp/>advantage<sp/>of</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/>//!<sp/>doing<sp/>such<sp/>modification<sp/>is<sp/>that<sp/>EBP/RBP<sp/>register<sp/>can<sp/>be<sp/>used<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/>//!<sp/>register<sp/>allocator<sp/>which<sp/>can<sp/>result<sp/>in<sp/>less<sp/>spills/allocs.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncHintNaked<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Generate<sp/>compact<sp/>function<sp/>prolog/epilog<sp/>if<sp/>possible.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/>//!<sp/>@section<sp/>X86/X64</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/>//!<sp/>Use<sp/>shorter,<sp/>but<sp/>possible<sp/>slower<sp/>prolog/epilog<sp/>sequence<sp/>to<sp/>save/restore</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/>//!<sp/>registers.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncHintCompact<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kFuncFlags]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>flags.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga7b42aa5041e210749d119bbf3be8ec3e" kindref="member" tooltip="X86 function flags.">kFuncFlags</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>function<sp/>is<sp/>using<sp/>naked<sp/>(minimal)<sp/>prolog<sp/>/<sp/>epilog.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncFlagIsNaked<sp/>=<sp/>0x00000001,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>an<sp/>another<sp/>function<sp/>is<sp/>called<sp/>from<sp/>this<sp/>function.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncFlagIsCaller<sp/>=<sp/>0x00000002,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>stack<sp/>is<sp/>not<sp/>aligned<sp/>to<sp/>the<sp/>required<sp/>stack<sp/>alignment,</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/>//!<sp/>thus<sp/>it<sp/>has<sp/>to<sp/>be<sp/>aligned<sp/>manually.</highlight></codeline>
<codeline lineno="97"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncFlagIsStackMisaligned<sp/>=<sp/>0x00000004,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>stack<sp/>pointer<sp/>is<sp/>adjusted<sp/>by<sp/>the<sp/>stack<sp/>size<sp/>needed</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/>//!<sp/>to<sp/>save<sp/>registers<sp/>and<sp/>function<sp/>variables.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/>//!<sp/>@section<sp/>X86/X64</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>pointer<sp/>(ESP/RSP)<sp/>is<sp/>adjusted<sp/>by<sp/>&apos;sub&apos;<sp/>instruction<sp/>in<sp/>prolog<sp/>and<sp/>by</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/>//!<sp/>&apos;add&apos;<sp/>instruction<sp/>in<sp/>epilog<sp/>(only<sp/>if<sp/>function<sp/>is<sp/>not<sp/>naked).<sp/>If<sp/>function</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/>//!<sp/>needs<sp/>to<sp/>perform<sp/>manual<sp/>stack<sp/>alignment<sp/>more<sp/>instructions<sp/>are<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/>//!<sp/>adjust<sp/>the<sp/>stack<sp/>(like<sp/>&quot;and<sp/>zsp,<sp/>-Alignment&quot;).</highlight></codeline>
<codeline lineno="108"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncFlagIsStackAdjusted<sp/>=<sp/>0x00000008,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>the<sp/>function<sp/>is<sp/>finished<sp/>using<sp/>@c<sp/>Compiler::endFunc().</highlight></codeline>
<codeline lineno="111"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncFlagIsFinished<sp/>=<sp/>0x80000000</highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kFuncDir]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="118"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>arguments<sp/>direction.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(kFuncDir)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Arguments<sp/>are<sp/>passed<sp/>left<sp/>to<sp/>right.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>arguments<sp/>direction<sp/>is<sp/>unusual<sp/>to<sp/>C<sp/>programming,<sp/>it&apos;s<sp/>used<sp/>by<sp/>pascal</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/>//!<sp/>compilers<sp/>and<sp/>in<sp/>some<sp/>calling<sp/>conventions<sp/>by<sp/>Borland<sp/>compiler).</highlight></codeline>
<codeline lineno="124"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncDirLtr<sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Arguments<sp/>are<sp/>passed<sp/>right<sp/>ro<sp/>left</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>is<sp/>default<sp/>argument<sp/>direction<sp/>in<sp/>C<sp/>programming.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncDirRtl<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kFuncStackInvalid]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Invalid<sp/>stack<sp/>offset<sp/>in<sp/>function<sp/>or<sp/>function<sp/>parameter.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncStackInvalid<sp/>=<sp/>-1</highlight></codeline>
<codeline lineno="138"><highlight class="normal">};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kFuncArg]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>argument<sp/>(lo/hi)<sp/>specification.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(kFuncArg)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Maxumum<sp/>number<sp/>of<sp/>function<sp/>arguments<sp/>supported<sp/>by<sp/>AsmJit.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncArgCount<sp/>=<sp/>16,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Extended<sp/>maximum<sp/>number<sp/>of<sp/>arguments<sp/>(used<sp/>internally).</highlight></codeline>
<codeline lineno="149"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncArgCountLoHi<sp/>=<sp/>kFuncArgCount<sp/>*<sp/>2,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>to<sp/>the<sp/>LO<sp/>part<sp/>of<sp/>function<sp/>argument<sp/>(default).</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>value<sp/>is<sp/>typically<sp/>omitted<sp/>and<sp/>added<sp/>only<sp/>if<sp/>there<sp/>is<sp/>HI<sp/>argument</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/>//!<sp/>accessed.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncArgLo<sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>to<sp/>the<sp/>HI<sp/>part<sp/>of<sp/>function<sp/>argument.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/>//!<sp/>HI<sp/>part<sp/>of<sp/>function<sp/>argument<sp/>depends<sp/>on<sp/>target<sp/>architecture.<sp/>On<sp/>x86<sp/>it&apos;s</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/>//!<sp/>typically<sp/>used<sp/>to<sp/>transfer<sp/>64-bit<sp/>integers<sp/>(they<sp/>form<sp/>a<sp/>pair<sp/>of<sp/>32-bit</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>//!<sp/>integers).</highlight></codeline>
<codeline lineno="161"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncArgHi<sp/>=<sp/>kFuncArgCount</highlight></codeline>
<codeline lineno="162"><highlight class="normal">};</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kFuncRet]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>return<sp/>value<sp/>(lo/hi)<sp/>specification.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(kFuncRet)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>to<sp/>the<sp/>LO<sp/>part<sp/>of<sp/>function<sp/>return<sp/>value.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncRetLo<sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>to<sp/>the<sp/>HI<sp/>part<sp/>of<sp/>function<sp/>return<sp/>value.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kFuncRetHi<sp/>=<sp/>1</highlight></codeline>
<codeline lineno="174"><highlight class="normal">};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::FnTypeId]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="180"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="181"><highlight class="comment"></highlight><highlight class="preprocessor">#define<sp/>ASMJIT_DECLARE_TYPE_CORE(_PtrId_)<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/>template&lt;typename<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/>struct<sp/>TypeId<sp/>{<sp/>enum<sp/>{<sp/>kId<sp/>=<sp/>static_cast&lt;int&gt;(::asmjit::kVarTypeInvalid)<sp/>};<sp/>};<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/>template&lt;typename<sp/>T&gt;<sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/>struct<sp/>TypeId&lt;T*&gt;<sp/>{<sp/>enum<sp/>{<sp/>kId<sp/>=<sp/>_PtrId_<sp/>};<sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="189"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="190"><highlight class="comment">//!<sp/>@brief<sp/>Declare<sp/>C/C++<sp/>type-id<sp/>mapped<sp/>to<sp/>@c<sp/>asmjit::kVarType.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"></highlight><highlight class="preprocessor">#define<sp/>ASMJIT_DECLARE_TYPE_ID(_T_,<sp/>_Id_)<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/>template&lt;&gt;<sp/>\</highlight></codeline>
<codeline lineno="193"><highlight class="preprocessor"><sp/><sp/>struct<sp/>TypeId&lt;_T_&gt;<sp/>{<sp/>enum<sp/>{<sp/>kId<sp/>=<sp/>_Id_<sp/>};<sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;void&apos;<sp/>type.</highlight></codeline>
<codeline lineno="196" refid="structasmjit_1_1FnVoid" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnVoid" kindref="compound" tooltip="Function builder &amp;#39;void&amp;#39; type.">FnVoid</ref><sp/>{};</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="198"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;int8_t&apos;<sp/>type.</highlight></codeline>
<codeline lineno="199" refid="structasmjit_1_1FnInt8" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnInt8" kindref="compound" tooltip="Function builder &amp;#39;int8_t&amp;#39; type.">FnInt8</ref><sp/>{};</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="200"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;uint8_t&apos;<sp/>type.</highlight></codeline>
<codeline lineno="201" refid="structasmjit_1_1FnUInt8" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnUInt8" kindref="compound" tooltip="Function builder &amp;#39;uint8_t&amp;#39; type.">FnUInt8</ref><sp/>{};</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="203"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;int16_t&apos;<sp/>type.</highlight></codeline>
<codeline lineno="204" refid="structasmjit_1_1FnInt16" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnInt16" kindref="compound" tooltip="Function builder &amp;#39;int16_t&amp;#39; type.">FnInt16</ref><sp/>{};</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;uint16_t&apos;<sp/>type.</highlight></codeline>
<codeline lineno="206" refid="structasmjit_1_1FnUInt16" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnUInt16" kindref="compound" tooltip="Function builder &amp;#39;uint16_t&amp;#39; type.">FnUInt16</ref><sp/>{};</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;int32_t&apos;<sp/>type.</highlight></codeline>
<codeline lineno="209" refid="structasmjit_1_1FnInt32" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnInt32" kindref="compound" tooltip="Function builder &amp;#39;int32_t&amp;#39; type.">FnInt32</ref><sp/>{};</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="210"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;uint32_t&apos;<sp/>type.</highlight></codeline>
<codeline lineno="211" refid="structasmjit_1_1FnUInt32" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnUInt32" kindref="compound" tooltip="Function builder &amp;#39;uint32_t&amp;#39; type.">FnUInt32</ref><sp/>{};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="213"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;int64_t&apos;<sp/>type.</highlight></codeline>
<codeline lineno="214" refid="structasmjit_1_1FnInt64" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnInt64" kindref="compound" tooltip="Function builder &amp;#39;int64_t&amp;#39; type.">FnInt64</ref><sp/>{};</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="215"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;uint64_t&apos;<sp/>type.</highlight></codeline>
<codeline lineno="216" refid="structasmjit_1_1FnUInt64" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnUInt64" kindref="compound" tooltip="Function builder &amp;#39;uint64_t&amp;#39; type.">FnUInt64</ref><sp/>{};</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;intptr_t&apos;<sp/>type.</highlight></codeline>
<codeline lineno="219" refid="structasmjit_1_1FnIntPtr" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnIntPtr" kindref="compound" tooltip="Function builder &amp;#39;intptr_t&amp;#39; type.">FnIntPtr</ref><sp/>{};</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="220"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;uintptr_t&apos;<sp/>type.</highlight></codeline>
<codeline lineno="221" refid="structasmjit_1_1FnUIntPtr" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnUIntPtr" kindref="compound" tooltip="Function builder &amp;#39;uintptr_t&amp;#39; type.">FnUIntPtr</ref><sp/>{};</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;float&apos;<sp/>type.</highlight></codeline>
<codeline lineno="224" refid="structasmjit_1_1FnFloat" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnFloat" kindref="compound" tooltip="Function builder &amp;#39;float&amp;#39; type.">FnFloat</ref><sp/>{};</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="225"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>&apos;double&apos;<sp/>type.</highlight></codeline>
<codeline lineno="226" refid="structasmjit_1_1FnDouble" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FnDouble" kindref="compound" tooltip="Function builder &amp;#39;double&amp;#39; type.">FnDouble</ref><sp/>{};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">ASMJIT_DECLARE_TYPE_CORE(<ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a773337143d44de47e460e5e280661e3e" kindref="member" tooltip="Variable is target intptr_t (not compatible with host intptr_t).">kVarTypeIntPtr</ref>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a1e19eaa393e8cb9865b1acd0d728d7bb" kindref="member" tooltip="Invalid variable type.">kVarTypeInvalid</ref>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(<ref refid="structasmjit_1_1FnVoid" kindref="compound" tooltip="Function builder &amp;#39;void&amp;#39; type.">FnVoid</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a1e19eaa393e8cb9865b1acd0d728d7bb" kindref="member" tooltip="Invalid variable type.">kVarTypeInvalid</ref>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(int8_t,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(<ref refid="structasmjit_1_1FnInt8" kindref="compound" tooltip="Function builder &amp;#39;int8_t&amp;#39; type.">FnInt8</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(uint8_t,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(<ref refid="structasmjit_1_1FnUInt8" kindref="compound" tooltip="Function builder &amp;#39;uint8_t&amp;#39; type.">FnUInt8</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(int16_t,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(<ref refid="structasmjit_1_1FnInt16" kindref="compound" tooltip="Function builder &amp;#39;int16_t&amp;#39; type.">FnInt16</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(uint16_t,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(<ref refid="structasmjit_1_1FnUInt16" kindref="compound" tooltip="Function builder &amp;#39;uint16_t&amp;#39; type.">FnUInt16</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(int32_t,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(<ref refid="structasmjit_1_1FnInt32" kindref="compound" tooltip="Function builder &amp;#39;int32_t&amp;#39; type.">FnInt32</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(uint32_t,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(<ref refid="structasmjit_1_1FnUInt32" kindref="compound" tooltip="Function builder &amp;#39;uint32_t&amp;#39; type.">FnUInt32</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(int64_t,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(<ref refid="structasmjit_1_1FnInt64" kindref="compound" tooltip="Function builder &amp;#39;int64_t&amp;#39; type.">FnInt64</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(uint64_t,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(<ref refid="structasmjit_1_1FnUInt64" kindref="compound" tooltip="Function builder &amp;#39;uint64_t&amp;#39; type.">FnUInt64</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(<ref refid="structasmjit_1_1FnFloat" kindref="compound" tooltip="Function builder &amp;#39;float&amp;#39; type.">FnFloat</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">ASMJIT_DECLARE_TYPE_ID(<ref refid="structasmjit_1_1FnDouble" kindref="compound" tooltip="Function builder &amp;#39;double&amp;#39; type.">FnDouble</ref>,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::FuncInOut]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="267"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>in/out<sp/>(argument<sp/>or<sp/>a<sp/>return<sp/>value).</highlight></codeline>
<codeline lineno="268"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="269"><highlight class="comment">//!<sp/>This<sp/>class<sp/>contains<sp/>function<sp/>argument<sp/>or<sp/>return<sp/>value<sp/>translated<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="270"><highlight class="comment">//!<sp/>@ref<sp/>FuncPrototype.</highlight></codeline>
<codeline lineno="271" refid="structasmjit_1_1FuncInOut" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncInOut" kindref="compound" tooltip="Function in/out (argument or a return value).">FuncInOut</ref><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getVarType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncInOut_1a818e1a1510be215fbf353ff34153d171" kindref="member" tooltip="Variable type, see kVarType.">_varType</ref>;<sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasRegIndex()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncInOut_1a0be2f716335ddee7e12e97231999ef87" kindref="member" tooltip="Register index if argument / return value is a register.">_regIndex</ref><sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>;<sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getRegIndex()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncInOut_1a0be2f716335ddee7e12e97231999ef87" kindref="member" tooltip="Register index if argument / return value is a register.">_regIndex</ref>;<sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasStackOffset()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncInOut_1a791709cefab7cbc04d641331dd8fe9f8" kindref="member" tooltip="Stack offset if argument / return value is on the stack.">_stackOffset</ref><sp/>!=<sp/>kFuncStackInvalid;<sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int32_t<sp/>getStackOffset()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1FuncInOut_1a791709cefab7cbc04d641331dd8fe9f8" kindref="member" tooltip="Stack offset if argument / return value is on the stack.">_stackOffset</ref>);<sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>argument<sp/>/<sp/>return<sp/>value<sp/>is<sp/>assigned.</highlight></codeline>
<codeline lineno="285" refid="structasmjit_1_1FuncInOut_1ae28290801e2e0049131deeec38aaf279" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncInOut_1ae28290801e2e0049131deeec38aaf279" kindref="member" tooltip="Get whether the argument / return value is assigned.">isSet</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1FuncInOut_1a0be2f716335ddee7e12e97231999ef87" kindref="member" tooltip="Register index if argument / return value is a register.">_regIndex</ref><sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>)<sp/>|<sp/>(<ref refid="structasmjit_1_1FuncInOut_1a791709cefab7cbc04d641331dd8fe9f8" kindref="member" tooltip="Stack offset if argument / return value is on the stack.">_stackOffset</ref><sp/>!=<sp/>kFuncStackInvalid);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Reset]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>the<sp/>function<sp/>argument<sp/>to<sp/>&quot;unassigned<sp/>state&quot;.</highlight></codeline>
<codeline lineno="294" refid="structasmjit_1_1FuncInOut_1ac532e27f8c6d9d911bbb5df2ca210989" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncInOut_1ac532e27f8c6d9d911bbb5df2ca210989" kindref="member" tooltip="Reset the function argument to &amp;quot;unassigned state&amp;quot;.">reset</ref>()<sp/>{<sp/><ref refid="structasmjit_1_1FuncInOut_1a0727112973094c5b63a1afaf07f8e7c8" kindref="member" tooltip="All members packed into single 32-bit integer.">_packed</ref><sp/>=<sp/>0xFFFFFFFF;<sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>type,<sp/>see<sp/>@c<sp/>kVarType.</highlight></codeline>
<codeline lineno="303" refid="structasmjit_1_1FuncInOut_1a818e1a1510be215fbf353ff34153d171" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1FuncInOut_1a818e1a1510be215fbf353ff34153d171" kindref="member" tooltip="Variable type, see kVarType.">_varType</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>index<sp/>if<sp/>argument<sp/>/<sp/>return<sp/>value<sp/>is<sp/>a<sp/>register.</highlight></codeline>
<codeline lineno="305" refid="structasmjit_1_1FuncInOut_1a0be2f716335ddee7e12e97231999ef87" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1FuncInOut_1a0be2f716335ddee7e12e97231999ef87" kindref="member" tooltip="Register index if argument / return value is a register.">_regIndex</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Stack<sp/>offset<sp/>if<sp/>argument<sp/>/<sp/>return<sp/>value<sp/>is<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="307" refid="structasmjit_1_1FuncInOut_1a791709cefab7cbc04d641331dd8fe9f8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/><ref refid="structasmjit_1_1FuncInOut_1a791709cefab7cbc04d641331dd8fe9f8" kindref="member" tooltip="Stack offset if argument / return value is on the stack.">_stackOffset</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>All<sp/>members<sp/>packed<sp/>into<sp/>single<sp/>32-bit<sp/>integer.</highlight></codeline>
<codeline lineno="311" refid="structasmjit_1_1FuncInOut_1a0727112973094c5b63a1afaf07f8e7c8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncInOut_1a0727112973094c5b63a1afaf07f8e7c8" kindref="member" tooltip="All members packed into single 32-bit integer.">_packed</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="313"><highlight class="normal">};</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::FuncPrototype]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>prototype.</highlight></codeline>
<codeline lineno="320"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="321"><highlight class="comment">//!<sp/>Function<sp/>prototype<sp/>contains<sp/>information<sp/>about<sp/>function<sp/>return<sp/>type,<sp/>count</highlight></codeline>
<codeline lineno="322"><highlight class="comment">//!<sp/>of<sp/>arguments<sp/>and<sp/>their<sp/>types.<sp/>Function<sp/>prototype<sp/>is<sp/>a<sp/>low<sp/>level<sp/>structure</highlight></codeline>
<codeline lineno="323"><highlight class="comment">//!<sp/>which<sp/>doesn&apos;t<sp/>contain<sp/>platform<sp/>specific<sp/>or<sp/>calling<sp/>convention<sp/>specific</highlight></codeline>
<codeline lineno="324"><highlight class="comment">//!<sp/>information.<sp/>Function<sp/>prototype<sp/>is<sp/>used<sp/>to<sp/>create<sp/>a<sp/>@ref<sp/>FuncDecl.</highlight></codeline>
<codeline lineno="325" refid="structasmjit_1_1FuncPrototype" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>return<sp/>value.</highlight></codeline>
<codeline lineno="331" refid="structasmjit_1_1FuncPrototype_1a1cf309bc7e0b14e3d418a76053d72fbf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncPrototype_1a1cf309bc7e0b14e3d418a76053d72fbf" kindref="member" tooltip="Get function return value.">getRet</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_ret;<sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>arguments&apos;<sp/>IDs.</highlight></codeline>
<codeline lineno="334" refid="structasmjit_1_1FuncPrototype_1a41324c51070165430611b06866da5874" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*<sp/><ref refid="structasmjit_1_1FuncPrototype_1a41324c51070165430611b06866da5874" kindref="member" tooltip="Get function arguments&amp;#39; IDs.">getArgList</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_argList;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>count<sp/>of<sp/>function<sp/>arguments.</highlight></codeline>
<codeline lineno="336" refid="structasmjit_1_1FuncPrototype_1a3328fdcb298d5621df63d2f57cf260b3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncPrototype_1a3328fdcb298d5621df63d2f57cf260b3" kindref="member" tooltip="Get count of function arguments.">getArgCount</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_argCount;<sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>argument<sp/>at<sp/>index<sp/>@a<sp/>id.</highlight></codeline>
<codeline lineno="339" refid="structasmjit_1_1FuncPrototype_1ac880d4445b8e998a8dcdc0b73e89b92b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncPrototype_1ac880d4445b8e998a8dcdc0b73e89b92b" kindref="member" tooltip="Get argument at index id.">getArg</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>_argCount);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_argList[id];</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>function<sp/>definition<sp/>-<sp/>return<sp/>type<sp/>and<sp/>arguments.</highlight></codeline>
<codeline lineno="345" refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(uint32_t<sp/>ret,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*<sp/>argList,<sp/>uint32_t<sp/>argCount)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>_ret<sp/>=<sp/>ret;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>_argList<sp/>=<sp/>argList;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>_argCount<sp/>=<sp/>argCount;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>uint32_t<sp/>_ret;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>uint32_t<sp/>_argCount;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*<sp/>_argList;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">};</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::FuncDecl]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="364"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>declaration.</highlight></codeline>
<codeline lineno="365" refid="structasmjit_1_1FuncDecl" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncDecl" kindref="compound" tooltip="Function declaration.">FuncDecl</ref><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors<sp/>-<sp/>Calling<sp/>Convention]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>calling<sp/>convention,<sp/>see<sp/>@c<sp/>kFuncConv.</highlight></codeline>
<codeline lineno="371" refid="structasmjit_1_1FuncDecl_1a42ec8dca10052988d6e0a6aec9abf8c9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncDecl_1a42ec8dca10052988d6e0a6aec9abf8c9" kindref="member" tooltip="Get function calling convention, see kFuncConv.">getConvention</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1a5782543f71c49198a0a066b74f61f194" kindref="member" tooltip="Calling convention.">_convention</ref>;<sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>callee<sp/>pops<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="374" refid="structasmjit_1_1FuncDecl_1ac410370c89f4dbaa1b0be10fcf3d4b0b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncDecl_1ac410370c89f4dbaa1b0be10fcf3d4b0b" kindref="member" tooltip="Get whether the callee pops the stack.">getCalleePopsStack</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1af2d18e0a1749d64553d1d8b22deed836" kindref="member" tooltip="Whether a callee pops stack.">_calleePopsStack</ref>;<sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>direction<sp/>of<sp/>arguments<sp/>passed<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/>//!<sp/>Direction<sp/>should<sp/>be<sp/>always<sp/>@c<sp/>kFuncDirRtl.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>This<sp/>is<sp/>related<sp/>to<sp/>used<sp/>calling<sp/>convention,<sp/>it&apos;s<sp/>not<sp/>affected<sp/>by</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/>//!<sp/>number<sp/>of<sp/>function<sp/>arguments<sp/>or<sp/>their<sp/>types.</highlight></codeline>
<codeline lineno="382" refid="structasmjit_1_1FuncDecl_1ac80843c1a79f2594625c3732dd8913ae" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncDecl_1ac80843c1a79f2594625c3732dd8913ae" kindref="member" tooltip="Get direction of arguments passed on the stack.">getDirection</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1a80bd04b9c80f76e8e1867b0759102a31" kindref="member" tooltip="Direction for arguments passed on the stack, see kFuncDir.">_direction</ref>;<sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>stack<sp/>size<sp/>needed<sp/>for<sp/>function<sp/>arguments<sp/>passed<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="385" refid="structasmjit_1_1FuncDecl_1a09c52cc8a86a04056a87e7e83cc9934f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncDecl_1a09c52cc8a86a04056a87e7e83cc9934f" kindref="member" tooltip="Get stack size needed for function arguments passed on the stack.">getArgStackSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1abef4b2387f8b5a671ce2398f45ad9a86" kindref="member" tooltip="Count of bytes consumed by arguments on the stack (aligned).">_argStackSize</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>size<sp/>of<sp/>&quot;Red<sp/>Zone&quot;.</highlight></codeline>
<codeline lineno="387" refid="structasmjit_1_1FuncDecl_1af18d05e17d59952aaa42a277680994ea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncDecl_1af18d05e17d59952aaa42a277680994ea" kindref="member" tooltip="Get size of &amp;quot;Red Zone&amp;quot;.">getRedZoneSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1a0691b53275ed119a0b06e7def430f051" kindref="member" tooltip="Size of &amp;quot;Red Zone&amp;quot;.">_redZoneSize</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>size<sp/>of<sp/>&quot;Spill<sp/>Zone&quot;.</highlight></codeline>
<codeline lineno="389" refid="structasmjit_1_1FuncDecl_1a76cb13176e0ee3e9e4281ffe4856342e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncDecl_1a76cb13176e0ee3e9e4281ffe4856342e" kindref="member" tooltip="Get size of &amp;quot;Spill Zone&amp;quot;.">getSpillZoneSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1a211c52c74f2da513a76dfe9e748fbd4d" kindref="member" tooltip="Size of &amp;quot;Spill Zone&amp;quot;.">_spillZoneSize</ref>;<sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors<sp/>-<sp/>Arguments<sp/>and<sp/>Return]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>function<sp/>has<sp/>a<sp/>return<sp/>value.</highlight></codeline>
<codeline lineno="396" refid="structasmjit_1_1FuncDecl_1a6ff6556e621a2c7d833fb239e40a260a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1a6ff6556e621a2c7d833fb239e40a260a" kindref="member" tooltip="Get whether the function has a return value.">hasRet</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1a8e068d552d8c03ee4d12ac8cec580725" kindref="member" tooltip="Count of return value(s).">_retCount</ref><sp/>!=<sp/>0;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>count<sp/>of<sp/>function<sp/>return<sp/>values.</highlight></codeline>
<codeline lineno="398" refid="structasmjit_1_1FuncDecl_1a845d93fd499fb8cad4afc79242a954ac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncDecl_1a845d93fd499fb8cad4afc79242a954ac" kindref="member" tooltip="Get count of function return values.">getRetCount</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1a8e068d552d8c03ee4d12ac8cec580725" kindref="member" tooltip="Count of return value(s).">_retCount</ref>;<sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>return<sp/>value.</highlight></codeline>
<codeline lineno="401" refid="structasmjit_1_1FuncDecl_1a053aa0d7eea2e19d62313529d038eb34" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncInOut" kindref="compound" tooltip="Function in/out (argument or a return value).">FuncInOut</ref>&amp;<sp/><ref refid="structasmjit_1_1FuncDecl_1a053aa0d7eea2e19d62313529d038eb34" kindref="member" tooltip="Get function return value.">getRet</ref>(uint32_t<sp/>index<sp/>=<sp/>kFuncRetLo)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1a511f2df7f8dd1b102ebec16d3dbc0397" kindref="member" tooltip="Function return value(s).">_retList</ref>[index];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>return<sp/>value.</highlight></codeline>
<codeline lineno="403" refid="structasmjit_1_1FuncDecl_1a715f71c74a2dae3aa4c86e5d078b1962" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncInOut" kindref="compound" tooltip="Function in/out (argument or a return value).">FuncInOut</ref>&amp;<sp/><ref refid="structasmjit_1_1FuncDecl_1a715f71c74a2dae3aa4c86e5d078b1962" kindref="member" tooltip="Get function return value.">getRet</ref>(uint32_t<sp/>index<sp/>=<sp/>kFuncRetLo)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1a511f2df7f8dd1b102ebec16d3dbc0397" kindref="member" tooltip="Function return value(s).">_retList</ref>[index];<sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>count<sp/>of<sp/>function<sp/>arguments.</highlight></codeline>
<codeline lineno="406" refid="structasmjit_1_1FuncDecl_1a256dfc25b9980a7571c13c4dd6d31e8e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncDecl_1a256dfc25b9980a7571c13c4dd6d31e8e" kindref="member" tooltip="Get count of function arguments.">getArgCount</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1ad4eb51ba76eb1b55baeb4e5e26c5fb4c" kindref="member" tooltip="Count of arguments (in _argList).">_argCount</ref>;<sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>arguments<sp/>array.</highlight></codeline>
<codeline lineno="409" refid="structasmjit_1_1FuncDecl_1a56befde525f1128d408cf19474c886ae" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncInOut" kindref="compound" tooltip="Function in/out (argument or a return value).">FuncInOut</ref>*<sp/><ref refid="structasmjit_1_1FuncDecl_1a56befde525f1128d408cf19474c886ae" kindref="member" tooltip="Get function arguments array.">getArgList</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1aff3fb03a650c4919f003f03d5f80332f" kindref="member" tooltip="Function arguments (including HI arguments) mapped to physical registers and stack offset...">_argList</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>arguments<sp/>array<sp/>(const).</highlight></codeline>
<codeline lineno="411" refid="structasmjit_1_1FuncDecl_1a168c812ff405cf32eb11e48e067fbcdf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncInOut" kindref="compound" tooltip="Function in/out (argument or a return value).">FuncInOut</ref>*<sp/><ref refid="structasmjit_1_1FuncDecl_1a168c812ff405cf32eb11e48e067fbcdf" kindref="member" tooltip="Get function arguments array (const).">getArgList</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1aff3fb03a650c4919f003f03d5f80332f" kindref="member" tooltip="Function arguments (including HI arguments) mapped to physical registers and stack offset...">_argList</ref>;<sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>argument<sp/>at<sp/>index<sp/>@a<sp/>index.</highlight></codeline>
<codeline lineno="414" refid="structasmjit_1_1FuncDecl_1a6fb100b2c26ef842ef3ca957416003ef" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncInOut" kindref="compound" tooltip="Function in/out (argument or a return value).">FuncInOut</ref>&amp;<sp/><ref refid="structasmjit_1_1FuncDecl_1a6fb100b2c26ef842ef3ca957416003ef" kindref="member" tooltip="Get function argument at index index.">getArg</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(index<sp/>&lt;<sp/>kFuncArgCountLoHi);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1aff3fb03a650c4919f003f03d5f80332f" kindref="member" tooltip="Function arguments (including HI arguments) mapped to physical registers and stack offset...">_argList</ref>[index];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>function<sp/>argument<sp/>at<sp/>index<sp/>@a<sp/>index.</highlight></codeline>
<codeline lineno="420" refid="structasmjit_1_1FuncDecl_1a12cff01acb1e8d52f383d635969debcb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncInOut" kindref="compound" tooltip="Function in/out (argument or a return value).">FuncInOut</ref>&amp;<sp/><ref refid="structasmjit_1_1FuncDecl_1a12cff01acb1e8d52f383d635969debcb" kindref="member" tooltip="Get function argument at index index.">getArg</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(index<sp/>&lt;<sp/>kFuncArgCountLoHi);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl_1aff3fb03a650c4919f003f03d5f80332f" kindref="member" tooltip="Function arguments (including HI arguments) mapped to physical registers and stack offset...">_argList</ref>[index];</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>resetArg(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(index<sp/>&lt;<sp/>kFuncArgCountLoHi);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncDecl_1aff3fb03a650c4919f003f03d5f80332f" kindref="member" tooltip="Function arguments (including HI arguments) mapped to physical registers and stack offset...">_argList</ref>[index].<ref refid="structasmjit_1_1FuncInOut_1ac532e27f8c6d9d911bbb5df2ca210989" kindref="member" tooltip="Reset the function argument to &amp;quot;unassigned state&amp;quot;.">reset</ref>();</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Calling<sp/>convention.</highlight></codeline>
<codeline lineno="435" refid="structasmjit_1_1FuncDecl_1a5782543f71c49198a0a066b74f61f194" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1FuncDecl_1a5782543f71c49198a0a066b74f61f194" kindref="member" tooltip="Calling convention.">_convention</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>a<sp/>callee<sp/>pops<sp/>stack.</highlight></codeline>
<codeline lineno="437" refid="structasmjit_1_1FuncDecl_1af2d18e0a1749d64553d1d8b22deed836" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1FuncDecl_1af2d18e0a1749d64553d1d8b22deed836" kindref="member" tooltip="Whether a callee pops stack.">_calleePopsStack</ref><sp/>:<sp/>1;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Direction<sp/>for<sp/>arguments<sp/>passed<sp/>on<sp/>the<sp/>stack,<sp/>see<sp/>@c<sp/>kFuncDir.</highlight></codeline>
<codeline lineno="439" refid="structasmjit_1_1FuncDecl_1a80bd04b9c80f76e8e1867b0759102a31" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1FuncDecl_1a80bd04b9c80f76e8e1867b0759102a31" kindref="member" tooltip="Direction for arguments passed on the stack, see kFuncDir.">_direction</ref><sp/>:<sp/>1;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reserved<sp/>#0<sp/>(alignment).</highlight></codeline>
<codeline lineno="441" refid="structasmjit_1_1FuncDecl_1a7fc1348c47876dd81f4cadbf8eaf1e14" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1FuncDecl_1a7fc1348c47876dd81f4cadbf8eaf1e14" kindref="member" tooltip="Reserved #0 (alignment).">_reserved0</ref><sp/>:<sp/>6;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>arguments<sp/>(in<sp/>@c<sp/>_argList).</highlight></codeline>
<codeline lineno="444" refid="structasmjit_1_1FuncDecl_1ad4eb51ba76eb1b55baeb4e5e26c5fb4c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1FuncDecl_1ad4eb51ba76eb1b55baeb4e5e26c5fb4c" kindref="member" tooltip="Count of arguments (in _argList).">_argCount</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>return<sp/>value(s).</highlight></codeline>
<codeline lineno="446" refid="structasmjit_1_1FuncDecl_1a8e068d552d8c03ee4d12ac8cec580725" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1FuncDecl_1a8e068d552d8c03ee4d12ac8cec580725" kindref="member" tooltip="Count of return value(s).">_retCount</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>bytes<sp/>consumed<sp/>by<sp/>arguments<sp/>on<sp/>the<sp/>stack<sp/>(aligned).</highlight></codeline>
<codeline lineno="449" refid="structasmjit_1_1FuncDecl_1abef4b2387f8b5a671ce2398f45ad9a86" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1FuncDecl_1abef4b2387f8b5a671ce2398f45ad9a86" kindref="member" tooltip="Count of bytes consumed by arguments on the stack (aligned).">_argStackSize</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Size<sp/>of<sp/>&quot;Red<sp/>Zone&quot;.</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Used<sp/>by<sp/>AMD64-ABI<sp/>(128<sp/>bytes).</highlight></codeline>
<codeline lineno="454" refid="structasmjit_1_1FuncDecl_1a0691b53275ed119a0b06e7def430f051" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1FuncDecl_1a0691b53275ed119a0b06e7def430f051" kindref="member" tooltip="Size of &amp;quot;Red Zone&amp;quot;.">_redZoneSize</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Size<sp/>of<sp/>&quot;Spill<sp/>Zone&quot;.</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Used<sp/>by<sp/>WIN64-ABI<sp/>(32<sp/>bytes).</highlight></codeline>
<codeline lineno="459" refid="structasmjit_1_1FuncDecl_1a211c52c74f2da513a76dfe9e748fbd4d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1FuncDecl_1a211c52c74f2da513a76dfe9e748fbd4d" kindref="member" tooltip="Size of &amp;quot;Spill Zone&amp;quot;.">_spillZoneSize</ref>;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Function<sp/>arguments<sp/>(including<sp/>HI<sp/>arguments)<sp/>mapped<sp/>to<sp/>physical</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/><sp/>//!<sp/>registers<sp/>and<sp/>stack<sp/>offset.</highlight></codeline>
<codeline lineno="463" refid="structasmjit_1_1FuncDecl_1aff3fb03a650c4919f003f03d5f80332f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncInOut" kindref="compound" tooltip="Function in/out (argument or a return value).">FuncInOut</ref><sp/><ref refid="structasmjit_1_1FuncDecl_1aff3fb03a650c4919f003f03d5f80332f" kindref="member" tooltip="Function arguments (including HI arguments) mapped to physical registers and stack offset...">_argList</ref>[kFuncArgCountLoHi];</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Function<sp/>return<sp/>value(s).</highlight></codeline>
<codeline lineno="466" refid="structasmjit_1_1FuncDecl_1a511f2df7f8dd1b102ebec16d3dbc0397" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1FuncInOut" kindref="compound" tooltip="Function in/out (argument or a return value).">FuncInOut</ref><sp/><ref refid="structasmjit_1_1FuncDecl_1a511f2df7f8dd1b102ebec16d3dbc0397" kindref="member" tooltip="Function return value(s).">_retList</ref>[2];</highlight></codeline>
<codeline lineno="467"><highlight class="normal">};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::FuncBuilderX]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="473"><highlight class="comment">//!<sp/>@brief<sp/>Custom<sp/>function<sp/>builder<sp/>for<sp/>up<sp/>to<sp/>32<sp/>function<sp/>arguments.</highlight></codeline>
<codeline lineno="474" refid="structasmjit_1_1FuncBuilderX" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilderX" kindref="compound" tooltip="Custom function builder for up to 32 function arguments.">FuncBuilderX</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilderX" kindref="compound" tooltip="Custom function builder for up to 32 function arguments.">FuncBuilderX</ref>()<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(<ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a1e19eaa393e8cb9865b1acd0d728d7bb" kindref="member" tooltip="Invalid variable type.">kVarTypeInvalid</ref>,<sp/>_builderArgList,<sp/>0);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>return<sp/>type<sp/>to<sp/>@a<sp/>retType.</highlight></codeline>
<codeline lineno="488" refid="structasmjit_1_1FuncBuilderX_1a056f141d82365c6631821685bbde6165" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncBuilderX_1a056f141d82365c6631821685bbde6165" kindref="member" tooltip="Set return type to retType.">setRet</ref>(uint32_t<sp/>retType)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>_ret<sp/>=<sp/>retType;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setArg(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>uint32_t<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>_argCount);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>_builderArgList[id]<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addArg(uint32_t<sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(_argCount<sp/>&lt;<sp/>kFuncArgCount);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>_builderArgList[_argCount++]<sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setRetT()<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncBuilderX_1a056f141d82365c6631821685bbde6165" kindref="member" tooltip="Set return type to retType.">setRet</ref>(TypeId&lt;T&gt;::kId);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setArgT(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>setArg(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>TypeId&lt;T&gt;::kId);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>addArgT()<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>addArg(TypeId&lt;T&gt;::kId);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>uint32_t<sp/>_builderArgList[kFuncArgCount];</highlight></codeline>
<codeline lineno="522"><highlight class="normal">};</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_TID(_T_)<sp/>TypeId&lt;_T_&gt;::kId</highlight></codeline>
<codeline lineno="525"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="526"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>(no<sp/>args).</highlight></codeline>
<codeline lineno="527"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET&gt;</highlight></codeline>
<codeline lineno="528" refid="structasmjit_1_1FuncBuilder0" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilder0" kindref="compound" tooltip="Function builder (no args).">FuncBuilder0</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilder0" kindref="compound" tooltip="Function builder (no args).">FuncBuilder0</ref>()<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(_TID(RET),<sp/>NULL,<sp/>0);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal">};</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="534"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>(1<sp/>argument).</highlight></codeline>
<codeline lineno="535"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0&gt;</highlight></codeline>
<codeline lineno="536" refid="structasmjit_1_1FuncBuilder1" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilder1" kindref="compound" tooltip="Function builder (1 argument).">FuncBuilder1</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilder1" kindref="compound" tooltip="Function builder (1 argument).">FuncBuilder1</ref>()<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>args[]<sp/>=<sp/>{<sp/>_TID(P0)<sp/>};</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(_TID(RET),<sp/>args,<sp/>ASMJIT_ARRAY_SIZE(args));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal">};</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="543"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>(2<sp/>arguments).</highlight></codeline>
<codeline lineno="544"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P1&gt;</highlight></codeline>
<codeline lineno="545" refid="structasmjit_1_1FuncBuilder2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilder2" kindref="compound" tooltip="Function builder (2 arguments).">FuncBuilder2</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilder2" kindref="compound" tooltip="Function builder (2 arguments).">FuncBuilder2</ref>()<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>args[]<sp/>=<sp/>{<sp/>_TID(P0),<sp/>_TID(P1)<sp/>};</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(_TID(RET),<sp/>args,<sp/>ASMJIT_ARRAY_SIZE(args));</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal">};</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="552"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>(3<sp/>arguments).</highlight></codeline>
<codeline lineno="553"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P2&gt;</highlight></codeline>
<codeline lineno="554" refid="structasmjit_1_1FuncBuilder3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilder3" kindref="compound" tooltip="Function builder (3 arguments).">FuncBuilder3</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilder3" kindref="compound" tooltip="Function builder (3 arguments).">FuncBuilder3</ref>()<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>args[]<sp/>=<sp/>{<sp/>_TID(P0),<sp/>_TID(P1),<sp/>_TID(P2)<sp/>};</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(_TID(RET),<sp/>args,<sp/>ASMJIT_ARRAY_SIZE(args));</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal">};</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="561"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>(4<sp/>arguments).</highlight></codeline>
<codeline lineno="562"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P3&gt;</highlight></codeline>
<codeline lineno="563" refid="structasmjit_1_1FuncBuilder4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilder4" kindref="compound" tooltip="Function builder (4 arguments).">FuncBuilder4</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilder4" kindref="compound" tooltip="Function builder (4 arguments).">FuncBuilder4</ref>()<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>args[]<sp/>=<sp/>{<sp/>_TID(P0),<sp/>_TID(P1),<sp/>_TID(P2),<sp/>_TID(P3)<sp/>};</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(_TID(RET),<sp/>args,<sp/>ASMJIT_ARRAY_SIZE(args));</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal">};</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="570"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>(5<sp/>arguments).</highlight></codeline>
<codeline lineno="571"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P4&gt;</highlight></codeline>
<codeline lineno="572" refid="structasmjit_1_1FuncBuilder5" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilder5" kindref="compound" tooltip="Function builder (5 arguments).">FuncBuilder5</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilder5" kindref="compound" tooltip="Function builder (5 arguments).">FuncBuilder5</ref>()<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>args[]<sp/>=<sp/>{<sp/>_TID(P0),<sp/>_TID(P1),<sp/>_TID(P2),<sp/>_TID(P3),<sp/>_TID(P4)<sp/>};</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(_TID(RET),<sp/>args,<sp/>ASMJIT_ARRAY_SIZE(args));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal">};</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="579"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>(6<sp/>arguments).</highlight></codeline>
<codeline lineno="580"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P5&gt;</highlight></codeline>
<codeline lineno="581" refid="structasmjit_1_1FuncBuilder6" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilder6" kindref="compound" tooltip="Function builder (6 arguments).">FuncBuilder6</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilder6" kindref="compound" tooltip="Function builder (6 arguments).">FuncBuilder6</ref>()<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>args[]<sp/>=<sp/>{<sp/>_TID(P0),<sp/>_TID(P1),<sp/>_TID(P2),<sp/>_TID(P3),<sp/>_TID(P4),<sp/>_TID(P5)<sp/>};</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(_TID(RET),<sp/>args,<sp/>ASMJIT_ARRAY_SIZE(args));</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal">};</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="588"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>(7<sp/>arguments).</highlight></codeline>
<codeline lineno="589"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P5,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P6&gt;</highlight></codeline>
<codeline lineno="590" refid="structasmjit_1_1FuncBuilder7" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilder7" kindref="compound" tooltip="Function builder (7 arguments).">FuncBuilder7</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilder7" kindref="compound" tooltip="Function builder (7 arguments).">FuncBuilder7</ref>()<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>args[]<sp/>=<sp/>{<sp/>_TID(P0),<sp/>_TID(P1),<sp/>_TID(P2),<sp/>_TID(P3),<sp/>_TID(P4),<sp/>_TID(P5),<sp/>_TID(P6)<sp/>};</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(_TID(RET),<sp/>args,<sp/>ASMJIT_ARRAY_SIZE(args));</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal">};</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="597"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>(8<sp/>arguments).</highlight></codeline>
<codeline lineno="598"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P5,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P6,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P7&gt;</highlight></codeline>
<codeline lineno="599" refid="structasmjit_1_1FuncBuilder8" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilder8" kindref="compound" tooltip="Function builder (8 arguments).">FuncBuilder8</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilder8" kindref="compound" tooltip="Function builder (8 arguments).">FuncBuilder8</ref>()<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>args[]<sp/>=<sp/>{<sp/>_TID(P0),<sp/>_TID(P1),<sp/>_TID(P2),_TID(P3),<sp/>_TID(P4),<sp/>_TID(P5),<sp/>_TID(P6),<sp/>_TID(P7)<sp/>};</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(_TID(RET),<sp/>args,<sp/>ASMJIT_ARRAY_SIZE(args));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal">};</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="606"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>(9<sp/>arguments).</highlight></codeline>
<codeline lineno="607"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P5,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P6,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P7,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P8&gt;</highlight></codeline>
<codeline lineno="608" refid="structasmjit_1_1FuncBuilder9" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilder9" kindref="compound" tooltip="Function builder (9 arguments).">FuncBuilder9</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilder9" kindref="compound" tooltip="Function builder (9 arguments).">FuncBuilder9</ref>()<sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>args[]<sp/>=<sp/>{<sp/>_TID(P0),<sp/>_TID(P1),<sp/>_TID(P2),<sp/>_TID(P3),<sp/>_TID(P4),<sp/>_TID(P5),<sp/>_TID(P6),<sp/>_TID(P7),<sp/>_TID(P8)<sp/>};</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(_TID(RET),<sp/>args,<sp/>ASMJIT_ARRAY_SIZE(args));</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="613"><highlight class="normal">};</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="615"><highlight class="comment">//!<sp/>@brief<sp/>Function<sp/>builder<sp/>(10<sp/>arguments).</highlight></codeline>
<codeline lineno="616"><highlight class="comment"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RET,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P3,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P4,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P5,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P6,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P7,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P8,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>P9&gt;</highlight></codeline>
<codeline lineno="617" refid="structasmjit_1_1FuncBuilder10" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1FuncBuilder10" kindref="compound" tooltip="Function builder (10 arguments).">FuncBuilder10</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1FuncBuilder10" kindref="compound" tooltip="Function builder (10 arguments).">FuncBuilder10</ref>()<sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>args[]<sp/>=<sp/>{<sp/>_TID(P0),<sp/>_TID(P1),<sp/>_TID(P2),<sp/>_TID(P3),<sp/>_TID(P4),<sp/>_TID(P5),<sp/>_TID(P6),<sp/>_TID(P7),<sp/>_TID(P8),<sp/>_TID(P9)<sp/>};</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1FuncPrototype_1a970c68dc2e9d9ec9894ac18b7bbad1a9" kindref="member" tooltip="Set function definition - return type and arguments.">_setPrototype</ref>(_TID(RET),<sp/>args,<sp/>ASMJIT_ARRAY_SIZE(args));</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal">};</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>_TID</highlight></codeline>
<codeline lineno="625"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_ASMJIT_BASE_FUNC_H</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/base/func.h"/>
  </compounddef>
</doxygen>
