<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="structasmjit_1_1PodVector" kind="struct" prot="public">
    <compoundname>asmjit::PodVector</compoundname>
    <basecompoundref prot="public" virt="non-virtual">asmjit::PodVectorBase</basecompoundref>
    <includes local="no">podvector.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a7ec1c9e076878ca4fe86ed54398b9633" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>asmjit::PodVector&lt; T &gt;::PodVector</definition>
        <argsstring>(const PodVector&lt; T &gt; &amp;other)</argsstring>
        <name>PodVector</name>
        <param>
          <type>const <ref refid="structasmjit_1_1PodVector" kindref="compound">PodVector</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="88"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a6336366d931cf95e99d31f0029ea310e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1PodVector" kindref="compound">PodVector</ref>&lt; T &gt; &amp;</type>
        <definition>PodVector&lt;T&gt;&amp; asmjit::PodVector&lt; T &gt;::operator=</definition>
        <argsstring>(const PodVector&lt; T &gt; &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structasmjit_1_1PodVector" kindref="compound">PodVector</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a9e374507ccd808cd6d778e56402ab86b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>asmjit::PodVector&lt; T &gt;::PodVector</definition>
        <argsstring>()</argsstring>
        <name>PodVector</name>
        <briefdescription>
<para>Create new instance of <ref refid="structasmjit_1_1PodVector" kindref="compound">PodVector</ref>&lt;&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="95" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a7af566581424c4e736818c57a3ff31dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>asmjit::PodVector&lt; T &gt;::~PodVector</definition>
        <argsstring>()</argsstring>
        <name>~PodVector</name>
        <briefdescription>
<para>Destroy the <ref refid="structasmjit_1_1PodVector" kindref="compound">PodVector</ref>&lt;&gt; and data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="97" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1afb0ba224704acd2b3f388215d28f90f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool asmjit::PodVector&lt; T &gt;::isEmpty</definition>
        <argsstring>() const </argsstring>
        <name>isEmpty</name>
        <briefdescription>
<para>Get whether the vector is empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="104" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t asmjit::PodVector&lt; T &gt;::getLength</definition>
        <argsstring>() const </argsstring>
        <name>getLength</name>
        <briefdescription>
<para>Get length. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="106" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a46669ac3282eb6dfa09505638a29b3fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t asmjit::PodVector&lt; T &gt;::getCapacity</definition>
        <argsstring>() const </argsstring>
        <name>getCapacity</name>
        <briefdescription>
<para>Get capacity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="108" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a99290e3577f0296a4d21346992b1de05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* asmjit::PodVector&lt; T &gt;::getData</definition>
        <argsstring>()</argsstring>
        <name>getData</name>
        <briefdescription>
<para>Get data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="111" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a3f9cd384b3f6870190425b1791b58080" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T *</type>
        <definition>const T* asmjit::PodVector&lt; T &gt;::getData</definition>
        <argsstring>() const </argsstring>
        <name>getData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="113" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1abf9316ca4654bb99e739258a1c06d87c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void asmjit::PodVector&lt; T &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear vector data, but don&apos;t free an internal buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="120" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a99668159a21d591f41ed803a17475756" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void asmjit::PodVector&lt; T &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Clear vector data and free internal buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="126" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="126" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a6c44a7b97495a32396075b76bacdc6de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Error</type>
        <definition>Error asmjit::PodVector&lt; T &gt;::_grow</definition>
        <argsstring>(size_t n)</argsstring>
        <name>_grow</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Called to grow the buffer to fit at least <emphasis>n</emphasis> elements more. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="139" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="138" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1aacec2a3d3fdc018449fad418c5edaad3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Error</type>
        <definition>Error asmjit::PodVector&lt; T &gt;::_reserve</definition>
        <argsstring>(size_t n)</argsstring>
        <name>_reserve</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Realloc internal array to fit at least <emphasis>to</emphasis> items. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="143" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="142" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a79b0b62392910dd514d7a76080c1ad1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Error</type>
        <definition>Error asmjit::PodVector&lt; T &gt;::prepend</definition>
        <argsstring>(const T &amp;item)</argsstring>
        <name>prepend</name>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Prepend <emphasis>item</emphasis> to vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="150" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="150" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1ab28324846c511881fc1e80f245ce2ae2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Error</type>
        <definition>Error asmjit::PodVector&lt; T &gt;::insert</definition>
        <argsstring>(size_t index, const T &amp;item)</argsstring>
        <name>insert</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Insert an <emphasis>item</emphasis> at the <emphasis>index</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="166" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="166" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1aad46d8f3462ff753b7405e9e0c028264" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Error</type>
        <definition>Error asmjit::PodVector&lt; T &gt;::append</definition>
        <argsstring>(const T &amp;item)</argsstring>
        <name>append</name>
        <param>
          <type>const T &amp;</type>
          <declname>item</declname>
        </param>
        <briefdescription>
<para>Append <emphasis>item</emphasis> to vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="184" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="184" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a4e7812ddb4b95f3ced0aef29ee99356d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t asmjit::PodVector&lt; T &gt;::indexOf</definition>
        <argsstring>(const T &amp;val) const </argsstring>
        <name>indexOf</name>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Get index of <emphasis>val</emphasis> or kInvalidIndex if not found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="199" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="199" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1ae08c43cd3248fa01bf099a4ea95dadde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void asmjit::PodVector&lt; T &gt;::removeAt</definition>
        <argsstring>(size_t i)</argsstring>
        <name>removeAt</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Remove item at index <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="213" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="213" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a5f659ffe6f55ed37463fa80c03f9f96c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void asmjit::PodVector&lt; T &gt;::swap</definition>
        <argsstring>(PodVector&lt; T &gt; &amp;other)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="structasmjit_1_1PodVector" kindref="compound">PodVector</ref>&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap this pod-vector with <emphasis>other</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="223" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="223" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1a295379e7ee5c667fb34effc03aeb3579" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; asmjit::PodVector&lt; T &gt;::operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get item at index <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="230" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="230" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1ae6f61add409bbba130e8040f76861a2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; asmjit::PodVector&lt; T &gt;::operator[]</definition>
        <argsstring>(size_t i) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Get item at index <emphasis>i</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="236" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="236" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1PodVector_1ab364a6db35aa7c04e7bc378b237db173" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* asmjit::PodVector&lt; T &gt;::newElement</definition>
        <argsstring>()</argsstring>
        <name>newElement</name>
        <briefdescription>
<para>Allocate and append a new item and return its address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="242" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="242" bodyend="252"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Template used to store and manage array of POD data. </para>    </briefdescription>
    <detaileddescription>
<para>This template has these adventages over other vector&lt;&gt; templates:<itemizedlist>
<listitem><para>Non-copyable (designed to be non-copyable, we want it)</para></listitem><listitem><para>No copy-on-write (some implementations of stl can use it)</para></listitem><listitem><para>Optimized for working only with POD types</para></listitem><listitem><para>Uses ASMJIT_... memory management macros </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <location file="/home/ryan/asmjit/src/asmjit/base/podvector.h" line="87" bodyfile="/home/ryan/asmjit/src/asmjit/base/podvector.h" bodystart="87" bodyend="253"/>
    <listofallmembers>
      <member refid="structasmjit_1_1PodVectorBase_1a0059c622747dbf3e31cc79a1512148e1" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>_d</name></member>
      <member refid="structasmjit_1_1PodVector_1a6c44a7b97495a32396075b76bacdc6de" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>_grow</name></member>
      <member refid="structasmjit_1_1PodVectorBase_1af422629cc4fb6ce7c68cc23955ce7e8b" prot="protected" virt="non-virtual" ambiguityscope="asmjit::PodVectorBase::"><scope>asmjit::PodVector</scope><name>_grow</name></member>
      <member refid="structasmjit_1_1PodVectorBase_1a625b0e9de099d440e775a6eb74f2e43b" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>_nullData</name></member>
      <member refid="structasmjit_1_1PodVector_1aacec2a3d3fdc018449fad418c5edaad3" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>_reserve</name></member>
      <member refid="structasmjit_1_1PodVectorBase_1a1ddef2216f6bc6edd72d15dd31576f29" prot="protected" virt="non-virtual" ambiguityscope="asmjit::PodVectorBase::"><scope>asmjit::PodVector</scope><name>_reserve</name></member>
      <member refid="structasmjit_1_1PodVector_1aad46d8f3462ff753b7405e9e0c028264" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>append</name></member>
      <member refid="structasmjit_1_1PodVector_1abf9316ca4654bb99e739258a1c06d87c" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>clear</name></member>
      <member refid="structasmjit_1_1PodVector_1a46669ac3282eb6dfa09505638a29b3fc" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>getCapacity</name></member>
      <member refid="structasmjit_1_1PodVector_1a99290e3577f0296a4d21346992b1de05" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>getData</name></member>
      <member refid="structasmjit_1_1PodVector_1a3f9cd384b3f6870190425b1791b58080" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>getData</name></member>
      <member refid="structasmjit_1_1PodVector_1a11d6044c74254f4491ea6c55e17da9a4" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>getLength</name></member>
      <member refid="structasmjit_1_1PodVector_1a4e7812ddb4b95f3ced0aef29ee99356d" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>indexOf</name></member>
      <member refid="structasmjit_1_1PodVector_1ab28324846c511881fc1e80f245ce2ae2" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>insert</name></member>
      <member refid="structasmjit_1_1PodVector_1afb0ba224704acd2b3f388215d28f90f9" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>isEmpty</name></member>
      <member refid="structasmjit_1_1PodVector_1ab364a6db35aa7c04e7bc378b237db173" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>newElement</name></member>
      <member refid="structasmjit_1_1PodVector_1a6336366d931cf95e99d31f0029ea310e" prot="private" virt="non-virtual"><scope>asmjit::PodVector</scope><name>operator=</name></member>
      <member refid="structasmjit_1_1PodVector_1a295379e7ee5c667fb34effc03aeb3579" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>operator[]</name></member>
      <member refid="structasmjit_1_1PodVector_1ae6f61add409bbba130e8040f76861a2f" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>operator[]</name></member>
      <member refid="structasmjit_1_1PodVector_1a7ec1c9e076878ca4fe86ed54398b9633" prot="private" virt="non-virtual"><scope>asmjit::PodVector</scope><name>PodVector</name></member>
      <member refid="structasmjit_1_1PodVector_1a9e374507ccd808cd6d778e56402ab86b" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>PodVector</name></member>
      <member refid="structasmjit_1_1PodVectorBase_1a4bef36336809b13d41cb2217c1a931a7" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>PodVectorBase</name></member>
      <member refid="structasmjit_1_1PodVector_1a79b0b62392910dd514d7a76080c1ad1a" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>prepend</name></member>
      <member refid="structasmjit_1_1PodVector_1ae08c43cd3248fa01bf099a4ea95dadde" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>removeAt</name></member>
      <member refid="structasmjit_1_1PodVector_1a99668159a21d591f41ed803a17475756" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>reset</name></member>
      <member refid="structasmjit_1_1PodVector_1a5f659ffe6f55ed37463fa80c03f9f96c" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>swap</name></member>
      <member refid="structasmjit_1_1PodVector_1a7af566581424c4e736818c57a3ff31dd" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>~PodVector</name></member>
      <member refid="structasmjit_1_1PodVectorBase_1a70efc42e92ac20acec27f57030c81371" prot="public" virt="non-virtual"><scope>asmjit::PodVector</scope><name>~PodVectorBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
