<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="x86func_8h" kind="file">
    <compoundname>x86func.h</compoundname>
    <includes refid="defs_8h" local="yes">../base/defs.h</includes>
    <includes refid="func_8h" local="yes">../base/func.h</includes>
    <includes refid="x86defs_8h" local="yes">../x86/x86defs.h</includes>
    <includes refid="apibegin_8h" local="yes">../base/apibegin.h</includes>
    <includes refid="apiend_8h" local="yes">../base/apiend.h</includes>
    <includedby refid="x86compiler_8h" local="yes">x86compiler.h</includedby>
    <includedby refid="x86_8h" local="yes">x86.h</includedby>
    <incdepgraph>
      <node id="2387">
        <label>../base/globals.h</label>
        <childnode refid="2388" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2395">
        <label>../base/apiend.h</label>
      </node>
      <node id="2393">
        <label>stdarg.h</label>
      </node>
      <node id="2402">
        <label>../base/codegen.h</label>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2403" relation="include">
        </childnode>
        <childnode refid="2404" relation="include">
        </childnode>
        <childnode refid="2405" relation="include">
        </childnode>
        <childnode refid="2406" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2397">
        <label>stdint.h</label>
      </node>
      <node id="2391">
        <label>stdlib.h</label>
      </node>
      <node id="2403">
        <label>../base/error.h</label>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2406">
        <label>../base/zone.h</label>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2394">
        <label>../base/apibegin.h</label>
        <childnode refid="2388" relation="include">
        </childnode>
      </node>
      <node id="2404">
        <label>../base/logger.h</label>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2392" relation="include">
        </childnode>
        <childnode refid="2393" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2401">
        <label>../base/assembler.h</label>
        <childnode refid="2402" relation="include">
        </childnode>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2403" relation="include">
        </childnode>
        <childnode refid="2404" relation="include">
        </childnode>
        <childnode refid="2407" relation="include">
        </childnode>
        <childnode refid="2408" relation="include">
        </childnode>
        <childnode refid="2405" relation="include">
        </childnode>
        <childnode refid="2406" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2385">
        <label>../base/defs.h</label>
        <childnode refid="2386" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2398">
        <label>limits.h</label>
      </node>
      <node id="2407">
        <label>../base/podlist.h</label>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2387" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2408">
        <label>../base/podvector.h</label>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2403" relation="include">
        </childnode>
        <childnode refid="2387" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2396">
        <label>new</label>
      </node>
      <node id="2384">
        <label>x86func.h</label>
        <link refid="x86func.h"/>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2399" relation="include">
        </childnode>
        <childnode refid="2400" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2389">
        <label>config.h</label>
      </node>
      <node id="2410">
        <label>../base/vectypes.h</label>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2386">
        <label>../base/intutil.h</label>
        <childnode refid="2387" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2405">
        <label>../base/runtime.h</label>
        <childnode refid="2403" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2388">
        <label>../build.h</label>
        <childnode refid="2389" relation="include">
        </childnode>
        <childnode refid="2390" relation="include">
        </childnode>
        <childnode refid="2391" relation="include">
        </childnode>
        <childnode refid="2392" relation="include">
        </childnode>
        <childnode refid="2396" relation="include">
        </childnode>
        <childnode refid="2397" relation="include">
        </childnode>
        <childnode refid="2398" relation="include">
        </childnode>
      </node>
      <node id="2390">
        <label>stdio.h</label>
      </node>
      <node id="2392">
        <label>string.h</label>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2387" relation="include">
        </childnode>
        <childnode refid="2393" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2399">
        <label>../base/func.h</label>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2387" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2409">
        <label>../base/compiler.h</label>
        <childnode refid="2401" relation="include">
        </childnode>
        <childnode refid="2402" relation="include">
        </childnode>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2403" relation="include">
        </childnode>
        <childnode refid="2399" relation="include">
        </childnode>
        <childnode refid="2386" relation="include">
        </childnode>
        <childnode refid="2407" relation="include">
        </childnode>
        <childnode refid="2408" relation="include">
        </childnode>
        <childnode refid="2405" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
      <node id="2400">
        <label>../x86/x86defs.h</label>
        <childnode refid="2401" relation="include">
        </childnode>
        <childnode refid="2409" relation="include">
        </childnode>
        <childnode refid="2385" relation="include">
        </childnode>
        <childnode refid="2387" relation="include">
        </childnode>
        <childnode refid="2386" relation="include">
        </childnode>
        <childnode refid="2410" relation="include">
        </childnode>
        <childnode refid="2394" relation="include">
        </childnode>
        <childnode refid="2395" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2413">
        <label>x86context_p.h</label>
      </node>
      <node id="2414">
        <label>x86.h</label>
      </node>
      <node id="2412">
        <label>x86compiler.h</label>
        <childnode refid="2413" relation="include">
        </childnode>
        <childnode refid="2414" relation="include">
        </childnode>
      </node>
      <node id="2411">
        <label>x86func.h</label>
        <link refid="x86func.h"/>
        <childnode refid="2412" relation="include">
        </childnode>
        <childnode refid="2414" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl" prot="public">asmjit::x86x64::X86X64FuncDecl</innerclass>
    <innernamespace refid="namespaceasmjit">asmjit</innernamespace>
    <innernamespace refid="namespaceasmjit_1_1x86x64">asmjit::x86x64</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMJIT_X86_X86FUNC_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_ASMJIT_X86_X86FUNC_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/defs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/func.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../x86/x86defs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x86x64<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_x86x64</highlight></codeline>
<codeline lineno="23"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kFuncConv]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment">//!<sp/>@brief<sp/>X86<sp/>function<sp/>calling<sp/>conventions.</highlight></codeline>
<codeline lineno="30"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="31"><highlight class="comment">//!<sp/>Calling<sp/>convention<sp/>is<sp/>scheme<sp/>how<sp/>function<sp/>arguments<sp/>are<sp/>passed<sp/>into</highlight></codeline>
<codeline lineno="32"><highlight class="comment">//!<sp/>function<sp/>and<sp/>how<sp/>functions<sp/>returns<sp/>values.<sp/>In<sp/>assembler<sp/>programming</highlight></codeline>
<codeline lineno="33"><highlight class="comment">//!<sp/>it&apos;s<sp/>needed<sp/>to<sp/>always<sp/>comply<sp/>with<sp/>function<sp/>calling<sp/>conventions,<sp/>because</highlight></codeline>
<codeline lineno="34"><highlight class="comment">//!<sp/>even<sp/>small<sp/>inconsistency<sp/>can<sp/>cause<sp/>undefined<sp/>behavior<sp/>or<sp/>crash.</highlight></codeline>
<codeline lineno="35"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="36"><highlight class="comment">//!<sp/>List<sp/>of<sp/>calling<sp/>conventions<sp/>for<sp/>32-bit<sp/>x86<sp/>mode:</highlight></codeline>
<codeline lineno="37"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kFuncConvCDecl<sp/>-<sp/>Calling<sp/>convention<sp/>for<sp/>C<sp/>runtime.</highlight></codeline>
<codeline lineno="38"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kFuncConvStdCall<sp/>-<sp/>Calling<sp/>convention<sp/>for<sp/>WinAPI<sp/>functions.</highlight></codeline>
<codeline lineno="39"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kFuncConvMsThisCall<sp/>-<sp/>Calling<sp/>convention<sp/>for<sp/>C++<sp/>members<sp/>under</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/><sp/>Windows<sp/>(produced<sp/>by<sp/>MSVC<sp/>and<sp/>all<sp/>MSVC<sp/>compatible<sp/>compilers).</highlight></codeline>
<codeline lineno="41"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kFuncConvMsFastCall<sp/>-<sp/>Fastest<sp/>calling<sp/>convention<sp/>that<sp/>can<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="42"><highlight class="comment">//!<sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>MSVC<sp/>compiler.</highlight></codeline>
<codeline lineno="43"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kFuncConv_BORNANDFASTCALL<sp/>-<sp/>Borland<sp/>fastcall<sp/>convention.</highlight></codeline>
<codeline lineno="44"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kFuncConvGccFastCall<sp/>-<sp/>GCC<sp/>fastcall<sp/>convention<sp/>(2<sp/>register<sp/>arguments).</highlight></codeline>
<codeline lineno="45"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kFuncConvGccRegParm1<sp/>-<sp/>GCC<sp/>regparm(1)<sp/>convention.</highlight></codeline>
<codeline lineno="46"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kFuncConvGccRegParm2<sp/>-<sp/>GCC<sp/>regparm(2)<sp/>convention.</highlight></codeline>
<codeline lineno="47"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kFuncConvGccRegParm3<sp/>-<sp/>GCC<sp/>regparm(3)<sp/>convention.</highlight></codeline>
<codeline lineno="48"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="49"><highlight class="comment">//!<sp/>List<sp/>of<sp/>calling<sp/>conventions<sp/>for<sp/>64-bit<sp/>x86<sp/>mode<sp/>(x64):</highlight></codeline>
<codeline lineno="50"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kFuncConvX64W<sp/>-<sp/>Windows<sp/>64-bit<sp/>calling<sp/>convention<sp/>(WIN64<sp/>ABI).</highlight></codeline>
<codeline lineno="51"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kFuncConvX64U<sp/>-<sp/>Unix<sp/>64-bit<sp/>calling<sp/>convention<sp/>(AMD64<sp/>ABI).</highlight></codeline>
<codeline lineno="52"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="53"><highlight class="comment">//!<sp/>There<sp/>is<sp/>also<sp/>@c<sp/>kFuncConvHost<sp/>that<sp/>is<sp/>defined<sp/>to<sp/>fit<sp/>best<sp/>to<sp/>your</highlight></codeline>
<codeline lineno="54"><highlight class="comment">//!<sp/>compiler.</highlight></codeline>
<codeline lineno="55"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="56"><highlight class="comment">//!<sp/>These<sp/>types<sp/>are<sp/>used<sp/>together<sp/>with<sp/>@c<sp/>asmjit::Compiler::addFunc()</highlight></codeline>
<codeline lineno="57"><highlight class="comment">//!<sp/>method.</highlight></codeline>
<codeline lineno="58" refid="group__asmjit__x86x64_1ga1cef400cf6e21967f796513f7c44ad2e" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga1cef400cf6e21967f796513f7c44ad2e" kindref="member" tooltip="X86 function calling conventions.">kFuncConv</ref>)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[X64]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>X64<sp/>calling<sp/>convention<sp/>for<sp/>Windows<sp/>platform<sp/>(WIN64<sp/>ABI).</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/>//!<sp/>For<sp/>first<sp/>four<sp/>arguments<sp/>are<sp/>used<sp/>these<sp/>registers:</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>1.<sp/>32/64-bit<sp/>integer<sp/>or<sp/>floating<sp/>point<sp/>argument<sp/>-<sp/>rcx/xmm0</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>2.<sp/>32/64-bit<sp/>integer<sp/>or<sp/>floating<sp/>point<sp/>argument<sp/>-<sp/>rdx/xmm1</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>3.<sp/>32/64-bit<sp/>integer<sp/>or<sp/>floating<sp/>point<sp/>argument<sp/>-<sp/>r8/xmm2</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>4.<sp/>32/64-bit<sp/>integer<sp/>or<sp/>floating<sp/>point<sp/>argument<sp/>-<sp/>r9/xmm3</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/>//!<sp/>Note<sp/>first<sp/>four<sp/>arguments<sp/>here<sp/>means<sp/>arguments<sp/>at<sp/>positions<sp/>from<sp/>1<sp/>to<sp/>4</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/>//!<sp/>(included).<sp/>For<sp/>example<sp/>if<sp/>second<sp/>argument<sp/>is<sp/>not<sp/>passed<sp/>in<sp/>register<sp/>then</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/>//!<sp/>rdx/xmm1<sp/>register<sp/>is<sp/>unused.</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/>//!<sp/>All<sp/>other<sp/>arguments<sp/>are<sp/>pushed<sp/>on<sp/>the<sp/>stack<sp/>in<sp/>right-to-left<sp/>direction.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>aligned<sp/>by<sp/>16<sp/>bytes.<sp/>There<sp/>is<sp/>32-byte<sp/>shadow<sp/>space<sp/>on<sp/>the<sp/>stack</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/>//!<sp/>that<sp/>can<sp/>be<sp/>used<sp/>to<sp/>save<sp/>up<sp/>to<sp/>four<sp/>64-bit<sp/>registers<sp/>(probably<sp/>designed<sp/>to</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/>//!<sp/>be<sp/>used<sp/>to<sp/>save<sp/>first<sp/>four<sp/>arguments<sp/>passed<sp/>in<sp/>registers).</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>direction:</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Right<sp/>to<sp/>Left<sp/>(except<sp/>for<sp/>first<sp/>4<sp/>parameters<sp/>that&apos;s<sp/>in<sp/>registers)</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>cleaned<sp/>by:</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Caller.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/>//!<sp/>Return<sp/>value:</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Integer<sp/>types<sp/>-<sp/>RAX<sp/>register.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Floating<sp/>points<sp/>-<sp/>XMM0<sp/>register.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>always<sp/>aligned<sp/>by<sp/>16<sp/>bytes.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/>//!<sp/>More<sp/>information<sp/>about<sp/>this<sp/>calling<sp/>convention<sp/>can<sp/>be<sp/>found<sp/>on<sp/>MSDN:</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/>//!<sp/>http://msdn.microsoft.com/en-us/library/9b372w95.aspx<sp/>.</highlight></codeline>
<codeline lineno="94" refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea553686702d710c1fb5936db274ffa4b2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea553686702d710c1fb5936db274ffa4b2" kindref="member" tooltip="X64 calling convention for Windows platform (WIN64 ABI).">kFuncConvX64W</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>X64<sp/>calling<sp/>convention<sp/>for<sp/>Unix<sp/>platforms<sp/>(AMD64<sp/>ABI).</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/>//!<sp/>First<sp/>six<sp/>32<sp/>or<sp/>64-bit<sp/>integer<sp/>arguments<sp/>are<sp/>passed<sp/>in<sp/>rdi,<sp/>rsi,<sp/>rdx,</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/>//!<sp/>rcx,<sp/>r8,<sp/>r9<sp/>registers.<sp/>First<sp/>eight<sp/>floating<sp/>point<sp/>or<sp/>Xmm<sp/>arguments</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/>//!<sp/>are<sp/>passed<sp/>in<sp/>xmm0,<sp/>xmm1,<sp/>xmm2,<sp/>xmm3,<sp/>xmm4,<sp/>xmm5,<sp/>xmm6,<sp/>xmm7<sp/>registers.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>means<sp/>that<sp/>in<sp/>registers<sp/>can<sp/>be<sp/>transferred<sp/>up<sp/>to<sp/>14<sp/>arguments<sp/>total.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/>//!<sp/>There<sp/>is<sp/>also<sp/>RED<sp/>ZONE<sp/>below<sp/>the<sp/>stack<sp/>pointer<sp/>that<sp/>can<sp/>be<sp/>used<sp/>for</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/>//!<sp/>temporary<sp/>storage.<sp/>The<sp/>red<sp/>zone<sp/>is<sp/>the<sp/>space<sp/>from<sp/>[rsp-128]<sp/>to<sp/>[rsp-8].</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>direction:</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Right<sp/>to<sp/>Left<sp/>(Except<sp/>for<sp/>arguments<sp/>passed<sp/>in<sp/>registers).</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>cleaned<sp/>by:</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Caller.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/>//!<sp/>Return<sp/>value:</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Integer<sp/>types<sp/>-<sp/>RAX<sp/>register.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Floating<sp/>points<sp/>-<sp/>XMM0<sp/>register.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>always<sp/>aligned<sp/>by<sp/>16<sp/>bytes.</highlight></codeline>
<codeline lineno="117" refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea86646a2f15a33883198dc96cd586cba3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea86646a2f15a33883198dc96cd586cba3" kindref="member" tooltip="X64 calling convention for Unix platforms (AMD64 ABI).">kFuncConvX64U</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[X86]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cdecl<sp/>calling<sp/>convention<sp/>(used<sp/>by<sp/>C<sp/>runtime).</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/>//!<sp/>Compatible<sp/>across<sp/>MSVC<sp/>and<sp/>GCC.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>direction:</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Right<sp/>to<sp/>Left</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>cleaned<sp/>by:</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Caller.</highlight></codeline>
<codeline lineno="132" refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eab7e3dd2133e72d62ec10577f7aa59e81" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eab7e3dd2133e72d62ec10577f7aa59e81" kindref="member" tooltip="Cdecl calling convention (used by C runtime).">kFuncConvCDecl</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Stdcall<sp/>calling<sp/>convention<sp/>(used<sp/>by<sp/>WinAPI).</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/>//!<sp/>Compatible<sp/>across<sp/>MSVC<sp/>and<sp/>GCC.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>direction:</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Right<sp/>to<sp/>Left</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>cleaned<sp/>by:</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Callee.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/>//!<sp/>Return<sp/>value:</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Integer<sp/>types<sp/>-<sp/>EAX:EDX<sp/>registers.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Floating<sp/>points<sp/>-<sp/>fp0<sp/>register.</highlight></codeline>
<codeline lineno="147" refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b49ad730aef88425b403db4743f1c3e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b49ad730aef88425b403db4743f1c3e" kindref="member" tooltip="Stdcall calling convention (used by WinAPI).">kFuncConvStdCall</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>MSVC<sp/>specific<sp/>calling<sp/>convention<sp/>used<sp/>by<sp/>MSVC/Intel<sp/>compilers</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/>//!<sp/>for<sp/>struct/class<sp/>methods.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>is<sp/>MSVC<sp/>(and<sp/>Intel)<sp/>only<sp/>calling<sp/>convention<sp/>used<sp/>in<sp/>Windows</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/>//!<sp/>world<sp/>for<sp/>C++<sp/>class<sp/>methods.<sp/>Implicit<sp/>&apos;this&apos;<sp/>pointer<sp/>is<sp/>stored<sp/>in</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/>//!<sp/>ECX<sp/>register<sp/>instead<sp/>of<sp/>storing<sp/>it<sp/>on<sp/>the<sp/>stack.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>direction:</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Right<sp/>to<sp/>Left<sp/>(except<sp/>this<sp/>pointer<sp/>in<sp/>ECX)</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>cleaned<sp/>by:</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Callee.</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/>//!<sp/>Return<sp/>value:</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Integer<sp/>types<sp/>-<sp/>EAX:EDX<sp/>registers.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Floating<sp/>points<sp/>-<sp/>fp0<sp/>register.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/>//!<sp/>C++<sp/>class<sp/>methods<sp/>that<sp/>have<sp/>variable<sp/>count<sp/>of<sp/>arguments<sp/>uses<sp/>different</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/>//!<sp/>calling<sp/>convention<sp/>called<sp/>cdecl.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>This<sp/>calling<sp/>convention<sp/>is<sp/>always<sp/>used<sp/>by<sp/>MSVC<sp/>for<sp/>class<sp/>methods,</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/>//!<sp/>it&apos;s<sp/>implicit<sp/>and<sp/>there<sp/>is<sp/>no<sp/>way<sp/>how<sp/>to<sp/>override<sp/>it.</highlight></codeline>
<codeline lineno="171" refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea7e73cd258391478a22a16706e8765989" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea7e73cd258391478a22a16706e8765989" kindref="member" tooltip="MSVC specific calling convention used by MSVC/Intel compilers for struct/class methods.">kFuncConvMsThisCall</ref><sp/>=<sp/>5,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>MSVC<sp/>specific<sp/>fastcall.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/><sp/>//!<sp/>Two<sp/>first<sp/>parameters<sp/>(evaluated<sp/>from<sp/>left-to-right)<sp/>are<sp/>in<sp/>ECX:EDX</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/>//!<sp/>registers,<sp/>all<sp/>others<sp/>on<sp/>the<sp/>stack<sp/>in<sp/>right-to-left<sp/>order.</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>direction:</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Right<sp/>to<sp/>Left<sp/>(except<sp/>to<sp/>first<sp/>two<sp/>integer<sp/>arguments<sp/>in<sp/>ECX:EDX)</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>cleaned<sp/>by:</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Callee.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/>//!<sp/>Return<sp/>value:</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Integer<sp/>types<sp/>-<sp/>EAX:EDX<sp/>registers.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Floating<sp/>points<sp/>-<sp/>fp0<sp/>register.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>This<sp/>calling<sp/>convention<sp/>differs<sp/>to<sp/>GCC<sp/>one<sp/>in<sp/>stack<sp/>cleaning</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/>//!<sp/>mechanism.</highlight></codeline>
<codeline lineno="190" refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b0cadb9dec3ae217ff320376f13e404" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b0cadb9dec3ae217ff320376f13e404" kindref="member" tooltip="MSVC specific fastcall.">kFuncConvMsFastCall</ref><sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Borland<sp/>specific<sp/>fastcall<sp/>with<sp/>2<sp/>parameters<sp/>in<sp/>registers.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/>//!<sp/>Two<sp/>first<sp/>parameters<sp/>(evaluated<sp/>from<sp/>left-to-right)<sp/>are<sp/>in<sp/>ECX:EDX</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/>//!<sp/>registers,<sp/>all<sp/>others<sp/>on<sp/>the<sp/>stack<sp/>in<sp/>left-to-right<sp/>order.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>direction:</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Left<sp/>to<sp/>Right<sp/>(except<sp/>to<sp/>first<sp/>two<sp/>integer<sp/>arguments<sp/>in<sp/>ECX:EDX)</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>cleaned<sp/>by:</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Callee.</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/>//!<sp/>Return<sp/>value:</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Integer<sp/>types<sp/>-<sp/>EAX:EDX<sp/>registers.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Floating<sp/>points<sp/>-<sp/>fp0<sp/>register.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Arguments<sp/>on<sp/>the<sp/>stack<sp/>are<sp/>in<sp/>left-to-right<sp/>order<sp/>that<sp/>differs</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/><sp/>//!<sp/>to<sp/>other<sp/>fastcall<sp/>conventions<sp/>used<sp/>in<sp/>different<sp/>compilers.</highlight></codeline>
<codeline lineno="209" refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea9914b37ad9535fd37562af85830af3ff" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea9914b37ad9535fd37562af85830af3ff" kindref="member" tooltip="Borland specific fastcall with 2 parameters in registers.">kFuncConvBorlandFastCall</ref><sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>GCC<sp/>specific<sp/>fastcall<sp/>convention.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/><sp/>//!<sp/>Two<sp/>first<sp/>parameters<sp/>(evaluated<sp/>from<sp/>left-to-right)<sp/>are<sp/>in<sp/>ECX:EDX</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/>//!<sp/>registers,<sp/>all<sp/>others<sp/>on<sp/>the<sp/>stack<sp/>in<sp/>right-to-left<sp/>order.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>direction:</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Right<sp/>to<sp/>Left<sp/>(except<sp/>to<sp/>first<sp/>two<sp/>integer<sp/>arguments<sp/>in<sp/>ECX:EDX)</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>cleaned<sp/>by:</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Callee.</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/>//!<sp/>Return<sp/>value:</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Integer<sp/>types<sp/>-<sp/>EAX:EDX<sp/>registers.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Floating<sp/>points<sp/>-<sp/>fp0<sp/>register.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>This<sp/>calling<sp/>convention<sp/>should<sp/>be<sp/>compatible<sp/>with</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/>//!<sp/>@c<sp/>kFuncConvMsFastCall.</highlight></codeline>
<codeline lineno="228" refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b441adfcd78f9f09d22c48debce4bdf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b441adfcd78f9f09d22c48debce4bdf" kindref="member" tooltip="GCC specific fastcall convention.">kFuncConvGccFastCall</ref><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>GCC<sp/>specific<sp/>regparm(1)<sp/>convention.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/>//!<sp/>The<sp/>first<sp/>parameter<sp/>(evaluated<sp/>from<sp/>left-to-right)<sp/>is<sp/>in<sp/>EAX<sp/>register,</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/>//!<sp/>all<sp/>others<sp/>on<sp/>the<sp/>stack<sp/>in<sp/>right-to-left<sp/>order.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>direction:</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Right<sp/>to<sp/>Left<sp/>(except<sp/>to<sp/>first<sp/>one<sp/>integer<sp/>argument<sp/>in<sp/>EAX)</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>cleaned<sp/>by:</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Caller.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/>//!<sp/>Return<sp/>value:</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Integer<sp/>types<sp/>-<sp/>EAX:EDX<sp/>registers.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Floating<sp/>points<sp/>-<sp/>fp0<sp/>register.</highlight></codeline>
<codeline lineno="244" refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ead94574cee35b8c0c82855189c429401e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ead94574cee35b8c0c82855189c429401e" kindref="member" tooltip="GCC specific regparm(1) convention.">kFuncConvGccRegParm1</ref><sp/>=<sp/>9,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>GCC<sp/>specific<sp/>regparm(2)<sp/>convention.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/>//!<sp/>Two<sp/>first<sp/>parameters<sp/>(evaluated<sp/>from<sp/>left-to-right)<sp/>are<sp/>in<sp/>EAX:EDX</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/>//!<sp/>registers,<sp/>all<sp/>others<sp/>on<sp/>the<sp/>stack<sp/>in<sp/>right-to-left<sp/>order.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>direction:</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Right<sp/>to<sp/>Left<sp/>(except<sp/>to<sp/>first<sp/>two<sp/>integer<sp/>arguments<sp/>in<sp/>EAX:EDX)</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>cleaned<sp/>by:</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Caller.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/>//!<sp/>Return<sp/>value:</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Integer<sp/>types<sp/>-<sp/>EAX:EDX<sp/>registers.</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Floating<sp/>points<sp/>-<sp/>fp0<sp/>register.</highlight></codeline>
<codeline lineno="260" refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eacb9583a574e3f1b453751c95791f3056" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eacb9583a574e3f1b453751c95791f3056" kindref="member" tooltip="GCC specific regparm(2) convention.">kFuncConvGccRegParm2</ref><sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>GCC<sp/>specific<sp/>fastcall<sp/>with<sp/>3<sp/>parameters<sp/>in<sp/>registers.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/>//!<sp/>Three<sp/>first<sp/>parameters<sp/>(evaluated<sp/>from<sp/>left-to-right)<sp/>are<sp/>in</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/>//!<sp/>EAX:EDX:ECX<sp/>registers,<sp/>all<sp/>others<sp/>on<sp/>the<sp/>stack<sp/>in<sp/>right-to-left<sp/>order.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/>//!<sp/>Arguments<sp/>direction:</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Right<sp/>to<sp/>Left<sp/>(except<sp/>to<sp/>first<sp/>three<sp/>integer<sp/>arguments<sp/>in<sp/>EAX:EDX:ECX)</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/>//!<sp/>Stack<sp/>is<sp/>cleaned<sp/>by:</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Caller.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/>//!<sp/>Return<sp/>value:</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Integer<sp/>types<sp/>-<sp/>EAX:EDX<sp/>registers.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Floating<sp/>points<sp/>-<sp/>fp0<sp/>register.</highlight></codeline>
<codeline lineno="276" refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eaa05e116e3ed2c8a8754b595635c9ece7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eaa05e116e3ed2c8a8754b595635c9ece7" kindref="member" tooltip="GCC specific fastcall with 3 parameters in registers.">kFuncConvGccRegParm3</ref><sp/>=<sp/>11,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>function<sp/>calling<sp/>conventions.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>_kFuncConvCount<sp/>=<sp/>12,</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Host]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/>//!<sp/>@def<sp/>kFuncConvHost</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Default<sp/>calling<sp/>convention<sp/>for<sp/>current<sp/>platform<sp/>/<sp/>operating<sp/>system.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/><sp/>//!<sp/>@def<sp/>kFuncConvHostCDecl</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Default<sp/>C<sp/>calling<sp/>convention<sp/>based<sp/>on<sp/>current<sp/>compiler&apos;s<sp/>settings.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/>//!<sp/>@def<sp/>kFuncConvHostStdCall</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compatibility<sp/>for<sp/>__stdcall<sp/>calling<sp/>convention.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>This<sp/>enumeration<sp/>is<sp/>always<sp/>set<sp/>to<sp/>a<sp/>value<sp/>which<sp/>is<sp/>compatible<sp/>with</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/>//!<sp/>current<sp/>compilers<sp/>__stdcall<sp/>calling<sp/>convention.<sp/>In<sp/>64-bit<sp/>mode<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/>//!<sp/>is<sp/>compatible<sp/>with<sp/>@ref<sp/>kFuncConvX64W<sp/>or<sp/>@ref<sp/>kFuncConvX64U.</highlight></codeline>
<codeline lineno="299"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/>//!<sp/>@def<sp/>kFuncConvHostFastCall</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Compatibility<sp/>for<sp/>__fastcall<sp/>calling<sp/>convention.</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>This<sp/>enumeration<sp/>is<sp/>always<sp/>set<sp/>to<sp/>a<sp/>value<sp/>which<sp/>is<sp/>compatible<sp/>with</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/><sp/>//!<sp/>current<sp/>compilers<sp/>__fastcall<sp/>calling<sp/>convention.<sp/>In<sp/>64-bit<sp/>mode<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/>//!<sp/>is<sp/>compatible<sp/>with<sp/>@ref<sp/>kFuncConvX64W<sp/>or<sp/>@ref<sp/>kFuncConvX64U.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_HOST_X86)</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>kFuncConvHost<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eab7e3dd2133e72d62ec10577f7aa59e81" kindref="member" tooltip="Cdecl calling convention (used by C runtime).">kFuncConvCDecl</ref>,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>kFuncConvHostCDecl<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2eab7e3dd2133e72d62ec10577f7aa59e81" kindref="member" tooltip="Cdecl calling convention (used by C runtime).">kFuncConvCDecl</ref>,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>kFuncConvHostStdCall<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b49ad730aef88425b403db4743f1c3e" kindref="member" tooltip="Stdcall calling convention (used by WinAPI).">kFuncConvStdCall</ref>,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(_MSC_VER)</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>kFuncConvHostFastCall<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b0cadb9dec3ae217ff320376f13e404" kindref="member" tooltip="MSVC specific fastcall.">kFuncConvMsFastCall</ref></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(__GNUC__)</highlight></codeline>
<codeline lineno="316"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>kFuncConvHostFastCall<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea3b441adfcd78f9f09d22c48debce4bdf" kindref="member" tooltip="GCC specific fastcall convention.">kFuncConvGccFastCall</ref></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(__BORLANDC__)</highlight></codeline>
<codeline lineno="318"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>kFuncConvHostFastCall<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea9914b37ad9535fd37562af85830af3ff" kindref="member" tooltip="Borland specific fastcall with 2 parameters in registers.">kFuncConvBorlandFastCall</ref></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight></codeline>
<codeline lineno="320"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>error<sp/>&quot;asmjit/x86/x86func.h<sp/>-<sp/>asmjit::kFuncConvHostFastCall<sp/>not<sp/>supported.&quot;</highlight></codeline>
<codeline lineno="321"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="324"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(ASMJIT_OS_WINDOWS)</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>kFuncConvHost<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea553686702d710c1fb5936db274ffa4b2" kindref="member" tooltip="X64 calling convention for Windows platform (WIN64 ABI).">kFuncConvX64W</ref>,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>kFuncConvHost<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea86646a2f15a33883198dc96cd586cba3" kindref="member" tooltip="X64 calling convention for Unix platforms (AMD64 ABI).">kFuncConvX64U</ref>,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
<codeline lineno="330"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>kFuncConvHostCDecl<sp/>=<sp/>kFuncConvHost,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>kFuncConvHostStdCall<sp/>=<sp/>kFuncConvHost,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>kFuncConvHostFastCall<sp/>=<sp/>kFuncConvHost</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_HOST</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"></highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kFuncHint]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="342"><highlight class="comment">//!<sp/>@brief<sp/>X86<sp/>function<sp/>hints.</highlight></codeline>
<codeline lineno="343" refid="group__asmjit__x86x64_1ga9a688e930dadd3a2a82dd6999e8681ff" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga9a688e930dadd3a2a82dd6999e8681ff" kindref="member" tooltip="X86 function hints.">kFuncHint</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Use<sp/>push/pop<sp/>sequences<sp/>instead<sp/>of<sp/>mov<sp/>sequences<sp/>in<sp/>function<sp/>prolog</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/>//!<sp/>and<sp/>epilog.</highlight></codeline>
<codeline lineno="346" refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffab728a139b384786e1183e880eb722ceb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffab728a139b384786e1183e880eb722ceb" kindref="member" tooltip="Use push/pop sequences instead of mov sequences in function prolog and epilog.">kFuncHintPushPop</ref><sp/>=<sp/>16,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>emms<sp/>instruction<sp/>to<sp/>the<sp/>function<sp/>epilog.</highlight></codeline>
<codeline lineno="348" refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffa6edbcdb990dad842a5575e987a36dad0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffa6edbcdb990dad842a5575e987a36dad0" kindref="member" tooltip="Add emms instruction to the function epilog.">kFuncHintEmms</ref><sp/>=<sp/>17,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>sfence<sp/>instruction<sp/>to<sp/>the<sp/>function<sp/>epilog.</highlight></codeline>
<codeline lineno="350" refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffa5d4386a7e7b452a7273753d7af7f0e47" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffa5d4386a7e7b452a7273753d7af7f0e47" kindref="member" tooltip="Add sfence instruction to the function epilog.">kFuncHintSFence</ref><sp/>=<sp/>18,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Add<sp/>lfence<sp/>instruction<sp/>to<sp/>the<sp/>function<sp/>epilog.</highlight></codeline>
<codeline lineno="352" refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffaef76692b9c047ec20dd93dfa26442d0d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9a688e930dadd3a2a82dd6999e8681ffaef76692b9c047ec20dd93dfa26442d0d" kindref="member" tooltip="Add lfence instruction to the function epilog.">kFuncHintLFence</ref><sp/>=<sp/>19</highlight></codeline>
<codeline lineno="353"><highlight class="normal">};</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kFuncFlags]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="359"><highlight class="comment">//!<sp/>@brief<sp/>X86<sp/>function<sp/>flags.</highlight></codeline>
<codeline lineno="360" refid="group__asmjit__x86x64_1ga7b42aa5041e210749d119bbf3be8ec3e" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga7b42aa5041e210749d119bbf3be8ec3e" kindref="member" tooltip="X86 function flags.">kFuncFlags</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>to<sp/>emit<sp/>register<sp/>load/save<sp/>sequence<sp/>using<sp/>push/pop<sp/>pairs.</highlight></codeline>
<codeline lineno="362" refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eab79c37976fbbc7d54088133903f8e63f" kindref="member" tooltip="Whether to emit register load/save sequence using push/pop pairs.">kFuncFlagPushPop</ref><sp/>=<sp/>0x00010000,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>to<sp/>emit<sp/>&quot;enter&quot;<sp/>instead<sp/>of<sp/>three<sp/>instructions<sp/>in<sp/>case</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/>//!<sp/>that<sp/>the<sp/>function<sp/>is<sp/>not<sp/>naked<sp/>or<sp/>misaligned.</highlight></codeline>
<codeline lineno="366" refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea6e3366da1c4c93b998d9deeaf3f42c3e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea6e3366da1c4c93b998d9deeaf3f42c3e" kindref="member" tooltip="Whether to emit &amp;quot;enter&amp;quot; instead of three instructions in case that the function is not naked or misal...">kFuncFlagEnter</ref><sp/>=<sp/>0x00020000,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>to<sp/>emit<sp/>&quot;leave&quot;<sp/>instead<sp/>of<sp/>two<sp/>instructions<sp/>in<sp/>case</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/><sp/>//!<sp/>that<sp/>the<sp/>function<sp/>is<sp/>not<sp/>naked<sp/>or<sp/>misaligned.</highlight></codeline>
<codeline lineno="370" refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eadeccd860e44737b6746fc18c553b9683" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eadeccd860e44737b6746fc18c553b9683" kindref="member" tooltip="Whether to emit &amp;quot;leave&amp;quot; instead of two instructions in case that the function is not naked or misalig...">kFuncFlagLeave</ref><sp/>=<sp/>0x00040000,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>it&apos;s<sp/>required<sp/>to<sp/>move<sp/>arguments<sp/>to<sp/>a<sp/>new<sp/>stack<sp/>location,</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/>//!<sp/>because<sp/>of<sp/>manual<sp/>aligning.</highlight></codeline>
<codeline lineno="374" refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea1aadaf95fc36acabc2de1980da2e4072" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea1aadaf95fc36acabc2de1980da2e4072" kindref="member" tooltip="Whether it&amp;#39;s required to move arguments to a new stack location, because of manual aligning...">kFuncFlagMoveArgs</ref><sp/>=<sp/>0x00080000,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>to<sp/>emit<sp/>EMMS<sp/>instruction<sp/>in<sp/>epilog<sp/>(auto-detected).</highlight></codeline>
<codeline lineno="377" refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea04a47eab8f496c62b46ee10b0db1b02c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea04a47eab8f496c62b46ee10b0db1b02c" kindref="member" tooltip="Whether to emit EMMS instruction in epilog (auto-detected).">kFuncFlagEmms</ref><sp/>=<sp/>0x01000000,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>to<sp/>emit<sp/>SFence<sp/>instruction<sp/>in<sp/>epilog<sp/>(auto-detected).</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@ref<sp/>kFuncFlagSFence<sp/>and<sp/>@ref<sp/>kFuncFlagLFence</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/>//!<sp/>combination<sp/>will<sp/>result<sp/>in<sp/>emitting<sp/>mfence.</highlight></codeline>
<codeline lineno="383" refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea5a7da13edc4314da69d0c84c5a743c2b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3ea5a7da13edc4314da69d0c84c5a743c2b" kindref="member" tooltip="Whether to emit SFence instruction in epilog (auto-detected).">kFuncFlagSFence</ref><sp/>=<sp/>0x02000000,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Whether<sp/>to<sp/>emit<sp/>LFence<sp/>instruction<sp/>in<sp/>epilog<sp/>(auto-detected).</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>@ref<sp/>kFuncFlagSFence<sp/>and<sp/>@ref<sp/>kFuncFlagLFence</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/>//!<sp/>combination<sp/>will<sp/>result<sp/>in<sp/>emitting<sp/>mfence.</highlight></codeline>
<codeline lineno="389" refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eae2310ea543f281708f892f3b7db37952" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga7b42aa5041e210749d119bbf3be8ec3eae2310ea543f281708f892f3b7db37952" kindref="member" tooltip="Whether to emit LFence instruction in epilog (auto-detected).">kFuncFlagLFence</ref><sp/>=<sp/>0x04000000</highlight></codeline>
<codeline lineno="390"><highlight class="normal">};</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::x86GetArchFromCConv]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>x86GetArchFromCConv(uint32_t<sp/>conv)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IntUtil::inInterval&lt;uint32_t&gt;(conv,<sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea553686702d710c1fb5936db274ffa4b2" kindref="member" tooltip="X64 calling convention for Windows platform (WIN64 ABI).">kFuncConvX64W</ref>,<sp/><ref refid="group__asmjit__x86x64_1gga1cef400cf6e21967f796513f7c44ad2ea86646a2f15a33883198dc96cd586cba3" kindref="member" tooltip="X64 calling convention for Unix platforms (AMD64 ABI).">kFuncConvX64U</ref>)<sp/>?<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98ac570137deb519c20e131c51ed65d2426" kindref="member" tooltip="X64 architecture, also called AMD64.">kArchX64</ref><sp/>:<sp/><ref refid="group__asmjit__base_1gga2360fa86fd003572056ea5b790630e98a96351e645e40ec7757426b780d3dc9cc" kindref="member" tooltip="X86 architecture.">kArchX86</ref>;</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86X64FuncDecl]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="404"><highlight class="comment">//!<sp/>@brief<sp/>X86<sp/>function,<sp/>including<sp/>calling<sp/>convention,<sp/>arguments<sp/>and<sp/>their</highlight></codeline>
<codeline lineno="405"><highlight class="comment">//!<sp/>register<sp/>indices<sp/>or<sp/>stack<sp/>positions.</highlight></codeline>
<codeline lineno="406" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl" kindref="compound" tooltip="X86 function, including calling convention, arguments and their register indices or stack positions...">X86X64FuncDecl</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncDecl" kindref="compound" tooltip="Function declaration.">FuncDecl</ref><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>@ref<sp/>X86X64FuncDecl<sp/>instance.</highlight></codeline>
<codeline lineno="412" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a183658bcb279d5fb8e5d1114ce0932d1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a183658bcb279d5fb8e5d1114ce0932d1" kindref="member" tooltip="Create a new X86X64FuncDecl instance.">X86X64FuncDecl</ref>()<sp/>{<sp/>reset();<sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors<sp/>-<sp/>X86]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>used<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>The<sp/>result<sp/>depends<sp/>on<sp/>the<sp/>function<sp/>calling<sp/>convention<sp/>AND<sp/>the</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/><sp/>//!<sp/>function<sp/>prototype.<sp/>Returned<sp/>mask<sp/>contains<sp/>only<sp/>registers<sp/>actually<sp/>used</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/>//!<sp/>to<sp/>pass<sp/>function<sp/>arguments.</highlight></codeline>
<codeline lineno="423" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a9146b67b0c55570b25ff4c820b4c6d19" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a9146b67b0c55570b25ff4c820b4c6d19" kindref="member" tooltip="Get used registers (mask).">getUsed</ref>(uint32_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a797876f9f4b25b5e77dae0655fbf6e3b" kindref="member" tooltip="Used registers .">_used</ref>.get(c);<sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>passed<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>The<sp/>result<sp/>depends<sp/>on<sp/>the<sp/>function<sp/>calling<sp/>convention<sp/>used;<sp/>the</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/>//!<sp/>prototype<sp/>of<sp/>the<sp/>function<sp/>doesn&apos;t<sp/>affect<sp/>the<sp/>mask<sp/>returned.</highlight></codeline>
<codeline lineno="429" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1af3b4eb44920de03d579bbc99565e12a2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1af3b4eb44920de03d579bbc99565e12a2" kindref="member" tooltip="Get passed registers (mask).">getPassed</ref>(uint32_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1ab3db2e0b41b6102046d199a97aecf23a" kindref="member" tooltip="Passed registers (defined by the calling convention).">_passed</ref>.get(c);<sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>preserved<sp/>registers<sp/>(mask).</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>The<sp/>result<sp/>depends<sp/>on<sp/>the<sp/>function<sp/>calling<sp/>convention<sp/>used;<sp/>the</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/><sp/>//!<sp/>prototype<sp/>of<sp/>the<sp/>function<sp/>doesn&apos;t<sp/>affect<sp/>the<sp/>mask<sp/>returned.</highlight></codeline>
<codeline lineno="435" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a89c122c4b7aa0ae5c75fa8328384781c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a89c122c4b7aa0ae5c75fa8328384781c" kindref="member" tooltip="Get preserved registers (mask).">getPreserved</ref>(uint32_t<sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a365c29d4d4828f6bb6ac06ba30d46f4a" kindref="member" tooltip="Preserved registers (defined by the calling convention).">_preserved</ref>.get(c);<sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>ther<sp/>order<sp/>of<sp/>passed<sp/>registers<sp/>(Gp).</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>The<sp/>result<sp/>depends<sp/>on<sp/>the<sp/>function<sp/>calling<sp/>convention<sp/>used;<sp/>the</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/><sp/>//!<sp/>prototype<sp/>of<sp/>the<sp/>function<sp/>doesn&apos;t<sp/>affect<sp/>the<sp/>mask<sp/>returned.</highlight></codeline>
<codeline lineno="441" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1af50fa5badee216b6d448ac658aa21b4c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1af50fa5badee216b6d448ac658aa21b4c" kindref="member" tooltip="Get ther order of passed registers (Gp).">getPassedOrderGp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a1cdfbec4850670bf589fad5d3bf711b9" kindref="member" tooltip="Order of registers defined to pass function arguments (Gp).">_passedOrderGp</ref>;<sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>ther<sp/>order<sp/>of<sp/>passed<sp/>registers<sp/>(Xmm).</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>The<sp/>result<sp/>depends<sp/>on<sp/>the<sp/>function<sp/>calling<sp/>convention<sp/>used;<sp/>the</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/><sp/>//!<sp/>prototype<sp/>of<sp/>the<sp/>function<sp/>doesn&apos;t<sp/>affect<sp/>the<sp/>mask<sp/>returned.</highlight></codeline>
<codeline lineno="447" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a9826dd8f4585ba04971b0bf9fddf38e4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a9826dd8f4585ba04971b0bf9fddf38e4" kindref="member" tooltip="Get ther order of passed registers (Xmm).">getPassedOrderXmm</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a98314f872dfed04924b16462e70645ca" kindref="member" tooltip="Order of registers defined to pass function arguments (Xmm).">_passedOrderXmm</ref>;<sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SetPrototype]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>function<sp/>prototype.</highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>will<sp/>set<sp/>function<sp/>calling<sp/>convention<sp/>and<sp/>setup<sp/>arguments<sp/>variables.</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>This<sp/>function<sp/>will<sp/>allocate<sp/>variables,<sp/>it<sp/>can<sp/>be<sp/>called<sp/>only<sp/>once.</highlight></codeline>
<codeline lineno="458"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/>Error<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1acd36f14135ae05941744899d5f08b7d7" kindref="member" tooltip="Set function prototype.">setPrototype</ref>(uint32_t<sp/>conv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1FuncPrototype" kindref="compound" tooltip="Function prototype.">FuncPrototype</ref>&amp;<sp/>p);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Reset]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>ASMJIT_API<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset();</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Used<sp/>registers<sp/>.</highlight></codeline>
<codeline lineno="471" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a797876f9f4b25b5e77dae0655fbf6e3b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a797876f9f4b25b5e77dae0655fbf6e3b" kindref="member" tooltip="Used registers .">_used</ref>;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Passed<sp/>registers<sp/>(defined<sp/>by<sp/>the<sp/>calling<sp/>convention).</highlight></codeline>
<codeline lineno="474" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1ab3db2e0b41b6102046d199a97aecf23a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1ab3db2e0b41b6102046d199a97aecf23a" kindref="member" tooltip="Passed registers (defined by the calling convention).">_passed</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Preserved<sp/>registers<sp/>(defined<sp/>by<sp/>the<sp/>calling<sp/>convention).</highlight></codeline>
<codeline lineno="476" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a365c29d4d4828f6bb6ac06ba30d46f4a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a365c29d4d4828f6bb6ac06ba30d46f4a" kindref="member" tooltip="Preserved registers (defined by the calling convention).">_preserved</ref>;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Order<sp/>of<sp/>registers<sp/>defined<sp/>to<sp/>pass<sp/>function<sp/>arguments<sp/>(Gp).</highlight></codeline>
<codeline lineno="479" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a1cdfbec4850670bf589fad5d3bf711b9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a1cdfbec4850670bf589fad5d3bf711b9" kindref="member" tooltip="Order of registers defined to pass function arguments (Gp).">_passedOrderGp</ref>[kFuncArgCount];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Order<sp/>of<sp/>registers<sp/>defined<sp/>to<sp/>pass<sp/>function<sp/>arguments<sp/>(Xmm).</highlight></codeline>
<codeline lineno="481" refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a98314f872dfed04924b16462e70645ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncDecl_1a98314f872dfed04924b16462e70645ca" kindref="member" tooltip="Order of registers defined to pass function arguments (Xmm).">_passedOrderXmm</ref>[kFuncArgCount];</highlight></codeline>
<codeline lineno="482"><highlight class="normal">};</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="484"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="485"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x86x64<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_ASMJIT_X86_X86FUNC_H</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/x86/x86func.h"/>
  </compounddef>
</doxygen>
