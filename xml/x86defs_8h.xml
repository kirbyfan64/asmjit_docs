<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="x86defs_8h" kind="file">
    <compoundname>x86defs.h</compoundname>
    <includes refid="assembler_8h" local="yes">../base/assembler.h</includes>
    <includes refid="compiler_8h" local="yes">../base/compiler.h</includes>
    <includes refid="defs_8h" local="yes">../base/defs.h</includes>
    <includes refid="globals_8h" local="yes">../base/globals.h</includes>
    <includes refid="intutil_8h" local="yes">../base/intutil.h</includes>
    <includes refid="vectypes_8h" local="yes">../base/vectypes.h</includes>
    <includes refid="apibegin_8h" local="yes">../base/apibegin.h</includes>
    <includes refid="apiend_8h" local="yes">../base/apiend.h</includes>
    <includedby refid="x86assembler_8h" local="yes">x86assembler.h</includedby>
    <includedby refid="x86compiler_8h" local="yes">x86compiler.h</includedby>
    <includedby refid="x86func_8h" local="yes">x86func.h</includedby>
    <includedby refid="x86context__p_8h" local="yes">x86context_p.h</includedby>
    <includedby refid="x86_8h" local="yes">x86.h</includedby>
    <incdepgraph>
      <node id="2341">
        <label>../base/globals.h</label>
        <childnode refid="2342" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2349">
        <label>../base/apiend.h</label>
      </node>
      <node id="2347">
        <label>stdarg.h</label>
      </node>
      <node id="2338">
        <label>../base/codegen.h</label>
        <childnode refid="2339" relation="include">
        </childnode>
        <childnode refid="2353" relation="include">
        </childnode>
        <childnode refid="2354" relation="include">
        </childnode>
        <childnode refid="2355" relation="include">
        </childnode>
        <childnode refid="2356" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2351">
        <label>stdint.h</label>
      </node>
      <node id="2345">
        <label>stdlib.h</label>
      </node>
      <node id="2353">
        <label>../base/error.h</label>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2356">
        <label>../base/zone.h</label>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2348">
        <label>../base/apibegin.h</label>
        <childnode refid="2342" relation="include">
        </childnode>
      </node>
      <node id="2354">
        <label>../base/logger.h</label>
        <childnode refid="2339" relation="include">
        </childnode>
        <childnode refid="2346" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2337">
        <label>../base/assembler.h</label>
        <childnode refid="2338" relation="include">
        </childnode>
        <childnode refid="2339" relation="include">
        </childnode>
        <childnode refid="2353" relation="include">
        </childnode>
        <childnode refid="2354" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2358" relation="include">
        </childnode>
        <childnode refid="2355" relation="include">
        </childnode>
        <childnode refid="2356" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2339">
        <label>../base/defs.h</label>
        <childnode refid="2340" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2352">
        <label>limits.h</label>
      </node>
      <node id="2357">
        <label>../base/podlist.h</label>
        <childnode refid="2339" relation="include">
        </childnode>
        <childnode refid="2341" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2358">
        <label>../base/podvector.h</label>
        <childnode refid="2339" relation="include">
        </childnode>
        <childnode refid="2353" relation="include">
        </childnode>
        <childnode refid="2341" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2350">
        <label>new</label>
      </node>
      <node id="2343">
        <label>config.h</label>
      </node>
      <node id="2361">
        <label>../base/vectypes.h</label>
        <childnode refid="2339" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2340">
        <label>../base/intutil.h</label>
        <childnode refid="2341" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2355">
        <label>../base/runtime.h</label>
        <childnode refid="2353" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2342">
        <label>../build.h</label>
        <childnode refid="2343" relation="include">
        </childnode>
        <childnode refid="2344" relation="include">
        </childnode>
        <childnode refid="2345" relation="include">
        </childnode>
        <childnode refid="2346" relation="include">
        </childnode>
        <childnode refid="2350" relation="include">
        </childnode>
        <childnode refid="2351" relation="include">
        </childnode>
        <childnode refid="2352" relation="include">
        </childnode>
      </node>
      <node id="2344">
        <label>stdio.h</label>
      </node>
      <node id="2346">
        <label>string.h</label>
        <childnode refid="2339" relation="include">
        </childnode>
        <childnode refid="2341" relation="include">
        </childnode>
        <childnode refid="2347" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2360">
        <label>../base/func.h</label>
        <childnode refid="2339" relation="include">
        </childnode>
        <childnode refid="2341" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2359">
        <label>../base/compiler.h</label>
        <childnode refid="2337" relation="include">
        </childnode>
        <childnode refid="2338" relation="include">
        </childnode>
        <childnode refid="2339" relation="include">
        </childnode>
        <childnode refid="2353" relation="include">
        </childnode>
        <childnode refid="2360" relation="include">
        </childnode>
        <childnode refid="2340" relation="include">
        </childnode>
        <childnode refid="2357" relation="include">
        </childnode>
        <childnode refid="2358" relation="include">
        </childnode>
        <childnode refid="2355" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
      <node id="2336">
        <label>x86defs.h</label>
        <link refid="x86defs.h"/>
        <childnode refid="2337" relation="include">
        </childnode>
        <childnode refid="2359" relation="include">
        </childnode>
        <childnode refid="2339" relation="include">
        </childnode>
        <childnode refid="2341" relation="include">
        </childnode>
        <childnode refid="2340" relation="include">
        </childnode>
        <childnode refid="2361" relation="include">
        </childnode>
        <childnode refid="2348" relation="include">
        </childnode>
        <childnode refid="2349" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2365">
        <label>x86context_p.h</label>
      </node>
      <node id="2366">
        <label>x86.h</label>
      </node>
      <node id="2364">
        <label>x86compiler.h</label>
        <childnode refid="2365" relation="include">
        </childnode>
        <childnode refid="2366" relation="include">
        </childnode>
      </node>
      <node id="2367">
        <label>x86func.h</label>
        <childnode refid="2364" relation="include">
        </childnode>
        <childnode refid="2366" relation="include">
        </childnode>
      </node>
      <node id="2363">
        <label>x86assembler.h</label>
        <childnode refid="2364" relation="include">
        </childnode>
        <childnode refid="2365" relation="include">
        </childnode>
        <childnode refid="2366" relation="include">
        </childnode>
      </node>
      <node id="2362">
        <label>x86defs.h</label>
        <link refid="x86defs.h"/>
        <childnode refid="2363" relation="include">
        </childnode>
        <childnode refid="2364" relation="include">
        </childnode>
        <childnode refid="2367" relation="include">
        </childnode>
        <childnode refid="2365" relation="include">
        </childnode>
        <childnode refid="2366" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structasmjit_1_1x86x64_1_1InstInfo" prot="public">asmjit::x86x64::InstInfo</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1VarInfo" prot="public">asmjit::x86x64::VarInfo</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1RegCount" prot="public">asmjit::x86x64::RegCount</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1RegMask" prot="public">asmjit::x86x64::RegMask</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86Reg" prot="public">asmjit::x86x64::X86Reg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1GpReg" prot="public">asmjit::x86x64::GpReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1FpReg" prot="public">asmjit::x86x64::FpReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1MmReg" prot="public">asmjit::x86x64::MmReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1XmmReg" prot="public">asmjit::x86x64::XmmReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1YmmReg" prot="public">asmjit::x86x64::YmmReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1SegReg" prot="public">asmjit::x86x64::SegReg</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1Mem" prot="public">asmjit::x86x64::Mem</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1X86Var" prot="public">asmjit::x86x64::X86Var</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1GpVar" prot="public">asmjit::x86x64::GpVar</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1FpVar" prot="public">asmjit::x86x64::FpVar</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1MmVar" prot="public">asmjit::x86x64::MmVar</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1XmmVar" prot="public">asmjit::x86x64::XmmVar</innerclass>
    <innerclass refid="structasmjit_1_1x86x64_1_1YmmVar" prot="public">asmjit::x86x64::YmmVar</innerclass>
    <innernamespace refid="namespaceasmjit">asmjit</innernamespace>
    <innernamespace refid="namespaceasmjit_1_1x86x64">asmjit::x86x64</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__asmjit__x86x64_1gac6ec1ac14c6d3db4935987f92cafae52" prot="public" static="no">
        <name>_OP_ID</name>
        <param><defname>_Op_</defname></param>
        <initializer>reinterpret_cast&lt;const Operand&amp;&gt;(_Op_).getId()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" line="2441" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86defs.h" bodystart="2441" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMJIT_X86_X86DEFS_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_ASMJIT_X86_X86DEFS_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/assembler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/compiler.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/defs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/globals.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/intutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/vectypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x86x64<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_x86x64</highlight></codeline>
<codeline lineno="26"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="27"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Forward<sp/>Declarations]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">InstInfo;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VarInfo;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">X86Reg;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">X86Var;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">GpReg;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">GpVar;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MmReg;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">MmVar;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XmmReg;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">XmmVar;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">YmmReg;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">YmmVar;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Typedefs]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Vec64Data<sp/>MmData;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Vec128Data<sp/>XmmData;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Vec256Data<sp/>YmmData;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Instruction<sp/>and<sp/>Condition<sp/>Codes]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="63"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="64"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>instructions&apos;<sp/>names.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>_instName[];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="68"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="69"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>instructions&apos;<sp/>information.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>InstInfo<sp/>_instInfo[];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="73"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="74"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>condition<sp/>codes<sp/>to<sp/>reversed<sp/>condition<sp/>codes<sp/>map.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>_reverseCond[20];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="78"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="79"><highlight class="comment">//!<sp/>@brief<sp/>X86X64<sp/>condition<sp/>codes<sp/>to<sp/>&quot;cmovcc&quot;<sp/>group<sp/>map.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>_condToCmovcc[20];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="82"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="83"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="84"><highlight class="comment">//!<sp/>@brief<sp/>X86X64<sp/>condition<sp/>codes<sp/>to<sp/>&quot;jcc&quot;<sp/>group<sp/>map.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>_condToJcc[20];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="88"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="89"><highlight class="comment">//!<sp/>@brief<sp/>X86X64<sp/>condition<sp/>codes<sp/>to<sp/>&quot;setcc&quot;<sp/>group<sp/>map.</highlight></codeline>
<codeline lineno="90"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>_condToSetcc[20];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Variables]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VarInfo<sp/>_varInfo[];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kRegClass]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>variable<sp/>class.</highlight></codeline>
<codeline lineno="103" refid="group__asmjit__x86x64_1gafa35b8475e40a1d0d2e0d1de442578eb" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1gafa35b8475e40a1d0d2e0d1de442578eb" kindref="member" tooltip="X86/X64 variable class.">kRegClass</ref>)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>kRegClassGp<sp/>defined<sp/>in<sp/>base/defs.h;<sp/>it&apos;s<sp/>used<sp/>by<sp/>all<sp/>implementations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>X86/X64<sp/>Fp<sp/>register<sp/>class.</highlight></codeline>
<codeline lineno="107" refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578ebae14f8090017d61ea34f01c8f355096fa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578ebae14f8090017d61ea34f01c8f355096fa" kindref="member" tooltip="X86/X64 Fp register class.">kRegClassFp</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>X86/X64<sp/>Mm<sp/>register<sp/>class.</highlight></codeline>
<codeline lineno="109" refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba7f3536808006f9f866a9d2c2f52c63f8" kindref="member" tooltip="X86/X64 Mm register class.">kRegClassMm</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>X86/X64<sp/>Xmm/Ymm<sp/>register<sp/>class.</highlight></codeline>
<codeline lineno="111" refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba9eb1e5efee0b57accd529ef19e3e1e15" kindref="member" tooltip="X86/X64 Xmm/Ymm register class.">kRegClassXy</ref><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>X86/X64<sp/>register<sp/>classes.</highlight></codeline>
<codeline lineno="114" refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba439b8f1c6f3216f72ccb85f90410f61b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba439b8f1c6f3216f72ccb85f90410f61b" kindref="member" tooltip="Count of X86/X64 register classes.">kRegClassCount</ref><sp/>=<sp/>4</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kRegCount]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>registers<sp/>count.</highlight></codeline>
<codeline lineno="122" refid="group__asmjit__x86x64_1ga49cd81f45663e5bb3161d03c51e38429" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga49cd81f45663e5bb3161d03c51e38429" kindref="member" tooltip="X86/X64 registers count.">kRegCount</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>Fp<sp/>registers<sp/>(8).</highlight></codeline>
<codeline lineno="124" refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ae822edf24ff7b052c18a6535f1a6d1a5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ae822edf24ff7b052c18a6535f1a6d1a5" kindref="member" tooltip="Count of Fp registers (8).">kRegCountFp</ref><sp/>=<sp/>8,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>Mm<sp/>registers<sp/>(8).</highlight></codeline>
<codeline lineno="126" refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ac38cb5c433e088c7070177aa364ab296" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429ac38cb5c433e088c7070177aa364ab296" kindref="member" tooltip="Count of Mm registers (8).">kRegCountMm</ref><sp/>=<sp/>8,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>segment<sp/>registers<sp/>(6).</highlight></codeline>
<codeline lineno="128" refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429afc5e788aea55e9c0b94fb5b51bb80467" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga49cd81f45663e5bb3161d03c51e38429afc5e788aea55e9c0b94fb5b51bb80467" kindref="member" tooltip="Count of segment registers (6).">kRegCountSeg</ref><sp/>=<sp/>6</highlight></codeline>
<codeline lineno="129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kRegType]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>register<sp/>types.</highlight></codeline>
<codeline lineno="136" refid="group__asmjit__x86x64_1ga5e994ba992c6c8d421eb8065435b06ef" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga5e994ba992c6c8d421eb8065435b06ef" kindref="member" tooltip="X86/X64 register types.">kRegType</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Gpb-lo<sp/>register<sp/>(AL,<sp/>BL,<sp/>CL,<sp/>DL,<sp/>...).</highlight></codeline>
<codeline lineno="138" refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" kindref="member" tooltip="Gpb-lo register (AL, BL, CL, DL, ...).">kRegTypeGpbLo</ref><sp/>=<sp/>0x01,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Gpb-hi<sp/>register<sp/>(AH,<sp/>BH,<sp/>CH,<sp/>DH<sp/>only).</highlight></codeline>
<codeline lineno="140" refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa6e8dd55fd3b4ef24cd301f03b3d7257d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa6e8dd55fd3b4ef24cd301f03b3d7257d" kindref="member" tooltip="Gpb-hi register (AH, BH, CH, DH only).">kRegTypeGpbHi</ref><sp/>=<sp/>0x02,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Gpb-hi<sp/>register<sp/>patched<sp/>to<sp/>native<sp/>index<sp/>(4-7).</highlight></codeline>
<codeline lineno="145"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kRegTypePatchedGpbHi<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" kindref="member" tooltip="Gpb-lo register (AL, BL, CL, DL, ...).">kRegTypeGpbLo</ref><sp/>|<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa6e8dd55fd3b4ef24cd301f03b3d7257d" kindref="member" tooltip="Gpb-hi register (AH, BH, CH, DH only).">kRegTypeGpbHi</ref>,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="148" refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7088b937cbaa2114610046a308697d2e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7088b937cbaa2114610046a308697d2e" kindref="member" tooltip="Gpw register.">kRegTypeGpw</ref><sp/>=<sp/>0x10,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="150" refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref><sp/>=<sp/>0x20,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="152" refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref><sp/>=<sp/>0x30,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="155" refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efad8dab38a7bb9b84c468bdac1022c6a00" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efad8dab38a7bb9b84c468bdac1022c6a00" kindref="member" tooltip="Fp register.">kRegTypeFp</ref><sp/>=<sp/>0x50,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="157" refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa9a46e468cd5c58fac3670afc952eb814" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa9a46e468cd5c58fac3670afc952eb814" kindref="member" tooltip="Mm register.">kRegTypeMm</ref><sp/>=<sp/>0x60,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="160" refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaacea326fc6b0daaa36cc5e706d6656a5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaacea326fc6b0daaa36cc5e706d6656a5" kindref="member" tooltip="Xmm register.">kRegTypeXmm</ref><sp/>=<sp/>0x70,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="162" refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa962f5931b1817196fa1c7bd908e02fbd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa962f5931b1817196fa1c7bd908e02fbd" kindref="member" tooltip="Ymm register.">kRegTypeYmm</ref><sp/>=<sp/>0x80,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Zmm<sp/>register.</highlight></codeline>
<codeline lineno="164" refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7480e5e2a26dd8e5a21c436e70afd66f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7480e5e2a26dd8e5a21c436e70afd66f" kindref="member" tooltip="Zmm register.">kRegTypeZmm</ref><sp/>=<sp/>0x90,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Segment<sp/>register.</highlight></codeline>
<codeline lineno="167" refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa75716d897e72ab0aee0b6bcdc3cde8d8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa75716d897e72ab0aee0b6bcdc3cde8d8" kindref="member" tooltip="Segment register.">kRegTypeSeg</ref><sp/>=<sp/>0xF0</highlight></codeline>
<codeline lineno="168"><highlight class="normal">};</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kRegIndex]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="174"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>register<sp/>indices.</highlight></codeline>
<codeline lineno="175"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="176"><highlight class="comment">//!<sp/>These<sp/>codes<sp/>are<sp/>real,<sp/>don&apos;t<sp/>miss<sp/>with<sp/>@c<sp/>REG<sp/>enum!<sp/>and<sp/>don&apos;t<sp/>use<sp/>these</highlight></codeline>
<codeline lineno="177"><highlight class="comment">//!<sp/>values<sp/>if<sp/>you<sp/>are<sp/>not<sp/>writing<sp/>AsmJit<sp/>code.</highlight></codeline>
<codeline lineno="178" refid="group__asmjit__x86x64_1ga8c39346e0695453a5cd38ead0d62931a" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga8c39346e0695453a5cd38ead0d62931a" kindref="member" tooltip="X86/X64 register indices.">kRegIndex</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>AL/AH/AX/EAX/RAX<sp/>registers.</highlight></codeline>
<codeline lineno="180" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aad1c56f2417167071327338dcaaac2c77" kindref="member" tooltip="Index of AL/AH/AX/EAX/RAX registers.">kRegIndexAx</ref><sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>CL/CH/CX/ECX/RCX<sp/>registers.</highlight></codeline>
<codeline lineno="182" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa08e95b28791faad3c0af552bc863a42b" kindref="member" tooltip="Index of CL/CH/CX/ECX/RCX registers.">kRegIndexCx</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>DL/DH/DX/EDX/RDX<sp/>registers.</highlight></codeline>
<codeline lineno="184" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa153b07d3be7eb4d8e5b8849f2e5801d8" kindref="member" tooltip="Index of DL/DH/DX/EDX/RDX registers.">kRegIndexDx</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>BL/BH/BX/EBX/RBX<sp/>registers.</highlight></codeline>
<codeline lineno="186" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa64bdbf966add3a3fb3785d2b055abb3e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa64bdbf966add3a3fb3785d2b055abb3e" kindref="member" tooltip="Index of BL/BH/BX/EBX/RBX registers.">kRegIndexBx</ref><sp/>=<sp/>3,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>SPL/SP/ESP/RSP<sp/>registers.</highlight></codeline>
<codeline lineno="188" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa72a26d71150e372bcac7bb7023dcb628" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa72a26d71150e372bcac7bb7023dcb628" kindref="member" tooltip="Index of SPL/SP/ESP/RSP registers.">kRegIndexSp</ref><sp/>=<sp/>4,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>BPL/BP/EBP/RBP<sp/>registers.</highlight></codeline>
<codeline lineno="190" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae08e3d836183e8be188e68df5e2db1b6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae08e3d836183e8be188e68df5e2db1b6" kindref="member" tooltip="Index of BPL/BP/EBP/RBP registers.">kRegIndexBp</ref><sp/>=<sp/>5,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>SIL/SI/ESI/RSI<sp/>registers.</highlight></codeline>
<codeline lineno="192" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0d713e0bcf536538a2b3f097c81a9e7f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0d713e0bcf536538a2b3f097c81a9e7f" kindref="member" tooltip="Index of SIL/SI/ESI/RSI registers.">kRegIndexSi</ref><sp/>=<sp/>6,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>DIL/DI/EDI/RDI<sp/>registers.</highlight></codeline>
<codeline lineno="194" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa2128d2d1988f757b6de2583d0bda1fdb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa2128d2d1988f757b6de2583d0bda1fdb" kindref="member" tooltip="Index of DIL/DI/EDI/RDI registers.">kRegIndexDi</ref><sp/>=<sp/>7,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>R8B/R8W/R8D/R8<sp/>registers<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="196" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa787fdf9bd450392c616e6024c9c558f3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa787fdf9bd450392c616e6024c9c558f3" kindref="member" tooltip="Index of R8B/R8W/R8D/R8 registers (64-bit only).">kRegIndexR8</ref><sp/>=<sp/>8,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>R9B/R9W/R9D/R9<sp/>registers<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="198" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa39e8936f70cc4d72a8a37fc5f0d85abc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa39e8936f70cc4d72a8a37fc5f0d85abc" kindref="member" tooltip="Index of R9B/R9W/R9D/R9 registers (64-bit only).">kRegIndexR9</ref><sp/>=<sp/>9,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>R10B/R10W/R10D/R10<sp/>registers<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="200" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa3e6307284b66ec89ae73fe11a81badba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa3e6307284b66ec89ae73fe11a81badba" kindref="member" tooltip="Index of R10B/R10W/R10D/R10 registers (64-bit only).">kRegIndexR10</ref><sp/>=<sp/>10,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>R11B/R11W/R11D/R11<sp/>registers<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="202" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aabdb30b6756b7e6c97c89777c0827c75d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aabdb30b6756b7e6c97c89777c0827c75d" kindref="member" tooltip="Index of R11B/R11W/R11D/R11 registers (64-bit only).">kRegIndexR11</ref><sp/>=<sp/>11,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>R12B/R12W/R12D/R12<sp/>registers<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="204" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa7874db6409f9f1dad031eeb3c2f06088" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa7874db6409f9f1dad031eeb3c2f06088" kindref="member" tooltip="Index of R12B/R12W/R12D/R12 registers (64-bit only).">kRegIndexR12</ref><sp/>=<sp/>12,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>R13B/R13W/R13D/R13<sp/>registers<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="206" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aac7dd86659395b16631005fb682fbea5a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aac7dd86659395b16631005fb682fbea5a" kindref="member" tooltip="Index of R13B/R13W/R13D/R13 registers (64-bit only).">kRegIndexR13</ref><sp/>=<sp/>13,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>R14B/R14W/R14D/R14<sp/>registers<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="208" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa684c53ef312ee81f68546ada877b14c6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa684c53ef312ee81f68546ada877b14c6" kindref="member" tooltip="Index of R14B/R14W/R14D/R14 registers (64-bit only).">kRegIndexR14</ref><sp/>=<sp/>14,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>R15B/R15W/R15D/R15<sp/>registers<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="210" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaeae3936886c893849fa249b80617162a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaeae3936886c893849fa249b80617162a" kindref="member" tooltip="Index of R15B/R15W/R15D/R15 registers (64-bit only).">kRegIndexR15</ref><sp/>=<sp/>15,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>FP0<sp/>register.</highlight></codeline>
<codeline lineno="213" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa42e860a3f993239a51b62ef823adcb0c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa42e860a3f993239a51b62ef823adcb0c" kindref="member" tooltip="Index of FP0 register.">kRegIndexFp0</ref><sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>FP1<sp/>register.</highlight></codeline>
<codeline lineno="215" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaeddbcb349fc17c4919994df81da82141" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaeddbcb349fc17c4919994df81da82141" kindref="member" tooltip="Index of FP1 register.">kRegIndexFp1</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>FP2<sp/>register.</highlight></codeline>
<codeline lineno="217" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaee0984170102a563902034a75c4050d3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaee0984170102a563902034a75c4050d3" kindref="member" tooltip="Index of FP2 register.">kRegIndexFp2</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>FP3<sp/>register.</highlight></codeline>
<codeline lineno="219" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aab98ccb78cd069afe969a353f1b8e32fd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aab98ccb78cd069afe969a353f1b8e32fd" kindref="member" tooltip="Index of FP3 register.">kRegIndexFp3</ref><sp/>=<sp/>3,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>FP4<sp/>register.</highlight></codeline>
<codeline lineno="221" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa9ad8158d61270684676ec19eeb4cd4ae" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa9ad8158d61270684676ec19eeb4cd4ae" kindref="member" tooltip="Index of FP4 register.">kRegIndexFp4</ref><sp/>=<sp/>4,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>FP5<sp/>register.</highlight></codeline>
<codeline lineno="223" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa28d29fd895ad82a813739c9a2a854e9f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa28d29fd895ad82a813739c9a2a854e9f" kindref="member" tooltip="Index of FP5 register.">kRegIndexFp5</ref><sp/>=<sp/>5,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>FP6<sp/>register.</highlight></codeline>
<codeline lineno="225" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae8c6e7846a834419dbdc23cc6b078511" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae8c6e7846a834419dbdc23cc6b078511" kindref="member" tooltip="Index of FP6 register.">kRegIndexFp6</ref><sp/>=<sp/>6,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>FP7<sp/>register.</highlight></codeline>
<codeline lineno="227" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa9cf2cb48000143b7777563d60c5c9411" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa9cf2cb48000143b7777563d60c5c9411" kindref="member" tooltip="Index of FP7 register.">kRegIndexFp7</ref><sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>MM0<sp/>register.</highlight></codeline>
<codeline lineno="230" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa8f7d148cd10217411d3c9668d8e8410e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa8f7d148cd10217411d3c9668d8e8410e" kindref="member" tooltip="Index of MM0 register.">kRegIndexMm0</ref><sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>MM1<sp/>register.</highlight></codeline>
<codeline lineno="232" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa801a694729a758532b3a9f96a5cadc41" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa801a694729a758532b3a9f96a5cadc41" kindref="member" tooltip="Index of MM1 register.">kRegIndexMm1</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>MM2<sp/>register.</highlight></codeline>
<codeline lineno="234" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa936b012e08e9438f4c9392884206355f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa936b012e08e9438f4c9392884206355f" kindref="member" tooltip="Index of MM2 register.">kRegIndexMm2</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>MM3<sp/>register.</highlight></codeline>
<codeline lineno="236" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aadc9ed5ae2adfd3ee51ee94a947716dc6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aadc9ed5ae2adfd3ee51ee94a947716dc6" kindref="member" tooltip="Index of MM3 register.">kRegIndexMm3</ref><sp/>=<sp/>3,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>MM4<sp/>register.</highlight></codeline>
<codeline lineno="238" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa54b2bbb32580e1ac66e7284325e875b5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa54b2bbb32580e1ac66e7284325e875b5" kindref="member" tooltip="Index of MM4 register.">kRegIndexMm4</ref><sp/>=<sp/>4,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>MM5<sp/>register.</highlight></codeline>
<codeline lineno="240" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaf57c3a8060084e04a8a9a32c0845a49b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaf57c3a8060084e04a8a9a32c0845a49b" kindref="member" tooltip="Index of MM5 register.">kRegIndexMm5</ref><sp/>=<sp/>5,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>MM6<sp/>register.</highlight></codeline>
<codeline lineno="242" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaac0fa69297314eb3d5bbfb1b399f747c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaac0fa69297314eb3d5bbfb1b399f747c" kindref="member" tooltip="Index of MM6 register.">kRegIndexMm6</ref><sp/>=<sp/>6,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>MM7<sp/>register.</highlight></codeline>
<codeline lineno="244" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aac2510768c43cbabe29ef86c18c5ea73c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aac2510768c43cbabe29ef86c18c5ea73c" kindref="member" tooltip="Index of MM7 register.">kRegIndexMm7</ref><sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM0<sp/>register.</highlight></codeline>
<codeline lineno="247" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa1406e1cc6aa02b2aee90c5532c9ec7fa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa1406e1cc6aa02b2aee90c5532c9ec7fa" kindref="member" tooltip="Index of XMM0 register.">kRegIndexXmm0</ref><sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM1<sp/>register.</highlight></codeline>
<codeline lineno="249" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa5abf32999e7833239c687271355e5186" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa5abf32999e7833239c687271355e5186" kindref="member" tooltip="Index of XMM1 register.">kRegIndexXmm1</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM2<sp/>register.</highlight></codeline>
<codeline lineno="251" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa4f04f98d197f3a5bce0e5ade2f31f3a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa4f04f98d197f3a5bce0e5ade2f31f3a9" kindref="member" tooltip="Index of XMM2 register.">kRegIndexXmm2</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM3<sp/>register.</highlight></codeline>
<codeline lineno="253" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa16ce168ed617f43f3e549fbcc18de4a7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa16ce168ed617f43f3e549fbcc18de4a7" kindref="member" tooltip="Index of XMM3 register.">kRegIndexXmm3</ref><sp/>=<sp/>3,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM4<sp/>register.</highlight></codeline>
<codeline lineno="255" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0a1def3a1186fa70d7a9f1ddf616afa1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0a1def3a1186fa70d7a9f1ddf616afa1" kindref="member" tooltip="Index of XMM4 register.">kRegIndexXmm4</ref><sp/>=<sp/>4,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM5<sp/>register.</highlight></codeline>
<codeline lineno="257" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa7c82c77c9ef9c69e1ba7aa209122f148" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa7c82c77c9ef9c69e1ba7aa209122f148" kindref="member" tooltip="Index of XMM5 register.">kRegIndexXmm5</ref><sp/>=<sp/>5,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM6<sp/>register.</highlight></codeline>
<codeline lineno="259" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0322211f21d3ebf16fe75f83cebdb8a1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0322211f21d3ebf16fe75f83cebdb8a1" kindref="member" tooltip="Index of XMM6 register.">kRegIndexXmm6</ref><sp/>=<sp/>6,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM7<sp/>register.</highlight></codeline>
<codeline lineno="261" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa465bfd319a7f4735ebbd896b8e3d70b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa465bfd319a7f4735ebbd896b8e3d70b8" kindref="member" tooltip="Index of XMM7 register.">kRegIndexXmm7</ref><sp/>=<sp/>7,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM8<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="263" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aab61d89fe6485c405259baa75f4f50418" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aab61d89fe6485c405259baa75f4f50418" kindref="member" tooltip="Index of XMM8 register (64-bit only).">kRegIndexXmm8</ref><sp/>=<sp/>8,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM9<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="265" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa935b30e03b338422e042c08a301570c1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa935b30e03b338422e042c08a301570c1" kindref="member" tooltip="Index of XMM9 register (64-bit only).">kRegIndexXmm9</ref><sp/>=<sp/>9,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM10<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="267" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aabe27d0ffa7617ed5aa9db3c89445a1be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aabe27d0ffa7617ed5aa9db3c89445a1be" kindref="member" tooltip="Index of XMM10 register (64-bit only).">kRegIndexXmm10</ref><sp/>=<sp/>10,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM11<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="269" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0d35481462b075d0ffd242877ead0662" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa0d35481462b075d0ffd242877ead0662" kindref="member" tooltip="Index of XMM11 register (64-bit only).">kRegIndexXmm11</ref><sp/>=<sp/>11,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM12<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="271" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa6ac109d5341e4a4e03933deacf3fa70b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa6ac109d5341e4a4e03933deacf3fa70b" kindref="member" tooltip="Index of XMM12 register (64-bit only).">kRegIndexXmm12</ref><sp/>=<sp/>12,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM13<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="273" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa65870ddc820c3f0889db5fd314c68ff1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa65870ddc820c3f0889db5fd314c68ff1" kindref="member" tooltip="Index of XMM13 register (64-bit only).">kRegIndexXmm13</ref><sp/>=<sp/>13,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM14<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="275" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa89e8235ec32b8001b0f8ffecead0f16e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa89e8235ec32b8001b0f8ffecead0f16e" kindref="member" tooltip="Index of XMM14 register (64-bit only).">kRegIndexXmm14</ref><sp/>=<sp/>14,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>XMM15<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="277" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa5978f33baf84ec2816726eb710c89342" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa5978f33baf84ec2816726eb710c89342" kindref="member" tooltip="Index of XMM15 register (64-bit only).">kRegIndexXmm15</ref><sp/>=<sp/>15,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM0<sp/>register.</highlight></codeline>
<codeline lineno="280" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa7dfcc1d2916ec54ee427eefa420d8a01" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa7dfcc1d2916ec54ee427eefa420d8a01" kindref="member" tooltip="Index of YMM0 register.">kRegIndexYmm0</ref><sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM1<sp/>register.</highlight></codeline>
<codeline lineno="282" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa73d92593b45406cf271b1016a40a3efd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa73d92593b45406cf271b1016a40a3efd" kindref="member" tooltip="Index of YMM1 register.">kRegIndexYmm1</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM2<sp/>register.</highlight></codeline>
<codeline lineno="284" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa59050702664e57bcfcfe73e37ada77cc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa59050702664e57bcfcfe73e37ada77cc" kindref="member" tooltip="Index of YMM2 register.">kRegIndexYmm2</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM3<sp/>register.</highlight></codeline>
<codeline lineno="286" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae0fedc9d3a46b434e55731ba822e77f2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aae0fedc9d3a46b434e55731ba822e77f2" kindref="member" tooltip="Index of YMM3 register.">kRegIndexYmm3</ref><sp/>=<sp/>3,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM4<sp/>register.</highlight></codeline>
<codeline lineno="288" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa4cbe3200d50062e1c9b15911c972bcf1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa4cbe3200d50062e1c9b15911c972bcf1" kindref="member" tooltip="Index of YMM4 register.">kRegIndexYmm4</ref><sp/>=<sp/>4,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM5<sp/>register.</highlight></codeline>
<codeline lineno="290" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa21ff34064e63a50b6035ab9d022a46df" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa21ff34064e63a50b6035ab9d022a46df" kindref="member" tooltip="Index of YMM5 register.">kRegIndexYmm5</ref><sp/>=<sp/>5,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM6<sp/>register.</highlight></codeline>
<codeline lineno="292" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aadc887369dd74881259f716ae9970a835" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aadc887369dd74881259f716ae9970a835" kindref="member" tooltip="Index of YMM6 register.">kRegIndexYmm6</ref><sp/>=<sp/>6,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM7<sp/>register.</highlight></codeline>
<codeline lineno="294" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa54dad7ffe2a17cc906e3420b218e4261" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa54dad7ffe2a17cc906e3420b218e4261" kindref="member" tooltip="Index of YMM7 register.">kRegIndexYmm7</ref><sp/>=<sp/>7,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM8<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="296" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaebf22309f16e4bb640367c3f81f67eec" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaebf22309f16e4bb640367c3f81f67eec" kindref="member" tooltip="Index of YMM8 register (64-bit only).">kRegIndexYmm8</ref><sp/>=<sp/>8,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM9<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="298" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa1656a9ddd7eb2653d1522a56862e3129" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa1656a9ddd7eb2653d1522a56862e3129" kindref="member" tooltip="Index of YMM9 register (64-bit only).">kRegIndexYmm9</ref><sp/>=<sp/>9,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM10<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="300" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaf22d353f4194c21363350caa17f1655b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaf22d353f4194c21363350caa17f1655b" kindref="member" tooltip="Index of YMM10 register (64-bit only).">kRegIndexYmm10</ref><sp/>=<sp/>10,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM11<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="302" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aacc8ce95b5e93e3e6d6be1f7bddfc1bd0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aacc8ce95b5e93e3e6d6be1f7bddfc1bd0" kindref="member" tooltip="Index of YMM11 register (64-bit only).">kRegIndexYmm11</ref><sp/>=<sp/>11,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM12<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="304" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aab3199d2e3d9a3ee45790d317c0a80ec9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aab3199d2e3d9a3ee45790d317c0a80ec9" kindref="member" tooltip="Index of YMM12 register (64-bit only).">kRegIndexYmm12</ref><sp/>=<sp/>12,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM13<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="306" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aadb66bb7fb78d371a8d49d7c752033dac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aadb66bb7fb78d371a8d49d7c752033dac" kindref="member" tooltip="Index of YMM13 register (64-bit only).">kRegIndexYmm13</ref><sp/>=<sp/>13,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM14<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="308" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaa11574b23843f48da6dc7483939b99d9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aaa11574b23843f48da6dc7483939b99d9" kindref="member" tooltip="Index of YMM14 register (64-bit only).">kRegIndexYmm14</ref><sp/>=<sp/>14,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>of<sp/>YMM15<sp/>register<sp/>(64-bit<sp/>only).</highlight></codeline>
<codeline lineno="310" refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa023ba6a6a3d015ca820723825b0b8db7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga8c39346e0695453a5cd38ead0d62931aa023ba6a6a3d015ca820723825b0b8db7" kindref="member" tooltip="Index of YMM15 register (64-bit only).">kRegIndexYmm15</ref><sp/>=<sp/>15</highlight></codeline>
<codeline lineno="311"><highlight class="normal">};</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kSeg]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="317"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>segment<sp/>codes.</highlight></codeline>
<codeline lineno="318" refid="group__asmjit__x86x64_1ga4f85c6db0bbcbba6cfd2e06f3318dd64" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga4f85c6db0bbcbba6cfd2e06f3318dd64" kindref="member" tooltip="X86/X64 segment codes.">kSeg</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>No<sp/>segment.</highlight></codeline>
<codeline lineno="320" refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a6dfbfee0e2063f5623c892e4b1eb40f2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a6dfbfee0e2063f5623c892e4b1eb40f2" kindref="member" tooltip="No segment.">kSegDefault</ref><sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Es<sp/>segment.</highlight></codeline>
<codeline lineno="322" refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a66701fd7e7c8a501cf98a7912aecf65b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a66701fd7e7c8a501cf98a7912aecf65b" kindref="member" tooltip="Es segment.">kSegEs</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cs<sp/>segment.</highlight></codeline>
<codeline lineno="324" refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a494414df2b04066d2da5b876e563a97e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a494414df2b04066d2da5b876e563a97e" kindref="member" tooltip="Cs segment.">kSegCs</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Ss<sp/>segment.</highlight></codeline>
<codeline lineno="326" refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64ade5c6d613f514abf76a9b331ff469b8e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64ade5c6d613f514abf76a9b331ff469b8e" kindref="member" tooltip="Ss segment.">kSegSs</ref><sp/>=<sp/>3,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Ds<sp/>segment.</highlight></codeline>
<codeline lineno="328" refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a23cad746bf90afaa68d81d8a1c603618" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a23cad746bf90afaa68d81d8a1c603618" kindref="member" tooltip="Ds segment.">kSegDs</ref><sp/>=<sp/>4,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fs<sp/>segment.</highlight></codeline>
<codeline lineno="330" refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a2d392d6222e53ec87d7450d4133229b3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a2d392d6222e53ec87d7450d4133229b3" kindref="member" tooltip="Fs segment.">kSegFs</ref><sp/>=<sp/>5,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Gs<sp/>segment.</highlight></codeline>
<codeline lineno="332" refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64aa5e01734c1d00ccca51c07b715c8945d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64aa5e01734c1d00ccca51c07b715c8945d" kindref="member" tooltip="Gs segment.">kSegGs</ref><sp/>=<sp/>6</highlight></codeline>
<codeline lineno="333"><highlight class="normal">};</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kMemVSib]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="339"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>index<sp/>register<sp/>legacy<sp/>and<sp/>AVX2<sp/>(VSIB)<sp/>support.</highlight></codeline>
<codeline lineno="340" refid="group__asmjit__x86x64_1ga3c765af5d5e1b534ef7acc3abe5dffc1" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga3c765af5d5e1b534ef7acc3abe5dffc1" kindref="member" tooltip="X86/X64 index register legacy and AVX2 (VSIB) support.">kMemVSib</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>operand<sp/>uses<sp/>Gp<sp/>or<sp/>no<sp/>index<sp/>register.</highlight></codeline>
<codeline lineno="342" refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" kindref="member" tooltip="Memory operand uses Gp or no index register.">kMemVSibGpz</ref><sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>operand<sp/>uses<sp/>Xmm<sp/>or<sp/>no<sp/>index<sp/>register.</highlight></codeline>
<codeline lineno="344" refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1afa311617da5fb69bb65ee3b8d1488251" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1afa311617da5fb69bb65ee3b8d1488251" kindref="member" tooltip="Memory operand uses Xmm or no index register.">kMemVSibXmm</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>operand<sp/>uses<sp/>Ymm<sp/>or<sp/>no<sp/>index<sp/>register.</highlight></codeline>
<codeline lineno="346" refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1a7aecfb975b3f5e594e2a9ee86cba691d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1a7aecfb975b3f5e594e2a9ee86cba691d" kindref="member" tooltip="Memory operand uses Ymm or no index register.">kMemVSibYmm</ref><sp/>=<sp/>2</highlight></codeline>
<codeline lineno="347"><highlight class="normal">};</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kMemFlags]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="353"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="354"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="355"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>specific<sp/>memory<sp/>flags.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(kMemFlags)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>kMemSegBits<sp/><sp/><sp/><sp/>=<sp/>0x7,</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>kMemSegIndex<sp/><sp/><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>kMemSegMask<sp/><sp/><sp/><sp/>=<sp/>kMemSegBits<sp/>&lt;&lt;<sp/>kMemSegIndex,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>kMemGpdBits<sp/><sp/><sp/><sp/>=<sp/>0x1,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>kMemGpdIndex<sp/><sp/><sp/>=<sp/>3,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>kMemGpdMask<sp/><sp/><sp/><sp/>=<sp/>kMemGpdBits<sp/>&lt;&lt;<sp/>kMemGpdIndex,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>kMemVSibBits<sp/><sp/><sp/>=<sp/>0x3,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>kMemVSibIndex<sp/><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>kMemVSibMask<sp/><sp/><sp/>=<sp/>kMemVSibBits<sp/>&lt;&lt;<sp/>kMemVSibIndex,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>kMemShiftBits<sp/><sp/>=<sp/>0x3,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>kMemShiftIndex<sp/>=<sp/>6,</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/>kMemShiftMask<sp/><sp/>=<sp/>kMemShiftBits<sp/>&lt;&lt;<sp/>kMemShiftIndex</highlight></codeline>
<codeline lineno="372"><highlight class="normal">};</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kPrefetchHint]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="378"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>Prefetch<sp/>hints.</highlight></codeline>
<codeline lineno="379" refid="group__asmjit__x86x64_1ga0e547d047bb0f359f5d7efce8690d340" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga0e547d047bb0f359f5d7efce8690d340" kindref="member" tooltip="X86/X64 Prefetch hints.">kPrefetchHint</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Prefetch<sp/>using<sp/>NT<sp/>hint.</highlight></codeline>
<codeline lineno="381" refid="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340a718a33d2793c91a9ec1ad0bec36a8c57" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340a718a33d2793c91a9ec1ad0bec36a8c57" kindref="member" tooltip="Prefetch using NT hint.">kPrefetchNta</ref><sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Prefetch<sp/>to<sp/>L0<sp/>cache.</highlight></codeline>
<codeline lineno="383" refid="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340a62c9d414885b5f001b93eaa4d5ddf3fa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340a62c9d414885b5f001b93eaa4d5ddf3fa" kindref="member" tooltip="Prefetch to L0 cache.">kPrefetchT0</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Prefetch<sp/>to<sp/>L1<sp/>cache.</highlight></codeline>
<codeline lineno="385" refid="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340ae3b546599f8ef4d05e2baf00447cc70c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340ae3b546599f8ef4d05e2baf00447cc70c" kindref="member" tooltip="Prefetch to L1 cache.">kPrefetchT1</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Prefetch<sp/>to<sp/>L2<sp/>cache.</highlight></codeline>
<codeline lineno="387" refid="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340ada01c663811ff302a35b3b8344d167bb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga0e547d047bb0f359f5d7efce8690d340ada01c663811ff302a35b3b8344d167bb" kindref="member" tooltip="Prefetch to L2 cache.">kPrefetchT2</ref><sp/>=<sp/>3</highlight></codeline>
<codeline lineno="388"><highlight class="normal">};</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kFPSW]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="394"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>FPU<sp/>status<sp/>Word.</highlight></codeline>
<codeline lineno="395" refid="group__asmjit__x86x64_1ga54f95be4cce9c100426921500e04529a" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga54f95be4cce9c100426921500e04529a" kindref="member" tooltip="X86/X64 FPU status Word.">kFPSW</ref>)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>kFPSW_Invalid<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0001,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>kFPSW_Denormalized<sp/><sp/><sp/>=<sp/>0x0002,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>kFPSW_DivByZero<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0004,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>kFPSW_Overflow<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0008,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>kFPSW_Underflow<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0010,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>kFPSW_Precision<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0020,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>kFPSW_StackFault<sp/><sp/><sp/><sp/><sp/>=<sp/>0x0040,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>kFPSW_Interrupt<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0080,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>kFPSW_C0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0100,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>kFPSW_C1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0200,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>kFPSW_C2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0400,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>kFPSW_Top<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x3800,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>kFPSW_C3<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x4000,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>kFPSW_Busy<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x8000</highlight></codeline>
<codeline lineno="410"><highlight class="normal">};</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kFPCW]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="416"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>FPU<sp/>control<sp/>Word.</highlight></codeline>
<codeline lineno="417" refid="group__asmjit__x86x64_1gae85e885c907841dd63a93df6bf5f2910" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1gae85e885c907841dd63a93df6bf5f2910" kindref="member" tooltip="X86/X64 FPU control Word.">kFPCW</ref>)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>kFPCW_EM_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x003F,<sp/></highlight><highlight class="comment">//<sp/>Bits<sp/>0-5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>kFPCW_EM_Invalid<sp/><sp/><sp/><sp/><sp/>=<sp/>0x0001,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>kFPCW_EM_Denormal<sp/><sp/><sp/><sp/>=<sp/>0x0002,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>kFPCW_EM_DivByZero<sp/><sp/><sp/>=<sp/>0x0004,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>kFPCW_EM_Overflow<sp/><sp/><sp/><sp/>=<sp/>0x0008,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>kFPCW_EM_Underflow<sp/><sp/><sp/>=<sp/>0x0010,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>kFPCW_EM_Inexact<sp/><sp/><sp/><sp/><sp/>=<sp/>0x0020,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>kFPCW_PC_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0300,<sp/></highlight><highlight class="comment">//<sp/>Bits<sp/>8-9.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>kFPCW_PC_Float<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0000,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>kFPCW_PC_Reserved<sp/><sp/><sp/><sp/>=<sp/>0x0100,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>kFPCW_PC_Double<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0200,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>kFPCW_PC_Extended<sp/><sp/><sp/><sp/>=<sp/>0x0300,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>kFPCW_RC_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0C00,<sp/></highlight><highlight class="comment">//<sp/>Bits<sp/>10-11.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>kFPCW_RC_Nearest<sp/><sp/><sp/><sp/><sp/>=<sp/>0x0000,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>kFPCW_RC_Down<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0400,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>kFPCW_RC_Up<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0800,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>kFPCW_RC_Truncate<sp/><sp/><sp/><sp/>=<sp/>0x0C00,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>kFPCW_IC_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x1000,<sp/></highlight><highlight class="comment">//<sp/>Bit<sp/>12.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>kFPCW_IC_Projective<sp/><sp/>=<sp/>0x0000,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>kFPCW_IC_Affine<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x1000</highlight></codeline>
<codeline lineno="441"><highlight class="normal">};</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kInstCode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="447"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>instruction<sp/>codes.</highlight></codeline>
<codeline lineno="448"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="449"><highlight class="comment">//!<sp/>Note<sp/>that<sp/>these<sp/>instruction<sp/>codes<sp/>are<sp/>AsmJit<sp/>specific.<sp/>Each<sp/>instruction<sp/>has</highlight></codeline>
<codeline lineno="450"><highlight class="comment">//!<sp/>a<sp/>unique<sp/>ID<sp/>that<sp/>is<sp/>used<sp/>as<sp/>an<sp/>index<sp/>to<sp/>AsmJit<sp/>instruction<sp/>table.</highlight></codeline>
<codeline lineno="451" refid="group__asmjit__x86x64_1gae77eaf11cadf05f2b892e45fcd239a8b" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1gae77eaf11cadf05f2b892e45fcd239a8b" kindref="member" tooltip="X86/X64 instruction codes.">kInstCode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>kInstAdc<sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>kInstAdd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>kInstAddpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>kInstAddps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>kInstAddsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>kInstAddss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>kInstAddsubpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>kInstAddsubps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>kInstAesdec,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>kInstAesdeclast,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>kInstAesenc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>kInstAesenclast,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>kInstAesimc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>kInstAeskeygenassist,<sp/></highlight><highlight class="comment">//<sp/>AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>kInstAnd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>kInstAndn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>kInstAndnpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>kInstAndnps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>kInstAndpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>kInstAndps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>kInstBextr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>kInstBlendpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>kInstBlendps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>kInstBlendvpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>kInstBlendvps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>kInstBlsi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>kInstBlsmsk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>kInstBlsr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>kInstBsf,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>kInstBsr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>kInstBswap,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(i486)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>kInstBt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>kInstBtc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>kInstBtr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>kInstBts,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>kInstBzhi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>kInstCall,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>kInstCbw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>kInstCdq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>kInstCdqe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X64<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>kInstClc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>kInstCld,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>kInstClflush,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>kInstCmc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>kInstCmova,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>kInstCmovae,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>kInstCmovb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>kInstCmovbe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>kInstCmovc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>kInstCmove,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>kInstCmovg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>kInstCmovge,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>kInstCmovl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>kInstCmovle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>kInstCmovna,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/>kInstCmovnae,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>kInstCmovnb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>kInstCmovnbe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>kInstCmovnc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>kInstCmovne,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>kInstCmovng,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>kInstCmovnge,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>kInstCmovnl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>kInstCmovnle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>kInstCmovno,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>kInstCmovnp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>kInstCmovns,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>kInstCmovnz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>kInstCmovo,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>kInstCmovp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>kInstCmovpe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>kInstCmovpo,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>kInstCmovs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>kInstCmovz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(cmovcc)<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>kInstCmp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>kInstCmppd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>kInstCmpps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>kInstCmpsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>kInstCmpss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>kInstCmpxchg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(i486)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>kInstCmpxchg16b,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X64<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>kInstCmpxchg8b,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(i586)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>kInstComisd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>kInstComiss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>kInstCpuid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(i486)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>kInstCqo,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X64<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>kInstCrc32,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>kInstCvtdq2pd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>kInstCvtdq2ps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>kInstCvtpd2dq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>kInstCvtpd2pi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>kInstCvtpd2ps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>kInstCvtpi2pd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>kInstCvtpi2ps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/>kInstCvtps2dq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>kInstCvtps2pd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>kInstCvtps2pi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>kInstCvtsd2si,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>kInstCvtsd2ss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>kInstCvtsi2sd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/>kInstCvtsi2ss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>kInstCvtss2sd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>kInstCvtss2si,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>kInstCvttpd2dq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>kInstCvttpd2pi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>kInstCvttps2dq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/>kInstCvttps2pi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>kInstCvttsd2si,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>kInstCvttss2si,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/>kInstCwd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>kInstCwde,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/>kInstDaa,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>kInstDas,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>kInstDec,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>kInstDiv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>kInstDivpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/>kInstDivps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>kInstDivsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>kInstDivss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>kInstDppd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>kInstDpps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>kInstEmms,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>kInstEnter,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>kInstExtractps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>kInstF2xm1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>kInstFabs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>kInstFadd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>kInstFaddp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>kInstFbld,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>kInstFbstp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>kInstFchs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>kInstFclex,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>kInstFcmovb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>kInstFcmovbe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>kInstFcmove,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>kInstFcmovnb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>kInstFcmovnbe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>kInstFcmovne,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>kInstFcmovnu,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>kInstFcmovu,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>kInstFcom,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>kInstFcomi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>kInstFcomip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>kInstFcomp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/>kInstFcompp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/>kInstFcos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>kInstFdecstp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>kInstFdiv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>kInstFdivp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>kInstFdivr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/>kInstFdivrp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>kInstFemms,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>kInstFfree,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>kInstFiadd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>kInstFicom,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>kInstFicomp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>kInstFidiv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/>kInstFidivr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>kInstFild,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>kInstFimul,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>kInstFincstp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>kInstFinit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>kInstFist,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>kInstFistp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/>kInstFisttp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>kInstFisub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>kInstFisubr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>kInstFld,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/>kInstFld1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>kInstFldcw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>kInstFldenv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>kInstFldl2e,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>kInstFldl2t,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>kInstFldlg2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>kInstFldln2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>kInstFldpi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>kInstFldz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>kInstFmul,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>kInstFmulp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>kInstFnclex,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>kInstFninit,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>kInstFnop,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>kInstFnsave,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>kInstFnstcw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>kInstFnstenv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>kInstFnstsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>kInstFpatan,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>kInstFprem,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>kInstFprem1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>kInstFptan,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>kInstFrndint,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>kInstFrstor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>kInstFsave,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>kInstFscale,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>kInstFsin,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>kInstFsincos,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>kInstFsqrt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>kInstFst,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>kInstFstcw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>kInstFstenv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>kInstFstp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>kInstFstsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/>kInstFsub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>kInstFsubp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>kInstFsubr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>kInstFsubrp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>kInstFtst,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>kInstFucom,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/>kInstFucomi,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>kInstFucomip,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>kInstFucomp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>kInstFucompp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/>kInstFwait,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>kInstFxam,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>kInstFxch,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>kInstFxrstor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/>kInstFxsave,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>kInstFxtract,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>kInstFyl2x,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>kInstFyl2xp1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FPU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>kInstHaddpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>kInstHaddps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>kInstHsubpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>kInstHsubps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>kInstIdiv,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>kInstImul,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>kInstInc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>kInstInt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>kInstJa,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>kInstJae,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>kInstJb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>kInstJbe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>kInstJc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>kInstJe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>kInstJg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>kInstJge,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>kInstJl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>kInstJle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>kInstJna,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>kInstJnae,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>kInstJnb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/>kInstJnbe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>kInstJnc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>kInstJne,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>kInstJng,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>kInstJnge,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>kInstJnl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>kInstJnle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>kInstJno,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>kInstJnp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>kInstJns,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>kInstJnz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>kInstJo,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>kInstJp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>kInstJpe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>kInstJpo,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>kInstJs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>kInstJz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>kInstJmp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(jmp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>kInstLahf,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(CPUID<sp/>NEEDED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>kInstLddqu,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>kInstLdmxcsr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>kInstLea,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>kInstLeave,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>kInstLfence,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/>kInstLzcnt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>LZCNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>kInstMaskmovdqu,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>kInstMaskmovq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>kInstMaxpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>kInstMaxps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>kInstMaxsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>kInstMaxss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>kInstMfence,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>kInstMinpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>kInstMinps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>kInstMinsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/>kInstMinss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/>kInstMonitor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>kInstMov,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>kInstMovapd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>kInstMovaps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/>kInstMovbe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3<sp/>-<sp/>Intel-Atom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>kInstMovd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>kInstMovddup,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>kInstMovdq2q,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>kInstMovdqa,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>kInstMovdqu,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>kInstMovhlps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>kInstMovhpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>kInstMovhps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>kInstMovlhps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>kInstMovlpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>kInstMovlps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>kInstMovmskpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>kInstMovmskps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>kInstMovntdq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>kInstMovntdqa,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>kInstMovnti,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>kInstMovntpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>kInstMovntps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>kInstMovntq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/>kInstMovptr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>kInstMovq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>kInstMovq2dq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/>kInstMovsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/>kInstMovshdup,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/>kInstMovsldup,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>kInstMovss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>kInstMovsx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>kInstMovsxd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>kInstMovupd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>kInstMovups,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>kInstMovzx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>kInstMpsadbw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>kInstMul,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>kInstMulpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>kInstMulps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/>kInstMulsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>kInstMulss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/>kInstMulx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>kInstMwait,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/>kInstNeg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>kInstNop,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>kInstNot,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>kInstOr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>kInstOrpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/>kInstOrps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>kInstPabsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>kInstPabsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>kInstPabsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/>kInstPackssdw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>kInstPacksswb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/>kInstPackusdw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>kInstPackuswb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>kInstPaddb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>kInstPaddd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/>kInstPaddq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>kInstPaddsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>kInstPaddsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>kInstPaddusb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>kInstPaddusw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>kInstPaddw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/>kInstPalignr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/>kInstPand,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>kInstPandn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>kInstPause,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>kInstPavgb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/>kInstPavgw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>kInstPblendvb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>kInstPblendw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>kInstPclmulqdq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PCLMULQDQ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>kInstPcmpeqb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/>kInstPcmpeqd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>kInstPcmpeqq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>kInstPcmpeqw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>kInstPcmpestri,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>kInstPcmpestrm,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/>kInstPcmpgtb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>kInstPcmpgtd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>kInstPcmpgtq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>kInstPcmpgtw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>kInstPcmpistri,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>kInstPcmpistrm,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>kInstPdep,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>kInstPext,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>kInstPextrb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>kInstPextrd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>kInstPextrq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>kInstPextrw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>kInstPf2id,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>kInstPf2iw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enhanced<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>kInstPfacc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/>kInstPfadd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>kInstPfcmpeq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>kInstPfcmpge,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>kInstPfcmpgt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>kInstPfmax,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/>kInstPfmin,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/>kInstPfmul,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/>kInstPfnacc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enhanced<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>kInstPfpnacc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enhanced<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/>kInstPfrcp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>kInstPfrcpit1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/>kInstPfrcpit2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>kInstPfrsqit1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/>kInstPfrsqrt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>kInstPfsub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>kInstPfsubr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>kInstPhaddd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>kInstPhaddsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>kInstPhaddw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/>kInstPhminposuw,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>kInstPhsubd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/>kInstPhsubsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>kInstPhsubw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/>kInstPi2fd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>kInstPi2fw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enhanced<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>kInstPinsrb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>kInstPinsrd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>kInstPinsrq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>kInstPinsrw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>kInstPmaddubsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/>kInstPmaddwd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>kInstPmaxsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>kInstPmaxsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>kInstPmaxsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>kInstPmaxub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>kInstPmaxud,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>kInstPmaxuw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>kInstPminsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/>kInstPminsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>kInstPminsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>kInstPminub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>kInstPminud,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>kInstPminuw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>kInstPmovmskb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>kInstPmovsxbd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/>kInstPmovsxbq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>kInstPmovsxbw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>kInstPmovsxdq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>kInstPmovsxwd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>kInstPmovsxwq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>kInstPmovzxbd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>kInstPmovzxbq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>kInstPmovzxbw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>kInstPmovzxdq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>kInstPmovzxwd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>kInstPmovzxwq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>kInstPmuldq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>kInstPmulhrsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>kInstPmulhuw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>kInstPmulhw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>kInstPmulld,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>kInstPmullw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>kInstPmuludq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>kInstPop,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>kInstPopa,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>kInstPopcnt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>kInstPopf,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>kInstPor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>kInstPrefetch,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext/SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>kInstPrefetch3dNow,<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>kInstPrefetchw3dNow,<sp/><sp/></highlight><highlight class="comment">//<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>kInstPsadbw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>kInstPshufb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/>kInstPshufd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/>kInstPshufhw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>kInstPshuflw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>kInstPshufw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>kInstPsignb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/>kInstPsignd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>kInstPsignw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSSE3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/>kInstPslld,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>kInstPslldq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>kInstPsllq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>kInstPsllw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>kInstPsrad,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>kInstPsraw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>kInstPsrld,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>kInstPsrldq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>kInstPsrlq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>kInstPsrlw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>kInstPsubb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>kInstPsubd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>kInstPsubq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>kInstPsubsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>kInstPsubsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>kInstPsubusb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>kInstPsubusw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/>kInstPsubw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>kInstPswapd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enhanced<sp/>3dNow!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>kInstPtest,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/>kInstPunpckhbw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>kInstPunpckhdq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>kInstPunpckhqdq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>kInstPunpckhwd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>kInstPunpcklbw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>kInstPunpckldq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>kInstPunpcklqdq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>kInstPunpcklwd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>kInstPush,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>kInstPusha,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>kInstPushf,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>kInstPxor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX/SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/>kInstRcl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>kInstRcpps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>kInstRcpss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>kInstRcr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>kInstRdfsbase,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FSGSBASE<sp/>(x64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>kInstRdgsbase,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FSGSBASE<sp/>(x64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>kInstRdrand,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RDRAND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/>kInstRdtsc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/>kInstRdtscp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>kInstRepLodsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>kInstRepLodsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/>kInstRepLodsq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X64<sp/>only<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>kInstRepLodsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>kInstRepMovsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>kInstRepMovsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/>kInstRepMovsq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X64<sp/>only<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/>kInstRepMovsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>kInstRepStosb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>kInstRepStosd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>kInstRepStosq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X64<sp/>only<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>kInstRepStosw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>kInstRepeCmpsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>kInstRepeCmpsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>kInstRepeCmpsq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X64<sp/>only<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>kInstRepeCmpsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>kInstRepeScasb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/>kInstRepeScasd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/>kInstRepeScasq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X64<sp/>only<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>kInstRepeScasw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>kInstRepneCmpsb,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>kInstRepneCmpsd,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>kInstRepneCmpsq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X64<sp/>only<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/>kInstRepneCmpsw,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>kInstRepneScasb,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/>kInstRepneScasd,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>kInstRepneScasq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X64<sp/>only<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>kInstRepneScasw,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(REP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>kInstRet,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>kInstRol,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>kInstRor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>kInstRorx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>kInstRoundpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>kInstRoundps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>kInstRoundsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>kInstRoundss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE4.1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>kInstRsqrtps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>kInstRsqrtss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>kInstSahf,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(CPUID<sp/>NEEDED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>kInstSal,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>kInstSar,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/>kInstSarx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>kInstSbb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>kInstSeta,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>kInstSetae,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>kInstSetb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>kInstSetbe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/>kInstSetc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/>kInstSete,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>kInstSetg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/>kInstSetge,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>kInstSetl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>kInstSetle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>kInstSetna,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/>kInstSetnae,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>kInstSetnb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>kInstSetnbe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>kInstSetnc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>kInstSetne,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>kInstSetng,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/>kInstSetnge,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>kInstSetnl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>kInstSetnle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>kInstSetno,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>kInstSetnp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>kInstSetns,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/>kInstSetnz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>kInstSeto,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>kInstSetp,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>kInstSetpe,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>kInstSetpo,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>kInstSets,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>kInstSetz,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(setcc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>kInstSfence,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MMX-Ext/SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>kInstShl,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>kInstShld,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>kInstShlx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>kInstShr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/>kInstShrd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>kInstShrx,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BMI2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/>kInstShufpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>kInstShufps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/>kInstSqrtpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>kInstSqrtps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>kInstSqrtsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>kInstSqrtss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/>kInstStc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/>kInstStd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>kInstStmxcsr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>kInstSub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>kInstSubpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>kInstSubps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>kInstSubsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>kInstSubss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>kInstTest,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>kInstTzcnt,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TZCNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>kInstUcomisd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/>kInstUcomiss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>kInstUd2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>kInstUnpckhpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>kInstUnpckhps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>kInstUnpcklpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>kInstUnpcklps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>kInstVaddpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/>kInstVaddps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>kInstVaddsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>kInstVaddss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>kInstVaddsubpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/>kInstVaddsubps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>kInstVaesdec,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX+AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/>kInstVaesdeclast,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX+AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>kInstVaesenc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX+AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>kInstVaesenclast,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX+AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>kInstVaesimc,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX+AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>kInstVaeskeygenassist,</highlight><highlight class="comment">//<sp/>AVX+AESNI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>kInstVandnpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>kInstVandnps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>kInstVandpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>kInstVandps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>kInstVblendpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>kInstVblendps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>kInstVblendvpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>kInstVblendvps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>kInstVbroadcastf128,<sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>kInstVbroadcasti128,<sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>kInstVbroadcastsd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>kInstVbroadcastss,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/>kInstVcmppd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>kInstVcmpps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/>kInstVcmpsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>kInstVcmpss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>kInstVcomisd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>kInstVcomiss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>kInstVcvtdq2pd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>kInstVcvtdq2ps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/>kInstVcvtpd2dq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>kInstVcvtpd2ps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>kInstVcvtph2ps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>F16C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/>kInstVcvtps2dq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>kInstVcvtps2pd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>kInstVcvtps2ph,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>F16C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>kInstVcvtsd2si,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>kInstVcvtsd2ss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>kInstVcvtsi2sd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>kInstVcvtsi2ss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>kInstVcvtss2sd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>kInstVcvtss2si,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>kInstVcvttpd2dq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>kInstVcvttps2dq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>kInstVcvttsd2si,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>kInstVcvttss2si,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/>kInstVdivpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>kInstVdivps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>kInstVdivsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>kInstVdivss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>kInstVdppd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>kInstVdpps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>kInstVextractf128,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>kInstVextracti128,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>kInstVextractps,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>kInstVfmadd132pd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/>kInstVfmadd132ps,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/>kInstVfmadd132sd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>kInstVfmadd132ss,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/>kInstVfmadd213pd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>kInstVfmadd213ps,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/>kInstVfmadd213sd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>kInstVfmadd213ss,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>kInstVfmadd231pd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>kInstVfmadd231ps,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/>kInstVfmadd231sd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>kInstVfmadd231ss,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>kInstVfmaddsub132pd,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>kInstVfmaddsub132ps,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>kInstVfmaddsub213pd,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>kInstVfmaddsub213ps,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>kInstVfmaddsub231pd,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>kInstVfmaddsub231ps,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>kInstVfmsub132pd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>kInstVfmsub132ps,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>kInstVfmsub132sd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>kInstVfmsub132ss,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>kInstVfmsub213pd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>kInstVfmsub213ps,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>kInstVfmsub213sd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/>kInstVfmsub213ss,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>kInstVfmsub231pd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>kInstVfmsub231ps,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>kInstVfmsub231sd,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>kInstVfmsub231ss,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>kInstVfmsubadd132pd,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/>kInstVfmsubadd132ps,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>kInstVfmsubadd213pd,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>kInstVfmsubadd213ps,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>kInstVfmsubadd231pd,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/>kInstVfmsubadd231ps,<sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>kInstVfnmadd132pd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>kInstVfnmadd132ps,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>kInstVfnmadd132sd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/>kInstVfnmadd132ss,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>kInstVfnmadd213pd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>kInstVfnmadd213ps,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>kInstVfnmadd213sd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/>kInstVfnmadd213ss,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/>kInstVfnmadd231pd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/>kInstVfnmadd231ps,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>kInstVfnmadd231sd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>kInstVfnmadd231ss,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>kInstVfnmsub132pd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>kInstVfnmsub132ps,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>kInstVfnmsub132sd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>kInstVfnmsub132ss,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/>kInstVfnmsub213pd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>kInstVfnmsub213ps,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/>kInstVfnmsub213sd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>kInstVfnmsub213ss,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>kInstVfnmsub231pd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>kInstVfnmsub231ps,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>kInstVfnmsub231sd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>kInstVfnmsub231ss,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FMA3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>kInstVgatherdpd,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>kInstVgatherdps,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/>kInstVgatherqpd,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/>kInstVgatherqps,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/>kInstVhaddpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>kInstVhaddps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>kInstVhsubpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>kInstVhsubps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>kInstVinsertf128,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/>kInstVinserti128,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>kInstVinsertps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/>kInstVlddqu,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/>kInstVldmxcsr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>kInstVmaskmovdqu,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>kInstVmaskmovpd,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>kInstVmaskmovps,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>kInstVmaxpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/>kInstVmaxps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>kInstVmaxsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>kInstVmaxss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/>kInstVminpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>kInstVminps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>kInstVminsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>kInstVminss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>kInstVmovapd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/>kInstVmovaps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/>kInstVmovd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/>kInstVmovddup,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/>kInstVmovdqa,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>kInstVmovdqu,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>kInstVmovhlps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>kInstVmovhpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>kInstVmovhps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/>kInstVmovlhps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>kInstVmovlpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>kInstVmovlps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>kInstVmovmskpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>kInstVmovmskps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>kInstVmovntdq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>kInstVmovntdqa,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/>kInstVmovntpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/>kInstVmovntps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>kInstVmovq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/>kInstVmovsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>kInstVmovshdup,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>kInstVmovsldup,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/>kInstVmovss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>kInstVmovupd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/>kInstVmovups,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>kInstVmpsadbw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/>kInstVmulpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>kInstVmulps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>kInstVmulsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>kInstVmulss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>kInstVorpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/>kInstVorps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>kInstVpabsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/>kInstVpabsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/>kInstVpabsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/>kInstVpackssdw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>kInstVpacksswb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/>kInstVpackusdw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>kInstVpackuswb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/>kInstVpaddb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>kInstVpaddd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>kInstVpaddq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>kInstVpaddsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>kInstVpaddsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>kInstVpaddusb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/>kInstVpaddusw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/>kInstVpaddw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/>kInstVpalignr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/>kInstVpand,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>kInstVpandn,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>kInstVpavgb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>kInstVpavgw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>kInstVpblendd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>kInstVpblendvb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/>kInstVpblendw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>kInstVpbroadcastb,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/>kInstVpbroadcastd,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/>kInstVpbroadcastq,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/>kInstVpbroadcastw,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>kInstVpclmulqdq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX+PCLMULQDQ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/>kInstVpcmpeqb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>kInstVpcmpeqd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/>kInstVpcmpeqq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>kInstVpcmpeqw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/>kInstVpcmpestri,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>kInstVpcmpestrm,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/>kInstVpcmpgtb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>kInstVpcmpgtd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>kInstVpcmpgtq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>kInstVpcmpgtw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/>kInstVpcmpistri,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>kInstVpcmpistrm,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>kInstVperm2f128,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>kInstVperm2i128,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>kInstVpermd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/>kInstVpermilpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>kInstVpermilps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/>kInstVpermpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>kInstVpermps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>kInstVpermq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>kInstVpextrb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>kInstVpextrd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>kInstVpextrq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX<sp/>(x64<sp/>only)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/>kInstVpextrw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>kInstVpgatherdd,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>kInstVpgatherdq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>kInstVpgatherqd,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>kInstVpgatherqq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/>kInstVphaddd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>kInstVphaddsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/>kInstVphaddw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/>kInstVphminposuw,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>kInstVphsubd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/>kInstVphsubsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>kInstVphsubw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/>kInstVpinsrb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/>kInstVpinsrd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/>kInstVpinsrq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX<sp/>(x64<sp/>only)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>kInstVpinsrw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>kInstVpmaddubsw,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>kInstVpmaddwd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/>kInstVpmaskmovd,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>kInstVpmaskmovq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>kInstVpmaxsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>kInstVpmaxsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>kInstVpmaxsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/>kInstVpmaxub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>kInstVpmaxud,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>kInstVpmaxuw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>kInstVpminsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>kInstVpminsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>kInstVpminsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/>kInstVpminub,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>kInstVpminud,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/>kInstVpminuw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>kInstVpmovmskb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>kInstVpmovsxbd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>kInstVpmovsxbq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>kInstVpmovsxbw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>kInstVpmovsxdq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/>kInstVpmovsxwd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>kInstVpmovsxwq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/>kInstVpmovzxbd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/>kInstVpmovzxbq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/>kInstVpmovzxbw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>kInstVpmovzxdq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/>kInstVpmovzxwd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>kInstVpmovzxwq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/>kInstVpmuldq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>kInstVpmulhrsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/>kInstVpmulhuw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>kInstVpmulhw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/>kInstVpmulld,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>kInstVpmullw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>kInstVpmuludq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>kInstVpor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/>kInstVpsadbw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>kInstVpshufb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/>kInstVpshufd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>kInstVpshufhw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/>kInstVpshuflw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>kInstVpsignb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/>kInstVpsignd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>kInstVpsignw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/>kInstVpslld,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>kInstVpslldq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/>kInstVpsllq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>kInstVpsllvd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/>kInstVpsllvq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>kInstVpsllw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/>kInstVpsrad,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>kInstVpsravd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/>kInstVpsraw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>kInstVpsrld,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/>kInstVpsrldq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/>kInstVpsrlq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/>kInstVpsrlvd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>kInstVpsrlvq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/>kInstVpsrlw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>kInstVpsubb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/>kInstVpsubd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/>kInstVpsubq,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/>kInstVpsubsb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/>kInstVpsubsw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/>kInstVpsubusb,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>kInstVpsubusw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/>kInstVpsubw,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>kInstVptest,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/>kInstVpunpckhbw,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/>kInstVpunpckhdq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/>kInstVpunpckhqdq,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/>kInstVpunpckhwd,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/>kInstVpunpcklbw,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/>kInstVpunpckldq,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>kInstVpunpcklqdq,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/>kInstVpunpcklwd,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>kInstVpxor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX/AVX2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/>kInstVrcpps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/>kInstVrcpss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/>kInstVroundpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/>kInstVroundps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/>kInstVroundsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>kInstVroundss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/>kInstVrsqrtps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>kInstVrsqrtss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/>kInstVshufpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/>kInstVshufps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/>kInstVsqrtpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>kInstVsqrtps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/>kInstVsqrtsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>kInstVsqrtss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/>kInstVstmxcsr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>kInstVsubpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/>kInstVsubps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/>kInstVsubsd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/>kInstVsubss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/>kInstVtestpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/>kInstVtestps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>kInstVucomisd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/>kInstVucomiss,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>kInstVunpckhpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/>kInstVunpckhps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/>kInstVunpcklpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/>kInstVunpcklps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/>kInstVxorpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/>kInstVxorps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>kInstVzeroall,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/>kInstVzeroupper,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>AVX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>kInstWrfsbase,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FSGSBASE<sp/>(x64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/>kInstWrgsbase,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FSGSBASE<sp/>(x64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/>kInstXadd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(i486)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>kInstXchg,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64<sp/>(i386)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/>kInstXor,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>X86/X64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/>kInstXorpd,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>kInstXorps,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SSE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>_kInstCount,</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/>_kInstCmovcc<sp/>=<sp/>kInstCmova,</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>_kInstJcc<sp/>=<sp/>kInstJa,</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/>_kInstSetcc<sp/>=<sp/>kInstSeta,</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>_kInstJbegin<sp/>=<sp/>kInstJa,</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/>_kInstJend<sp/>=<sp/>kInstJmp</highlight></codeline>
<codeline lineno="1413"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kInstOptions]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1419"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>instruction<sp/>emit<sp/>options,<sp/>mainly<sp/>for<sp/>internal<sp/>purposes.</highlight></codeline>
<codeline lineno="1420" refid="group__asmjit__x86x64_1ga2413993202a037657c8b31bd881a4bff" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga2413993202a037657c8b31bd881a4bff" kindref="member" tooltip="X86/X64 instruction emit options, mainly for internal purposes.">kInstOptions</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Emit<sp/>instruction<sp/>with<sp/>LOCK<sp/>prefix.</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1423"><highlight class="comment"><sp/><sp/>//!<sp/>If<sp/>this<sp/>option<sp/>is<sp/>used<sp/>and<sp/>instruction<sp/>doesn&apos;t<sp/>support<sp/>LOCK<sp/>prefix<sp/>an</highlight></codeline>
<codeline lineno="1424"><highlight class="comment"><sp/><sp/>//!<sp/>invalid<sp/>instruction<sp/>error<sp/>is<sp/>generated.</highlight></codeline>
<codeline lineno="1425" refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa438db3f8e9ef167e318d3ae4b0043f71" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa438db3f8e9ef167e318d3ae4b0043f71" kindref="member" tooltip="Emit instruction with LOCK prefix.">kInstOptionLock</ref><sp/>=<sp/>0x10,</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1427"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Force<sp/>REX<sp/>prefix<sp/>to<sp/>be<sp/>emitted.</highlight></codeline>
<codeline lineno="1428"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>option<sp/>should<sp/>be<sp/>used<sp/>carefully,<sp/>because<sp/>there<sp/>are<sp/>unencodable</highlight></codeline>
<codeline lineno="1430"><highlight class="comment"><sp/><sp/>//!<sp/>combinations.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>access<sp/>ah,<sp/>bh,<sp/>ch<sp/>or<sp/>dh<sp/>registers<sp/>the<sp/>REX</highlight></codeline>
<codeline lineno="1431"><highlight class="comment"><sp/><sp/>//!<sp/>prefix<sp/>can&apos;t<sp/>be<sp/>emitted,<sp/>otherwise<sp/>illegal<sp/>instruction<sp/>error<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="1432"><highlight class="comment"><sp/><sp/>//!<sp/>returned.</highlight></codeline>
<codeline lineno="1433" refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa14adbf0db0a92c197f83b863ee3dcda7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffa14adbf0db0a92c197f83b863ee3dcda7" kindref="member" tooltip="Force REX prefix to be emitted.">kInstOptionRex</ref><sp/>=<sp/>0x40,</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1435"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Force<sp/>three-byte<sp/>VEX<sp/>prefix<sp/>to<sp/>be<sp/>emitted<sp/>(instead<sp/>of<sp/>more<sp/>compact</highlight></codeline>
<codeline lineno="1436"><highlight class="comment"><sp/><sp/>//!<sp/>two-byte<sp/>VEX<sp/>prefix).</highlight></codeline>
<codeline lineno="1437"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1438"><highlight class="comment"><sp/><sp/>//!<sp/>Ignored<sp/>if<sp/>the<sp/>instruction<sp/>is<sp/>not<sp/>AVX<sp/>instruction<sp/>or<sp/>extension<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1439"><highlight class="comment"><sp/><sp/>//!<sp/>instruction<sp/>set<sp/>that<sp/>is<sp/>encoded<sp/>by<sp/>using<sp/>VEX<sp/>prefix.</highlight></codeline>
<codeline lineno="1440" refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffaf74024a2407f9ae7f6fe757a673578ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga2413993202a037657c8b31bd881a4bffaf74024a2407f9ae7f6fe757a673578ca" kindref="member" tooltip="Force three-byte VEX prefix to be emitted (instead of more compact two-byte VEX prefix).">kInstOptionVex3</ref><sp/>=<sp/>0x80</highlight></codeline>
<codeline lineno="1441"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kInstGroup]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1447"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>instruction<sp/>groups.</highlight></codeline>
<codeline lineno="1448"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1449"><highlight class="comment">//!<sp/>This<sp/>should<sp/>be<sp/>only<sp/>used<sp/>by<sp/>assembler,<sp/>because<sp/>it&apos;s<sp/>@c<sp/>asmjit::Assembler</highlight></codeline>
<codeline lineno="1450"><highlight class="comment">//!<sp/>specific<sp/>grouping.<sp/>Each<sp/>group<sp/>represents<sp/>one<sp/>&apos;case&apos;<sp/>in<sp/>the<sp/>Assembler&apos;s</highlight></codeline>
<codeline lineno="1451"><highlight class="comment">//!<sp/>main<sp/>emit<sp/>method.</highlight></codeline>
<codeline lineno="1452" refid="group__asmjit__x86x64_1gaa30d3f39e2e8169aec8b9120b459042a" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1gaa30d3f39e2e8169aec8b9120b459042a" kindref="member" tooltip="X86/X64 instruction groups.">kInstGroup</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1453"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Never<sp/>used.</highlight></codeline>
<codeline lineno="1454" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa840aa384bc5b5c8a2ebda726568f0868" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa840aa384bc5b5c8a2ebda726568f0868" kindref="member" tooltip="Never used.">kInstGroupNone</ref>,</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/>kInstGroupX86Op,</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/>kInstGroupX86Rm,</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/>kInstGroupX86Rm_B,</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>kInstGroupX86RmReg,</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/>kInstGroupX86RegRm,</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>kInstGroupX86M,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1462"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Adc/Add/And/Cmp/Or/Sbb/Sub/Xor.</highlight></codeline>
<codeline lineno="1463" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa936a529efe41a0f17e49cef38112fb21" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa936a529efe41a0f17e49cef38112fb21" kindref="member" tooltip="Adc/Add/And/Cmp/Or/Sbb/Sub/Xor.">kInstGroupX86Arith</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1464"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bswap.</highlight></codeline>
<codeline lineno="1465" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad09804358ef242252f4e194c1702be3f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad09804358ef242252f4e194c1702be3f" kindref="member" tooltip="Bswap.">kInstGroupX86BSwap</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1466"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Bt/Btc/Btr/Bts.</highlight></codeline>
<codeline lineno="1467" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa1cedcbd3cc0231640487b4bd1b4933be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa1cedcbd3cc0231640487b4bd1b4933be" kindref="member" tooltip="Bt/Btc/Btr/Bts.">kInstGroupX86BTest</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1468"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Call.</highlight></codeline>
<codeline lineno="1469" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa501679eb18dbc6289c7edac6bb6f3e92" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa501679eb18dbc6289c7edac6bb6f3e92" kindref="member" tooltip="Call.">kInstGroupX86Call</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1470"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Enter.</highlight></codeline>
<codeline lineno="1471" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaf98140e6ce086e51e558ee09cc69202b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaf98140e6ce086e51e558ee09cc69202b" kindref="member" tooltip="Enter.">kInstGroupX86Enter</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1472"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Imul.</highlight></codeline>
<codeline lineno="1473" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa268bf2cda50549d9a9cdf9795b62a2a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa268bf2cda50549d9a9cdf9795b62a2a9" kindref="member" tooltip="Imul.">kInstGroupX86Imul</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1474"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Inc/Dec.</highlight></codeline>
<codeline lineno="1475" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa3a6c4aae66093212ea801b3c5b6796ee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa3a6c4aae66093212ea801b3c5b6796ee" kindref="member" tooltip="Inc/Dec.">kInstGroupX86IncDec</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1476"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Int.</highlight></codeline>
<codeline lineno="1477" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae1b7e0135951aa540a8be412eebcf4ab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae1b7e0135951aa540a8be412eebcf4ab" kindref="member" tooltip="Int.">kInstGroupX86Int</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1478"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Jcc.</highlight></codeline>
<codeline lineno="1479" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aac5d6bbffe4edcb02016e637314b12158" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aac5d6bbffe4edcb02016e637314b12158" kindref="member" tooltip="Jcc.">kInstGroupX86Jcc</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1480"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Jmp.</highlight></codeline>
<codeline lineno="1481" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa192cca22ecc6c4c1101fb7fe6b3fdd97" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa192cca22ecc6c4c1101fb7fe6b3fdd97" kindref="member" tooltip="Jmp.">kInstGroupX86Jmp</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1482"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Lea.</highlight></codeline>
<codeline lineno="1483" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae6f4f52ddab74426e1d8d51d65ab0c68" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae6f4f52ddab74426e1d8d51d65ab0c68" kindref="member" tooltip="Lea.">kInstGroupX86Lea</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1484"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mov.</highlight></codeline>
<codeline lineno="1485" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa33daa646b54291194399d28213635d03" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa33daa646b54291194399d28213635d03" kindref="member" tooltip="Mov.">kInstGroupX86Mov</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1486"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Movsx/Movsxd/Movzx.</highlight></codeline>
<codeline lineno="1487" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa66e318071bca1612a49b6266311d23a2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa66e318071bca1612a49b6266311d23a2" kindref="member" tooltip="Movsx/Movsxd/Movzx.">kInstGroupX86MovSxZx</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1488"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mov<sp/>having<sp/>absolute<sp/>memory<sp/>operand<sp/>(x86/x64).</highlight></codeline>
<codeline lineno="1489" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa1707c2bad4262dad3973942a4ffe32f6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa1707c2bad4262dad3973942a4ffe32f6" kindref="member" tooltip="Mov having absolute memory operand (x86/x64).">kInstGroupX86MovPtr</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1490"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Push.</highlight></codeline>
<codeline lineno="1491" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab3899b299a15b72f8031cb76c3d63b5d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab3899b299a15b72f8031cb76c3d63b5d" kindref="member" tooltip="Push.">kInstGroupX86Push</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1492"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pop.</highlight></codeline>
<codeline lineno="1493" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aadc4ef73dca80198dcacfbb9a49d54eb1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aadc4ef73dca80198dcacfbb9a49d54eb1" kindref="member" tooltip="Pop.">kInstGroupX86Pop</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1494"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rep/Repe/Repne<sp/>LodsX/MovsX/StosX/CmpsX/ScasX.</highlight></codeline>
<codeline lineno="1495" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5c4197badcd502f136f25a5d4d1c1c4a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5c4197badcd502f136f25a5d4d1c1c4a" kindref="member" tooltip="Rep/Repe/Repne LodsX/MovsX/StosX/CmpsX/ScasX.">kInstGroupX86Rep</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1496"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Ret.</highlight></codeline>
<codeline lineno="1497" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa6aa95a26f943bac62d4fec85b1c0208" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa6aa95a26f943bac62d4fec85b1c0208" kindref="member" tooltip="Ret.">kInstGroupX86Ret</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1498"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Rcl/Rcr/Rol/Ror/Sal/Sar/Shl/Shr.</highlight></codeline>
<codeline lineno="1499" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa971bbd8c19c3dd39a8f605ccb68d4e17" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa971bbd8c19c3dd39a8f605ccb68d4e17" kindref="member" tooltip="Rcl/Rcr/Rol/Ror/Sal/Sar/Shl/Shr.">kInstGroupX86Rot</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1500"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Setcc.</highlight></codeline>
<codeline lineno="1501" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aac4273307d1e6f598e166a6752111d48b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aac4273307d1e6f598e166a6752111d48b" kindref="member" tooltip="Setcc.">kInstGroupX86Set</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1502"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Shld/Rhrd.</highlight></codeline>
<codeline lineno="1503" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab491764e41cbc19258510f0cb955f864" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab491764e41cbc19258510f0cb955f864" kindref="member" tooltip="Shld/Rhrd.">kInstGroupX86Shlrd</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1504"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Test.</highlight></codeline>
<codeline lineno="1505" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaecc1c23a585d67494f34d3320acd13b2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaecc1c23a585d67494f34d3320acd13b2" kindref="member" tooltip="Test.">kInstGroupX86Test</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1506"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xadd.</highlight></codeline>
<codeline lineno="1507" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa256d9c5b6c9a4d09ee000797a2d41f92" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa256d9c5b6c9a4d09ee000797a2d41f92" kindref="member" tooltip="Xadd.">kInstGroupX86Xadd</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1508"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Xchg.</highlight></codeline>
<codeline lineno="1509" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaea6e852cbb506ed97353273935d643ee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaea6e852cbb506ed97353273935d643ee" kindref="member" tooltip="Xchg.">kInstGroupX86Xchg</ref>,</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1511"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fincstp/Finit/FldX/Fnclex/Fninit/Fnop/Fpatan/Fprem/Fprem1/Fptan/Frndint/Fscale/Fsin/Fsincos/Fsqrt/Ftst/Fucompp/Fxam/Fxtract/Fyl2x/Fyl2xp1.</highlight></codeline>
<codeline lineno="1512" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaaf6ec4753e3a2102245acbddef9196a3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaaf6ec4753e3a2102245acbddef9196a3" kindref="member" tooltip="Fincstp/Finit/FldX/Fnclex/Fninit/Fnop/Fpatan/Fprem/Fprem1/Fptan/Frndint/Fscale/Fsin/Fsincos/Fsqrt/Fts...">kInstGroupFpuOp</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1513"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fadd/Fdiv/Fdivr/Fmul/Fsub/Fsubr.</highlight></codeline>
<codeline lineno="1514" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad29eac3ec09ea882f0def584a0930b62" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad29eac3ec09ea882f0def584a0930b62" kindref="member" tooltip="Fadd/Fdiv/Fdivr/Fmul/Fsub/Fsubr.">kInstGroupFpuArith</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fcom/Fcomp.</highlight></codeline>
<codeline lineno="1516" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa94914265ac52574a43beac39ccb00743" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa94914265ac52574a43beac39ccb00743" kindref="member" tooltip="Fcom/Fcomp.">kInstGroupFpuCom</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1517"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fld/Fst/Fstp.</highlight></codeline>
<codeline lineno="1518" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa37111a56e03363f9b90168b196d2eaee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa37111a56e03363f9b90168b196d2eaee" kindref="member" tooltip="Fld/Fst/Fstp.">kInstGroupFpuFldFst</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fiadd/Ficom/Ficomp/Fidiv/Fidivr/Fild/Fimul/Fist/Fistp/Fisttp/Fisub/Fisubr.</highlight></codeline>
<codeline lineno="1520" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa7c58c0588c6b28af67273d672d2684ba" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa7c58c0588c6b28af67273d672d2684ba" kindref="member" tooltip="Fiadd/Ficom/Ficomp/Fidiv/Fidivr/Fild/Fimul/Fist/Fistp/Fisttp/Fisub/Fisubr.">kInstGroupFpuM</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1521"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fcmov/Fcomi/Fcomip/Ffree/Fucom/Fucomi/Fucomip/Fucomp/Fxch.</highlight></codeline>
<codeline lineno="1522" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa78c80e5fa3d49a1da83a7f45135241d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa78c80e5fa3d49a1da83a7f45135241d" kindref="member" tooltip="Fcmov/Fcomi/Fcomip/Ffree/Fucom/Fucomi/Fucomip/Fucomp/Fxch.">kInstGroupFpuR</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1523"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Faddp/Fdivp/Fdivrp/Fmulp/Fsubp/Fsubrp.</highlight></codeline>
<codeline lineno="1524" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa7af20062bc057e144ae24cb10858cafb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa7af20062bc057e144ae24cb10858cafb" kindref="member" tooltip="Faddp/Fdivp/Fdivrp/Fmulp/Fsubp/Fsubrp.">kInstGroupFpuRDef</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1525"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Fnstsw/Fstsw.</highlight></codeline>
<codeline lineno="1526" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaaf03ac56ad3dff84e7c0a51670224845" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaaf03ac56ad3dff84e7c0a51670224845" kindref="member" tooltip="Fnstsw/Fstsw.">kInstGroupFpuStsw</ref>,</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1528"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mm/Xmm<sp/>instruction.</highlight></codeline>
<codeline lineno="1529" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaee50aac4ae06bdce483626a00ffe3ff1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaee50aac4ae06bdce483626a00ffe3ff1" kindref="member" tooltip="Mm/Xmm instruction.">kInstGroupExtRm</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1530"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mm/Xmm<sp/>instruction<sp/>(propagates<sp/>66H<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>XMM<sp/>register).</highlight></codeline>
<codeline lineno="1531" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa61b4c3f5db957e75a70ba727432a1cda" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa61b4c3f5db957e75a70ba727432a1cda" kindref="member" tooltip="Mm/Xmm instruction (propagates 66H if the instruction uses XMM register).">kInstGroupExtRm_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1532"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mm/Xmm<sp/>instruction<sp/>(propagates<sp/>REX.W<sp/>if<sp/>GPQ<sp/>is<sp/>used).</highlight></codeline>
<codeline lineno="1533" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaec2eda0c26fff0ea93c95b942854d540" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaec2eda0c26fff0ea93c95b942854d540" kindref="member" tooltip="Mm/Xmm instruction (propagates REX.W if GPQ is used).">kInstGroupExtRm_Q</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1534"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mm/Xmm<sp/>instruction<sp/>having<sp/>Rm/Ri<sp/>encodings.</highlight></codeline>
<codeline lineno="1535" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa48397d673ea2013029e0ff9cfb878c2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa48397d673ea2013029e0ff9cfb878c2" kindref="member" tooltip="Mm/Xmm instruction having Rm/Ri encodings.">kInstGroupExtRmRi</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1536"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mm/Xmm<sp/>instruction<sp/>having<sp/>Rm/Ri<sp/>encodings<sp/>(propagates<sp/>66H<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>XMM<sp/>register).</highlight></codeline>
<codeline lineno="1537" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa3ce31428cd19c8c9c23165bd0cf139be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa3ce31428cd19c8c9c23165bd0cf139be" kindref="member" tooltip="Mm/Xmm instruction having Rm/Ri encodings (propagates 66H if the instruction uses XMM register)...">kInstGroupExtRmRi_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1538"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mm/Xmm<sp/>instruction<sp/>having<sp/>Rmi<sp/>encoding.</highlight></codeline>
<codeline lineno="1539" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa9788fa67ccd9e62001a270219b713357" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa9788fa67ccd9e62001a270219b713357" kindref="member" tooltip="Mm/Xmm instruction having Rmi encoding.">kInstGroupExtRmi</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1540"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mm/Xmm<sp/>instruction<sp/>having<sp/>Rmi<sp/>encoding<sp/>(propagates<sp/>66H<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>XMM<sp/>register).</highlight></codeline>
<codeline lineno="1541" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa53fe7b68781e4288b9417b9e12309c3e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa53fe7b68781e4288b9417b9e12309c3e" kindref="member" tooltip="Mm/Xmm instruction having Rmi encoding (propagates 66H if the instruction uses XMM register)...">kInstGroupExtRmi_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1542"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Crc32.</highlight></codeline>
<codeline lineno="1543" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5b8be6c278dd39087919e8ade57e43b7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5b8be6c278dd39087919e8ade57e43b7" kindref="member" tooltip="Crc32.">kInstGroupExtCrc</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1544"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Pextrb/Pextrw/Pextrd/Pextrq/Extractps.</highlight></codeline>
<codeline lineno="1545" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8a05f0b0a53e7676593e63ae2f4f43d8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8a05f0b0a53e7676593e63ae2f4f43d8" kindref="member" tooltip="Pextrb/Pextrw/Pextrd/Pextrq/Extractps.">kInstGroupExtExtract</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1546"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Lfence/Mfence/Sfence.</highlight></codeline>
<codeline lineno="1547" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa110a676f418f4efba43a30b8bdb1e40f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa110a676f418f4efba43a30b8bdb1e40f" kindref="member" tooltip="Lfence/Mfence/Sfence.">kInstGroupExtFence</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1548"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mov<sp/>Mm/Xmm.</highlight></codeline>
<codeline lineno="1549"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1550"><highlight class="comment"><sp/><sp/>//!<sp/>0x66<sp/>prefix<sp/>must<sp/>be<sp/>set<sp/>manually<sp/>in<sp/>opcodes.</highlight></codeline>
<codeline lineno="1551"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1552"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Primary<sp/>opcode<sp/>is<sp/>used<sp/>for<sp/>instructions<sp/>in<sp/>(X)Mm<sp/>&lt;-<sp/>(X)Mm/Mem<sp/>format,</highlight></codeline>
<codeline lineno="1553"><highlight class="comment"><sp/><sp/>//!<sp/>-<sp/>Secondary<sp/>opcode<sp/>is<sp/>used<sp/>for<sp/>instructions<sp/>in<sp/>(X)Mm/Mem<sp/>&lt;-<sp/>(X)Mm<sp/>format.</highlight></codeline>
<codeline lineno="1554" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaf57a1dfed6644444f529982fdbc72a63" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaf57a1dfed6644444f529982fdbc72a63" kindref="member" tooltip="Mov Mm/Xmm.">kInstGroupExtMov</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1555"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Mov<sp/>Mm/Xmm.</highlight></codeline>
<codeline lineno="1556" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa11015e50f73f418427e93fddef8f40ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa11015e50f73f418427e93fddef8f40ca" kindref="member" tooltip="Mov Mm/Xmm.">kInstGroupExtMovNoRexW</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1557"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Movbe.</highlight></codeline>
<codeline lineno="1558" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad61d9f6ca8a1e79c038564e561854e41" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad61d9f6ca8a1e79c038564e561854e41" kindref="member" tooltip="Movbe.">kInstGroupExtMovBe</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1559"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Movd.</highlight></codeline>
<codeline lineno="1560" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa02df60718863f56570a113706e390a96" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa02df60718863f56570a113706e390a96" kindref="member" tooltip="Movd.">kInstGroupExtMovD</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1561"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Movq.</highlight></codeline>
<codeline lineno="1562" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa29f89f84ae4a1082eae4d28e3e4a2e95" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa29f89f84ae4a1082eae4d28e3e4a2e95" kindref="member" tooltip="Movq.">kInstGroupExtMovQ</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1563"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Prefetch.</highlight></codeline>
<codeline lineno="1564" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa3de3fe75f469b47e29cc93f26bae41f4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa3de3fe75f469b47e29cc93f26bae41f4" kindref="member" tooltip="Prefetch.">kInstGroupExtPrefetch</ref>,</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1566"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>3dNow<sp/>instruction.</highlight></codeline>
<codeline lineno="1567" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa2a25c4ce9d84a6baa07356cdaa520ae8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa2a25c4ce9d84a6baa07356cdaa520ae8" kindref="member" tooltip="3dNow instruction.">kInstGroup3dNow</ref>,</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1569"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>without<sp/>operands.</highlight></codeline>
<codeline lineno="1570" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aacfc80558e477aca7222e73fb2b21f3ca" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aacfc80558e477aca7222e73fb2b21f3ca" kindref="member" tooltip="AVX instruction without operands.">kInstGroupAvxOp</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1571"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;M&apos;.</highlight></codeline>
<codeline lineno="1572" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa0947e4e35ef70b29cc3f1e77ad8fb063" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa0947e4e35ef70b29cc3f1e77ad8fb063" kindref="member" tooltip="AVX instruction encoded as &amp;#39;M&amp;#39;.">kInstGroupAvxM</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1573"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;MR&apos;.</highlight></codeline>
<codeline lineno="1574" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa414ecc6c7527485f4a8d2496cfb39bc2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa414ecc6c7527485f4a8d2496cfb39bc2" kindref="member" tooltip="AVX instruction encoded as &amp;#39;MR&amp;#39;.">kInstGroupAvxMr</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1575"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;MR&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register).</highlight></codeline>
<codeline lineno="1576" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaed073e1c2fe8ca02254537eb9b960c0a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaed073e1c2fe8ca02254537eb9b960c0a" kindref="member" tooltip="AVX instruction encoded as &amp;#39;MR&amp;#39; (propagates AVX.L if the instruction uses YMM register).">kInstGroupAvxMr_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1577"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;MRI&apos;.</highlight></codeline>
<codeline lineno="1578" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab7d8f1b1d8c02e6224dfebf496950244" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab7d8f1b1d8c02e6224dfebf496950244" kindref="member" tooltip="AVX instruction encoded as &amp;#39;MRI&amp;#39;.">kInstGroupAvxMri</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1579"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;MRI&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register).</highlight></codeline>
<codeline lineno="1580" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaf96e11a709cc83b54af6dbf358f43d6f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaf96e11a709cc83b54af6dbf358f43d6f" kindref="member" tooltip="AVX instruction encoded as &amp;#39;MRI&amp;#39; (propagates AVX.L if the instruction uses YMM register).">kInstGroupAvxMri_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1581"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RM&apos;.</highlight></codeline>
<codeline lineno="1582" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa256bf890c5323d7ccb4cc19ef1117ccc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa256bf890c5323d7ccb4cc19ef1117ccc" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RM&amp;#39;.">kInstGroupAvxRm</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1583"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RM&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register).</highlight></codeline>
<codeline lineno="1584" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad083d79a13b2a7b59e220226d48e1461" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad083d79a13b2a7b59e220226d48e1461" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RM&amp;#39; (propagates AVX.L if the instruction uses YMM register).">kInstGroupAvxRm_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1585"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RMI&apos;.</highlight></codeline>
<codeline lineno="1586" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa185c6a4f2729479ad455e5c6635bf563" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa185c6a4f2729479ad455e5c6635bf563" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RMI&amp;#39;.">kInstGroupAvxRmi</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1587"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RMI&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register)..</highlight></codeline>
<codeline lineno="1588" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa2aba88364185f2e79a7995523639e1c1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa2aba88364185f2e79a7995523639e1c1" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RMI&amp;#39; (propagates AVX.L if the instruction uses YMM register)..">kInstGroupAvxRmi_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1589"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVM&apos;.</highlight></codeline>
<codeline lineno="1590" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5a0446f6c9391ce6e92edeb526d2d8c4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5a0446f6c9391ce6e92edeb526d2d8c4" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVM&amp;#39;.">kInstGroupAvxRvm</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1591"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVM&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register).</highlight></codeline>
<codeline lineno="1592" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aadb7f04aeb1acd0208508bdd386acf6d7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aadb7f04aeb1acd0208508bdd386acf6d7" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVM&amp;#39; (propagates AVX.L if the instruction uses YMM register).">kInstGroupAvxRvm_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1593"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVMR&apos;.</highlight></codeline>
<codeline lineno="1594" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa65463a64b46c2a8eb295a1105cf90ebb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa65463a64b46c2a8eb295a1105cf90ebb" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVMR&amp;#39;.">kInstGroupAvxRvmr</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1595"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVMR&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register).</highlight></codeline>
<codeline lineno="1596" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8b42448387ee6339ac1026bed030a654" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8b42448387ee6339ac1026bed030a654" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVMR&amp;#39; (propagates AVX.L if the instruction uses YMM register).">kInstGroupAvxRvmr_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1597"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVMI&apos;.</highlight></codeline>
<codeline lineno="1598" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab3c93bda88839aa8acd60274c0fed397" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aab3c93bda88839aa8acd60274c0fed397" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVMI&amp;#39;.">kInstGroupAvxRvmi</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1599"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVMI&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register).</highlight></codeline>
<codeline lineno="1600" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa0a13063eae5fad7c13655686d824044b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa0a13063eae5fad7c13655686d824044b" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVMI&amp;#39; (propagates AVX.L if the instruction uses YMM register).">kInstGroupAvxRvmi_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1601"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RMV&apos;.</highlight></codeline>
<codeline lineno="1602" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aadce04c64be6e3d454c1e31716d422510" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aadce04c64be6e3d454c1e31716d422510" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RMV&amp;#39;.">kInstGroupAvxRmv</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1603"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RMVI&apos;.</highlight></codeline>
<codeline lineno="1604" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa258bbe2007d908e681dfad9e9f8449ef" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa258bbe2007d908e681dfad9e9f8449ef" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RMVI&amp;#39;.">kInstGroupAvxRmvi</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1605"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RM&apos;<sp/>or<sp/>&apos;MR&apos;.</highlight></codeline>
<codeline lineno="1606" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae4c1ea7e4cbf3bee7297a4f1ed708bb0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae4c1ea7e4cbf3bee7297a4f1ed708bb0" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RM&amp;#39; or &amp;#39;MR&amp;#39;.">kInstGroupAvxRmMr</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1607"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RM&apos;<sp/>or<sp/>&apos;MR&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register).</highlight></codeline>
<codeline lineno="1608" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa6af8b51fd0a37f3a85a3b8ffbf8096fc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa6af8b51fd0a37f3a85a3b8ffbf8096fc" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RM&amp;#39; or &amp;#39;MR&amp;#39; (propagates AVX.L if the instruction uses YMM register)...">kInstGroupAvxRmMr_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1609"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVM&apos;<sp/>or<sp/>&apos;RMI&apos;.</highlight></codeline>
<codeline lineno="1610" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa25dd097b84f990762516c146f8bcb6f0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa25dd097b84f990762516c146f8bcb6f0" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVM&amp;#39; or &amp;#39;RMI&amp;#39;.">kInstGroupAvxRvmRmi</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1611"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVM&apos;<sp/>or<sp/>&apos;RMI&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register).</highlight></codeline>
<codeline lineno="1612" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8d2e84bc78487b0e4088027d28d113a2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8d2e84bc78487b0e4088027d28d113a2" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVM&amp;#39; or &amp;#39;RMI&amp;#39; (propagates AVX.L if the instruction uses YMM register)...">kInstGroupAvxRvmRmi_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1613"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVM&apos;<sp/>or<sp/>&apos;MR&apos;.</highlight></codeline>
<codeline lineno="1614" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa6aa6ae8e369d646cf02645564799a52d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa6aa6ae8e369d646cf02645564799a52d" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVM&amp;#39; or &amp;#39;MR&amp;#39;.">kInstGroupAvxRvmMr</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1615"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVM&apos;<sp/>or<sp/>&apos;MVR&apos;.</highlight></codeline>
<codeline lineno="1616" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8c24fb303264ace3899566316a5a16a7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8c24fb303264ace3899566316a5a16a7" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVM&amp;#39; or &amp;#39;MVR&amp;#39;.">kInstGroupAvxRvmMvr</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1617"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVM&apos;<sp/>or<sp/>&apos;MVR&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register).</highlight></codeline>
<codeline lineno="1618" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa4d5eda7c24d264ea15417f9a6d57c58" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa4d5eda7c24d264ea15417f9a6d57c58" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVM&amp;#39; or &amp;#39;MVR&amp;#39; (propagates AVX.L if the instruction uses YMM register)...">kInstGroupAvxRvmMvr_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1619"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVM&apos;<sp/>or<sp/>&apos;VMI&apos;.</highlight></codeline>
<codeline lineno="1620" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5d1548503dfd11a800901c874a30c877" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5d1548503dfd11a800901c874a30c877" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVM&amp;#39; or &amp;#39;VMI&amp;#39;.">kInstGroupAvxRvmVmi</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1621"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;RVM&apos;<sp/>or<sp/>&apos;VMI&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register).</highlight></codeline>
<codeline lineno="1622" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad2071f4350b840f7b4c6f8e88114ffb8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aad2071f4350b840f7b4c6f8e88114ffb8" kindref="member" tooltip="AVX instruction encoded as &amp;#39;RVM&amp;#39; or &amp;#39;VMI&amp;#39; (propagates AVX.L if the instruction uses YMM register)...">kInstGroupAvxRvmVmi_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1623"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;VM&apos;.</highlight></codeline>
<codeline lineno="1624" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8b7914b4090eaebf2c82612bc21fd085" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa8b7914b4090eaebf2c82612bc21fd085" kindref="member" tooltip="AVX instruction encoded as &amp;#39;VM&amp;#39;.">kInstGroupAvxVm</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1625"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;VMI&apos;.</highlight></codeline>
<codeline lineno="1626" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa2777e4cd44153a1565dbc6758a5b869f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa2777e4cd44153a1565dbc6758a5b869f" kindref="member" tooltip="AVX instruction encoded as &amp;#39;VMI&amp;#39;.">kInstGroupAvxVmi</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1627"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX<sp/>instruction<sp/>encoded<sp/>as<sp/>&apos;VMI&apos;<sp/>(propagates<sp/>AVX.L<sp/>if<sp/>the<sp/>instruction<sp/>uses<sp/>YMM<sp/>register).</highlight></codeline>
<codeline lineno="1628" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae4e6b050b38a620c89363b530a14aa1f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aae4e6b050b38a620c89363b530a14aa1f" kindref="member" tooltip="AVX instruction encoded as &amp;#39;VMI&amp;#39; (propagates AVX.L if the instruction uses YMM register).">kInstGroupAvxVmi_P</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1629"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Vmovss/Vmovsd.</highlight></codeline>
<codeline lineno="1630" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa915e85741ec1c5090815932d8270902" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa915e85741ec1c5090815932d8270902" kindref="member" tooltip="Vmovss/Vmovsd.">kInstGroupAvxMovSsSd</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1631"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX2<sp/>gather<sp/>family<sp/>instructions<sp/>(VSIB).</highlight></codeline>
<codeline lineno="1632" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa9b86e77c9484815394672b8f117b8dd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aaa9b86e77c9484815394672b8f117b8dd" kindref="member" tooltip="AVX2 gather family instructions (VSIB).">kInstGroupAvxGather</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1633"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>AVX2<sp/>gather<sp/>family<sp/>instructions<sp/>(VSIB),<sp/>differs<sp/>only<sp/>in<sp/>mem<sp/>operand.</highlight></codeline>
<codeline lineno="1634" refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5d01d479febb3650934be8da1087c462" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggaa30d3f39e2e8169aec8b9120b459042aa5d01d479febb3650934be8da1087c462" kindref="member" tooltip="AVX2 gather family instructions (VSIB), differs only in mem operand.">kInstGroupAvxGatherEx</ref></highlight></codeline>
<codeline lineno="1635"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kInstOpCode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1641"><highlight class="comment">//!<sp/>@brief<sp/>Instruction<sp/>OpCode<sp/>encoding<sp/>used<sp/>by<sp/>asmjit<sp/>&apos;InstInfo&apos;<sp/>table.</highlight></codeline>
<codeline lineno="1642"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1643"><highlight class="comment">//!<sp/>The<sp/>schema<sp/>was<sp/>inspired<sp/>by<sp/>AVX/AVX2<sp/>features.</highlight></codeline>
<codeline lineno="1644" refid="group__asmjit__x86x64_1gaaba19b5097d939e6304292bb09da9e12" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1gaaba19b5097d939e6304292bb09da9e12" kindref="member" tooltip="Instruction OpCode encoding used by asmjit &amp;#39;InstInfo&amp;#39; table.">kInstOpCode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;MMMMM&apos;<sp/>field<sp/>in<sp/>AVX<sp/>instruction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;OpCode&apos;<sp/>leading<sp/>bytes<sp/>in<sp/>legacy<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/>kInstOpCode_MM_Shift<sp/>=<sp/>16,</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/>kInstOpCode_MM_Mask<sp/><sp/>=<sp/>0x0FU<sp/>&lt;&lt;<sp/>kInstOpCode_MM_Shift,</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/>kInstOpCode_MM_00<sp/><sp/><sp/><sp/>=<sp/>0x00U<sp/>&lt;&lt;<sp/>kInstOpCode_MM_Shift,</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/>kInstOpCode_MM_0F<sp/><sp/><sp/><sp/>=<sp/>0x01U<sp/>&lt;&lt;<sp/>kInstOpCode_MM_Shift,</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/>kInstOpCode_MM_0F38<sp/><sp/>=<sp/>0x02U<sp/>&lt;&lt;<sp/>kInstOpCode_MM_Shift,</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>kInstOpCode_MM_0F3A<sp/><sp/>=<sp/>0x03U<sp/>&lt;&lt;<sp/>kInstOpCode_MM_Shift,</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/>kInstOpCode_MM_0F01<sp/><sp/>=<sp/>0x0FU<sp/>&lt;&lt;<sp/>kInstOpCode_MM_Shift,<sp/></highlight><highlight class="comment">//<sp/>Ext/Not<sp/>part<sp/>of<sp/>AVX.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;PP&apos;<sp/>field<sp/>in<sp/>AVX<sp/>instruction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;Mandatory<sp/>Prefix&apos;<sp/>in<sp/>legacy<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/>kInstOpCode_PP_Shift<sp/>=<sp/>21,</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>kInstOpCode_PP_Mask<sp/><sp/>=<sp/>0x07U<sp/>&lt;&lt;<sp/>kInstOpCode_PP_Shift,</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/>kInstOpCode_PP_00<sp/><sp/><sp/><sp/>=<sp/>0x00U<sp/>&lt;&lt;<sp/>kInstOpCode_PP_Shift,</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/>kInstOpCode_PP_66<sp/><sp/><sp/><sp/>=<sp/>0x01U<sp/>&lt;&lt;<sp/>kInstOpCode_PP_Shift,</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/>kInstOpCode_PP_F3<sp/><sp/><sp/><sp/>=<sp/>0x02U<sp/>&lt;&lt;<sp/>kInstOpCode_PP_Shift,</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/>kInstOpCode_PP_F2<sp/><sp/><sp/><sp/>=<sp/>0x03U<sp/>&lt;&lt;<sp/>kInstOpCode_PP_Shift,</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>kInstOpCode_PP_9B<sp/><sp/><sp/><sp/>=<sp/>0x07U<sp/>&lt;&lt;<sp/>kInstOpCode_PP_Shift,<sp/></highlight><highlight class="comment">//Ext/Not<sp/>part<sp/>of<sp/>AVX.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;L&apos;<sp/>field<sp/>in<sp/>AVX<sp/>instruction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/>kInstOpCode_L_Shift<sp/><sp/>=<sp/>24,</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/>kInstOpCode_L_Mask<sp/><sp/><sp/>=<sp/>0x01U<sp/>&lt;&lt;<sp/>kInstOpCode_L_Shift,</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/>kInstOpCode_L_False<sp/><sp/>=<sp/>0x00U<sp/>&lt;&lt;<sp/>kInstOpCode_L_Shift,</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>kInstOpCode_L_True<sp/><sp/><sp/>=<sp/>0x01U<sp/>&lt;&lt;<sp/>kInstOpCode_L_Shift,</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;O&apos;<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>kInstOpCode_O_Shift<sp/><sp/>=<sp/>29,</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/>kInstOpCode_O_Mask<sp/><sp/><sp/>=<sp/>0x07U<sp/>&lt;&lt;<sp/>kInstOpCode_O_Shift</highlight></codeline>
<codeline lineno="1674"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kInstFlags]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1680"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>instruction<sp/>type<sp/>flags.</highlight></codeline>
<codeline lineno="1681" refid="group__asmjit__x86x64_1ga9741e8a4cc904b35dc950570803abd37" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga9741e8a4cc904b35dc950570803abd37" kindref="member" tooltip="X86/X64 instruction type flags.">kInstFlags</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1682"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>No<sp/>flags.</highlight></codeline>
<codeline lineno="1683" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a1f471eeb8e612b63bc9ecf1eb8e896ab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a1f471eeb8e612b63bc9ecf1eb8e896ab" kindref="member" tooltip="No flags.">kInstFlagNone</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0000,</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1685"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>is<sp/>a<sp/>control-flow<sp/>instruction.</highlight></codeline>
<codeline lineno="1686"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1687"><highlight class="comment"><sp/><sp/>//!<sp/>Control<sp/>flow<sp/>instructions<sp/>are<sp/>jmp,<sp/>jcc,<sp/>call<sp/>and<sp/>ret.</highlight></codeline>
<codeline lineno="1688" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37abc3da04810c61d0f9f981456459b98e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37abc3da04810c61d0f9f981456459b98e7" kindref="member" tooltip="Instruction is a control-flow instruction.">kInstFlagFlow</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0001,</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1690"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>is<sp/>a<sp/>compare/test<sp/>like<sp/>instruction.</highlight></codeline>
<codeline lineno="1691" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad5cc42d5e26c67479525192d1f535565" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad5cc42d5e26c67479525192d1f535565" kindref="member" tooltip="Instruction is a compare/test like instruction.">kInstFlagTest</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0002,</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1693"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>is<sp/>a<sp/>move<sp/>like<sp/>instruction.</highlight></codeline>
<codeline lineno="1694"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1695"><highlight class="comment"><sp/><sp/>//!<sp/>Move<sp/>instructions<sp/>typically<sp/>overwrite<sp/>the<sp/>first<sp/>operand<sp/>by<sp/>the<sp/>second</highlight></codeline>
<codeline lineno="1696"><highlight class="comment"><sp/><sp/>//!<sp/>operand.<sp/>The<sp/>first<sp/>operand<sp/>can<sp/>be<sp/>the<sp/>exact<sp/>copy<sp/>of<sp/>the<sp/>second<sp/>operand</highlight></codeline>
<codeline lineno="1697"><highlight class="comment"><sp/><sp/>//!<sp/>or<sp/>it<sp/>can<sp/>be<sp/>any<sp/>kind<sp/>of<sp/>conversion.<sp/>Mov<sp/>instructions<sp/>are<sp/>typically</highlight></codeline>
<codeline lineno="1698"><highlight class="comment"><sp/><sp/>//!<sp/>&apos;mov&apos;,<sp/>&apos;movd&apos;,<sp/>&apos;movq&apos;,<sp/>&apos;movdq?&apos;,<sp/>&apos;cmov??&apos;<sp/>like<sp/>instructions,<sp/>but<sp/>we<sp/>also</highlight></codeline>
<codeline lineno="1699"><highlight class="comment"><sp/><sp/>//!<sp/>consider<sp/>&apos;lea&apos;<sp/>(Load<sp/>Effective<sp/>Address),<sp/>multimedia<sp/><sp/>instructions<sp/>like</highlight></codeline>
<codeline lineno="1700"><highlight class="comment"><sp/><sp/>//!<sp/>&apos;cvtdq2pd&apos;,<sp/>shuffle<sp/>instructions<sp/>like<sp/>&apos;pshufb&apos;<sp/>and<sp/>SSE/SSE2<sp/>mathematic</highlight></codeline>
<codeline lineno="1701"><highlight class="comment"><sp/><sp/>//!<sp/>instructions<sp/>like<sp/>&apos;rcp??&apos;,<sp/>&apos;round??&apos;<sp/>and<sp/>&apos;rsqrt??&apos;.</highlight></codeline>
<codeline lineno="1702" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad4b9bd5ecfc722027dda933f907e75d2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad4b9bd5ecfc722027dda933f907e75d2" kindref="member" tooltip="Instruction is a move like instruction.">kInstFlagMove</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0004,</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1704"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>is<sp/>an<sp/>exchange<sp/>like<sp/>instruction.</highlight></codeline>
<codeline lineno="1705"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1706"><highlight class="comment"><sp/><sp/>//!<sp/>Exchange<sp/>instruction<sp/>typically<sp/>overwrite<sp/>first<sp/>and<sp/>second<sp/>operand,<sp/>we</highlight></codeline>
<codeline lineno="1707"><highlight class="comment"><sp/><sp/>//!<sp/>count<sp/>&apos;xchg&apos;<sp/>and<sp/>&apos;xadd&apos;<sp/>instructions<sp/>right<sp/>now.</highlight></codeline>
<codeline lineno="1708" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a8617892895dedb1ef0756edb525a3506" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a8617892895dedb1ef0756edb525a3506" kindref="member" tooltip="Instruction is an exchange like instruction.">kInstFlagXchg</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0008,</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1710"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>accesses<sp/>Fp<sp/>register(s).</highlight></codeline>
<codeline lineno="1711" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a2a23c0346b187ccf4bdc2aca7325a686" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a2a23c0346b187ccf4bdc2aca7325a686" kindref="member" tooltip="Instruction accesses Fp register(s).">kInstFlagFp</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0010,</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1713"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>can<sp/>be<sp/>prefixed<sp/>by<sp/>using<sp/>the<sp/>LOCK<sp/>prefix.</highlight></codeline>
<codeline lineno="1714" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a4bfda635ab02f27875c70fa0354a8646" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a4bfda635ab02f27875c70fa0354a8646" kindref="member" tooltip="Instruction can be prefixed by using the LOCK prefix.">kInstFlagLock</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0020,</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1716"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>is<sp/>special,<sp/>this<sp/>is<sp/>for<sp/>@c<sp/>Compiler.</highlight></codeline>
<codeline lineno="1717" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37aa399b956eb3582e0947d0b4a9d32e3af" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37aa399b956eb3582e0947d0b4a9d32e3af" kindref="member" tooltip="Instruction is special, this is for Compiler.">kInstFlagSpecial</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0040,</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1719"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>always<sp/>performs<sp/>memory<sp/>access.</highlight></codeline>
<codeline lineno="1720"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1721"><highlight class="comment"><sp/><sp/>//!<sp/>This<sp/>flag<sp/>is<sp/>always<sp/>combined<sp/>with<sp/>@c<sp/>kInstFlagSpecial<sp/>and<sp/>signalizes</highlight></codeline>
<codeline lineno="1722"><highlight class="comment"><sp/><sp/>//!<sp/>that<sp/>there<sp/>is<sp/>an<sp/>implicit<sp/>address<sp/>which<sp/>is<sp/>accessed<sp/>(usually<sp/>EDI/RDI<sp/>or</highlight></codeline>
<codeline lineno="1723"><highlight class="comment"><sp/><sp/>//!<sp/>ESI/EDI).</highlight></codeline>
<codeline lineno="1724" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a67fb1f2dda6d618b99e7a9e45699a40e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a67fb1f2dda6d618b99e7a9e45699a40e" kindref="member" tooltip="Instruction always performs memory access.">kInstFlagSpecialMem</ref><sp/><sp/>=<sp/>0x0080,</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1726"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>memory<sp/>operand<sp/>can<sp/>refer<sp/>to<sp/>16-bit<sp/>address<sp/>(used<sp/>by<sp/>FPU).</highlight></codeline>
<codeline lineno="1727" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ae3896e14d1088cab33b7062af5e7bb2a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ae3896e14d1088cab33b7062af5e7bb2a" kindref="member" tooltip="Instruction memory operand can refer to 16-bit address (used by FPU).">kInstFlagMem2</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0100,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1728"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>memory<sp/>operand<sp/>can<sp/>refer<sp/>to<sp/>32-bit<sp/>address<sp/>(used<sp/>by<sp/>FPU).</highlight></codeline>
<codeline lineno="1729" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a61ca5bba58b2714ef204f445f089a7be" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a61ca5bba58b2714ef204f445f089a7be" kindref="member" tooltip="Instruction memory operand can refer to 32-bit address (used by FPU).">kInstFlagMem4</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0200,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1730"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>memory<sp/>operand<sp/>can<sp/>refer<sp/>to<sp/>64-bit<sp/>address<sp/>(used<sp/>by<sp/>FPU).</highlight></codeline>
<codeline lineno="1731" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a7f7b411245f1144531fdf664c0d46a03" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a7f7b411245f1144531fdf664c0d46a03" kindref="member" tooltip="Instruction memory operand can refer to 64-bit address (used by FPU).">kInstFlagMem8</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0400,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1732"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>memory<sp/>operand<sp/>can<sp/>refer<sp/>to<sp/>80-bit<sp/>address<sp/>(used<sp/>by<sp/>FPU).</highlight></codeline>
<codeline lineno="1733" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37af26ff9a24212294cfa1c5aba6cd5af1a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37af26ff9a24212294cfa1c5aba6cd5af1a" kindref="member" tooltip="Instruction memory operand can refer to 80-bit address (used by FPU).">kInstFlagMem10</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0800,</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1735"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Combination<sp/>of<sp/>@c<sp/>kInstFlagMem2<sp/>and<sp/>@c<sp/>kInstFlagMem4.</highlight></codeline>
<codeline lineno="1736" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37aec16998107e33ac810cd30749e421662" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37aec16998107e33ac810cd30749e421662" kindref="member" tooltip="Combination of kInstFlagMem2 and kInstFlagMem4.">kInstFlagMem2_4</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ae3896e14d1088cab33b7062af5e7bb2a" kindref="member" tooltip="Instruction memory operand can refer to 16-bit address (used by FPU).">kInstFlagMem2</ref><sp/><sp/><sp/>|<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a61ca5bba58b2714ef204f445f089a7be" kindref="member" tooltip="Instruction memory operand can refer to 32-bit address (used by FPU).">kInstFlagMem4</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1737"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Combination<sp/>of<sp/>@c<sp/>kInstFlagMem2<sp/>and<sp/>@c<sp/>kInstFlagMem4<sp/>and<sp/>@c<sp/>kInstFlagMem8.</highlight></codeline>
<codeline lineno="1738" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a1fb4910c41f3d10fb403343444834652" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a1fb4910c41f3d10fb403343444834652" kindref="member" tooltip="Combination of kInstFlagMem2 and kInstFlagMem4 and kInstFlagMem8.">kInstFlagMem2_4_8</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37aec16998107e33ac810cd30749e421662" kindref="member" tooltip="Combination of kInstFlagMem2 and kInstFlagMem4.">kInstFlagMem2_4</ref><sp/>|<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a7f7b411245f1144531fdf664c0d46a03" kindref="member" tooltip="Instruction memory operand can refer to 64-bit address (used by FPU).">kInstFlagMem8</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1739"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Combination<sp/>of<sp/>@c<sp/>kInstFlagMem4<sp/>and<sp/>@c<sp/>kInstFlagMem8.</highlight></codeline>
<codeline lineno="1740" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad4b92c51f5d67588b7af27abdebdcb52" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad4b92c51f5d67588b7af27abdebdcb52" kindref="member" tooltip="Combination of kInstFlagMem4 and kInstFlagMem8.">kInstFlagMem4_8</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a61ca5bba58b2714ef204f445f089a7be" kindref="member" tooltip="Instruction memory operand can refer to 32-bit address (used by FPU).">kInstFlagMem4</ref><sp/><sp/><sp/>|<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a7f7b411245f1144531fdf664c0d46a03" kindref="member" tooltip="Instruction memory operand can refer to 64-bit address (used by FPU).">kInstFlagMem8</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1741"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Combination<sp/>of<sp/>@c<sp/>kInstFlagMem4<sp/>and<sp/>@c<sp/>kInstFlagMem8<sp/>and<sp/>@c<sp/>kInstFlagMem10.</highlight></codeline>
<codeline lineno="1742" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ab801b2c1431df9f182d3099a2da060c9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ab801b2c1431df9f182d3099a2da060c9" kindref="member" tooltip="Combination of kInstFlagMem4 and kInstFlagMem8 and kInstFlagMem10.">kInstFlagMem4_8_10</ref><sp/><sp/><sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad4b92c51f5d67588b7af27abdebdcb52" kindref="member" tooltip="Combination of kInstFlagMem4 and kInstFlagMem8.">kInstFlagMem4_8</ref><sp/>|<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37af26ff9a24212294cfa1c5aba6cd5af1a" kindref="member" tooltip="Instruction memory operand can refer to 80-bit address (used by FPU).">kInstFlagMem10</ref>,</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1744"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>REX.W/VEX.W<sp/>by<sp/>default.</highlight></codeline>
<codeline lineno="1745" refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a3699076b1d7770a163b4cf8a1b5724c2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a3699076b1d7770a163b4cf8a1b5724c2" kindref="member" tooltip="REX.W/VEX.W by default.">kInstFlagW</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x8000</highlight></codeline>
<codeline lineno="1746"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kInstOp]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1752"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>instruction<sp/>operand<sp/>flags.</highlight></codeline>
<codeline lineno="1753" refid="group__asmjit__x86x64_1gade08bd84e122d319bfe950dede3e5e2e" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1gade08bd84e122d319bfe950dede3e5e2e" kindref="member" tooltip="X86/X64 instruction operand flags.">kInstOp</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gp,<sp/>Fp,<sp/>Mm,<sp/>Xmm,<sp/>Ymm,<sp/>Zmm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/>kInstOpGb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0001,</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/>kInstOpGw<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0002,</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/>kInstOpGd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0004,</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/>kInstOpGq<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0008,</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/>kInstOpFp<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0010,</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/>kInstOpMm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0020,</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/>kInstOpXmm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0100,</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/>kInstOpYmm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0200,</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/>kInstOpZmm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0400,</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mem,<sp/>Imm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/>kInstOpMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x4000,</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/>kInstOpImm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x8000,</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Combined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/>kInstOpGwb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGw<sp/><sp/><sp/><sp/><sp/>|<sp/>kInstOpGb,</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/>kInstOpGqd<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGq<sp/><sp/><sp/><sp/><sp/>|<sp/>kInstOpGd,</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/>kInstOpGqdw<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGq<sp/><sp/><sp/><sp/><sp/>|<sp/>kInstOpGd<sp/>|<sp/>kInstOpGw,</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/>kInstOpGqdwb<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGq<sp/><sp/><sp/><sp/><sp/>|<sp/>kInstOpGd<sp/>|<sp/>kInstOpGw<sp/>|<sp/>kInstOpGb,</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/>kInstOpGbMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGb<sp/><sp/><sp/><sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/>kInstOpGwMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGw<sp/><sp/><sp/><sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/>kInstOpGdMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGd<sp/><sp/><sp/><sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/>kInstOpGqMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGq<sp/><sp/><sp/><sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/>kInstOpGwbMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGwb<sp/><sp/><sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/>kInstOpGqdMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGqd<sp/><sp/><sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>kInstOpGqdwMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGqdw<sp/><sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/>kInstOpGqdwbMem<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpGqdwb<sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/>kInstOpFpMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpFp<sp/><sp/><sp/><sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/>kInstOpMmMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpMm<sp/><sp/><sp/><sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/>kInstOpXmmMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpXmm<sp/><sp/><sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/>kInstOpYmmMem<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpYmm<sp/><sp/><sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/>kInstOpMmXmm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpMm<sp/><sp/><sp/><sp/><sp/>|<sp/>kInstOpXmm,</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/>kInstOpMmXmmMem<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpMmXmm<sp/><sp/>|<sp/>kInstOpMem,</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/>kInstOpXmmYmm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpXmm<sp/><sp/><sp/><sp/>|<sp/>kInstOpYmm,</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/>kInstOpXmmYmmMem<sp/><sp/><sp/><sp/><sp/>=<sp/>kInstOpXmmYmm<sp/>|<sp/>kInstOpMem</highlight></codeline>
<codeline lineno="1794"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kCond]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1800"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>Condition<sp/>codes.</highlight></codeline>
<codeline lineno="1801" refid="group__asmjit__x86x64_1ga46745c982ed79dafc3b61ae380ddbb7b" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga46745c982ed79dafc3b61ae380ddbb7b" kindref="member" tooltip="X86/X64 Condition codes.">kCond</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Condition<sp/>codes<sp/>from<sp/>processor<sp/>manuals.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/>kCondA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x07,<sp/></highlight><highlight class="comment">//<sp/>CF==0<sp/>&amp;<sp/>ZF==0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/>kCondAE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x03,<sp/></highlight><highlight class="comment">//<sp/>CF==0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/>kCondB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x02,<sp/></highlight><highlight class="comment">//<sp/>CF==1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/>kCondBE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x06,<sp/></highlight><highlight class="comment">//<sp/>CF==1<sp/>|<sp/>ZF==1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/>kCondC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x02,<sp/></highlight><highlight class="comment">//<sp/>CF==1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/>kCondE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x04,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZF==1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(signed/unsigned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/>kCondG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0F,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZF==0<sp/>&amp;<sp/>SF==OF<sp/>(signed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>kCondGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0D,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SF==OF<sp/>(signed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/>kCondL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0C,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SF!=OF<sp/>(signed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/>kCondLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0E,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZF==1<sp/>|<sp/>SF!=OF<sp/>(signed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/>kCondNA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x06,<sp/></highlight><highlight class="comment">//<sp/>CF==1<sp/>|<sp/>ZF==1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/>kCondNAE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x02,<sp/></highlight><highlight class="comment">//<sp/>CF==1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/>kCondNB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x03,<sp/></highlight><highlight class="comment">//<sp/>CF==0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/>kCondNBE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x07,<sp/></highlight><highlight class="comment">//<sp/>CF==0<sp/>&amp;<sp/>ZF==0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(unsigned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/>kCondNC<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x03,<sp/></highlight><highlight class="comment">//<sp/>CF==0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/>kCondNE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x05,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZF==0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(signed/unsigned)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/>kCondNG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0E,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZF==1<sp/>|<sp/>SF!=OF<sp/>(signed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/>kCondNGE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0C,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SF!=OF<sp/>(signed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/>kCondNL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0D,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SF==OF<sp/>(signed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/>kCondNLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0F,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZF==0<sp/>&amp;<sp/>SF==OF<sp/>(signed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/>kCondNO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x01,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OF==0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/>kCondNP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0B,<sp/></highlight><highlight class="comment">//<sp/>PF==0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/>kCondNS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x09,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SF==0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/>kCondNZ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x05,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZF==0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/>kCondO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OF==1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/>kCondP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0A,<sp/></highlight><highlight class="comment">//<sp/>PF==1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/>kCondPE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0A,<sp/></highlight><highlight class="comment">//<sp/>PF==1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>kCondPO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0B,<sp/></highlight><highlight class="comment">//<sp/>PF==0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/>kCondS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x08,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SF==1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/>kCondZ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x04,<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ZF==1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Simplified<sp/>condition<sp/>codes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/>kCondOverflow<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x00,</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/>kCondNotOverflow<sp/><sp/><sp/><sp/><sp/>=<sp/>0x01,</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/>kCondBelow<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x02,<sp/></highlight><highlight class="comment">//<sp/>Unsigned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/>kCondAboveEqual<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x03,<sp/></highlight><highlight class="comment">//<sp/>Unsigned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/>kCondEqual<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x04,</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/>kCondNotEqual<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x05,</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/>kCondBelowEqual<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x06,<sp/></highlight><highlight class="comment">//<sp/>Unsigned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/>kCondAbove<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x07,<sp/></highlight><highlight class="comment">//<sp/>Unsigned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/>kCondSign<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x08,</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>kCondNotSign<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x09,</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/>kCondParityEven<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0A,</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/>kCondParityOdd<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0B,</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/>kCondLess<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0C,<sp/></highlight><highlight class="comment">//<sp/>Signed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/>kCondGreaterEqual<sp/><sp/><sp/><sp/>=<sp/>0x0D,<sp/></highlight><highlight class="comment">//<sp/>Signed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/>kCondLessEqual<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0E,<sp/></highlight><highlight class="comment">//<sp/>Signed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/>kCondGreater<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x0F,<sp/></highlight><highlight class="comment">//<sp/>Signed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Aliases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/>kCondZero<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x04,</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/>kCondNotZero<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x05,</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/>kCondNegative<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x08,</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/>kCondPositive<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x09,</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fpu-only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/>kCondFpuUnordered<sp/><sp/><sp/><sp/>=<sp/>0x10,</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/>kCondFpuNotUnordered<sp/>=<sp/>0x11,</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1862"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>No<sp/>condition<sp/>code.</highlight></codeline>
<codeline lineno="1863" refid="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba99bda6215f94e7c2257f592a5a85dac6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba99bda6215f94e7c2257f592a5a85dac6" kindref="member" tooltip="No condition code.">kCondNone</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x12</highlight></codeline>
<codeline lineno="1864"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kVarType]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1870"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>variable<sp/>type.</highlight></codeline>
<codeline lineno="1871" refid="group__asmjit__x86x64_1gac1cff950c5a6c4a09fa2807d40d6b74e" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1gac1cff950c5a6c4a09fa2807d40d6b74e" kindref="member" tooltip="X86/X64 variable type.">kVarType</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1872"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>Mm<sp/>(MMX).</highlight></codeline>
<codeline lineno="1873" refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref><sp/>=<sp/>12,</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1875"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>Xmm<sp/>(SSE/SSE2).</highlight></codeline>
<codeline lineno="1876" refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1877"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>SSE<sp/>scalar<sp/>SP-FP<sp/>number.</highlight></codeline>
<codeline lineno="1878" refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eafe32fe97cd94ed68f7e2cb12aa6d6798" kindref="member" tooltip="Variable is SSE scalar SP-FP number.">kVarTypeXmmSs</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1879"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>SSE<sp/>packed<sp/>SP-FP<sp/>number<sp/>(4<sp/>floats).</highlight></codeline>
<codeline lineno="1880" refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea1a070703e76a534a782475809b6a4b81" kindref="member" tooltip="Variable is SSE packed SP-FP number (4 floats).">kVarTypeXmmPs</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1881"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>SSE2<sp/>scalar<sp/>DP-FP<sp/>number.</highlight></codeline>
<codeline lineno="1882" refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea999b48f1d8f89fb8fc9be0f4c3ff15ea" kindref="member" tooltip="Variable is SSE2 scalar DP-FP number.">kVarTypeXmmSd</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1883"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>SSE2<sp/>packed<sp/>DP-FP<sp/>number<sp/>(2<sp/>doubles).</highlight></codeline>
<codeline lineno="1884" refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>,</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1886"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>Ymm<sp/>(AVX).</highlight></codeline>
<codeline lineno="1887" refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea63ec4833bed0aeaa88e1f41c7f45b86f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea63ec4833bed0aeaa88e1f41c7f45b86f" kindref="member" tooltip="Variable is Ymm (AVX).">kVarTypeYmm</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1888"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>AVX<sp/>packed<sp/>SP-FP<sp/>number<sp/>(8<sp/>floats).</highlight></codeline>
<codeline lineno="1889" refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea7af57e49bc6aae8806ce5d6e6eea51f3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea7af57e49bc6aae8806ce5d6e6eea51f3" kindref="member" tooltip="Variable is AVX packed SP-FP number (8 floats).">kVarTypeYmmPs</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1890"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>AVX<sp/>packed<sp/>DP-FP<sp/>number<sp/>(4<sp/>doubles).</highlight></codeline>
<codeline lineno="1891" refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaff3a02be54244818dfead89c641f1296" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaff3a02be54244818dfead89c641f1296" kindref="member" tooltip="Variable is AVX packed DP-FP number (4 doubles).">kVarTypeYmmPd</ref>,</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1893"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>variable<sp/>types.</highlight></codeline>
<codeline lineno="1894" refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>,</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1896"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1897"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>_kVarTypeMmStart<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1898"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1899"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>_kVarTypeMmEnd<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>,</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1901"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1902"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>_kVarTypeXmmStart<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1903"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1904"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>_kVarTypeXmmEnd<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea01cb1abd1560b349b2482bb4558da56b" kindref="member" tooltip="Variable is SSE2 packed DP-FP number (2 doubles).">kVarTypeXmmPd</ref>,</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1906"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1907"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>_kVarTypeYmmStart<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea63ec4833bed0aeaa88e1f41c7f45b86f" kindref="member" tooltip="Variable is Ymm (AVX).">kVarTypeYmm</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1908"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="1909"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>_kVarTypeYmmEnd<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaff3a02be54244818dfead89c641f1296" kindref="member" tooltip="Variable is AVX packed DP-FP number (4 doubles).">kVarTypeYmmPd</ref></highlight></codeline>
<codeline lineno="1910"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::kVarDesc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1916"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>variable<sp/>description.</highlight></codeline>
<codeline lineno="1917" refid="group__asmjit__x86x64_1ga790848a0ca69955866d99e8fefa0545d" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga790848a0ca69955866d99e8fefa0545d" kindref="member" tooltip="X86/X64 variable description.">kVarDesc</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1918"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>contains<sp/>single-precision<sp/>floating-point(s).</highlight></codeline>
<codeline lineno="1919" refid="group__asmjit__x86x64_1gga790848a0ca69955866d99e8fefa0545da19066ce2e0282086473a1400454d23a6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga790848a0ca69955866d99e8fefa0545da19066ce2e0282086473a1400454d23a6" kindref="member" tooltip="Variable contains single-precision floating-point(s).">kVarDescSp</ref><sp/>=<sp/>0x10,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1920"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>contains<sp/>double-precision<sp/>floating-point(s).</highlight></codeline>
<codeline lineno="1921" refid="group__asmjit__x86x64_1gga790848a0ca69955866d99e8fefa0545da21707bf740b999e0ae6a87c724373e7d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga790848a0ca69955866d99e8fefa0545da21707bf740b999e0ae6a87c724373e7d" kindref="member" tooltip="Variable contains double-precision floating-point(s).">kVarDescDp</ref><sp/>=<sp/>0x20,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1922"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>packed<sp/>(for<sp/>example<sp/>float4x,<sp/>double2x,<sp/>...).</highlight></codeline>
<codeline lineno="1923" refid="group__asmjit__x86x64_1gga790848a0ca69955866d99e8fefa0545da3404a571bc84eaeb4959c3d855574370" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__x86x64_1gga790848a0ca69955866d99e8fefa0545da3404a571bc84eaeb4959c3d855574370" kindref="member" tooltip="Variable is packed (for example float4x, double2x, ...).">kVarDescPacked</ref><sp/>=<sp/>0x40</highlight></codeline>
<codeline lineno="1924"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::InstInfo]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1930"><highlight class="comment">//!<sp/>@brief<sp/>X86<sp/>instruction<sp/>information.</highlight></codeline>
<codeline lineno="1931" refid="structasmjit_1_1x86x64_1_1InstInfo" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1InstInfo" kindref="compound" tooltip="X86 instruction information.">InstInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1936"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>instruction<sp/>name<sp/>string<sp/>(null<sp/>terminated<sp/>string).</highlight></codeline>
<codeline lineno="1937" refid="structasmjit_1_1x86x64_1_1InstInfo_1a0cc62ede78ecae0e7b34c4d2c33906f9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a0cc62ede78ecae0e7b34c4d2c33906f9" kindref="member" tooltip="Get instruction name string (null terminated string).">getName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_instName<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7b1f83af3648e84916ad807345c18e5e" kindref="member" tooltip="Instruction name index in _instName[] array.">_nameIndex</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1938"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>instruction<sp/>name<sp/>index<sp/>(index<sp/>to<sp/>@ref<sp/>_instName<sp/>array).</highlight></codeline>
<codeline lineno="1939" refid="structasmjit_1_1x86x64_1_1InstInfo_1ad6077b73f67625d56b3b6e1c5ecca58b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1ad6077b73f67625d56b3b6e1c5ecca58b" kindref="member" tooltip="Get instruction name index (index to _instName array).">_getNameIndex</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7b1f83af3648e84916ad807345c18e5e" kindref="member" tooltip="Instruction name index in _instName[] array.">_nameIndex</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1941"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>instruction<sp/>group,<sp/>see<sp/>@ref<sp/>kInstGroup.</highlight></codeline>
<codeline lineno="1942" refid="structasmjit_1_1x86x64_1_1InstInfo_1aab95b7afa47fa1e634a72a10a64b3aab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1aab95b7afa47fa1e634a72a10a64b3aab" kindref="member" tooltip="Get instruction group, see kInstGroup.">getGroup</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1ad2f06d22689c26bbde9ba22fe4273007" kindref="member" tooltip="Instruction group, used also by Compiler.">_group</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Flags]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1948"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>instruction<sp/>flags,<sp/>see<sp/>@ref<sp/>kInstFlags.</highlight></codeline>
<codeline lineno="1949" refid="structasmjit_1_1x86x64_1_1InstInfo_1ae204acb0871cb7346b88d5e5debf68d0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1ae204acb0871cb7346b88d5e5debf68d0" kindref="member" tooltip="Get instruction flags, see kInstFlags.">getFlags</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7434e17d8bbe8d87d662ac07563d0740" kindref="member" tooltip="Instruction flags.">_flags</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1951"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>is<sp/>a<sp/>control-flow<sp/>intruction.</highlight></codeline>
<codeline lineno="1952"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1953"><highlight class="comment"><sp/><sp/>//!<sp/>Control<sp/>flow<sp/>instruction<sp/>is<sp/>instruction<sp/>that<sp/>modifies<sp/>instruction<sp/>pointer,</highlight></codeline>
<codeline lineno="1954"><highlight class="comment"><sp/><sp/>//!<sp/>typically<sp/>jmp,<sp/>jcc,<sp/>call,<sp/>or<sp/>ret.</highlight></codeline>
<codeline lineno="1955" refid="structasmjit_1_1x86x64_1_1InstInfo_1a1f72e7c30fca39b57c3e83c8d1c64af9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a1f72e7c30fca39b57c3e83c8d1c64af9" kindref="member" tooltip="Get whether the instruction is a control-flow intruction.">isFlow</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7434e17d8bbe8d87d662ac07563d0740" kindref="member" tooltip="Instruction flags.">_flags</ref><sp/>&amp;<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37abc3da04810c61d0f9f981456459b98e7" kindref="member" tooltip="Instruction is a control-flow instruction.">kInstFlagFlow</ref>)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1957"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>is<sp/>a<sp/>compare/test<sp/>like<sp/>intruction.</highlight></codeline>
<codeline lineno="1958" refid="structasmjit_1_1x86x64_1_1InstInfo_1a776abb27d18ab6d6674e6dbc001231da" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a776abb27d18ab6d6674e6dbc001231da" kindref="member" tooltip="Get whether the instruction is a compare/test like intruction.">isTest</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7434e17d8bbe8d87d662ac07563d0740" kindref="member" tooltip="Instruction flags.">_flags</ref><sp/>&amp;<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad5cc42d5e26c67479525192d1f535565" kindref="member" tooltip="Instruction is a compare/test like instruction.">kInstFlagTest</ref>)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1960"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>is<sp/>a<sp/>typical<sp/>Move<sp/>instruction.</highlight></codeline>
<codeline lineno="1961"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1962"><highlight class="comment"><sp/><sp/>//!<sp/>Move<sp/>instructions<sp/>typically<sp/>overwrite<sp/>the<sp/>first<sp/>operand,<sp/>so<sp/>it&apos;s<sp/>an<sp/>useful</highlight></codeline>
<codeline lineno="1963"><highlight class="comment"><sp/><sp/>//!<sp/>hint<sp/>for<sp/>@ref<sp/>Compiler.<sp/>Applies<sp/>also<sp/>to<sp/>multimedia<sp/>instruction<sp/>-<sp/>MMX,</highlight></codeline>
<codeline lineno="1964"><highlight class="comment"><sp/><sp/>//!<sp/>SSE,<sp/>SSE2<sp/>and<sp/>AVX<sp/>moves).</highlight></codeline>
<codeline lineno="1965" refid="structasmjit_1_1x86x64_1_1InstInfo_1af52d13b8612aa6fb858548b213877fd9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1af52d13b8612aa6fb858548b213877fd9" kindref="member" tooltip="Get whether the instruction is a typical Move instruction.">isMove</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7434e17d8bbe8d87d662ac07563d0740" kindref="member" tooltip="Instruction flags.">_flags</ref><sp/>&amp;<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37ad4b9bd5ecfc722027dda933f907e75d2" kindref="member" tooltip="Instruction is a move like instruction.">kInstFlagMove</ref>)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1967"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>is<sp/>a<sp/>typical<sp/>Exchange<sp/>instruction.</highlight></codeline>
<codeline lineno="1968"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="1969"><highlight class="comment"><sp/><sp/>//!<sp/>Exchange<sp/>instructios<sp/>are<sp/>&apos;xchg&apos;<sp/>and<sp/>&apos;xadd&apos;.</highlight></codeline>
<codeline lineno="1970" refid="structasmjit_1_1x86x64_1_1InstInfo_1ac257f3fe1fdf9a4e3d4194163bcfc716" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1ac257f3fe1fdf9a4e3d4194163bcfc716" kindref="member" tooltip="Get whether the instruction is a typical Exchange instruction.">isXchg</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7434e17d8bbe8d87d662ac07563d0740" kindref="member" tooltip="Instruction flags.">_flags</ref><sp/>&amp;<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a8617892895dedb1ef0756edb525a3506" kindref="member" tooltip="Instruction is an exchange like instruction.">kInstFlagXchg</ref>)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1972"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>accesses<sp/>Fp<sp/>register(s).</highlight></codeline>
<codeline lineno="1973" refid="structasmjit_1_1x86x64_1_1InstInfo_1aaab680aba65c2820993368c2ab84c0d3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1aaab680aba65c2820993368c2ab84c0d3" kindref="member" tooltip="Get whether the instruction accesses Fp register(s).">isFp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7434e17d8bbe8d87d662ac07563d0740" kindref="member" tooltip="Instruction flags.">_flags</ref><sp/>&amp;<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a2a23c0346b187ccf4bdc2aca7325a686" kindref="member" tooltip="Instruction accesses Fp register(s).">kInstFlagFp</ref>)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1975"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>can<sp/>be<sp/>prefixed<sp/>by<sp/>LOCK<sp/>prefix.</highlight></codeline>
<codeline lineno="1976" refid="structasmjit_1_1x86x64_1_1InstInfo_1a6a04eaca12afe25152fc1b0809e9ccdd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a6a04eaca12afe25152fc1b0809e9ccdd" kindref="member" tooltip="Get whether the instruction can be prefixed by LOCK prefix.">isLockable</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7434e17d8bbe8d87d662ac07563d0740" kindref="member" tooltip="Instruction flags.">_flags</ref><sp/>&amp;<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a4bfda635ab02f27875c70fa0354a8646" kindref="member" tooltip="Instruction can be prefixed by using the LOCK prefix.">kInstFlagLock</ref>)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1978"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>is<sp/>special<sp/>type<sp/>(this<sp/>is<sp/>used<sp/>by</highlight></codeline>
<codeline lineno="1979"><highlight class="comment"><sp/><sp/>//!<sp/>@c<sp/>Compiler<sp/>to<sp/>manage<sp/>additional<sp/>variables<sp/>or<sp/>functionality).</highlight></codeline>
<codeline lineno="1980" refid="structasmjit_1_1x86x64_1_1InstInfo_1a872ece974575f350e3eb41fff9a0008f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a872ece974575f350e3eb41fff9a0008f" kindref="member" tooltip="Get whether the instruction is special type (this is used by Compiler to manage additional variables ...">isSpecial</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7434e17d8bbe8d87d662ac07563d0740" kindref="member" tooltip="Instruction flags.">_flags</ref><sp/>&amp;<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37aa399b956eb3582e0947d0b4a9d32e3af" kindref="member" tooltip="Instruction is special, this is for Compiler.">kInstFlagSpecial</ref>)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1982"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>instruction<sp/>is<sp/>special<sp/>type<sp/>and<sp/>it<sp/>performs</highlight></codeline>
<codeline lineno="1983"><highlight class="comment"><sp/><sp/>//!<sp/>memory<sp/>access.</highlight></codeline>
<codeline lineno="1984" refid="structasmjit_1_1x86x64_1_1InstInfo_1a8647a17ea50c3a5909da41cc1b9168c2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a8647a17ea50c3a5909da41cc1b9168c2" kindref="member" tooltip="Get whether the instruction is special type and it performs memory access.">isSpecialMem</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7434e17d8bbe8d87d662ac07563d0740" kindref="member" tooltip="Instruction flags.">_flags</ref><sp/>&amp;<sp/><ref refid="group__asmjit__x86x64_1gga9741e8a4cc904b35dc950570803abd37a67fb1f2dda6d618b99e7a9e45699a40e" kindref="member" tooltip="Instruction always performs memory access.">kInstFlagSpecialMem</ref>)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1990"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>name<sp/>index<sp/>in<sp/>_instName[]<sp/>array.</highlight></codeline>
<codeline lineno="1991" refid="structasmjit_1_1x86x64_1_1InstInfo_1a7b1f83af3648e84916ad807345c18e5e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7b1f83af3648e84916ad807345c18e5e" kindref="member" tooltip="Instruction name index in _instName[] array.">_nameIndex</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1992"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>flags.</highlight></codeline>
<codeline lineno="1993" refid="structasmjit_1_1x86x64_1_1InstInfo_1a7434e17d8bbe8d87d662ac07563d0740" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a7434e17d8bbe8d87d662ac07563d0740" kindref="member" tooltip="Instruction flags.">_flags</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1994"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Instruction<sp/>group,<sp/>used<sp/>also<sp/>by<sp/>@c<sp/>Compiler.</highlight></codeline>
<codeline lineno="1995" refid="structasmjit_1_1x86x64_1_1InstInfo_1ad2f06d22689c26bbde9ba22fe4273007" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1ad2f06d22689c26bbde9ba22fe4273007" kindref="member" tooltip="Instruction group, used also by Compiler.">_group</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1996"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reserved<sp/>for<sp/>future<sp/>use.</highlight></codeline>
<codeline lineno="1997" refid="structasmjit_1_1x86x64_1_1InstInfo_1ae9c6067766d4164e8a576a036e1261e6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1ae9c6067766d4164e8a576a036e1261e6" kindref="member" tooltip="Reserved for future use.">_reserved</ref>[3];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1998"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Operands&apos;<sp/>flags.</highlight></codeline>
<codeline lineno="1999" refid="structasmjit_1_1x86x64_1_1InstInfo_1a3097ac16cd2c97d8e903959cf9088eec" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a3097ac16cd2c97d8e903959cf9088eec" kindref="member" tooltip="Operands&amp;#39; flags.">_opFlags</ref>[4];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2000"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Primary<sp/>and<sp/>secondary<sp/>opcodes.</highlight></codeline>
<codeline lineno="2001" refid="structasmjit_1_1x86x64_1_1InstInfo_1a4c7addf2df6b9673d5f489b29bdd41e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1InstInfo_1a4c7addf2df6b9673d5f489b29bdd41e7" kindref="member" tooltip="Primary and secondary opcodes.">_opCode</ref>[2];</highlight></codeline>
<codeline lineno="2002"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::VarInfo]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2008"><highlight class="comment">//!<sp/>@brief<sp/>X86<sp/>variable<sp/>information.</highlight></codeline>
<codeline lineno="2009" refid="structasmjit_1_1x86x64_1_1VarInfo" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1VarInfo" kindref="compound" tooltip="X86 variable information.">VarInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Accessors]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2014"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>register<sp/>type,<sp/>see<sp/>@ref<sp/>kRegType.</highlight></codeline>
<codeline lineno="2015" refid="structasmjit_1_1x86x64_1_1VarInfo_1afec997af33bdf1f0cfe8f70c88ad658e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1afec997af33bdf1f0cfe8f70c88ad658e" kindref="member" tooltip="Get register type, see kRegType.">getReg</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a14455772ddba7fc4289b13811467f204" kindref="member" tooltip="Register type, see kRegType.">_reg</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2016"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>register<sp/>size<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="2017" refid="structasmjit_1_1x86x64_1_1VarInfo_1afcec061cf7244cc94749cf9c790c1542" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1afcec061cf7244cc94749cf9c790c1542" kindref="member" tooltip="Get register size in bytes.">getSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a2329c2f3ee23064fd571582d15c12334" kindref="member" tooltip="Register size in bytes.">_size</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2018"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>class,<sp/>see<sp/>@ref<sp/>kRegClass.</highlight></codeline>
<codeline lineno="2019" refid="structasmjit_1_1x86x64_1_1VarInfo_1a6dd256c61848d49c6a6c1f5c922c288b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a6dd256c61848d49c6a6c1f5c922c288b" kindref="member" tooltip="Get variable class, see kRegClass.">getClass</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1ad7903158aa295f72ffe9e999c8af3d5b" kindref="member" tooltip="Register class, see kRegClass.">_class</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2020"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>description,<sp/>see<sp/>@ref<sp/>kVarDesc.</highlight></codeline>
<codeline lineno="2021" refid="structasmjit_1_1x86x64_1_1VarInfo_1a0eef68d000250f2412625ea6870039a4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a0eef68d000250f2412625ea6870039a4" kindref="member" tooltip="Get variable description, see kVarDesc.">getDesc</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1af3d9db58cbc6b7070e857c45cb759937" kindref="member" tooltip="Variable flags, see kVarDesc.">_desc</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2022"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>variable<sp/>type<sp/>name.</highlight></codeline>
<codeline lineno="2023" refid="structasmjit_1_1x86x64_1_1VarInfo_1a36c5cac0597cde862204e9a54cb79ac5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a36c5cac0597cde862204e9a54cb79ac5" kindref="member" tooltip="Get variable type name.">getName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a70f1a141cf726966c994b5085759c62f" kindref="member" tooltip="Variable type name.">_name</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2029"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>type,<sp/>see<sp/>@ref<sp/>kRegType.</highlight></codeline>
<codeline lineno="2030" refid="structasmjit_1_1x86x64_1_1VarInfo_1a14455772ddba7fc4289b13811467f204" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a14455772ddba7fc4289b13811467f204" kindref="member" tooltip="Register type, see kRegType.">_reg</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2031"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>size<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="2032" refid="structasmjit_1_1x86x64_1_1VarInfo_1a2329c2f3ee23064fd571582d15c12334" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a2329c2f3ee23064fd571582d15c12334" kindref="member" tooltip="Register size in bytes.">_size</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2033"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>class,<sp/>see<sp/>@ref<sp/>kRegClass.</highlight></codeline>
<codeline lineno="2034" refid="structasmjit_1_1x86x64_1_1VarInfo_1ad7903158aa295f72ffe9e999c8af3d5b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1ad7903158aa295f72ffe9e999c8af3d5b" kindref="member" tooltip="Register class, see kRegClass.">_class</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2035"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>flags,<sp/>see<sp/>@ref<sp/>kVarDesc.</highlight></codeline>
<codeline lineno="2036" refid="structasmjit_1_1x86x64_1_1VarInfo_1af3d9db58cbc6b7070e857c45cb759937" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1af3d9db58cbc6b7070e857c45cb759937" kindref="member" tooltip="Variable flags, see kVarDesc.">_desc</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2037"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>type<sp/>name.</highlight></codeline>
<codeline lineno="2038" refid="structasmjit_1_1x86x64_1_1VarInfo_1a70f1a141cf726966c994b5085759c62f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a70f1a141cf726966c994b5085759c62f" kindref="member" tooltip="Variable type name.">_name</ref>[4];</highlight></codeline>
<codeline lineno="2039"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::RegCount]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2045"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>registers<sp/>count<sp/>(Gp,<sp/>Fp,<sp/>Mm,<sp/>Xmm).</highlight></codeline>
<codeline lineno="2046" refid="structasmjit_1_1x86x64_1_1RegCount" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1RegCount" kindref="compound" tooltip="X86/X64 registers count (Gp, Fp, Mm, Xmm).">RegCount</ref><sp/>{</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Zero]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"></highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset()<sp/>{</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/>_packed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Get]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(uint32_t<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(c<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba439b8f1c6f3216f72ccb85f90410f61b" kindref="member" tooltip="Count of X86/X64 register classes.">kRegClassCount</ref>);</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"></highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_regs[c];</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Set]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(uint32_t<sp/>c,<sp/>uint32_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(c<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba439b8f1c6f3216f72ccb85f90410f61b" kindref="member" tooltip="Count of X86/X64 register classes.">kRegClassCount</ref>);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(n<sp/>&lt;<sp/>0x100);</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>_regs[c]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n);</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Add]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(uint32_t<sp/>c,<sp/>uint32_t<sp/>n<sp/>=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(c<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1ggafa35b8475e40a1d0d2e0d1de442578eba439b8f1c6f3216f72ccb85f90410f61b" kindref="member" tooltip="Count of X86/X64 register classes.">kRegClassCount</ref>);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(n<sp/>&lt;<sp/>0x100);</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>_regs[c]<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(n);</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Misc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"></highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>makeIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1RegCount" kindref="compound" tooltip="X86/X64 registers count (Gp, Fp, Mm, Xmm).">RegCount</ref>&amp;<sp/>count)<sp/>{</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/>_regs[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/>_regs[1]<sp/>=<sp/>count._regs[0];</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/>_regs[2]<sp/>=<sp/>count._regs[1];</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/>_regs[3]<sp/>=<sp/>count._regs[2];</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>_regs[2]<sp/>+=<sp/>_regs[1];</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/>_regs[3]<sp/>+=<sp/>_regs[2];</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>_gp;</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>_fp;</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>_mm;</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>_xy;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"></highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>_regs[4];</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>_packed;</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::RegMask]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2122"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>registers<sp/>mask<sp/>(Gp,<sp/>Fp,<sp/>Mm,<sp/>Xmm/Ymm/Zmm).</highlight></codeline>
<codeline lineno="2123" refid="structasmjit_1_1x86x64_1_1RegMask" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref><sp/>{</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Zero]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"></highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>zero(uint32_t<sp/>c)</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.u16[c]<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Get]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"></highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">(uint32_t<sp/>c)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.u16[c];<sp/>}</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Set]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2141"><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(uint32_t<sp/>c,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.u16[c]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mask);<sp/>}</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"></highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.setUInt64(other._packed);<sp/>}</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"></highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Add]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(uint32_t<sp/>c,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.u16[c]<sp/>|=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mask);<sp/>}</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"></highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.or_(other.<ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>);<sp/>}</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Del]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2161"><highlight class="normal"></highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>del(uint32_t<sp/>c,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.u16[c]<sp/>&amp;=<sp/>~static_cast&lt;uint16_t&gt;(mask);<sp/>}</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>del(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.del(other.<ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>);<sp/>}</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[And]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>and_(uint32_t<sp/>c,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.u16[c]<sp/>&amp;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mask);<sp/>}</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>and_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.and_(other.<ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>);<sp/>}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"></highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Xor]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>xor_(uint32_t<sp/>c,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.u16[c]<sp/>^=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mask);<sp/>}</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>xor_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask" kindref="compound" tooltip="X86/X64 registers mask (Gp, Fp, Mm, Xmm/Ymm/Zmm).">RegMask</ref>&amp;<sp/>other)</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.xor_(other.<ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>);<sp/>}</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[IsEmpty<sp/>/<sp/>Has]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isEmpty()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2193"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.isZero();<sp/>}</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has(uint32_t<sp/>c,<sp/>uint32_t<sp/>mask<sp/>=<sp/>0xFFFFFFFF)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2196"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(static_cast&lt;uint32_t&gt;(<ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.u16[c])<sp/>&amp;<sp/>mask)<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"></highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Reset]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>reset()</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/>{<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>.reset();<sp/>}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Gp<sp/>registers<sp/>mask.</highlight></codeline>
<codeline lineno="2212" refid="structasmjit_1_1x86x64_1_1RegMask_1ae42808d7d65f570024fba8828a1051ab" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1ae42808d7d65f570024fba8828a1051ab" kindref="member" tooltip="Gp registers mask.">_gp</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Fp<sp/>registers<sp/>mask.</highlight></codeline>
<codeline lineno="2214" refid="structasmjit_1_1x86x64_1_1RegMask_1a796df891de1f5a62afa3faf220244093" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a796df891de1f5a62afa3faf220244093" kindref="member" tooltip="Fp registers mask.">_fp</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Mm<sp/>registers<sp/>mask.</highlight></codeline>
<codeline lineno="2216" refid="structasmjit_1_1x86x64_1_1RegMask_1a103d076aefe827176bb2fdfa89e991b5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a103d076aefe827176bb2fdfa89e991b5" kindref="member" tooltip="Mm registers mask.">_mm</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Xmm/Ymm<sp/>registers<sp/>mask.</highlight></codeline>
<codeline lineno="2218" refid="structasmjit_1_1x86x64_1_1RegMask_1acfc31c3b3758ff04f783e59c6f1fd85c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1acfc31c3b3758ff04f783e59c6f1fd85c" kindref="member" tooltip="Xmm/Ymm registers mask.">_xy</ref>;</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>_regs[4];</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2223"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>All<sp/>masks<sp/>as<sp/>64-bit<sp/>integer.</highlight></codeline>
<codeline lineno="2224" refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>UInt64<sp/><ref refid="structasmjit_1_1x86x64_1_1RegMask_1a72abab8d4c4711cb9bbf8fd83f81d3df" kindref="member" tooltip="All masks as 64-bit integer.">_packed</ref>;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="2226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"></highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86Reg]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2232"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>register.</highlight></codeline>
<codeline lineno="2233" refid="structasmjit_1_1x86x64_1_1X86Reg" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseReg" kindref="compound" tooltip="Base class for all register operands.">BaseReg</ref><sp/>{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2238"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>dummy<sp/>X86<sp/>register.</highlight></codeline>
<codeline lineno="2239" refid="structasmjit_1_1x86x64_1_1X86Reg_1a4f7f6de0e5b0f66a5ec9dc6caac9831d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1a4f7f6de0e5b0f66a5ec9dc6caac9831d" kindref="member" tooltip="Create a dummy X86 register.">X86Reg</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1BaseReg" kindref="compound" tooltip="Base class for all register operands.">BaseReg</ref>()<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2240"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>X86<sp/>register.</highlight></codeline>
<codeline lineno="2241" refid="structasmjit_1_1x86x64_1_1X86Reg_1a5f2bde0ddd221579a8e366a79fbd965e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1a5f2bde0ddd221579a8e366a79fbd965e" kindref="member" tooltip="Create a custom X86 register.">X86Reg</ref>(uint32_t<sp/>type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1BaseReg" kindref="compound" tooltip="Base class for all register operands.">BaseReg</ref>(type,<sp/>index,<sp/>size)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2242"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>reference<sp/>to<sp/>@a<sp/>other<sp/>X86<sp/>register.</highlight></codeline>
<codeline lineno="2243" refid="structasmjit_1_1x86x64_1_1X86Reg_1af1a7e6f07dc514c7dca73b3a2c56ad4c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1af1a7e6f07dc514c7dca73b3a2c56ad4c" kindref="member" tooltip="Create a reference to other X86 register.">X86Reg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1BaseReg" kindref="compound" tooltip="Base class for all register operands.">BaseReg</ref>(other)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2244"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>non-initialized<sp/>X86<sp/>register.</highlight></codeline>
<codeline lineno="2245" refid="structasmjit_1_1x86x64_1_1X86Reg_1acc1b7082c7e362694ad8417e178ebc37" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1acc1b7082c7e362694ad8417e178ebc37" kindref="member" tooltip="Create non-initialized X86 register.">X86Reg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1BaseReg" kindref="compound" tooltip="Base class for all register operands.">BaseReg</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"></highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[X86Reg<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight></codeline>
<codeline lineno="2251" refid="structasmjit_1_1x86x64_1_1X86Reg_1af5d31f3e427f029ca2c0d4a1bcc66d20" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_REG_OP(<ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>)</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"></highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>Gp<sp/>register.</highlight></codeline>
<codeline lineno="2254" refid="structasmjit_1_1x86x64_1_1X86Reg_1af69aa96e91bd55e12429809b73bf403e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1af69aa96e91bd55e12429809b73bf403e" kindref="member" tooltip="Get whether the register is Gp register.">isGp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>&lt;=<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2255"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>Gp<sp/>byte<sp/>(8-bit)<sp/>register.</highlight></codeline>
<codeline lineno="2256" refid="structasmjit_1_1x86x64_1_1X86Reg_1aa9836fe8c258fdec6873a417f87d851b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1aa9836fe8c258fdec6873a417f87d851b" kindref="member" tooltip="Get whether the register is Gp byte (8-bit) register.">isGpb</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>&lt;=<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa6e8dd55fd3b4ef24cd301f03b3d7257d" kindref="member" tooltip="Gpb-hi register (AH, BH, CH, DH only).">kRegTypeGpbHi</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2257"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>Gp<sp/>lo-byte<sp/>(8-bit)<sp/>register.</highlight></codeline>
<codeline lineno="2258" refid="structasmjit_1_1x86x64_1_1X86Reg_1aca41b6aa2ed2077c6ac4f5b37b71f4b9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1aca41b6aa2ed2077c6ac4f5b37b71f4b9" kindref="member" tooltip="Get whether the register is Gp lo-byte (8-bit) register.">isGpbLo</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" kindref="member" tooltip="Gpb-lo register (AL, BL, CL, DL, ...).">kRegTypeGpbLo</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2259"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>Gp<sp/>hi-byte<sp/>(8-bit)<sp/>register.</highlight></codeline>
<codeline lineno="2260" refid="structasmjit_1_1x86x64_1_1X86Reg_1a7fe3282f69bb5cdcca2f5034f43daa85" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1a7fe3282f69bb5cdcca2f5034f43daa85" kindref="member" tooltip="Get whether the register is Gp hi-byte (8-bit) register.">isGpbHi</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa6e8dd55fd3b4ef24cd301f03b3d7257d" kindref="member" tooltip="Gpb-hi register (AH, BH, CH, DH only).">kRegTypeGpbHi</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2261"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>Gp<sp/>word<sp/>(16-bit)<sp/>register.</highlight></codeline>
<codeline lineno="2262" refid="structasmjit_1_1x86x64_1_1X86Reg_1a9a6929318d96ce3cd48d95872cba93e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1a9a6929318d96ce3cd48d95872cba93e7" kindref="member" tooltip="Get whether the register is Gp word (16-bit) register.">isGpw</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7088b937cbaa2114610046a308697d2e" kindref="member" tooltip="Gpw register.">kRegTypeGpw</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2263"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>Gp<sp/>dword<sp/>(32-bit)<sp/>register.</highlight></codeline>
<codeline lineno="2264" refid="structasmjit_1_1x86x64_1_1X86Reg_1a46af8e191b37e139c3142fcb20d79b2b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1a46af8e191b37e139c3142fcb20d79b2b" kindref="member" tooltip="Get whether the register is Gp dword (32-bit) register.">isGpd</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2265"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>Gp<sp/>qword<sp/>(64-bit)<sp/>register.</highlight></codeline>
<codeline lineno="2266" refid="structasmjit_1_1x86x64_1_1X86Reg_1aecb5751b7449f979d36cf758988b9ef9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1aecb5751b7449f979d36cf758988b9ef9" kindref="member" tooltip="Get whether the register is Gp qword (64-bit) register.">isGpq</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2268"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="2269" refid="structasmjit_1_1x86x64_1_1X86Reg_1a22c10609c14f0489d555d222bde9423a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1a22c10609c14f0489d555d222bde9423a" kindref="member" tooltip="Get whether the register is Fp register.">isFp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efad8dab38a7bb9b84c468bdac1022c6a00" kindref="member" tooltip="Fp register.">kRegTypeFp</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2270"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>Mm<sp/>(64-bit)<sp/>register.</highlight></codeline>
<codeline lineno="2271" refid="structasmjit_1_1x86x64_1_1X86Reg_1ac268e91fa0acfc5de86184bbd82aea86" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1ac268e91fa0acfc5de86184bbd82aea86" kindref="member" tooltip="Get whether the register is Mm (64-bit) register.">isMm</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa9a46e468cd5c58fac3670afc952eb814" kindref="member" tooltip="Mm register.">kRegTypeMm</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2272"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>Xmm<sp/>(128-bit)<sp/>register.</highlight></codeline>
<codeline lineno="2273" refid="structasmjit_1_1x86x64_1_1X86Reg_1a7933e03def4e3c23dc93181c1a67869c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1a7933e03def4e3c23dc93181c1a67869c" kindref="member" tooltip="Get whether the register is Xmm (128-bit) register.">isXmm</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaacea326fc6b0daaa36cc5e706d6656a5" kindref="member" tooltip="Xmm register.">kRegTypeXmm</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2274"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>Ymm<sp/>(256-bit)<sp/>register.</highlight></codeline>
<codeline lineno="2275" refid="structasmjit_1_1x86x64_1_1X86Reg_1a6b6c9a78b996edbc65eafc32e9b91381" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1a6b6c9a78b996edbc65eafc32e9b91381" kindref="member" tooltip="Get whether the register is Ymm (256-bit) register.">isYmm</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa962f5931b1817196fa1c7bd908e02fbd" kindref="member" tooltip="Ymm register.">kRegTypeYmm</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2277"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>register<sp/>is<sp/>a<sp/>segment.</highlight></codeline>
<codeline lineno="2278" refid="structasmjit_1_1x86x64_1_1X86Reg_1a4967002883418cc5f91641941b4c13e2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg_1a4967002883418cc5f91641941b4c13e2" kindref="member" tooltip="Get whether the register is a segment.">isSeg</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa75716d897e72ab0aee0b6bcdc3cde8d8" kindref="member" tooltip="Segment register.">kRegTypeSeg</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2279"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::GpReg]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2285"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>Gpb/Gpw/Gpd/Gpq<sp/>register.</highlight></codeline>
<codeline lineno="2286" refid="structasmjit_1_1x86x64_1_1GpReg" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref><sp/>{</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2291"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>dummy<sp/>Gp<sp/>register.</highlight></codeline>
<codeline lineno="2292" refid="structasmjit_1_1x86x64_1_1GpReg_1adeff3d47939562f8780e28aa1d1df56d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg_1adeff3d47939562f8780e28aa1d1df56d" kindref="member" tooltip="Create a dummy Gp register.">GpReg</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>()<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2293"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>reference<sp/>to<sp/>@a<sp/>other<sp/>Gp<sp/>register.</highlight></codeline>
<codeline lineno="2294" refid="structasmjit_1_1x86x64_1_1GpReg_1a299414c931b5f8ccc2adef44fa6639f6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg_1a299414c931b5f8ccc2adef44fa6639f6" kindref="member" tooltip="Create a reference to other Gp register.">GpReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(other)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2295"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>Gp<sp/>register.</highlight></codeline>
<codeline lineno="2296" refid="structasmjit_1_1x86x64_1_1GpReg_1a8a788ab33556b759a165c636d805adbe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg_1a8a788ab33556b759a165c636d805adbe" kindref="member" tooltip="Create a custom Gp register.">GpReg</ref>(uint32_t<sp/>type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(type,<sp/>index,<sp/>size)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2297"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>non-initialized<sp/>Gp<sp/>register.</highlight></codeline>
<codeline lineno="2298" refid="structasmjit_1_1x86x64_1_1GpReg_1afb6d48a58ecbde6813dd90d213419d5a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg_1afb6d48a58ecbde6813dd90d213419d5a" kindref="member" tooltip="Create non-initialized Gp register.">GpReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[GpReg<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303"><highlight class="normal"></highlight></codeline>
<codeline lineno="2304" refid="structasmjit_1_1x86x64_1_1GpReg_1af4cc0c20e5ec732b55f40501be077b96" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_REG_OP(<ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>)</highlight></codeline>
<codeline lineno="2305"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::FpReg]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2311"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>80-bit<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="2312" refid="structasmjit_1_1x86x64_1_1FpReg" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound" tooltip="X86/X64 80-bit Fp register.">FpReg</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref><sp/>{</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2317"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>dummy<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="2318" refid="structasmjit_1_1x86x64_1_1FpReg_1aa41caf3e4179450a069acbbae385abdf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1FpReg_1aa41caf3e4179450a069acbbae385abdf" kindref="member" tooltip="Create a dummy Fp register.">FpReg</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>()<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2319"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>reference<sp/>to<sp/>@a<sp/>other<sp/>FPU<sp/>register.</highlight></codeline>
<codeline lineno="2320" refid="structasmjit_1_1x86x64_1_1FpReg_1ab4b9716c525d1ad976f6564d7908c78f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1FpReg_1ab4b9716c525d1ad976f6564d7908c78f" kindref="member" tooltip="Create a reference to other FPU register.">FpReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound" tooltip="X86/X64 80-bit Fp register.">FpReg</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(other)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2321"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="2322" refid="structasmjit_1_1x86x64_1_1FpReg_1acb7d2b04130893751c40d28ffddc7d59" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1FpReg_1acb7d2b04130893751c40d28ffddc7d59" kindref="member" tooltip="Create a custom Fp register.">FpReg</ref>(uint32_t<sp/>type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(type,<sp/>index,<sp/>size)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2323"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>non-initialized<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="2324" refid="structasmjit_1_1x86x64_1_1FpReg_1a60b11d46df7dfe3b1b17a60b5c80fa0d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1FpReg_1a60b11d46df7dfe3b1b17a60b5c80fa0d" kindref="member" tooltip="Create non-initialized Fp register.">FpReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[FpReg<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight></codeline>
<codeline lineno="2330" refid="structasmjit_1_1x86x64_1_1FpReg_1ae5e0e90d5bdbf07d4cbcdca4392c458a" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_REG_OP(<ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound" tooltip="X86/X64 80-bit Fp register.">FpReg</ref>)</highlight></codeline>
<codeline lineno="2331"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::MmReg]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2337"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>64-bit<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="2338" refid="structasmjit_1_1x86x64_1_1MmReg" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound" tooltip="X86/X64 64-bit Mm register.">MmReg</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref><sp/>{</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2343"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>dummy<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="2344" refid="structasmjit_1_1x86x64_1_1MmReg_1a13cd6007719cab632b2df4fa23ac2d20" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmReg_1a13cd6007719cab632b2df4fa23ac2d20" kindref="member" tooltip="Create a dummy Mm register.">MmReg</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>()<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2345"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>reference<sp/>to<sp/>@a<sp/>other<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="2346" refid="structasmjit_1_1x86x64_1_1MmReg_1a06ba578ff93678a2f71dac66488919d5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmReg_1a06ba578ff93678a2f71dac66488919d5" kindref="member" tooltip="Create a reference to other Mm register.">MmReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound" tooltip="X86/X64 64-bit Mm register.">MmReg</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(other)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2347"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="2348" refid="structasmjit_1_1x86x64_1_1MmReg_1add2c190428f555d026daa547196b97d4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmReg_1add2c190428f555d026daa547196b97d4" kindref="member" tooltip="Create a custom Mm register.">MmReg</ref>(uint32_t<sp/>type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(type,<sp/>index,<sp/>size)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2349"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>non-initialized<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="2350" refid="structasmjit_1_1x86x64_1_1MmReg_1a3b545c0020f77aef02eef3567b033854" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmReg_1a3b545c0020f77aef02eef3567b033854" kindref="member" tooltip="Create non-initialized Mm register.">MmReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[MmReg<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356" refid="structasmjit_1_1x86x64_1_1MmReg_1a130df763b02b7d9d27036a555f300929" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_REG_OP(<ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound" tooltip="X86/X64 64-bit Mm register.">MmReg</ref>)</highlight></codeline>
<codeline lineno="2357"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::XmmReg]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2363"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>128-bit<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="2364" refid="structasmjit_1_1x86x64_1_1XmmReg" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref><sp/>{</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2369"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>dummy<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="2370" refid="structasmjit_1_1x86x64_1_1XmmReg_1a3be9c3d4ccb14130fc20d22021f96532" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg_1a3be9c3d4ccb14130fc20d22021f96532" kindref="member" tooltip="Create a dummy Xmm register.">XmmReg</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>()<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2371"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>reference<sp/>to<sp/>@a<sp/>other<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="2372" refid="structasmjit_1_1x86x64_1_1XmmReg_1a953caaa40133011aad5482e42a2db880" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg_1a953caaa40133011aad5482e42a2db880" kindref="member" tooltip="Create a reference to other Xmm register.">XmmReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(other)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2373"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="2374" refid="structasmjit_1_1x86x64_1_1XmmReg_1af454b65f4143e0032c7a84f92ffd721c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg_1af454b65f4143e0032c7a84f92ffd721c" kindref="member" tooltip="Create a custom Xmm register.">XmmReg</ref>(uint32_t<sp/>type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(type,<sp/>index,<sp/>size)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2375"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>non-initialized<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="2376" refid="structasmjit_1_1x86x64_1_1XmmReg_1a319fae5df8d30d3b618c98ca15015347" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg_1a319fae5df8d30d3b618c98ca15015347" kindref="member" tooltip="Create non-initialized Xmm register.">XmmReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[XmmReg<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"></highlight></codeline>
<codeline lineno="2382" refid="structasmjit_1_1x86x64_1_1XmmReg_1a7fbb8cac555ea5f28deb6d77bff786bf" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_REG_OP(<ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>)</highlight></codeline>
<codeline lineno="2383"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::YmmReg]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2389"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>256-bit<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="2390" refid="structasmjit_1_1x86x64_1_1YmmReg" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref><sp/>{</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2395"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>dummy<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="2396" refid="structasmjit_1_1x86x64_1_1YmmReg_1acc9282c3774cf9012f6a6ec4a1ec0a44" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg_1acc9282c3774cf9012f6a6ec4a1ec0a44" kindref="member" tooltip="Create a dummy Ymm register.">YmmReg</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>()<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2397"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>reference<sp/>to<sp/>@a<sp/>other<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="2398" refid="structasmjit_1_1x86x64_1_1YmmReg_1a737cef6fb21ff8cb1afc7adc7eec80a9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg_1a737cef6fb21ff8cb1afc7adc7eec80a9" kindref="member" tooltip="Create a reference to other Xmm register.">YmmReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(other)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2399"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="2400" refid="structasmjit_1_1x86x64_1_1YmmReg_1a85fefa78cc2e8d67c73542d30462c306" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg_1a85fefa78cc2e8d67c73542d30462c306" kindref="member" tooltip="Create a custom Ymm register.">YmmReg</ref>(uint32_t<sp/>type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(type,<sp/>index,<sp/>size)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2401"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>non-initialized<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="2402" refid="structasmjit_1_1x86x64_1_1YmmReg_1a6f06eaa6d5d93f91e665db477ac65a6f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg_1a6f06eaa6d5d93f91e665db477ac65a6f" kindref="member" tooltip="Create non-initialized Ymm register.">YmmReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[YmmReg<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"></highlight></codeline>
<codeline lineno="2408" refid="structasmjit_1_1x86x64_1_1YmmReg_1afdd1a7f9cfeec322d618fbeeb43030c2" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_REG_OP(<ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>)</highlight></codeline>
<codeline lineno="2409"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::SegReg]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2415"><highlight class="comment">//!<sp/>@brief<sp/>X86/X64<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="2416" refid="structasmjit_1_1x86x64_1_1SegReg" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref><sp/>{</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2421"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>dummy<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="2422" refid="structasmjit_1_1x86x64_1_1SegReg_1aa046948fcda904ac26198d1d165c42e5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg_1aa046948fcda904ac26198d1d165c42e5" kindref="member" tooltip="Create a dummy segment register.">SegReg</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>()<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2423"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>reference<sp/>to<sp/>@a<sp/>other<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="2424" refid="structasmjit_1_1x86x64_1_1SegReg_1aab7f0c19a2e58ddfa3820cc4db0e670c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg_1aab7f0c19a2e58ddfa3820cc4db0e670c" kindref="member" tooltip="Create a reference to other segment register.">SegReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(other)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2425"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="2426" refid="structasmjit_1_1x86x64_1_1SegReg_1ac70bdcdd1b08f848617046aab42b9a8c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg_1ac70bdcdd1b08f848617046aab42b9a8c" kindref="member" tooltip="Create a custom segment register.">SegReg</ref>(uint32_t<sp/>type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(type,<sp/>index,<sp/>size)<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2427"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>non-initialized<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="2428" refid="structasmjit_1_1x86x64_1_1SegReg_1aea0cf5e3364acf8deb01021bf60e9371" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg_1aea0cf5e3364acf8deb01021bf60e9371" kindref="member" tooltip="Create non-initialized segment register.">SegReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Reg" kindref="compound" tooltip="X86/X64 register.">X86Reg</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[SegReg<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight></codeline>
<codeline lineno="2434" refid="structasmjit_1_1x86x64_1_1SegReg_1a9107d7eacd9d8f5818517a7ba7a27520" refkind="member"><highlight class="normal"><sp/><sp/>ASMJIT_REG_OP(<ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref>)</highlight></codeline>
<codeline lineno="2435"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Mem]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_OP_ID(_Op_)<sp/>reinterpret_cast&lt;const<sp/>Operand&amp;&gt;(_Op_).getId()</highlight></codeline>
<codeline lineno="2442"><highlight class="preprocessor"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2443"><highlight class="comment">//!<sp/>@brief<sp/>X86<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="2444" refid="structasmjit_1_1x86x64_1_1Mem" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref><sp/>{</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound" tooltip="X86 memory operand.">Mem</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a619335ac552f50e506d4c3f5cec34ac1" kindref="member" tooltip="Reset Mem operand.">reset</ref>();</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7cae82bd56fa0b87db8b547e91bd69ac096" kindref="member" tooltip="Memory operand refers to the memory location specified by a label.">kMemTypeLabel</ref>,<sp/>0,<sp/>label.<ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.id);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_d2_d3(<ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>,<sp/>disp);</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(shift<sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7cae82bd56fa0b87db8b547e91bd69ac096" kindref="member" tooltip="Memory operand refers to the memory location specified by a label.">kMemTypeLabel</ref>,</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" kindref="member" tooltip="Memory operand uses Gp or no index register.">kMemVSibGpz</ref><sp/>&lt;&lt;<sp/>kMemVSibIndex)</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(shift<sp/>&lt;&lt;<sp/>kMemShiftIndex),</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>label.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>());</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>index.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>();</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(shift<sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"></highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7cae82bd56fa0b87db8b547e91bd69ac096" kindref="member" tooltip="Memory operand refers to the memory location specified by a label.">kMemTypeLabel</ref>,</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" kindref="member" tooltip="Memory operand uses Gp or no index register.">kMemVSibGpz</ref><sp/>&lt;&lt;<sp/>kMemVSibIndex)</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(shift<sp/>&lt;&lt;<sp/>kMemShiftIndex),</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>label.<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>());</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>_OP_ID(index);</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>,</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_getGpdFlags(base)</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" kindref="member" tooltip="Memory operand uses Gp or no index register.">kMemVSibGpz</ref><sp/>&lt;&lt;<sp/>kMemVSibIndex),</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>());</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_d2_d3(<ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>,<sp/>disp);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(shift<sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>,</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_getGpdFlags(base)<sp/>+<sp/>(shift<sp/>&lt;&lt;<sp/>kMemShiftIndex),</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>());</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>index.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>();</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(shift<sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>,</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_getGpdFlags(base)</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1afa311617da5fb69bb65ee3b8d1488251" kindref="member" tooltip="Memory operand uses Xmm or no index register.">kMemVSibXmm</ref><sp/>&lt;&lt;<sp/>kMemVSibIndex)</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(shift<sp/>&lt;&lt;<sp/>kMemShiftIndex),</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>());</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>index.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>();</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"></highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(shift<sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"></highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>,</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_getGpdFlags(base)</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1a7aecfb975b3f5e594e2a9ee86cba691d" kindref="member" tooltip="Memory operand uses Ymm or no index register.">kMemVSibYmm</ref><sp/>&lt;&lt;<sp/>kMemVSibIndex)</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(shift<sp/>&lt;&lt;<sp/>kMemShiftIndex),</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>());</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>index.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>();</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>,</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_getGpdFlags(reinterpret_cast&lt;const<sp/>BaseVar&amp;&gt;(base))</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" kindref="member" tooltip="Memory operand uses Gp or no index register.">kMemVSibGpz</ref><sp/>&lt;&lt;<sp/>kMemVSibIndex),</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_OP_ID(base));</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_d2_d3(<ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>,<sp/>disp);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"></highlight></codeline>
<codeline lineno="2530"><highlight class="normal"></highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(shift<sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"></highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>,</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_getGpdFlags(reinterpret_cast&lt;const<sp/>BaseVar&amp;&gt;(base))</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(shift<sp/>&lt;&lt;<sp/>kMemShiftIndex),</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_OP_ID(base));</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>_OP_ID(index);</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"></highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(shift<sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>,</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_getGpdFlags(reinterpret_cast&lt;const<sp/>BaseVar&amp;&gt;(base))</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1afa311617da5fb69bb65ee3b8d1488251" kindref="member" tooltip="Memory operand uses Xmm or no index register.">kMemVSibXmm</ref><sp/>&lt;&lt;<sp/>kMemVSibIndex)</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(shift<sp/>&lt;&lt;<sp/>kMemShiftIndex),</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_OP_ID(base));</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>_OP_ID(index);</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"></highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(shift<sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>,</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_getGpdFlags(reinterpret_cast&lt;const<sp/>BaseVar&amp;&gt;(base))</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1a7aecfb975b3f5e594e2a9ee86cba691d" kindref="member" tooltip="Memory operand uses Ymm or no index register.">kMemVSibYmm</ref><sp/>&lt;&lt;<sp/>kMemVSibIndex)</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>(shift<sp/>&lt;&lt;<sp/>kMemShiftIndex),</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_OP_ID(base));</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>_OP_ID(index);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_Init&amp;,<sp/>uint32_t<sp/>memType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var" kindref="compound" tooltip="Base class for all variables.">X86Var</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/>memType,<sp/>0,<sp/>_OP_ID(base));</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>;</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"></highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_Init&amp;,<sp/>uint32_t<sp/>memType,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var" kindref="compound" tooltip="Base class for all variables.">X86Var</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(shift<sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/>memType,<sp/>shift<sp/>&lt;&lt;<sp/>kMemShiftIndex,<sp/>_OP_ID(base));</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>_OP_ID(index);</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mem&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Mem<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2587"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>Mem<sp/>operand.</highlight></codeline>
<codeline lineno="2588" refid="structasmjit_1_1x86x64_1_1Mem_1a3f4a12b20dfa2198dc44a330a70ec522" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a3f4a12b20dfa2198dc44a330a70ec522" kindref="member" tooltip="Clone Mem operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2592"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>Mem<sp/>operand.</highlight></codeline>
<codeline lineno="2593" refid="structasmjit_1_1x86x64_1_1Mem_1a619335ac552f50e506d4c3f5cec34ac1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a619335ac552f50e506d4c3f5cec34ac1" kindref="member" tooltip="Reset Mem operand.">reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>0,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>,<sp/>0,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_d2_d3(<ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2598"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="2599"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_init(uint32_t<sp/>memType,<sp/>uint32_t<sp/>base,<sp/>int32_t<sp/>disp,<sp/>uint32_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>size,<sp/>memType,<sp/>0,<sp/>base);</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"></highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Segment]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2609"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>memory<sp/>operand<sp/>has<sp/>segment<sp/>override<sp/>prefix.</highlight></codeline>
<codeline lineno="2610" refid="structasmjit_1_1x86x64_1_1Mem_1a56c1fd5f447aa30d49230f0c2d0d1a39" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a56c1fd5f447aa30d49230f0c2d0d1a39" kindref="member" tooltip="Get whether the memory operand has segment override prefix.">hasSegment</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.flags<sp/>&amp;<sp/>kMemSegMask)<sp/>!=<sp/>(<ref refid="group__asmjit__x86x64_1gga4f85c6db0bbcbba6cfd2e06f3318dd64a6dfbfee0e2063f5623c892e4b1eb40f2" kindref="member" tooltip="No segment.">kSegDefault</ref><sp/>&lt;&lt;<sp/>kMemSegIndex);</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2614"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>memory<sp/>operand<sp/>segment,<sp/>see<sp/>@c<sp/>kSeg.</highlight></codeline>
<codeline lineno="2615" refid="structasmjit_1_1x86x64_1_1Mem_1a80d691dfc02c2c2087f3f808dd6b2ea3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a80d691dfc02c2c2087f3f808dd6b2ea3" kindref="member" tooltip="Get memory operand segment, see kSeg.">getSegment</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(static_cast&lt;uint32_t&gt;(<ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.flags)<sp/>&gt;&gt;<sp/>kMemSegIndex)<sp/>&amp;<sp/>kMemSegBits;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2619"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>operand<sp/>segment,<sp/>see<sp/>@c<sp/>kSeg.</highlight></codeline>
<codeline lineno="2620" refid="structasmjit_1_1x86x64_1_1Mem_1a2177b2dfe09f478b2e26af4ace7a029f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a2177b2dfe09f478b2e26af4ace7a029f" kindref="member" tooltip="Set memory operand segment, see kSeg.">setSegment</ref>(uint32_t<sp/>segIndex)<sp/>{</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.flags<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.flags)<sp/>&amp;<sp/>kMemSegMask)<sp/>+<sp/>(segIndex<sp/>&lt;&lt;<sp/>kMemSegIndex));</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2626"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>operand<sp/>segment,<sp/>see<sp/>@c<sp/>kSeg.</highlight></codeline>
<codeline lineno="2627" refid="structasmjit_1_1x86x64_1_1Mem_1a7d373b61f3648f54e8508a13eeb18c9d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a7d373b61f3648f54e8508a13eeb18c9d" kindref="member" tooltip="Set memory operand segment, see kSeg.">setSegment</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound" tooltip="X86/X64 segment register.">SegReg</ref>&amp;<sp/>seg)<sp/>{</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a2177b2dfe09f478b2e26af4ace7a029f" kindref="member" tooltip="Set memory operand segment, see kSeg.">setSegment</ref>(seg.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>());</highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"></highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Gpd]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2635"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>memory<sp/>operand<sp/>has<sp/>32-bit<sp/>GP<sp/>base.</highlight></codeline>
<codeline lineno="2636" refid="structasmjit_1_1x86x64_1_1Mem_1a124adc912f868de33fb8025a66ed2eb4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a124adc912f868de33fb8025a66ed2eb4" kindref="member" tooltip="Get whether the memory operand has 32-bit GP base.">hasGpdBase</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].u32[0]<sp/>&amp;<sp/>IntUtil::pack32_4x8(0x00,<sp/>0x00,<sp/>0x00,<sp/>kMemGpdMask))<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2640"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>whether<sp/>the<sp/>memory<sp/>operand<sp/>has<sp/>32-bit<sp/>GP<sp/>base.</highlight></codeline>
<codeline lineno="2641" refid="structasmjit_1_1x86x64_1_1Mem_1a27e33d9f2ba06db952f6534a1aa2f870" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a27e33d9f2ba06db952f6534a1aa2f870" kindref="member" tooltip="Set whether the memory operand has 32-bit GP base.">setGpdBase</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].u32[0]<sp/>|=<sp/>IntUtil::pack32_4x8(0x00,<sp/>0x00,<sp/>0x00,<sp/>kMemGpdMask);</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2646"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>whether<sp/>the<sp/>memory<sp/>operand<sp/>has<sp/>32-bit<sp/>GP<sp/>base<sp/>to<sp/>@a<sp/>b.</highlight></codeline>
<codeline lineno="2647" refid="structasmjit_1_1x86x64_1_1Mem_1a234b1f44c97b28dee1d24ec74fa2319e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a234b1f44c97b28dee1d24ec74fa2319e" kindref="member" tooltip="Set whether the memory operand has 32-bit GP base to b.">setGpdBase</ref>(uint32_t<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].u32[0]<sp/>&amp;=~IntUtil::pack32_4x8(0x00,<sp/>0x00,<sp/>0x00,<sp/>kMemGpdMask);</highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].u32[0]<sp/>|=<sp/>IntUtil::pack32_4x8(0x00,<sp/>0x00,<sp/>0x00,<sp/>b<sp/>&lt;&lt;<sp/>kMemGpdIndex);</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2652"><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[VSib]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2656"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2657"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>SIB<sp/>type.</highlight></codeline>
<codeline lineno="2658" refid="structasmjit_1_1x86x64_1_1Mem_1a1858a42fe9f24d39a0faddcd674637b8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a1858a42fe9f24d39a0faddcd674637b8" kindref="member" tooltip="Get SIB type.">getVSib</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(static_cast&lt;uint32_t&gt;(<ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.flags)<sp/>&gt;&gt;<sp/>kMemVSibIndex)<sp/>&amp;<sp/>kMemVSibBits;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2662"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>SIB<sp/>type.</highlight></codeline>
<codeline lineno="2663" refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(uint32_t<sp/>vsib)<sp/>{</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].u32[0]<sp/>&amp;=~IntUtil::pack32_4x8(0x00,<sp/>0x00,<sp/>0x00,<sp/>kMemVSibMask);</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].u32[0]<sp/>|=<sp/>IntUtil::pack32_4x8(0x00,<sp/>0x00,<sp/>0x00,<sp/>vsib<sp/>&lt;&lt;<sp/>kMemVSibIndex);</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"></highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Size]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2673"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>operand<sp/>size.</highlight></codeline>
<codeline lineno="2674" refid="structasmjit_1_1x86x64_1_1Mem_1abf9bd0eee930565098fbf9329a90d3a5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1abf9bd0eee930565098fbf9329a90d3a5" kindref="member" tooltip="Set memory operand size.">setSize</ref>(uint32_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(size);</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"></highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Base]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2683"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>memory<sp/>operand<sp/>has<sp/>base<sp/>register.</highlight></codeline>
<codeline lineno="2684" refid="structasmjit_1_1x86x64_1_1Mem_1a42fbba8eac07debc8edc6af653400302" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a42fbba8eac07debc8edc6af653400302" kindref="member" tooltip="Get whether the memory operand has base register.">hasBase</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2685"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.base<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2687"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>memory<sp/>operand<sp/>base<sp/>register<sp/>code,<sp/>variable<sp/>id,<sp/>or<sp/>@ref<sp/>kInvalidValue.</highlight></codeline>
<codeline lineno="2688" refid="structasmjit_1_1x86x64_1_1Mem_1a253db69c609ef7497fe164c0e901209a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a253db69c609ef7497fe164c0e901209a" kindref="member" tooltip="Get memory operand base register code, variable id, or kInvalidValue.">getBase</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2689"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.base;<sp/>}</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2691"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>operand<sp/>base<sp/>register<sp/>code,<sp/>variable<sp/>id,<sp/>or<sp/>@ref<sp/>kInvalidValue.</highlight></codeline>
<codeline lineno="2692" refid="structasmjit_1_1x86x64_1_1Mem_1a15912db61738b16cfb4e8e21fd8beb8e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a15912db61738b16cfb4e8e21fd8beb8e" kindref="member" tooltip="Set memory operand base register code, variable id, or kInvalidValue.">setBase</ref>(uint32_t<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.base<sp/>=<sp/>base;</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Index]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2701"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>memory<sp/>operand<sp/>has<sp/>index.</highlight></codeline>
<codeline lineno="2702" refid="structasmjit_1_1x86x64_1_1Mem_1a4ecf772861fcf98bfd6cdbb17b919b47" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a4ecf772861fcf98bfd6cdbb17b919b47" kindref="member" tooltip="Get whether the memory operand has index.">hasIndex</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2706"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>memory<sp/>operand<sp/>index<sp/>register<sp/>code,<sp/>variable<sp/>id,<sp/>or<sp/>@ref<sp/>kInvalidValue.</highlight></codeline>
<codeline lineno="2707" refid="structasmjit_1_1x86x64_1_1Mem_1a9e66de67f388a7c028694dc215d6c386" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a9e66de67f388a7c028694dc215d6c386" kindref="member" tooltip="Get memory operand index register code, variable id, or kInvalidValue.">getIndex</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index;</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2711"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>operand<sp/>index<sp/>register<sp/>code,<sp/>variable<sp/>id,<sp/>or<sp/>@ref<sp/>kInvalidValue.</highlight></codeline>
<codeline lineno="2712" refid="structasmjit_1_1x86x64_1_1Mem_1a4d0a35e5747c6be9ede462aa4d8ef79f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a4d0a35e5747c6be9ede462aa4d8ef79f" kindref="member" tooltip="Set memory operand index register code, variable id, or kInvalidValue.">setIndex</ref>(uint32_t<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2716"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2717"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2718" refid="structasmjit_1_1x86x64_1_1Mem_1a1b312d06ddf26819f9702dfa41403a99" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a1b312d06ddf26819f9702dfa41403a99" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>index.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>();</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" kindref="member" tooltip="Memory operand uses Gp or no index register.">kMemVSibGpz</ref>);</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2723"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2724" refid="structasmjit_1_1x86x64_1_1Mem_1a2fc35bfac4052949e833021f8e90df7a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a2fc35bfac4052949e833021f8e90df7a" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>index.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>();</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" kindref="member" tooltip="Memory operand uses Gp or no index register.">kMemVSibGpz</ref>).<ref refid="structasmjit_1_1x86x64_1_1Mem_1a0128815a7d4fc2be06b979685babe1c4" kindref="member" tooltip="Set memory operand index scale (0, 1, 2 or 3).">setShift</ref>(shift);</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2729"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2730" refid="structasmjit_1_1x86x64_1_1Mem_1ad7249ca609700bd859f0c01c587cd817" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1ad7249ca609700bd859f0c01c587cd817" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index).<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>();</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" kindref="member" tooltip="Memory operand uses Gp or no index register.">kMemVSibGpz</ref>);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2735"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2736" refid="structasmjit_1_1x86x64_1_1Mem_1af745903196fec660b8fe25e8010e2de4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1af745903196fec660b8fe25e8010e2de4" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index).<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>();</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" kindref="member" tooltip="Memory operand uses Gp or no index register.">kMemVSibGpz</ref>).<ref refid="structasmjit_1_1x86x64_1_1Mem_1a0128815a7d4fc2be06b979685babe1c4" kindref="member" tooltip="Set memory operand index scale (0, 1, 2 or 3).">setShift</ref>(shift);</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2741"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2742" refid="structasmjit_1_1x86x64_1_1Mem_1a2a5a14448e5d921a53ef12c462b68856" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a2a5a14448e5d921a53ef12c462b68856" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>index.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>();</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1afa311617da5fb69bb65ee3b8d1488251" kindref="member" tooltip="Memory operand uses Xmm or no index register.">kMemVSibXmm</ref>);</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2747"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2748" refid="structasmjit_1_1x86x64_1_1Mem_1a0dffdea445c733b0dc7e50fc1aacf1c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a0dffdea445c733b0dc7e50fc1aacf1c5" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>index.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>();</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1afa311617da5fb69bb65ee3b8d1488251" kindref="member" tooltip="Memory operand uses Xmm or no index register.">kMemVSibXmm</ref>).<ref refid="structasmjit_1_1x86x64_1_1Mem_1a0128815a7d4fc2be06b979685babe1c4" kindref="member" tooltip="Set memory operand index scale (0, 1, 2 or 3).">setShift</ref>(shift);</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2752"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2753"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2754" refid="structasmjit_1_1x86x64_1_1Mem_1a60995de5aeeee2bf1ea3b7c295191c18" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a60995de5aeeee2bf1ea3b7c295191c18" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index).<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>();</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1afa311617da5fb69bb65ee3b8d1488251" kindref="member" tooltip="Memory operand uses Xmm or no index register.">kMemVSibXmm</ref>);</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2759"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2760" refid="structasmjit_1_1x86x64_1_1Mem_1aa143b37db31dc1e396e28dbf0818e025" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1aa143b37db31dc1e396e28dbf0818e025" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index).<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>();</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1afa311617da5fb69bb65ee3b8d1488251" kindref="member" tooltip="Memory operand uses Xmm or no index register.">kMemVSibXmm</ref>).<ref refid="structasmjit_1_1x86x64_1_1Mem_1a0128815a7d4fc2be06b979685babe1c4" kindref="member" tooltip="Set memory operand index scale (0, 1, 2 or 3).">setShift</ref>(shift);</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2765"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2766" refid="structasmjit_1_1x86x64_1_1Mem_1a8c4cbb09e45b408688126df594ba747b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a8c4cbb09e45b408688126df594ba747b" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>index.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>();</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1a7aecfb975b3f5e594e2a9ee86cba691d" kindref="member" tooltip="Memory operand uses Ymm or no index register.">kMemVSibYmm</ref>);</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2771"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2772" refid="structasmjit_1_1x86x64_1_1Mem_1a16d66a00729b22075017c3d104a91dd6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a16d66a00729b22075017c3d104a91dd6" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/>index.<ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>();</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1a7aecfb975b3f5e594e2a9ee86cba691d" kindref="member" tooltip="Memory operand uses Ymm or no index register.">kMemVSibYmm</ref>).<ref refid="structasmjit_1_1x86x64_1_1Mem_1a0128815a7d4fc2be06b979685babe1c4" kindref="member" tooltip="Set memory operand index scale (0, 1, 2 or 3).">setShift</ref>(shift);</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2777"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2778" refid="structasmjit_1_1x86x64_1_1Mem_1a075ff655cfa87a2b15e603ac90e05b7b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a075ff655cfa87a2b15e603ac90e05b7b" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index).<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>();</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1a7aecfb975b3f5e594e2a9ee86cba691d" kindref="member" tooltip="Memory operand uses Ymm or no index register.">kMemVSibYmm</ref>);</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2783"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2784" refid="structasmjit_1_1x86x64_1_1Mem_1a35ea5b4fa85ddadebd3a8a88eccd2d9e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a35ea5b4fa85ddadebd3a8a88eccd2d9e" kindref="member" tooltip="Set memory index.">setIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index).<ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>();</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1a7aecfb975b3f5e594e2a9ee86cba691d" kindref="member" tooltip="Memory operand uses Ymm or no index register.">kMemVSibYmm</ref>).<ref refid="structasmjit_1_1x86x64_1_1Mem_1a0128815a7d4fc2be06b979685babe1c4" kindref="member" tooltip="Set memory operand index scale (0, 1, 2 or 3).">setShift</ref>(shift);</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2789"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>memory<sp/>index.</highlight></codeline>
<codeline lineno="2790" refid="structasmjit_1_1x86x64_1_1Mem_1adac8886b0330e2977a0671e415d45002" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adac8886b0330e2977a0671e415d45002" kindref="member" tooltip="Reset memory index.">resetIndex</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.index<sp/>=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>;</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1adf8bdb68d160bede6b926ac891dd9892" kindref="member" tooltip="Set SIB type.">_setVSib</ref>(<ref refid="group__asmjit__x86x64_1gga3c765af5d5e1b534ef7acc3abe5dffc1ac1574319827e849c52bce5d6a147894b" kindref="member" tooltip="Memory operand uses Gp or no index register.">kMemVSibGpz</ref>);</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"></highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Shift]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2799"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>memory<sp/>operand<sp/>has<sp/>shift<sp/>used.</highlight></codeline>
<codeline lineno="2800" refid="structasmjit_1_1x86x64_1_1Mem_1a67b62b2b45059561dd545f7a92e3c2ef" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a67b62b2b45059561dd545f7a92e3c2ef" kindref="member" tooltip="Get whether the memory operand has shift used.">hasShift</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.flags<sp/>&amp;<sp/>kMemShiftMask)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2804"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>memory<sp/>operand<sp/>index<sp/>scale<sp/>(0,<sp/>1,<sp/>2<sp/>or<sp/>3).</highlight></codeline>
<codeline lineno="2805" refid="structasmjit_1_1x86x64_1_1Mem_1a31f8cb43b254a59011be810e6e04d0a6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a31f8cb43b254a59011be810e6e04d0a6" kindref="member" tooltip="Get memory operand index scale (0, 1, 2 or 3).">getShift</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.flags<sp/>&gt;&gt;<sp/>kMemShiftIndex;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2809"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>operand<sp/>index<sp/>scale<sp/>(0,<sp/>1,<sp/>2<sp/>or<sp/>3).</highlight></codeline>
<codeline lineno="2810" refid="structasmjit_1_1x86x64_1_1Mem_1a0128815a7d4fc2be06b979685babe1c4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a0128815a7d4fc2be06b979685babe1c4" kindref="member" tooltip="Set memory operand index scale (0, 1, 2 or 3).">setShift</ref>(uint32_t<sp/>shift)<sp/>{</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].u32[0]<sp/>&amp;=~IntUtil::pack32_4x8(0x00,<sp/>0x00,<sp/>0x00,<sp/>kMemShiftMask);</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].u32[0]<sp/>|=<sp/>IntUtil::pack32_4x8(0x00,<sp/>0x00,<sp/>0x00,<sp/>shift<sp/>&lt;&lt;<sp/>kMemShiftIndex);</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Displacement]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2820"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>memory<sp/>operand<sp/>relative<sp/>displacement.</highlight></codeline>
<codeline lineno="2821" refid="structasmjit_1_1x86x64_1_1Mem_1a8fb93c2c6f8d583fedee9f5ffe4b0af4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int32_t<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a8fb93c2c6f8d583fedee9f5ffe4b0af4" kindref="member" tooltip="Get memory operand relative displacement.">getDisplacement</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2825"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>operand<sp/>relative<sp/>displacement.</highlight></codeline>
<codeline lineno="2826" refid="structasmjit_1_1x86x64_1_1Mem_1a7e44ab3af4e0509ecfb42c84a09eb01c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a7e44ab3af4e0509ecfb42c84a09eb01c" kindref="member" tooltip="Set memory operand relative displacement.">setDisplacement</ref>(int32_t<sp/>disp)<sp/>{</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2831"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>memory<sp/>operand<sp/>relative<sp/>displacement.</highlight></codeline>
<codeline lineno="2832" refid="structasmjit_1_1x86x64_1_1Mem_1a43a96c4fb25466c740f771cc2530c4ed" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a43a96c4fb25466c740f771cc2530c4ed" kindref="member" tooltip="Reset memory operand relative displacement.">resetDisplacement</ref>(int32_t<sp/>disp)<sp/>{</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2837"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Adjust<sp/>memory<sp/>operand<sp/>relative<sp/>displacement<sp/>by<sp/>@a<sp/>displacement.</highlight></codeline>
<codeline lineno="2838" refid="structasmjit_1_1x86x64_1_1Mem_1a766a2f4cdf56048983843e443ae54164" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1a766a2f4cdf56048983843e443ae54164" kindref="member" tooltip="Adjust memory operand relative displacement by displacement.">adjust</ref>(int32_t<sp/>disp)<sp/>{</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>+=<sp/>disp;</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2843"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>new<sp/>memory<sp/>operand<sp/>adjusted<sp/>by<sp/>@a<sp/>displacement.</highlight></codeline>
<codeline lineno="2844" refid="structasmjit_1_1x86x64_1_1Mem_1af851a9f9d15cc8c93704bc3e436581d1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1Mem_1af851a9f9d15cc8c93704bc3e436581d1" kindref="member" tooltip="Get new memory operand adjusted by displacement.">adjusted</ref>(int32_t<sp/>disp)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/>Mem<sp/>result(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>result.<ref refid="structasmjit_1_1x86x64_1_1Mem_1a766a2f4cdf56048983843e443ae54164" kindref="member" tooltip="Adjust memory operand relative displacement by displacement.">adjust</ref>(disp);</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mem&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/>_copy(other);</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"></highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mem&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0]<sp/>==<sp/>other._packed[0])<sp/>&amp;<sp/>(<ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[1]<sp/>==<sp/>other._packed[1])<sp/>;</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Mem&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Static]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2870"><highlight class="normal"></highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>_getGpdFlags(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>&amp;<sp/>base)<sp/>{</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(base._vreg.size<sp/>&amp;<sp/>0x4)<sp/>&lt;&lt;<sp/>(kMemGpdIndex<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2874"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"></highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>_OP_ID</highlight></codeline>
<codeline lineno="2877"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::X86Var]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2882"><highlight class="comment">//!<sp/>@brief<sp/>Base<sp/>class<sp/>for<sp/>all<sp/>variables.</highlight></codeline>
<codeline lineno="2883" refid="structasmjit_1_1x86x64_1_1X86Var" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1X86Var" kindref="compound" tooltip="Base class for all variables.">X86Var</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref><sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var" kindref="compound" tooltip="Base class for all variables.">X86Var</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a320895f2833c51d30db23c784df9c4bd" kindref="member" tooltip="Reset X86Var operand.">reset</ref>();</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86Var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86Var&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"></highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>X86Var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[X86Var<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2900"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>X86Var<sp/>operand.</highlight></codeline>
<codeline lineno="2901" refid="structasmjit_1_1x86x64_1_1X86Var_1a5189d025ab5e430a5ce14a5fd83e5ea2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86Var<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a5189d025ab5e430a5ce14a5fd83e5ea2" kindref="member" tooltip="Clone X86Var operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86Var(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2905"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>X86Var<sp/>operand.</highlight></codeline>
<codeline lineno="2906" refid="structasmjit_1_1x86x64_1_1X86Var_1a320895f2833c51d30db23c784df9c4bd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a320895f2833c51d30db23c784df9c4bd" kindref="member" tooltip="Reset X86Var operand.">reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cbad24fc6aeac580335e62f8a11e8a2043f" kindref="member" tooltip="Operand is a variable.">kOperandTypeVar</ref>,<sp/>0,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_d2_d3(<ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Type]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getRegType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type;<sp/>}</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getVarType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.vType;<sp/>}</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2918"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="2919" refid="structasmjit_1_1x86x64_1_1X86Var_1a065a74b4694f5f69f54ef0efd74e070d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a065a74b4694f5f69f54ef0efd74e070d" kindref="member" tooltip="Get whether the variable is Gpb register.">isGp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>&lt;=<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2920"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="2921" refid="structasmjit_1_1x86x64_1_1X86Var_1aa72147fe07f80a419d5462bfc66b7f0c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1aa72147fe07f80a419d5462bfc66b7f0c" kindref="member" tooltip="Get whether the variable is Gpb register.">isGpb</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>&lt;=<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa6e8dd55fd3b4ef24cd301f03b3d7257d" kindref="member" tooltip="Gpb-hi register (AH, BH, CH, DH only).">kRegTypeGpbHi</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2922"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>Gpb-lo<sp/>register.</highlight></codeline>
<codeline lineno="2923" refid="structasmjit_1_1x86x64_1_1X86Var_1aff460abf8c73aa9b4a61af4c31abe858" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1aff460abf8c73aa9b4a61af4c31abe858" kindref="member" tooltip="Get whether the variable is Gpb-lo register.">isGpbLo</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" kindref="member" tooltip="Gpb-lo register (AL, BL, CL, DL, ...).">kRegTypeGpbLo</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2924"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>Gpb-hi<sp/>register.</highlight></codeline>
<codeline lineno="2925" refid="structasmjit_1_1x86x64_1_1X86Var_1a30335b7293d8e81b9919449270730f95" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a30335b7293d8e81b9919449270730f95" kindref="member" tooltip="Get whether the variable is Gpb-hi register.">isGpbHi</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa6e8dd55fd3b4ef24cd301f03b3d7257d" kindref="member" tooltip="Gpb-hi register (AH, BH, CH, DH only).">kRegTypeGpbHi</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2926"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="2927" refid="structasmjit_1_1x86x64_1_1X86Var_1a61c3806ce11605d7a39a4aa76c8b0695" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a61c3806ce11605d7a39a4aa76c8b0695" kindref="member" tooltip="Get whether the variable is Gpw register.">isGpw</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7088b937cbaa2114610046a308697d2e" kindref="member" tooltip="Gpw register.">kRegTypeGpw</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2928"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="2929" refid="structasmjit_1_1x86x64_1_1X86Var_1a20dd90c3152e0bee3c85850b19b34851" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a20dd90c3152e0bee3c85850b19b34851" kindref="member" tooltip="Get whether the variable is Gpd register.">isGpd</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2930"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="2931" refid="structasmjit_1_1x86x64_1_1X86Var_1a61137a857dd7f088fc8fa0d9997bf898" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a61137a857dd7f088fc8fa0d9997bf898" kindref="member" tooltip="Get whether the variable is Gpq register.">isGpq</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2933"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="2934" refid="structasmjit_1_1x86x64_1_1X86Var_1aa481d56af8c9358ef1ddf2640ee02a95" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1aa481d56af8c9358ef1ddf2640ee02a95" kindref="member" tooltip="Get whether the variable is Fp register.">isFp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efad8dab38a7bb9b84c468bdac1022c6a00" kindref="member" tooltip="Fp register.">kRegTypeFp</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2935"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>Mm<sp/>type.</highlight></codeline>
<codeline lineno="2936" refid="structasmjit_1_1x86x64_1_1X86Var_1a7967f865b83fb758f35e406abc58cd3c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a7967f865b83fb758f35e406abc58cd3c" kindref="member" tooltip="Get whether the variable is Mm type.">isMm</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa9a46e468cd5c58fac3670afc952eb814" kindref="member" tooltip="Mm register.">kRegTypeMm</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2937"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>Xmm<sp/>type.</highlight></codeline>
<codeline lineno="2938" refid="structasmjit_1_1x86x64_1_1X86Var_1a40558c213b9676d52fdcfcb99346c2f6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a40558c213b9676d52fdcfcb99346c2f6" kindref="member" tooltip="Get whether the variable is Xmm type.">isXmm</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaacea326fc6b0daaa36cc5e706d6656a5" kindref="member" tooltip="Xmm register.">kRegTypeXmm</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2939"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>variable<sp/>is<sp/>Ymm<sp/>type.</highlight></codeline>
<codeline lineno="2940" refid="structasmjit_1_1x86x64_1_1X86Var_1a9baf6d51294ba04d06eb8cc3c692f3b2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a9baf6d51294ba04d06eb8cc3c692f3b2" kindref="member" tooltip="Get whether the variable is Ymm type.">isYmm</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa962f5931b1817196fa1c7bd908e02fbd" kindref="member" tooltip="Ymm register.">kRegTypeYmm</ref>;<sp/>}</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Memory<sp/>Cast]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2946"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="2947"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="2948"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>Size<sp/>of<sp/>operand<sp/>depends<sp/>on<sp/>native<sp/>variable<sp/>type,<sp/>you<sp/>can<sp/>use<sp/>other</highlight></codeline>
<codeline lineno="2949"><highlight class="comment"><sp/><sp/>//!<sp/>variants<sp/>if<sp/>you<sp/>want<sp/>specific<sp/>one.</highlight></codeline>
<codeline lineno="2950" refid="structasmjit_1_1x86x64_1_1X86Var_1a6d69361f562704d45752d5405d91cbbf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a6d69361f562704d45752d5405d91cbbf" kindref="member" tooltip="Cast this variable to memory operand.">m</ref>(int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2951"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>disp,<sp/><ref refid="structasmjit_1_1Operand_1ae5bb07ef28e2c29ebf9b762ea8f36b7e" kindref="member" tooltip="Get size of the operand in bytes.">getSize</ref>());<sp/>}</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2953"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2954" refid="structasmjit_1_1x86x64_1_1X86Var_1a536f7424deb550b0da44ac00b3e6b567" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a6d69361f562704d45752d5405d91cbbf" kindref="member" tooltip="Cast this variable to memory operand.">m</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2955"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="structasmjit_1_1Operand_1ae5bb07ef28e2c29ebf9b762ea8f36b7e" kindref="member" tooltip="Get size of the operand in bytes.">getSize</ref>());<sp/>}</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2957"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>8-bit<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="2958" refid="structasmjit_1_1x86x64_1_1X86Var_1a6be5cf52a69b05c1752cd1dd4b29bfbf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a6be5cf52a69b05c1752cd1dd4b29bfbf" kindref="member" tooltip="Cast this variable to 8-bit memory operand.">m8</ref>(int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2959"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>disp,<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2961"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2962" refid="structasmjit_1_1x86x64_1_1X86Var_1aa54c204b47ebe1040834a0e4a6b5298e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a6be5cf52a69b05c1752cd1dd4b29bfbf" kindref="member" tooltip="Cast this variable to 8-bit memory operand.">m8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2963"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>index,<sp/>shift,<sp/>disp,<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2965"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>16-bit<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="2966" refid="structasmjit_1_1x86x64_1_1X86Var_1a815466a18a45464e7cef63ac3e57bd71" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a815466a18a45464e7cef63ac3e57bd71" kindref="member" tooltip="Cast this variable to 16-bit memory operand.">m16</ref>(int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2967"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>disp,<sp/>2);<sp/>}</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2969"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2970" refid="structasmjit_1_1x86x64_1_1X86Var_1a06abd400cfc173f9fd556008a2bd7682" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a815466a18a45464e7cef63ac3e57bd71" kindref="member" tooltip="Cast this variable to 16-bit memory operand.">m16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2971"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>index,<sp/>shift,<sp/>disp,<sp/>2);<sp/>}</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2973"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>32-bit<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="2974" refid="structasmjit_1_1x86x64_1_1X86Var_1a4c84d867803e2b28dfbdd3c5166c889d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a4c84d867803e2b28dfbdd3c5166c889d" kindref="member" tooltip="Cast this variable to 32-bit memory operand.">m32</ref>(int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2975"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>disp,<sp/>4);<sp/>}</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2977"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2978" refid="structasmjit_1_1x86x64_1_1X86Var_1ad941a21008425f4d127aa1568cab01d4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a4c84d867803e2b28dfbdd3c5166c889d" kindref="member" tooltip="Cast this variable to 32-bit memory operand.">m32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2979"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>index,<sp/>shift,<sp/>disp,<sp/>4);<sp/>}</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2981"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>64-bit<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="2982" refid="structasmjit_1_1x86x64_1_1X86Var_1a83527cece402b22c2d8ebaed47b5fb37" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a83527cece402b22c2d8ebaed47b5fb37" kindref="member" tooltip="Cast this variable to 64-bit memory operand.">m64</ref>(int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2983"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>disp,<sp/>8);<sp/>}</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2985"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2986" refid="structasmjit_1_1x86x64_1_1X86Var_1ad137572ad9f3a3e9e30a8a3f714b3e60" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a83527cece402b22c2d8ebaed47b5fb37" kindref="member" tooltip="Cast this variable to 64-bit memory operand.">m64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2987"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>index,<sp/>shift,<sp/>disp,<sp/>8);<sp/>}</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2989"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>80-bit<sp/>memory<sp/>operand<sp/>(long<sp/>double).</highlight></codeline>
<codeline lineno="2990" refid="structasmjit_1_1x86x64_1_1X86Var_1afe71570f0ab49573df81ed33d8802638" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1afe71570f0ab49573df81ed33d8802638" kindref="member" tooltip="Cast this variable to 80-bit memory operand (long double).">m80</ref>(int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2991"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>disp,<sp/>10);<sp/>}</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2993"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="2994" refid="structasmjit_1_1x86x64_1_1X86Var_1ab59acb1c2324fbd020d2bda92aedd5df" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1afe71570f0ab49573df81ed33d8802638" kindref="member" tooltip="Cast this variable to 80-bit memory operand (long double).">m80</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2995"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>index,<sp/>shift,<sp/>disp,<sp/>10);<sp/>}</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="2997"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>128-bit<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="2998" refid="structasmjit_1_1x86x64_1_1X86Var_1a59bb1eac4ce572017fbba924461180fe" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a59bb1eac4ce572017fbba924461180fe" kindref="member" tooltip="Cast this variable to 128-bit memory operand.">m128</ref>(int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="2999"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>disp,<sp/>16);<sp/>}</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3001"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3002" refid="structasmjit_1_1x86x64_1_1X86Var_1a8d252edf6b13d756830ab7505012593d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1a59bb1eac4ce572017fbba924461180fe" kindref="member" tooltip="Cast this variable to 128-bit memory operand.">m128</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3003"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>index,<sp/>shift,<sp/>disp,<sp/>16);<sp/>}</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3005"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>256-bit<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="3006" refid="structasmjit_1_1x86x64_1_1X86Var_1ad089710406b1e7451adf5a9194f19fe3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1ad089710406b1e7451adf5a9194f19fe3" kindref="member" tooltip="Cast this variable to 256-bit memory operand.">m256</ref>(int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3007"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>disp,<sp/>32);<sp/>}</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3009"><highlight class="comment"><sp/><sp/>//!<sp/>@overload</highlight></codeline>
<codeline lineno="3010" refid="structasmjit_1_1x86x64_1_1X86Var_1a7464d60078f4b820a60c0ba4e2ec7d70" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="structasmjit_1_1x86x64_1_1X86Var_1ad089710406b1e7451adf5a9194f19fe3" kindref="member" tooltip="Cast this variable to 256-bit memory operand.">m256</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3011"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(Init,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>index,<sp/>shift,<sp/>disp,<sp/>32);<sp/>}</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"></highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3016"><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86Var&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86Var&amp;<sp/>other)<sp/>{<sp/>_copy(other);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"></highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86Var&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0]<sp/>==<sp/>other._packed[0];<sp/>}</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86Var&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!operator==(other);<sp/>}</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Private]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"></highlight></codeline>
<codeline lineno="3026"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>X86Var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86Var&amp;<sp/>other,<sp/>uint32_t<sp/>reg,<sp/>uint32_t<sp/>size)<sp/>:<sp/>BaseVar(NoInit)</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_w0_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cbad24fc6aeac580335e62f8a11e8a2043f" kindref="member" tooltip="Operand is a variable.">kOperandTypeVar</ref>,<sp/>size,<sp/>(reg<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>other._vreg.index,<sp/>other._base.id);</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.vType<sp/>=<sp/>other._vreg.vType;</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3032"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::GpVar]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3036"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3038"><highlight class="comment">//!<sp/>@brief<sp/>Gp<sp/>variable.</highlight></codeline>
<codeline lineno="3039" refid="structasmjit_1_1x86x64_1_1GpVar" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>X86Var<sp/>{</highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3044"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>uninitialized<sp/>@c<sp/>GpVar<sp/>instance.</highlight></codeline>
<codeline lineno="3045" refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>()<sp/>:<sp/>X86Var()<sp/>{}</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3047"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>initialized<sp/>@c<sp/>GpVar<sp/>instance.</highlight></codeline>
<codeline lineno="3048" refid="structasmjit_1_1x86x64_1_1GpVar_1a6f187f0c479d3157f018e0e4dbe4abc6" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a6f187f0c479d3157f018e0e4dbe4abc6" kindref="member" tooltip="Create new initialized GpVar instance.">GpVar</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>&amp;<sp/>c,<sp/>uint32_t<sp/>type<sp/>=<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a773337143d44de47e460e5e280661e3e" kindref="member" tooltip="Variable is target intptr_t (not compatible with host intptr_t).">kVarTypeIntPtr</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>NULL)<sp/>:<sp/>X86Var(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"><sp/><sp/><sp/><sp/>c.<ref refid="structasmjit_1_1BaseCompiler_1a0a0d78ffb95c9b74d4c6fd0205519b62" kindref="member" tooltip="Create a new BaseVar.">_newVar</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>type,<sp/>name);</highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3052"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>@c<sp/>GpVar<sp/>instance<sp/>using<sp/>@a<sp/>other.</highlight></codeline>
<codeline lineno="3053"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="3054"><highlight class="comment"><sp/><sp/>//!<sp/>Note<sp/>this<sp/>will<sp/>not<sp/>create<sp/>a<sp/>different<sp/>variable,<sp/>use<sp/>@c<sp/>Compiler::newGpVar()</highlight></codeline>
<codeline lineno="3055"><highlight class="comment"><sp/><sp/>//!<sp/>if<sp/>you<sp/>want<sp/>to<sp/>do<sp/>so.<sp/>This<sp/>is<sp/>only<sp/>copy-constructor<sp/>that<sp/>allows<sp/>to<sp/>store</highlight></codeline>
<codeline lineno="3056"><highlight class="comment"><sp/><sp/>//!<sp/>the<sp/>same<sp/>variable<sp/>in<sp/>different<sp/>places.</highlight></codeline>
<codeline lineno="3057" refid="structasmjit_1_1x86x64_1_1GpVar_1a37163d41012f2d339dfa1d1f320e9e0f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a37163d41012f2d339dfa1d1f320e9e0f" kindref="member" tooltip="Create new GpVar instance using other.">GpVar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>other)<sp/>:<sp/>X86Var(other)<sp/>{}</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3059"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>uninitialized<sp/>@c<sp/>GpVar<sp/>instance<sp/>(internal).</highlight></codeline>
<codeline lineno="3060" refid="structasmjit_1_1x86x64_1_1GpVar_1abe07ffc2deace047ece1660ed6a5ee39" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1abe07ffc2deace047ece1660ed6a5ee39" kindref="member" tooltip="Create new uninitialized GpVar instance (internal).">GpVar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/>X86Var(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[GpVar<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3065"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3066"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>GpVar<sp/>operand.</highlight></codeline>
<codeline lineno="3067" refid="structasmjit_1_1x86x64_1_1GpVar_1af1a9305bcc1a185714202b88d3aa9922" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1af1a9305bcc1a185714202b88d3aa9922" kindref="member" tooltip="Clone GpVar operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3071"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>GpVar<sp/>operand.</highlight></codeline>
<codeline lineno="3072" refid="structasmjit_1_1x86x64_1_1GpVar_1a124572848f59e895c188a2bec2a0939f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a124572848f59e895c188a2bec2a0939f" kindref="member" tooltip="Reset GpVar operand.">reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a124572848f59e895c188a2bec2a0939f" kindref="member" tooltip="Reset GpVar operand.">X86Var::reset</ref>();</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"></highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[GpVar<sp/>Cast]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3080"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>8-bit<sp/>(LO)<sp/>part<sp/>of<sp/>variable</highlight></codeline>
<codeline lineno="3081" refid="structasmjit_1_1x86x64_1_1GpVar_1ae3ad17926de68fd1d148bdc1a09dcdde" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1ae3ad17926de68fd1d148bdc1a09dcdde" kindref="member" tooltip="Cast this variable to 8-bit (LO) part of variable.">r8</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" kindref="member" tooltip="Gpb-lo register (AL, BL, CL, DL, ...).">kRegTypeGpbLo</ref>,<sp/>1);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3082"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>8-bit<sp/>(LO)<sp/>part<sp/>of<sp/>variable</highlight></codeline>
<codeline lineno="3083" refid="structasmjit_1_1x86x64_1_1GpVar_1a12aa33b8dcca19284915f316e7ceacb4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a12aa33b8dcca19284915f316e7ceacb4" kindref="member" tooltip="Cast this variable to 8-bit (LO) part of variable.">r8Lo</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" kindref="member" tooltip="Gpb-lo register (AL, BL, CL, DL, ...).">kRegTypeGpbLo</ref>,<sp/>1);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3084"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>8-bit<sp/>(HI)<sp/>part<sp/>of<sp/>variable</highlight></codeline>
<codeline lineno="3085" refid="structasmjit_1_1x86x64_1_1GpVar_1ab27d5503a6e3019a2998328665e112d7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1ab27d5503a6e3019a2998328665e112d7" kindref="member" tooltip="Cast this variable to 8-bit (HI) part of variable.">r8Hi</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa6e8dd55fd3b4ef24cd301f03b3d7257d" kindref="member" tooltip="Gpb-hi register (AH, BH, CH, DH only).">kRegTypeGpbHi</ref>,<sp/>1);<sp/>}</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3087"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>16-bit<sp/>part<sp/>of<sp/>variable</highlight></codeline>
<codeline lineno="3088" refid="structasmjit_1_1x86x64_1_1GpVar_1a29bacafcebf9fc15cc02934414d10dbd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a29bacafcebf9fc15cc02934414d10dbd" kindref="member" tooltip="Cast this variable to 16-bit part of variable.">r16</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7088b937cbaa2114610046a308697d2e" kindref="member" tooltip="Gpw register.">kRegTypeGpw</ref>,<sp/>2);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3089"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>32-bit<sp/>part<sp/>of<sp/>variable</highlight></codeline>
<codeline lineno="3090" refid="structasmjit_1_1x86x64_1_1GpVar_1a6628b9eace92d29d98c03ec519327731" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a6628b9eace92d29d98c03ec519327731" kindref="member" tooltip="Cast this variable to 32-bit part of variable.">r32</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>,<sp/>4);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3091"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Cast<sp/>this<sp/>variable<sp/>to<sp/>64-bit<sp/>part<sp/>of<sp/>variable</highlight></codeline>
<codeline lineno="3092" refid="structasmjit_1_1x86x64_1_1GpVar_1adef769c2bd64fa31d2bbb72f028ef96f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1adef769c2bd64fa31d2bbb72f028ef96f" kindref="member" tooltip="Cast this variable to 64-bit part of variable.">r64</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>,<sp/>8);<sp/>}</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3097"><highlight class="normal"></highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>other)<sp/>{<sp/>_copy(other);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86Var::operator==(other);<sp/>}</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86Var::operator!=(other);<sp/>}</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"></highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Private]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar_1a4d1ec0862460ef50aaa0d440b38fc77d" kindref="member" tooltip="Create new uninitialized GpVar instance.">GpVar</ref>&amp;<sp/>other,<sp/>uint32_t<sp/>reg,<sp/>uint32_t<sp/>size)<sp/>:<sp/>X86Var(other,<sp/>reg,<sp/>size)<sp/>{}</highlight></codeline>
<codeline lineno="3109"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::FpVar]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3115"><highlight class="comment">//!<sp/>@brief<sp/>Fpu<sp/>variable.</highlight></codeline>
<codeline lineno="3116" refid="structasmjit_1_1x86x64_1_1FpVar" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1FpVar" kindref="compound" tooltip="Fpu variable.">FpVar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>X86Var<sp/>{</highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3120"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3121"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>uninitialized<sp/>@c<sp/>FpVar<sp/>instance.</highlight></codeline>
<codeline lineno="3122" refid="structasmjit_1_1x86x64_1_1FpVar_1a922d7f9e00cf114c272b489f32851465" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar_1a922d7f9e00cf114c272b489f32851465" kindref="member" tooltip="Create new uninitialized FpVar instance.">FpVar</ref>()<sp/>:<sp/>X86Var()<sp/>{}</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar_1a922d7f9e00cf114c272b489f32851465" kindref="member" tooltip="Create new uninitialized FpVar instance.">FpVar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar" kindref="compound" tooltip="Fpu variable.">FpVar</ref>&amp;<sp/>other)<sp/>:<sp/>X86Var(other)<sp/>{}</highlight></codeline>
<codeline lineno="3124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3125"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>uninitialized<sp/>@c<sp/>FpVar<sp/>instance<sp/>(internal).</highlight></codeline>
<codeline lineno="3126" refid="structasmjit_1_1x86x64_1_1FpVar_1ae45c862e53974f791a86947bbd6bc490" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar_1ae45c862e53974f791a86947bbd6bc490" kindref="member" tooltip="Create new uninitialized FpVar instance (internal).">FpVar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/>X86Var(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"></highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[FpVar<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3132"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>FpVar<sp/>operand.</highlight></codeline>
<codeline lineno="3133" refid="structasmjit_1_1x86x64_1_1FpVar_1a605bd49d981bf4c1803879b523122364" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar" kindref="compound" tooltip="Fpu variable.">FpVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar_1a605bd49d981bf4c1803879b523122364" kindref="member" tooltip="Clone FpVar operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar_1a922d7f9e00cf114c272b489f32851465" kindref="member" tooltip="Create new uninitialized FpVar instance.">FpVar</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3137"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>FpVar<sp/>operand.</highlight></codeline>
<codeline lineno="3138" refid="structasmjit_1_1x86x64_1_1FpVar_1a5ed997e3505070a201dd2942794b3305" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar_1a5ed997e3505070a201dd2942794b3305" kindref="member" tooltip="Reset FpVar operand.">reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar_1a5ed997e3505070a201dd2942794b3305" kindref="member" tooltip="Reset FpVar operand.">X86Var::reset</ref>();</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"></highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar" kindref="compound" tooltip="Fpu variable.">FpVar</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar" kindref="compound" tooltip="Fpu variable.">FpVar</ref>&amp;<sp/>other)<sp/>{<sp/>_copy(other);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3147"><highlight class="normal"></highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar_1a922d7f9e00cf114c272b489f32851465" kindref="member" tooltip="Create new uninitialized FpVar instance.">FpVar</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86Var::operator==(other);<sp/>}</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1FpVar_1a922d7f9e00cf114c272b489f32851465" kindref="member" tooltip="Create new uninitialized FpVar instance.">FpVar</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86Var::operator!=(other);<sp/>}</highlight></codeline>
<codeline lineno="3150"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"></highlight></codeline>
<codeline lineno="3152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::MmVar]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3156"><highlight class="comment">//!<sp/>@brief<sp/>Mm<sp/>variable.</highlight></codeline>
<codeline lineno="3157" refid="structasmjit_1_1x86x64_1_1MmVar" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound" tooltip="Mm variable.">MmVar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>X86Var<sp/>{</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3161"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3162"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>uninitialized<sp/>@c<sp/>MmVar<sp/>instance.</highlight></codeline>
<codeline lineno="3163" refid="structasmjit_1_1x86x64_1_1MmVar_1a66187f001ee3986bc8788cfea2cb2530" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar_1a66187f001ee3986bc8788cfea2cb2530" kindref="member" tooltip="Create new uninitialized MmVar instance.">MmVar</ref>()<sp/>:<sp/>X86Var()<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3164"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>initialized<sp/>@c<sp/>MmVar<sp/>instance.</highlight></codeline>
<codeline lineno="3165" refid="structasmjit_1_1x86x64_1_1MmVar_1aa2e40abba2d6305d8d3075734dfa0327" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar_1aa2e40abba2d6305d8d3075734dfa0327" kindref="member" tooltip="Create new initialized MmVar instance.">MmVar</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>&amp;<sp/>c,<sp/>uint32_t<sp/>type<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea017e962b1c77aaac987d56dccddd59bc" kindref="member" tooltip="Variable is Mm (MMX).">kVarTypeMm</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>NULL)<sp/>:<sp/>X86Var(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/>c.<ref refid="structasmjit_1_1BaseCompiler_1a0a0d78ffb95c9b74d4c6fd0205519b62" kindref="member" tooltip="Create a new BaseVar.">_newVar</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>type,<sp/>name);</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3169"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>@c<sp/>MmVar<sp/>instance<sp/>using<sp/>@a<sp/>other.</highlight></codeline>
<codeline lineno="3170"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="3171"><highlight class="comment"><sp/><sp/>//!<sp/>Note<sp/>this<sp/>will<sp/>not<sp/>create<sp/>a<sp/>different<sp/>variable,<sp/>use<sp/>@c<sp/>Compiler::newMmVar()</highlight></codeline>
<codeline lineno="3172"><highlight class="comment"><sp/><sp/>//!<sp/>if<sp/>you<sp/>want<sp/>to<sp/>do<sp/>so.<sp/>This<sp/>is<sp/>only<sp/>copy-constructor<sp/>that<sp/>allows<sp/>to<sp/>store</highlight></codeline>
<codeline lineno="3173"><highlight class="comment"><sp/><sp/>//!<sp/>the<sp/>same<sp/>variable<sp/>in<sp/>different<sp/>places.</highlight></codeline>
<codeline lineno="3174" refid="structasmjit_1_1x86x64_1_1MmVar_1a08a4c7ad93b6e2a59a166fdf355adee8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar_1a08a4c7ad93b6e2a59a166fdf355adee8" kindref="member" tooltip="Create new MmVar instance using other.">MmVar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound" tooltip="Mm variable.">MmVar</ref>&amp;<sp/>other)<sp/>:<sp/>X86Var(other)<sp/>{}</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3176"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>uninitialized<sp/>@c<sp/>MmVar<sp/>instance<sp/>(internal).</highlight></codeline>
<codeline lineno="3177" refid="structasmjit_1_1x86x64_1_1MmVar_1a6b00339343c01f3abb90ae28a0f21853" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar_1a6b00339343c01f3abb90ae28a0f21853" kindref="member" tooltip="Create new uninitialized MmVar instance (internal).">MmVar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/>X86Var(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[MmVar<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3183"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>MmVar<sp/>operand.</highlight></codeline>
<codeline lineno="3184" refid="structasmjit_1_1x86x64_1_1MmVar_1a54dc259be066e672ed7a75d3b5228692" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound" tooltip="Mm variable.">MmVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar_1a54dc259be066e672ed7a75d3b5228692" kindref="member" tooltip="Clone MmVar operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar_1a66187f001ee3986bc8788cfea2cb2530" kindref="member" tooltip="Create new uninitialized MmVar instance.">MmVar</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3188"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>MmVar<sp/>operand.</highlight></codeline>
<codeline lineno="3189" refid="structasmjit_1_1x86x64_1_1MmVar_1af49e2415c69e317271f1ee787e3ebee8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar_1af49e2415c69e317271f1ee787e3ebee8" kindref="member" tooltip="Reset MmVar operand.">reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar_1af49e2415c69e317271f1ee787e3ebee8" kindref="member" tooltip="Reset MmVar operand.">X86Var::reset</ref>();</highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3196"><highlight class="normal"></highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound" tooltip="Mm variable.">MmVar</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound" tooltip="Mm variable.">MmVar</ref>&amp;<sp/>other)<sp/>{<sp/>_copy(other);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"></highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar_1a66187f001ee3986bc8788cfea2cb2530" kindref="member" tooltip="Create new uninitialized MmVar instance.">MmVar</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86Var::operator==(other);<sp/>}</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1MmVar_1a66187f001ee3986bc8788cfea2cb2530" kindref="member" tooltip="Create new uninitialized MmVar instance.">MmVar</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86Var::operator!=(other);<sp/>}</highlight></codeline>
<codeline lineno="3201"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3202"><highlight class="normal"></highlight></codeline>
<codeline lineno="3203"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::XmmVar]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3207"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>variable.</highlight></codeline>
<codeline lineno="3208" refid="structasmjit_1_1x86x64_1_1XmmVar" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>X86Var<sp/>{</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3213"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>uninitialized<sp/>@c<sp/>XmmVar<sp/>instance.</highlight></codeline>
<codeline lineno="3214" refid="structasmjit_1_1x86x64_1_1XmmVar_1a500f14d2d9153821059561ea0ba9a74b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar_1a500f14d2d9153821059561ea0ba9a74b" kindref="member" tooltip="Create new uninitialized XmmVar instance.">XmmVar</ref>()<sp/>:<sp/>X86Var()<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3215"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>initialized<sp/>@c<sp/>XmmVar<sp/>instance.</highlight></codeline>
<codeline lineno="3216" refid="structasmjit_1_1x86x64_1_1XmmVar_1a09b81d2df776c34adcba7cefdcb60078" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar_1a09b81d2df776c34adcba7cefdcb60078" kindref="member" tooltip="Create new initialized XmmVar instance.">XmmVar</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>&amp;<sp/>c,<sp/>uint32_t<sp/>type<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74eaea998f3c5ad2219eee2276ac929cc28d" kindref="member" tooltip="Variable is Xmm (SSE/SSE2).">kVarTypeXmm</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>NULL)<sp/>:<sp/>X86Var(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/>c.<ref refid="structasmjit_1_1BaseCompiler_1a0a0d78ffb95c9b74d4c6fd0205519b62" kindref="member" tooltip="Create a new BaseVar.">_newVar</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>type,<sp/>name);</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar_1a500f14d2d9153821059561ea0ba9a74b" kindref="member" tooltip="Create new uninitialized XmmVar instance.">XmmVar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>other)<sp/>:<sp/>X86Var(other)<sp/>{}</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3222"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>uninitialized<sp/>@c<sp/>XmmVar<sp/>instance<sp/>(internal).</highlight></codeline>
<codeline lineno="3223" refid="structasmjit_1_1x86x64_1_1XmmVar_1a451604eabc25ee01f7406cef010bcc09" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar_1a451604eabc25ee01f7406cef010bcc09" kindref="member" tooltip="Create new uninitialized XmmVar instance (internal).">XmmVar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/>X86Var(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"></highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[XmmVar<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3228"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3229"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>XmmVar<sp/>operand.</highlight></codeline>
<codeline lineno="3230" refid="structasmjit_1_1x86x64_1_1XmmVar_1acd72a1cf0dcd0d57ad535aa50fb642eb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar_1acd72a1cf0dcd0d57ad535aa50fb642eb" kindref="member" tooltip="Clone XmmVar operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar_1a500f14d2d9153821059561ea0ba9a74b" kindref="member" tooltip="Create new uninitialized XmmVar instance.">XmmVar</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3234"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>XmmVar<sp/>operand.</highlight></codeline>
<codeline lineno="3235" refid="structasmjit_1_1x86x64_1_1XmmVar_1a248beb5177b9868d3378fa07ac71f012" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar_1a248beb5177b9868d3378fa07ac71f012" kindref="member" tooltip="Reset XmmVar operand.">reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar_1a248beb5177b9868d3378fa07ac71f012" kindref="member" tooltip="Reset XmmVar operand.">X86Var::reset</ref>();</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3238"><highlight class="normal"></highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>other)<sp/>{<sp/>_copy(other);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"></highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar_1a500f14d2d9153821059561ea0ba9a74b" kindref="member" tooltip="Create new uninitialized XmmVar instance.">XmmVar</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86Var::operator==(other);<sp/>}</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar_1a500f14d2d9153821059561ea0ba9a74b" kindref="member" tooltip="Create new uninitialized XmmVar instance.">XmmVar</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86Var::operator!=(other);<sp/>}</highlight></codeline>
<codeline lineno="3247"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::YmmVar]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3253"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>variable.</highlight></codeline>
<codeline lineno="3254" refid="structasmjit_1_1x86x64_1_1YmmVar" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>X86Var<sp/>{</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3259"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>uninitialized<sp/>@c<sp/>YmmVar<sp/>instance.</highlight></codeline>
<codeline lineno="3260" refid="structasmjit_1_1x86x64_1_1YmmVar_1a1fec24658068cd1cdc7cbcb405a6e742" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar_1a1fec24658068cd1cdc7cbcb405a6e742" kindref="member" tooltip="Create new uninitialized YmmVar instance.">YmmVar</ref>()<sp/>:<sp/>X86Var()<sp/>{}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3261"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>initialized<sp/>@c<sp/>YmmVar<sp/>instance.</highlight></codeline>
<codeline lineno="3262" refid="structasmjit_1_1x86x64_1_1YmmVar_1a729fab67d6e3b1b5da2a9ee264bc6c8f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar_1a729fab67d6e3b1b5da2a9ee264bc6c8f" kindref="member" tooltip="Create new initialized YmmVar instance.">YmmVar</ref>(<ref refid="structasmjit_1_1BaseCompiler" kindref="compound" tooltip="Base compiler.">BaseCompiler</ref>&amp;<sp/>c,<sp/>uint32_t<sp/>type<sp/>=<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea63ec4833bed0aeaa88e1f41c7f45b86f" kindref="member" tooltip="Variable is Ymm (AVX).">kVarTypeYmm</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name<sp/>=<sp/>NULL)<sp/>:<sp/>X86Var(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/>c.<ref refid="structasmjit_1_1BaseCompiler_1a0a0d78ffb95c9b74d4c6fd0205519b62" kindref="member" tooltip="Create a new BaseVar.">_newVar</ref>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>type,<sp/>name);</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar_1a1fec24658068cd1cdc7cbcb405a6e742" kindref="member" tooltip="Create new uninitialized YmmVar instance.">YmmVar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>other)<sp/>:<sp/>X86Var(other)<sp/>{}</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3268"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>uninitialized<sp/>@c<sp/>YmmVar<sp/>instance<sp/>(internal).</highlight></codeline>
<codeline lineno="3269" refid="structasmjit_1_1x86x64_1_1YmmVar_1a7256249d0885c8ea488ea50bf8e608c1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar_1a7256249d0885c8ea488ea50bf8e608c1" kindref="member" tooltip="Create new uninitialized YmmVar instance (internal).">YmmVar</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/>X86Var(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[YmmVar<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3275"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>YmmVar<sp/>operand.</highlight></codeline>
<codeline lineno="3276" refid="structasmjit_1_1x86x64_1_1YmmVar_1accb025eee94027b078a53900237d246c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar_1accb025eee94027b078a53900237d246c" kindref="member" tooltip="Clone YmmVar operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar_1a1fec24658068cd1cdc7cbcb405a6e742" kindref="member" tooltip="Create new uninitialized YmmVar instance.">YmmVar</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3280"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>YmmVar<sp/>operand.</highlight></codeline>
<codeline lineno="3281" refid="structasmjit_1_1x86x64_1_1YmmVar_1aa290e2eed36029766a41dbccde044ccf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar_1aa290e2eed36029766a41dbccde044ccf" kindref="member" tooltip="Reset YmmVar operand.">reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar_1aa290e2eed36029766a41dbccde044ccf" kindref="member" tooltip="Reset YmmVar operand.">X86Var::reset</ref>();</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"></highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"></highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>other)<sp/>{<sp/>_copy(other);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"></highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar_1a1fec24658068cd1cdc7cbcb405a6e742" kindref="member" tooltip="Create new uninitialized YmmVar instance.">YmmVar</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86Var::operator==(other);<sp/>}</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar_1a1fec24658068cd1cdc7cbcb405a6e742" kindref="member" tooltip="Create new uninitialized YmmVar instance.">YmmVar</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X86Var::operator!=(other);<sp/>}</highlight></codeline>
<codeline lineno="3293"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Macros]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3299"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>Shuffle<sp/>Constant<sp/>for<sp/>MMX/SSE<sp/>shuffle<sp/>instrutions.</highlight></codeline>
<codeline lineno="3300"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="3301"><highlight class="comment">//!<sp/>@param<sp/>z<sp/>First<sp/>component<sp/>position,<sp/>number<sp/>at<sp/>interval<sp/>[0,<sp/>3]<sp/>inclusive.</highlight></codeline>
<codeline lineno="3302"><highlight class="comment">//!<sp/>@param<sp/>x<sp/>Second<sp/>component<sp/>position,<sp/>number<sp/>at<sp/>interval<sp/>[0,<sp/>3]<sp/>inclusive.</highlight></codeline>
<codeline lineno="3303"><highlight class="comment">//!<sp/>@param<sp/>y<sp/>Third<sp/>component<sp/>position,<sp/>number<sp/>at<sp/>interval<sp/>[0,<sp/>3]<sp/>inclusive.</highlight></codeline>
<codeline lineno="3304"><highlight class="comment">//!<sp/>@param<sp/>w<sp/>Fourth<sp/>component<sp/>position,<sp/>number<sp/>at<sp/>interval<sp/>[0,<sp/>3]<sp/>inclusive.</highlight></codeline>
<codeline lineno="3305"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="3306"><highlight class="comment">//!<sp/>Shuffle<sp/>constants<sp/>can<sp/>be<sp/>used<sp/>to<sp/>make<sp/>immediate<sp/>value<sp/>for<sp/>these<sp/>intrinsics:</highlight></codeline>
<codeline lineno="3307"><highlight class="comment">//!<sp/>-<sp/>@ref<sp/>Assembler::pshufw()</highlight></codeline>
<codeline lineno="3308"><highlight class="comment">//!<sp/>-<sp/>@ref<sp/>Assembler::pshufd()</highlight></codeline>
<codeline lineno="3309"><highlight class="comment">//!<sp/>-<sp/>@ref<sp/>Assembler::pshufhw()</highlight></codeline>
<codeline lineno="3310"><highlight class="comment">//!<sp/>-<sp/>@ref<sp/>Assembler::pshuflw()</highlight></codeline>
<codeline lineno="3311"><highlight class="comment">//!<sp/>-<sp/>@ref<sp/>Assembler::shufps()</highlight></codeline>
<codeline lineno="3312" refid="group__asmjit__x86x64_1gab0aa1dd0f7a9b54a4a5d6873a84e0410" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint8_t<sp/><ref refid="group__asmjit__x86x64_1gab0aa1dd0f7a9b54a4a5d6873a84e0410" kindref="member" tooltip="Create Shuffle Constant for MMX/SSE shuffle instrutions.">mm_shuffle</ref>(uint8_t<sp/>z,<sp/>uint8_t<sp/>y,<sp/>uint8_t<sp/>x,<sp/>uint8_t<sp/>w)</highlight></codeline>
<codeline lineno="3313"><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(z<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(y<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>(x<sp/>&lt;&lt;<sp/>2)<sp/>|<sp/>w;<sp/>}</highlight></codeline>
<codeline lineno="3314"><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Cond<sp/>-<sp/>Reverse<sp/>/<sp/>Negate]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3319"><highlight class="comment">//!<sp/>@brief<sp/>Corresponds<sp/>to<sp/>transposing<sp/>the<sp/>operands<sp/>of<sp/>a<sp/>comparison.</highlight></codeline>
<codeline lineno="3320" refid="group__asmjit__x86x64_1gad6fdc62d00a3ab93678ee01c08ec2d9e" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="group__asmjit__x86x64_1gad6fdc62d00a3ab93678ee01c08ec2d9e" kindref="member" tooltip="Corresponds to transposing the operands of a comparison.">reverseCond</ref>(uint32_t<sp/>cond)<sp/>{</highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(cond<sp/>&lt;<sp/>ASMJIT_ARRAY_SIZE(_reverseCond));</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_reverseCond[cond];</highlight></codeline>
<codeline lineno="3323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3325"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>the<sp/>equivalent<sp/>of<sp/>negated<sp/>condition<sp/>code.</highlight></codeline>
<codeline lineno="3326" refid="group__asmjit__x86x64_1gab80cf469ce90ebf471ddc083b4a2cb4d" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="group__asmjit__x86x64_1gab80cf469ce90ebf471ddc083b4a2cb4d" kindref="member" tooltip="Get the equivalent of negated condition code.">negateCond</ref>(uint32_t<sp/>cond)<sp/>{</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(cond<sp/>&lt;<sp/>ASMJIT_ARRAY_SIZE(_reverseCond));</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="group__asmjit__x86x64_1ga46745c982ed79dafc3b61ae380ddbb7b" kindref="member" tooltip="X86/X64 Condition codes.">kCond</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cond<sp/>^<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cond<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1gga46745c982ed79dafc3b61ae380ddbb7ba99bda6215f94e7c2257f592a5a85dac6" kindref="member" tooltip="No condition code.">kCondNone</ref>));</highlight></codeline>
<codeline lineno="3329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"></highlight></codeline>
<codeline lineno="3331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Cond<sp/>-<sp/>ToJcc<sp/>/<sp/>ToMovcc<sp/>/<sp/>ToSetcc]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3335"><highlight class="comment">//!<sp/>@brief<sp/>Translate<sp/>condition<sp/>code<sp/>@a<sp/>cc<sp/>to<sp/>cmovcc<sp/>instruction<sp/>code.</highlight></codeline>
<codeline lineno="3336"><highlight class="comment">//!<sp/>@sa<sp/>@c<sp/>kInstCode,<sp/>@c<sp/>_kInstCmovcc.</highlight></codeline>
<codeline lineno="3337" refid="group__asmjit__x86x64_1gaa9be0c08ba25861309d0957d134c8c26" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="group__asmjit__x86x64_1gaa9be0c08ba25861309d0957d134c8c26" kindref="member" tooltip="Translate condition code cc to cmovcc instruction code.">condToCmovcc</ref>(uint32_t<sp/>cond)<sp/>{</highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(static_cast&lt;uint32_t&gt;(cond)<sp/>&lt;<sp/>ASMJIT_ARRAY_SIZE(_condToCmovcc));</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_condToCmovcc[cond];</highlight></codeline>
<codeline lineno="3340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3342"><highlight class="comment">//!<sp/>@brief<sp/>Translate<sp/>condition<sp/>code<sp/>@a<sp/>cc<sp/>to<sp/>jcc<sp/>instruction<sp/>code.</highlight></codeline>
<codeline lineno="3343"><highlight class="comment">//!<sp/>@sa<sp/>@c<sp/>kInstCode,<sp/>@c<sp/>_kInstJcc.</highlight></codeline>
<codeline lineno="3344" refid="group__asmjit__x86x64_1ga6c8d2f90a1fb96f9a6002c0b70458e5e" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="group__asmjit__x86x64_1ga6c8d2f90a1fb96f9a6002c0b70458e5e" kindref="member" tooltip="Translate condition code cc to jcc instruction code.">condToJcc</ref>(uint32_t<sp/>cond)<sp/>{</highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(static_cast&lt;uint32_t&gt;(cond)<sp/>&lt;<sp/>ASMJIT_ARRAY_SIZE(_condToJcc));</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_condToJcc[cond];</highlight></codeline>
<codeline lineno="3347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3349"><highlight class="comment">//!<sp/>@brief<sp/>Translate<sp/>condition<sp/>code<sp/>@a<sp/>cc<sp/>to<sp/>setcc<sp/>instruction<sp/>code.</highlight></codeline>
<codeline lineno="3350"><highlight class="comment">//!<sp/>@sa<sp/>@c<sp/>kInstCode,<sp/>@c<sp/>_kInstSetcc.</highlight></codeline>
<codeline lineno="3351" refid="group__asmjit__x86x64_1ga7360265365dd7ff27f275d5c50e3e4f6" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="group__asmjit__x86x64_1ga7360265365dd7ff27f275d5c50e3e4f6" kindref="member" tooltip="Translate condition code cc to setcc instruction code.">condToSetcc</ref>(uint32_t<sp/>cond)<sp/>{</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(static_cast&lt;uint32_t&gt;(cond)<sp/>&lt;<sp/>ASMJIT_ARRAY_SIZE(_condToSetcc));</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_condToSetcc[cond];</highlight></codeline>
<codeline lineno="3354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Registers]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3360"><highlight class="comment">//!<sp/>@brief<sp/>No<sp/>register,<sp/>can<sp/>be<sp/>used<sp/>only<sp/>within<sp/>@c<sp/>Mem<sp/>operand.</highlight></codeline>
<codeline lineno="3361"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga451bb5800e1af3088039377b9ef26a97" kindref="member" tooltip="No register, can be used only within Mem operand.">noGpReg</ref>;</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3363"><highlight class="comment">//!<sp/>@brief<sp/>Gpb-lo<sp/>register.</highlight></codeline>
<codeline lineno="3364"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga79b2845f7cab7fb453e202877e02d069" kindref="member" tooltip="Gpb-lo register.">al</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3365"><highlight class="comment">//!<sp/>@brief<sp/>Gpb-lo<sp/>register.</highlight></codeline>
<codeline lineno="3366"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga32fe646af6161cb0da35bfc3aa7b8530" kindref="member" tooltip="Gpb-lo register.">cl</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3367"><highlight class="comment">//!<sp/>@brief<sp/>Gpb-lo<sp/>register.</highlight></codeline>
<codeline lineno="3368"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga7509e11652ffad6a27f0206926072c7e" kindref="member" tooltip="Gpb-lo register.">dl</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3369"><highlight class="comment">//!<sp/>@brief<sp/>Gpb-lo<sp/>register.</highlight></codeline>
<codeline lineno="3370"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga818e09da4e7826d49a1ee12741884a79" kindref="member" tooltip="Gpb-lo register.">bl</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3371"><highlight class="comment">//!<sp/>@brief<sp/>Gpb-hi<sp/>register.</highlight></codeline>
<codeline lineno="3372"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1gad3d48dab9109c26546c94766a3b33825" kindref="member" tooltip="Gpb-hi register.">ah</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3373"><highlight class="comment">//!<sp/>@brief<sp/>Gpb-hi<sp/>register.</highlight></codeline>
<codeline lineno="3374"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga76811396c86f71e9ecb43754dd2cbd87" kindref="member" tooltip="Gpb-hi register.">ch</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3375"><highlight class="comment">//!<sp/>@brief<sp/>Gpb-hi<sp/>register.</highlight></codeline>
<codeline lineno="3376"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga42ba84c3fd14dc5685ee3a6e93d2e7dc" kindref="member" tooltip="Gpb-hi register.">dh</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3377"><highlight class="comment">//!<sp/>@brief<sp/>Gpb-hi<sp/>register.</highlight></codeline>
<codeline lineno="3378"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1gafa4385ccd43834db175216a7643a4b9c" kindref="member" tooltip="Gpb-hi register.">bh</ref>;</highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3380"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="3381"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga9693c93b7022a0478eb3b9aa190b8509" kindref="member" tooltip="Gpw register.">ax</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3382"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="3383"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga19c4550c3bf2643c92558c832933078d" kindref="member" tooltip="Gpw register.">cx</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3384"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="3385"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1gafdae06fe5bf6c7b89214c29095800ce4" kindref="member" tooltip="Gpw register.">dx</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3386"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="3387"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga08389b37e059f2e24d3833717573cc06" kindref="member" tooltip="Gpw register.">bx</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3388"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="3389"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga746716fbb6c456a5221c9cfcb1beadca" kindref="member" tooltip="Gpw register.">sp</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3390"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="3391"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga4fee25c5536a29cdf375cf6a2d597d7c" kindref="member" tooltip="Gpw register.">bp</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3392"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="3393"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1gaa8b171d60de31743a13e44bd7aa353a0" kindref="member" tooltip="Gpw register.">si</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3394"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="3395"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1gaff3cf1f8d62c4e5879e74ac35b4d01ad" kindref="member" tooltip="Gpw register.">di</ref>;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3397"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3398"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga26df91f0fa40947bb620b176472bf3d3" kindref="member" tooltip="Gpd register.">eax</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3399"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3400"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1gaf030da0053911445efff9d86a7d0e251" kindref="member" tooltip="Gpd register.">ecx</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3401"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3402"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1gacc5e7948fbb4596d3e8407a858cb1817" kindref="member" tooltip="Gpd register.">edx</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3403"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3404"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga4bbee13a30d58526860dcfd0fa212590" kindref="member" tooltip="Gpd register.">ebx</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3405"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3406"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1gafee3a114f6450196ac970f3cc964b19b" kindref="member" tooltip="Gpd register.">esp</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3407"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3408"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga55deb3ba95a959b5461bd4525501e92e" kindref="member" tooltip="Gpd register.">ebp</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3409"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3410"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga1ad3750870b7e8657e9ad5be6b820a17" kindref="member" tooltip="Gpd register.">esi</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3411"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3412"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/><ref refid="group__asmjit__x86x64_1ga64bf639da31c64be79d6ab1f67b933af" kindref="member" tooltip="Gpd register.">edi</ref>;</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3414"><highlight class="comment">//!<sp/>@brief<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="3415"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FpReg<sp/><ref refid="group__asmjit__x86x64_1ga636706392adfdfb08fea891658ceb71e" kindref="member" tooltip="Fp register.">fp0</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3416"><highlight class="comment">//!<sp/>@brief<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="3417"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FpReg<sp/><ref refid="group__asmjit__x86x64_1ga1c8a7a001ce991bb870bb03ab6e64733" kindref="member" tooltip="Fp register.">fp1</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3418"><highlight class="comment">//!<sp/>@brief<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="3419"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FpReg<sp/><ref refid="group__asmjit__x86x64_1gacc26e9c240618ce8d9b1410bebede006" kindref="member" tooltip="Fp register.">fp2</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3420"><highlight class="comment">//!<sp/>@brief<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="3421"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FpReg<sp/><ref refid="group__asmjit__x86x64_1ga42b68e83bad4149c183fd77c947f248e" kindref="member" tooltip="Fp register.">fp3</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3422"><highlight class="comment">//!<sp/>@brief<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="3423"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FpReg<sp/><ref refid="group__asmjit__x86x64_1ga91e262adb08e2d5130861d51d0bf9944" kindref="member" tooltip="Fp register.">fp4</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3424"><highlight class="comment">//!<sp/>@brief<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="3425"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FpReg<sp/><ref refid="group__asmjit__x86x64_1ga9ab926cd365079ac81a722b915d66804" kindref="member" tooltip="Fp register.">fp5</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3426"><highlight class="comment">//!<sp/>@brief<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="3427"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FpReg<sp/><ref refid="group__asmjit__x86x64_1ga63b510953875202775292060ac80b379" kindref="member" tooltip="Fp register.">fp6</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3428"><highlight class="comment">//!<sp/>@brief<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="3429"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FpReg<sp/><ref refid="group__asmjit__x86x64_1gaade06831a25252457baeeb2cc80657c8" kindref="member" tooltip="Fp register.">fp7</ref>;</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3431"><highlight class="comment">//!<sp/>@brief<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="3432"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MmReg<sp/><ref refid="group__asmjit__x86x64_1gaac254ec0df446fd8611b935fbd6df205" kindref="member" tooltip="Mm register.">mm0</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3433"><highlight class="comment">//!<sp/>@brief<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="3434"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MmReg<sp/><ref refid="group__asmjit__x86x64_1ga20b84200f7a430d7768669cb7f819ebf" kindref="member" tooltip="Mm register.">mm1</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3435"><highlight class="comment">//!<sp/>@brief<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="3436"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MmReg<sp/><ref refid="group__asmjit__x86x64_1ga59effccc8deb087b01e2144aed15eb4d" kindref="member" tooltip="Mm register.">mm2</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3437"><highlight class="comment">//!<sp/>@brief<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="3438"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MmReg<sp/><ref refid="group__asmjit__x86x64_1ga7ad4264b211a87e14f394a097f1b1f32" kindref="member" tooltip="Mm register.">mm3</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3439"><highlight class="comment">//!<sp/>@brief<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="3440"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MmReg<sp/><ref refid="group__asmjit__x86x64_1ga9880e4d2897d436cf02ceca9295770dc" kindref="member" tooltip="Mm register.">mm4</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3441"><highlight class="comment">//!<sp/>@brief<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="3442"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MmReg<sp/><ref refid="group__asmjit__x86x64_1ga8e9d51810456c1d18fcea4b3aa1a250b" kindref="member" tooltip="Mm register.">mm5</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3443"><highlight class="comment">//!<sp/>@brief<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="3444"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MmReg<sp/><ref refid="group__asmjit__x86x64_1gac3ca430b0f0c56ce4d6d3db28e487af4" kindref="member" tooltip="Mm register.">mm6</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3445"><highlight class="comment">//!<sp/>@brief<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="3446"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MmReg<sp/><ref refid="group__asmjit__x86x64_1gae8a7f89db6a4ec575a45ec59136cddc6" kindref="member" tooltip="Mm register.">mm7</ref>;</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3448"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="3449"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/><ref refid="group__asmjit__x86x64_1ga8d4bab89ddc1e943c64a5feacc840191" kindref="member" tooltip="Xmm register.">xmm0</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3450"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="3451"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/><ref refid="group__asmjit__x86x64_1ga02e9e298a28703095c817c4b6e5ae1b7" kindref="member" tooltip="Xmm register.">xmm1</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3452"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="3453"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/><ref refid="group__asmjit__x86x64_1gac3df298cc30b94ec3bb225338113ed18" kindref="member" tooltip="Xmm register.">xmm2</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3454"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="3455"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/><ref refid="group__asmjit__x86x64_1gacdb159c53b05eb9d7e9009cf402993eb" kindref="member" tooltip="Xmm register.">xmm3</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3456"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="3457"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/><ref refid="group__asmjit__x86x64_1ga44380cc612351ebdab26c5caa4d39167" kindref="member" tooltip="Xmm register.">xmm4</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3458"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="3459"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/><ref refid="group__asmjit__x86x64_1ga63a5fdf0e1484858170f6eb488cf29a1" kindref="member" tooltip="Xmm register.">xmm5</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3460"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="3461"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/><ref refid="group__asmjit__x86x64_1gad382ad5c09e07de384ce90f93efb047e" kindref="member" tooltip="Xmm register.">xmm6</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3462"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="3463"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/><ref refid="group__asmjit__x86x64_1ga3315ef0134a6c7620c0c0e911136ce0f" kindref="member" tooltip="Xmm register.">xmm7</ref>;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3465"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="3466"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/><ref refid="group__asmjit__x86x64_1ga2d9dc9c5997d8a73da93c694de3aa2af" kindref="member" tooltip="Ymm register.">ymm0</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3467"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="3468"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/><ref refid="group__asmjit__x86x64_1ga466ee57781a100098fd32a9c6dafee8c" kindref="member" tooltip="Ymm register.">ymm1</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3469"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="3470"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/><ref refid="group__asmjit__x86x64_1gaa91f6c9575f2025f4c7dde4c346d3bce" kindref="member" tooltip="Ymm register.">ymm2</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3471"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="3472"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/><ref refid="group__asmjit__x86x64_1gaa3da39dd7490b7cf6d43211eaafbd156" kindref="member" tooltip="Ymm register.">ymm3</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3473"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="3474"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/><ref refid="group__asmjit__x86x64_1ga73f61a7ea57d08b24dad3c02858d8fcf" kindref="member" tooltip="Ymm register.">ymm4</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3475"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="3476"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/><ref refid="group__asmjit__x86x64_1ga1ac3f0e5d47e29c6fd3138d6687e07ab" kindref="member" tooltip="Ymm register.">ymm5</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3477"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="3478"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/><ref refid="group__asmjit__x86x64_1gafe0b6a22c74cd6cb774990b72abbe85b" kindref="member" tooltip="Ymm register.">ymm6</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3479"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="3480"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/><ref refid="group__asmjit__x86x64_1ga1d0f076a355b9deac2b085f7d11b87d5" kindref="member" tooltip="Ymm register.">ymm7</ref>;</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3482"><highlight class="comment">//!<sp/>@brief<sp/>Cs<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="3483"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SegReg<sp/><ref refid="group__asmjit__x86x64_1ga8add59b5136689e0c5e92cddbb926c76" kindref="member" tooltip="Cs segment register.">cs</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3484"><highlight class="comment">//!<sp/>@brief<sp/>Ss<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="3485"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SegReg<sp/><ref refid="group__asmjit__x86x64_1gae4d67e6b8e3a91a762ca9e402c7e229b" kindref="member" tooltip="Ss segment register.">ss</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3486"><highlight class="comment">//!<sp/>@brief<sp/>Ds<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="3487"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SegReg<sp/><ref refid="group__asmjit__x86x64_1gaa831b29fd36b6c29787e6f2a915f5f60" kindref="member" tooltip="Ds segment register.">ds</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3488"><highlight class="comment">//!<sp/>@brief<sp/>Es<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="3489"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SegReg<sp/><ref refid="group__asmjit__x86x64_1ga639d45b2268ca0940dc62e198bbfd3c1" kindref="member" tooltip="Es segment register.">es</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3490"><highlight class="comment">//!<sp/>@brief<sp/>Fs<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="3491"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SegReg<sp/><ref refid="group__asmjit__x86x64_1ga5c4bc4a82af43c7784d11d966c89532f" kindref="member" tooltip="Fs segment register.">fs</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3492"><highlight class="comment">//!<sp/>@brief<sp/>Gs<sp/>segment<sp/>register.</highlight></codeline>
<codeline lineno="3493"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SegReg<sp/><ref refid="group__asmjit__x86x64_1gaf38f11d2b5ecdf468aed83ce94491c04" kindref="member" tooltip="Gs segment register.">gs</ref>;</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3495"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>Gpb-lo<sp/>register.</highlight></codeline>
<codeline lineno="3496" refid="group__asmjit__x86x64_1ga89be8bc827d7615648e7074c9b0a11b3" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref><sp/><ref refid="group__asmjit__x86x64_1ga89be8bc827d7615648e7074c9b0a11b3" kindref="member" tooltip="Get Gpb-lo register.">gpb_lo</ref>(uint32_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa68c744c62e31dae6f664c78ab451f08" kindref="member" tooltip="Gpb-lo register (AL, BL, CL, DL, ...).">kRegTypeGpbLo</ref>,<sp/>index,<sp/>1);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3497"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>Gpb-hi<sp/>register.</highlight></codeline>
<codeline lineno="3498" refid="group__asmjit__x86x64_1ga0005f63fd37e6867078d64f361c6c49d" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref><sp/><ref refid="group__asmjit__x86x64_1ga0005f63fd37e6867078d64f361c6c49d" kindref="member" tooltip="Get Gpb-hi register.">gpb_hi</ref>(uint32_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa6e8dd55fd3b4ef24cd301f03b3d7257d" kindref="member" tooltip="Gpb-hi register (AH, BH, CH, DH only).">kRegTypeGpbHi</ref>,<sp/>index,<sp/>1);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3499"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="3500" refid="group__asmjit__x86x64_1ga84d074ec698bde54e1b258a5afe0ab21" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref><sp/><ref refid="group__asmjit__x86x64_1ga84d074ec698bde54e1b258a5afe0ab21" kindref="member" tooltip="Get Gpw register.">gpw</ref>(uint32_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa7088b937cbaa2114610046a308697d2e" kindref="member" tooltip="Gpw register.">kRegTypeGpw</ref>,<sp/>index,<sp/>2);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3501"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3502" refid="group__asmjit__x86x64_1ga7edc123ef6a6bc00b64fe45d9a295c1c" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref><sp/><ref refid="group__asmjit__x86x64_1ga7edc123ef6a6bc00b64fe45d9a295c1c" kindref="member" tooltip="Get Gpd register.">gpd</ref>(uint32_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>,<sp/>index,<sp/>4);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3503"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>Fp<sp/>register.</highlight></codeline>
<codeline lineno="3504" refid="group__asmjit__x86x64_1ga966625c8483c9f4de98c1697840ab166" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound" tooltip="X86/X64 80-bit Fp register.">FpReg</ref><sp/><ref refid="group__asmjit__x86x64_1ga966625c8483c9f4de98c1697840ab166" kindref="member" tooltip="Get Fp register.">fp</ref>(uint32_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1FpReg" kindref="compound" tooltip="X86/X64 80-bit Fp register.">FpReg</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efad8dab38a7bb9b84c468bdac1022c6a00" kindref="member" tooltip="Fp register.">kRegTypeFp</ref>,<sp/>index,<sp/>10);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3505"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>Mm<sp/>register.</highlight></codeline>
<codeline lineno="3506" refid="group__asmjit__x86x64_1ga9a8333264f20709b9757ea2fe6d98062" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound" tooltip="X86/X64 64-bit Mm register.">MmReg</ref><sp/><ref refid="group__asmjit__x86x64_1ga9a8333264f20709b9757ea2fe6d98062" kindref="member" tooltip="Get Mm register.">mm</ref>(uint32_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1MmReg" kindref="compound" tooltip="X86/X64 64-bit Mm register.">MmReg</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa9a46e468cd5c58fac3670afc952eb814" kindref="member" tooltip="Mm register.">kRegTypeMm</ref>,<sp/>index,<sp/>8);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3507"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="3508" refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref><sp/><ref refid="group__asmjit__x86x64_1ga5ad41041b11d6664c9dedcdf67bd431a" kindref="member" tooltip="Get Xmm register.">xmm</ref>(uint32_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaacea326fc6b0daaa36cc5e706d6656a5" kindref="member" tooltip="Xmm register.">kRegTypeXmm</ref>,<sp/>index,<sp/>16);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3509"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="3510" refid="group__asmjit__x86x64_1ga670a05a7edf855537e6d4d30c4ccb135" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref><sp/><ref refid="group__asmjit__x86x64_1ga670a05a7edf855537e6d4d30c4ccb135" kindref="member" tooltip="Get Xmm register.">ymm</ref>(uint32_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa962f5931b1817196fa1c7bd908e02fbd" kindref="member" tooltip="Ymm register.">kRegTypeYmm</ref>,<sp/>index,<sp/>32);<sp/>}</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"></highlight></codeline>
<codeline lineno="3512"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Mem<sp/>-<sp/>ptr[base<sp/>+<sp/>disp]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3514"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3515"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3516"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3517" refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(base,<sp/>disp,<sp/>size);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3518"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3519" refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3520"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3521" refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member" tooltip="Create a word pointer operand.">word_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3522"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3523" refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3524"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3525" refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3526"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3527" refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member" tooltip="Create a tword pointer operand.">tword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3528"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3529" refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3530"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3531" refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3533"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3534" refid="group__asmjit__x86x64_1gaa1f7204b8b9a2b5a2714c620bf5bf2c2" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(base,<sp/>disp,<sp/>size);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3535"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3536" refid="group__asmjit__x86x64_1ga4172638b7aa29fdaff0267f28741322f" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3537"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3538" refid="group__asmjit__x86x64_1ga4fc2295123825dff48a8cd034be81ba4" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member" tooltip="Create a word pointer operand.">word_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3539"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3540" refid="group__asmjit__x86x64_1ga09fc6ab585f7e34335437525f03e330d" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3541"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3542" refid="group__asmjit__x86x64_1ga9999c770898c5cf09f0ab965c55c420b" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3543"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3544" refid="group__asmjit__x86x64_1gaef90056512691315aac479244d4cf469" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member" tooltip="Create a tword pointer operand.">tword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3545"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3546" refid="group__asmjit__x86x64_1ga93a4eec7ab3afe8297abc9063e02a578" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3547"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3548" refid="group__asmjit__x86x64_1ga57777272861c23eea9575656a3a768cb" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Mem<sp/>-<sp/>ptr[base<sp/>+<sp/>(index<sp/>&lt;&lt;<sp/>shift)<sp/>+<sp/>disp]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3554"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3555" refid="group__asmjit__x86x64_1gabfc2a2cbd5b7bd0eb9e09deac8ca3a10" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/>size);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3556"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3557" refid="group__asmjit__x86x64_1ga9557dea7a27336021acde4d2698e03c9" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3558"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3559" refid="group__asmjit__x86x64_1gaba11ecf506e1d03f66d64cdae8360b72" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member" tooltip="Create a word pointer operand.">word_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3560"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3561" refid="group__asmjit__x86x64_1gaf5b42aef13ab083036c2e2c331d85c98" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3562"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3563" refid="group__asmjit__x86x64_1ga9b7c1c7088d3b474ee4e1026c447fe60" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3564"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3565" refid="group__asmjit__x86x64_1ga2bf778c73acd56b5c4f2db6e18e29879" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member" tooltip="Create a tword pointer operand.">tword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3566"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3567" refid="group__asmjit__x86x64_1ga789536cde0d43490afae28caaec79ae9" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3568"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3569" refid="group__asmjit__x86x64_1gaaeeeeb38ba9aa34b2828bbdc5680929f" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3571"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3572" refid="group__asmjit__x86x64_1gaa5d03fab20086abcf6ee19d0fe734721" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/>size);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3573"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3574" refid="group__asmjit__x86x64_1gac587ce4d21bf31f524fd714d6cf36cd8" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3575"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3576" refid="group__asmjit__x86x64_1ga7b150cbf4315ecbfb752319819294464" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member" tooltip="Create a word pointer operand.">word_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3577"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3578" refid="group__asmjit__x86x64_1ga6899f28caad8ecabd382aba730a6d9e2" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3579"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3580" refid="group__asmjit__x86x64_1ga5c76eb0abbef7127b9e3f09f0b45e0f2" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3581"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3582" refid="group__asmjit__x86x64_1ga5f594959ef33e1962f9cc6816928d4ae" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member" tooltip="Create a tword pointer operand.">tword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3583"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3584" refid="group__asmjit__x86x64_1gaf0e439b105f3407a4b2ef6625cc2aef0" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3585"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3586" refid="group__asmjit__x86x64_1gaedce2b16517a68ae873934f26a4f4ecc" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Mem<sp/>-<sp/>ptr[base<sp/>+<sp/>(vex<sp/>&lt;&lt;<sp/>shift)<sp/>+<sp/>disp]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3592"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3593" refid="group__asmjit__x86x64_1gaa222c4cc75b12e20c13759c5c8b40eb5" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/>size);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3594"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3595" refid="group__asmjit__x86x64_1ga9bc8a021e3d44986b4a95422d9d2c0b3" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3596"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3597" refid="group__asmjit__x86x64_1ga16e72ef68f4abf845c98337e6586b314" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member" tooltip="Create a word pointer operand.">word_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3598"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3599" refid="group__asmjit__x86x64_1gabefa83e46f876817799bd5c72a69a6bb" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3600"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3601" refid="group__asmjit__x86x64_1gab60b69b8ad16b25d76f826eb58e56397" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3602"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3603" refid="group__asmjit__x86x64_1ga7372cb3a486ac35555bc1335b16252dd" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member" tooltip="Create a tword pointer operand.">tword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3604"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3605" refid="group__asmjit__x86x64_1ga5d7753981a9c032bd1bf04116e2519ec" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3606"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3607" refid="group__asmjit__x86x64_1ga7a442bd56488de1f7f1c11faa00afa4a" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3609"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3610" refid="group__asmjit__x86x64_1ga2e3757b4217b010e115f22560b2a9d5e" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/>size);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3611"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3612" refid="group__asmjit__x86x64_1ga8478ae439228387e843cd61b3bd96602" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3613"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3614" refid="group__asmjit__x86x64_1ga97f1f154203fb0240934c791e06095a9" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member" tooltip="Create a word pointer operand.">word_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3615"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3616" refid="group__asmjit__x86x64_1ga8a02616bef42eb757aa7468503a43332" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3617"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3618" refid="group__asmjit__x86x64_1gafad577af79a63570cd0531ec0d547313" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3619"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3620" refid="group__asmjit__x86x64_1ga63b3d7f897b643455c644772db3731f1" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member" tooltip="Create a tword pointer operand.">tword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3621"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3622" refid="group__asmjit__x86x64_1ga6afbda4ec2382b6042f361559a87b9c9" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3623"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3624" refid="group__asmjit__x86x64_1gab9319b65e88ee5774095f770e5e3865f" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3626"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3627" refid="group__asmjit__x86x64_1ga386633dbc0ef49af456c591def83f446" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/>size);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3628"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3629" refid="group__asmjit__x86x64_1ga428f2dbf341f931e6e9879f95197f99b" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3630"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3631" refid="group__asmjit__x86x64_1ga67dbe6b80e73d0d359962ad6b882f492" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member" tooltip="Create a word pointer operand.">word_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3632"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3633" refid="group__asmjit__x86x64_1gac9508cf3367f590e724698fc031a7924" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3634"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3635" refid="group__asmjit__x86x64_1ga7fd9e069f2f70e94220ccd0f62093b9a" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3636"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3637" refid="group__asmjit__x86x64_1gafe5d810a42fdfc42e1a8d16625d945d9" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member" tooltip="Create a tword pointer operand.">tword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3638"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3639" refid="group__asmjit__x86x64_1ga890f396997638ff3dfa262fda924d55c" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3640"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3641" refid="group__asmjit__x86x64_1gafa8a9875546aceb920c723d67ca63356" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3643"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3644" refid="group__asmjit__x86x64_1ga9b020312782d0d9729cd43765810d673" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/>size);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3645"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3646" refid="group__asmjit__x86x64_1ga8240f4a6de6173978e31f661daf5ce54" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3647"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3648" refid="group__asmjit__x86x64_1ga06ac23a98a546fdbaca4eb5f63f3b78c" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member" tooltip="Create a word pointer operand.">word_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3649"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3650" refid="group__asmjit__x86x64_1gad99a28ff5659ee465af309f533e05ca1" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3651"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3652" refid="group__asmjit__x86x64_1gab930bbf538e7bc2ca616c4f97f77c6b3" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3653"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3654" refid="group__asmjit__x86x64_1ga8672652bad0c5096b76ddfaa565b3b48" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member" tooltip="Create a tword pointer operand.">tword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3655"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3656" refid="group__asmjit__x86x64_1gada1085e316a3c5a494dc9d6552a305aa" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3657"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3658" refid="group__asmjit__x86x64_1gac1cb2a72081a589fbcc9a67d8bf5b60f" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"></highlight></codeline>
<codeline lineno="3660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Mem<sp/>-<sp/>[label<sp/>+<sp/>disp]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3663"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3664"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3665" refid="group__asmjit__x86x64_1gac1dc62eebf2af92367b9fea74113aedc" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(label,<sp/>disp,<sp/>size);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3666"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3667" refid="group__asmjit__x86x64_1gad518e185271c7fd2276ec29b3d21b37e" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3668"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3669" refid="group__asmjit__x86x64_1gaf968d3cf34d8de62d1e9baa326448205" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member" tooltip="Create a word pointer operand.">word_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3670"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3671" refid="group__asmjit__x86x64_1ga74f3a2d0a3ab13d8b4da39bade6f5d2c" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3672"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3673" refid="group__asmjit__x86x64_1ga51c098ca6a96426e15f68de3b6da0e53" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3674"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3675" refid="group__asmjit__x86x64_1gae8537530a3e55089a87c4167f47793cc" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member" tooltip="Create a tword pointer operand.">tword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3676"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3677" refid="group__asmjit__x86x64_1ga67ef7b8f357e9c055f943f500727f170" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3678"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3679" refid="group__asmjit__x86x64_1ga37c1f3f6eae4bfb5a1e9a20ccdd50d20" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"></highlight></codeline>
<codeline lineno="3681"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Mem<sp/>-<sp/>[label<sp/>+<sp/>index<sp/>&lt;&lt;<sp/>shift<sp/>+<sp/>disp]]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3685"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3686" refid="group__asmjit__x86x64_1ga6e144cc1bdb8303fa27dc9859f18a1f0" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/>size);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3687"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3688" refid="group__asmjit__x86x64_1gafbb2c771ea68d0e8735e19089948041e" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3689"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3690" refid="group__asmjit__x86x64_1ga0cc7a145a71e494b56c7addd65586005" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member" tooltip="Create a word pointer operand.">word_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3691"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3692" refid="group__asmjit__x86x64_1ga290db970010da64419ffd92d94beaf22" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3693"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3694" refid="group__asmjit__x86x64_1ga821f4fd96db365346c7e6d1b75392073" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3695"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3696" refid="group__asmjit__x86x64_1gadf3fe73c87249404e342250e6c289acc" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member" tooltip="Create a tword pointer operand.">tword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3697"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3698" refid="group__asmjit__x86x64_1gaa9591cd916bf85cb60a9ddfca2f45e6e" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3699"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3700" refid="group__asmjit__x86x64_1gaa8ba2c8bb39a3a2101ebfe8f75a4b85c" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3702"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3703" refid="group__asmjit__x86x64_1ga0603e97df39168d87d717fca6c58f652" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Mem(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/>size);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3704"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3705" refid="group__asmjit__x86x64_1gab52f66e3d5d9a8d48de60c1a25602dc3" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga63ec6f038e14f638db2711d0ba762e29" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3706"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3707" refid="group__asmjit__x86x64_1gac6e5d87657505af02b8e3b8b0d481d6d" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8072a973c0787fa1661d03d14dd44200" kindref="member" tooltip="Create a word pointer operand.">word_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3708"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3709" refid="group__asmjit__x86x64_1ga4cba40cba9109d1e0312c50b3669f953" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3710"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3711" refid="group__asmjit__x86x64_1ga19361e54bfef74cbae2dae9c9e803d28" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga9ad7fc0ec8062b1430b664d683ed6090" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3712"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3713" refid="group__asmjit__x86x64_1gabf6f25517c129a32b4aeae89bbfca997" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga60fd11a84364c6e4f2db878a44baff05" kindref="member" tooltip="Create a tword pointer operand.">tword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3714"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3715" refid="group__asmjit__x86x64_1gad950a65cb42a9e71db528ca58f134921" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gacb037fa7048bc43b1dc1c1d8d9974dc0" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3716"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3717" refid="group__asmjit__x86x64_1gab2db352a6f9ad4761a730d6e56a712d7" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gaf35511d2fd6ba120b8cf61c30e625bf0" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound" tooltip="Gp variable.">GpVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"></highlight></codeline>
<codeline lineno="3719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Mem<sp/>-<sp/>[ptr<sp/>+<sp/>disp]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3723"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3724"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_API<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3726"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3727" refid="group__asmjit__x86x64_1ga52dd2a5a28f7d2b7dc1bb4df9e0f3d3d" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga52dd2a5a28f7d2b7dc1bb4df9e0f3d3d" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3728"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3729" refid="group__asmjit__x86x64_1gae8fa7853e946d765f1a8e755beee4650" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gae8fa7853e946d765f1a8e755beee4650" kindref="member" tooltip="Create a word pointer operand.">word_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3730"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3731" refid="group__asmjit__x86x64_1ga8f64b84b53ddda1ac676b76337d9276b" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8f64b84b53ddda1ac676b76337d9276b" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3732"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3733" refid="group__asmjit__x86x64_1ga8e71ae07abb56874ea0f0f3c0374ae8d" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8e71ae07abb56874ea0f0f3c0374ae8d" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3734"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand<sp/>(used<sp/>for<sp/>80-bit<sp/>floating<sp/>points).</highlight></codeline>
<codeline lineno="3735" refid="group__asmjit__x86x64_1ga54c6da2797b58ce91f4ff4512539f69b" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga54c6da2797b58ce91f4ff4512539f69b" kindref="member" tooltip="Create a tword pointer operand (used for 80-bit floating points).">tword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3736"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3737" refid="group__asmjit__x86x64_1ga020aad5b46970022452ece30b2aa55b9" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga020aad5b46970022452ece30b2aa55b9" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3738"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3739" refid="group__asmjit__x86x64_1gab010c79eb2ad4495a9e48ecba33eb4e1" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gab010c79eb2ad4495a9e48ecba33eb4e1" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Mem<sp/>-<sp/>[pAbs<sp/>+<sp/>index<sp/>&lt;&lt;<sp/>shift<sp/>+<sp/>disp]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3744"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3745"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3746"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_API<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86Reg&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3747"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>custom<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3748"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_API<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>X86Var&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0,<sp/>uint32_t<sp/>size<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3750"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>Byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3751" refid="group__asmjit__x86x64_1ga766b934f3a268f12904a7c897cbb1b03" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga52dd2a5a28f7d2b7dc1bb4df9e0f3d3d" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3752"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3753" refid="group__asmjit__x86x64_1gabe797fc454f21df82735de31d30c168f" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gae8fa7853e946d765f1a8e755beee4650" kindref="member" tooltip="Create a word pointer operand.">word_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3754"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3755" refid="group__asmjit__x86x64_1gac444fc263863e1e8e1daa14b4bd5480a" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8f64b84b53ddda1ac676b76337d9276b" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3756"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3757" refid="group__asmjit__x86x64_1ga9594e0ed093bbc5ec026e215a780b37e" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8e71ae07abb56874ea0f0f3c0374ae8d" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3758"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3759" refid="group__asmjit__x86x64_1ga5e758a6db5c1e5c81bdfcfe4f9029c27" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga54c6da2797b58ce91f4ff4512539f69b" kindref="member" tooltip="Create a tword pointer operand (used for 80-bit floating points).">tword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3760"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3761" refid="group__asmjit__x86x64_1ga4ebf7d7be09c372ae6990411b6ce2262" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga020aad5b46970022452ece30b2aa55b9" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3762"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3763" refid="group__asmjit__x86x64_1gac427f9babeb10c9c2096b6e886fd9ed7" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gab010c79eb2ad4495a9e48ecba33eb4e1" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1GpReg" kindref="compound" tooltip="X86/X64 Gpb/Gpw/Gpd/Gpq register.">GpReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3765"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3766" refid="group__asmjit__x86x64_1ga0678bcc14f56f1827da72a36041858e6" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga52dd2a5a28f7d2b7dc1bb4df9e0f3d3d" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3767"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3768" refid="group__asmjit__x86x64_1gad4296f01a2ca565449b2e65df74cd1bb" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gae8fa7853e946d765f1a8e755beee4650" kindref="member" tooltip="Create a word pointer operand.">word_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3769"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3770" refid="group__asmjit__x86x64_1ga8ede25fd7b7e129c6e4bf1120434b616" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8f64b84b53ddda1ac676b76337d9276b" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3771"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3772" refid="group__asmjit__x86x64_1ga7aeefdce087761a3e2d0f1a3ea88831f" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8e71ae07abb56874ea0f0f3c0374ae8d" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3773"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3774" refid="group__asmjit__x86x64_1ga997e6ee71d0c3969d77fd5e440f8a111" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga54c6da2797b58ce91f4ff4512539f69b" kindref="member" tooltip="Create a tword pointer operand (used for 80-bit floating points).">tword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3775"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3776" refid="group__asmjit__x86x64_1gab1cdd16af55a0c98b19e1e81d2c8d2a2" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga020aad5b46970022452ece30b2aa55b9" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3777"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3778" refid="group__asmjit__x86x64_1gab6243705e2080de81daffbbddebbc6ee" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gab010c79eb2ad4495a9e48ecba33eb4e1" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmReg" kindref="compound" tooltip="X86/X64 128-bit Xmm register.">XmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3780"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3781" refid="group__asmjit__x86x64_1gae1a72e070f4f292fb373806589521b37" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga52dd2a5a28f7d2b7dc1bb4df9e0f3d3d" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3782"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3783" refid="group__asmjit__x86x64_1ga7e07d8a4479067a6ed2c9055515105f7" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gae8fa7853e946d765f1a8e755beee4650" kindref="member" tooltip="Create a word pointer operand.">word_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3784"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3785" refid="group__asmjit__x86x64_1gac88e03a5157f14f1a8690059066465f7" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8f64b84b53ddda1ac676b76337d9276b" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3786"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3787" refid="group__asmjit__x86x64_1ga8d413257e58023bd809462a229cf3dca" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8e71ae07abb56874ea0f0f3c0374ae8d" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3788"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3789" refid="group__asmjit__x86x64_1ga8e4990eea78c213a7e1e8224c8ec1834" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga54c6da2797b58ce91f4ff4512539f69b" kindref="member" tooltip="Create a tword pointer operand (used for 80-bit floating points).">tword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3790"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3791" refid="group__asmjit__x86x64_1ga675f1048e4132d3045b18bf84492a14e" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga020aad5b46970022452ece30b2aa55b9" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3792"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3793" refid="group__asmjit__x86x64_1ga6e3694cfd83cc13ec978cb8d541f58b0" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gab010c79eb2ad4495a9e48ecba33eb4e1" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmReg" kindref="compound" tooltip="X86/X64 256-bit Ymm register.">YmmReg</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3795"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3796" refid="group__asmjit__x86x64_1gab57d4492c986ec14980ba3ea6eaf1c50" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga52dd2a5a28f7d2b7dc1bb4df9e0f3d3d" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3797"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3798" refid="group__asmjit__x86x64_1ga1e7d6bf1e8419b7135bf0fe6dd4223ae" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gae8fa7853e946d765f1a8e755beee4650" kindref="member" tooltip="Create a word pointer operand.">word_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3799"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3800" refid="group__asmjit__x86x64_1gac6a2e3e59e3371819367f90068284642" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8f64b84b53ddda1ac676b76337d9276b" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3801"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3802" refid="group__asmjit__x86x64_1ga041f6a70e727c4dc6fba16c398c7cbcd" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8e71ae07abb56874ea0f0f3c0374ae8d" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3803"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3804" refid="group__asmjit__x86x64_1ga0232abf0654d23b1df9ade0261c0730e" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga54c6da2797b58ce91f4ff4512539f69b" kindref="member" tooltip="Create a tword pointer operand (used for 80-bit floating points).">tword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3805"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3806" refid="group__asmjit__x86x64_1ga8a17c1eb1833da5920322132fd634509" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga020aad5b46970022452ece30b2aa55b9" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3807"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3808" refid="group__asmjit__x86x64_1ga0856a51ff0b8a993ba023b5ee5623b17" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gab010c79eb2ad4495a9e48ecba33eb4e1" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound" tooltip="Xmm variable.">XmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3810"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>byte<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3811" refid="group__asmjit__x86x64_1gaf044beee922b2cac9e7e7f76260a6992" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga52dd2a5a28f7d2b7dc1bb4df9e0f3d3d" kindref="member" tooltip="Create a byte pointer operand.">byte_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3812"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>word<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3813" refid="group__asmjit__x86x64_1ga7dfecad16b8f19d572e8c5b711345bf4" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gae8fa7853e946d765f1a8e755beee4650" kindref="member" tooltip="Create a word pointer operand.">word_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3814"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>dword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3815" refid="group__asmjit__x86x64_1gaf2873191b45fc3bff1b5615e4d8d0426" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8f64b84b53ddda1ac676b76337d9276b" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3816"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>qword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3817" refid="group__asmjit__x86x64_1ga10f40ece260007fbc65dcf01383cb020" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga8e71ae07abb56874ea0f0f3c0374ae8d" kindref="member" tooltip="Create a qword pointer operand.">qword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3818"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>tword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3819" refid="group__asmjit__x86x64_1ga5dd886789253ab1ca7f734a9880ffe63" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga54c6da2797b58ce91f4ff4512539f69b" kindref="member" tooltip="Create a tword pointer operand (used for 80-bit floating points).">tword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3820"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>oword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3821" refid="group__asmjit__x86x64_1ga34a6f76e6a5ab6125bd7a60e041f6290" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1ga020aad5b46970022452ece30b2aa55b9" kindref="member" tooltip="Create a oword pointer operand.">oword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3822"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>a<sp/>yword<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3823" refid="group__asmjit__x86x64_1gacb099ffecf263893eed76f0e119a1be1" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/><ref refid="group__asmjit__x86x64_1gab010c79eb2ad4495a9e48ecba33eb4e1" kindref="member" tooltip="Create a yword pointer operand.">yword_ptr_abs</ref>(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound" tooltip="Ymm variable.">YmmVar</ref>&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref>);<sp/>}</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3826"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86x64::Util]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3827"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>x86IsGpbRegOp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>*<sp/>op)<sp/>{</highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>mask<sp/>=<sp/>IntUtil::pack32_2x8_1x16(0xFF,<sp/>0xFF,<sp/>~(kRegTypePatchedGpbHi<sp/>&lt;&lt;<sp/>8)<sp/>&amp;<sp/>0xFF00);</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(op-&gt;<ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].u32[0]<sp/>&amp;<sp/>mask)<sp/>==<sp/>IntUtil::pack32_2x8_1x16(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba8742403556c7e635e7531c58252de1ea" kindref="member" tooltip="Operand is a register.">kOperandTypeReg</ref>,<sp/>1,<sp/>0x0000);</highlight></codeline>
<codeline lineno="3832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3833"><highlight class="normal"></highlight></codeline>
<codeline lineno="3834"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>x86VarTypeToClass(uint32_t<sp/>vType)<sp/>{</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Getting<sp/>varClass<sp/>is<sp/>the<sp/>only<sp/>safe<sp/>operation<sp/>when<sp/>dealing<sp/>with<sp/>denormalized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>varType.<sp/>Any<sp/>other<sp/>property<sp/>would<sp/>require<sp/>to<sp/>map<sp/>vType<sp/>to<sp/>the<sp/>architecture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specific<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(vType<sp/>&lt;<sp/><ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>);</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_varInfo[vType].<ref refid="structasmjit_1_1x86x64_1_1VarInfo_1a6dd256c61848d49c6a6c1f5c922c288b" kindref="member" tooltip="Get variable class, see kRegClass.">getClass</ref>();</highlight></codeline>
<codeline lineno="3840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3842"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="3843"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x86x64<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3845"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3846"><highlight class="normal"></highlight></codeline>
<codeline lineno="3847"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X86)</highlight></codeline>
<codeline lineno="3852"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x86<sp/>{</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>only<sp/>place<sp/>where<sp/>the<sp/>x86x64<sp/>namespace<sp/>is<sp/>included<sp/>into<sp/>x86.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">::asmjit::x86x64;</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3859"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_x86x64</highlight></codeline>
<codeline lineno="3860"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="3861"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3862"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86::kRegType]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"></highlight></codeline>
<codeline lineno="3866"><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga5e994ba992c6c8d421eb8065435b06ef" kindref="member" tooltip="X86/X64 register types.">kRegType</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3867"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3868"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kRegTypeGpz<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref></highlight></codeline>
<codeline lineno="3869"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"></highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86::kRegCount]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3873"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3874"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3875"><highlight class="comment">//!<sp/>@brief<sp/>X86<sp/>registers<sp/>count<sp/>per<sp/>class.</highlight></codeline>
<codeline lineno="3876"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga49cd81f45663e5bb3161d03c51e38429" kindref="member" tooltip="X86/X64 registers count.">kRegCount</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3877"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Base<sp/>count<sp/>of<sp/>registers<sp/>(8).</highlight></codeline>
<codeline lineno="3878"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kRegCountBase<sp/>=<sp/>8,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3879"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>Gp<sp/>registers<sp/>(8).</highlight></codeline>
<codeline lineno="3880"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kRegCountGp<sp/>=<sp/>kRegCountBase,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3881"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>Xmm<sp/>registers<sp/>(8).</highlight></codeline>
<codeline lineno="3882"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kRegCountXmm<sp/>=<sp/>kRegCountBase,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3883"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>Ymm<sp/>registers<sp/>(8).</highlight></codeline>
<codeline lineno="3884"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kRegCountYmm<sp/>=<sp/>kRegCountBase</highlight></codeline>
<codeline lineno="3885"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86::Variables]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3890"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3891"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="3892"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="3893"><highlight class="comment">//!<sp/>@brief<sp/>Mapping<sp/>of<sp/>x64<sp/>variables<sp/>into<sp/>their<sp/>real<sp/>IDs.</highlight></codeline>
<codeline lineno="3894"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="3895"><highlight class="comment">//!<sp/>This<sp/>mapping<sp/>translates<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="3896"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeIntPtr<sp/>to<sp/>@c<sp/>kVarTypeInt32.</highlight></codeline>
<codeline lineno="3897"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeUIntPtr<sp/>to<sp/>@c<sp/>kVarTypeUInt32.</highlight></codeline>
<codeline lineno="3898"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>_varMapping[<ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>];</highlight></codeline>
<codeline lineno="3899"><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86::Registers]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3904"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3905"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zax;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3906"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3907"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zcx;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3908"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3909"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zdx;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3910"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3911"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zbx;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3912"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3913"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zsp;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3914"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3915"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zbp;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3916"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3917"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zsi;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3918"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="3919"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zdi;</highlight></codeline>
<codeline lineno="3920"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3921"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>Gp<sp/>qword<sp/>register.</highlight></codeline>
<codeline lineno="3922"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>GpReg<sp/>gpz(uint32_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GpReg(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efaa80e33bcfb365046aa842a67128a6ead" kindref="member" tooltip="Gpd register.">kRegTypeGpd</ref>,<sp/>index,<sp/>4);<sp/>}</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x86::Mem]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3928"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>32-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3929"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/>4);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3930"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>32-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3931"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpVar&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/>4);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3932"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>32-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3933"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/>4);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3934"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>32-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3935"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpVar&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpVar&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/>4);<sp/>}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3937"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>32-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3938"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Label&amp;<sp/>label,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>disp,<sp/>4);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3939"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>32-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3940"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Label&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/>4);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3941"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>32-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3942"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Label&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpVar&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/>4);<sp/>}</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3944"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>32-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3945"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr_abs(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>disp,<sp/>4);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3946"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>32-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3947"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr_abs(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/>4);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3948"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>32-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="3949"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr_abs(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpVar&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/>4);<sp/>}</highlight></codeline>
<codeline lineno="3950"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3951"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="3952"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x86<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3955"><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X86</highlight></codeline>
<codeline lineno="3957"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3958"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3959"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x64]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_BUILD_X64)</highlight></codeline>
<codeline lineno="3963"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">x64<sp/>{</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>only<sp/>place<sp/>where<sp/>the<sp/>x86x64<sp/>namespace<sp/>is<sp/>included<sp/>into<sp/>x64.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">::asmjit::x86x64;</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3970"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_x86x64</highlight></codeline>
<codeline lineno="3971"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="3972"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x64::kRegType]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3975"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"></highlight></codeline>
<codeline lineno="3977"><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga5e994ba992c6c8d421eb8065435b06ef" kindref="member" tooltip="X86/X64 register types.">kRegType</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3978"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="3979"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kRegTypeGpz<sp/>=<sp/><ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref></highlight></codeline>
<codeline lineno="3980"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x64::kRegCount]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3986"><highlight class="comment">//!<sp/>@brief<sp/>X86<sp/>registers<sp/>count<sp/>per<sp/>class.</highlight></codeline>
<codeline lineno="3987"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__x86x64_1ga49cd81f45663e5bb3161d03c51e38429" kindref="member" tooltip="X86/X64 registers count.">kRegCount</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3988"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Base<sp/>count<sp/>of<sp/>registers<sp/>(16).</highlight></codeline>
<codeline lineno="3989"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kRegCountBase<sp/>=<sp/>16,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3990"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>Gp<sp/>registers<sp/>(16).</highlight></codeline>
<codeline lineno="3991"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kRegCountGp<sp/>=<sp/>kRegCountBase,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3992"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>Xmm<sp/>registers<sp/>(16).</highlight></codeline>
<codeline lineno="3993"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kRegCountXmm<sp/>=<sp/>kRegCountBase,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="3994"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Count<sp/>of<sp/>Ymm<sp/>registers<sp/>(16).</highlight></codeline>
<codeline lineno="3995"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>kRegCountYmm<sp/>=<sp/>kRegCountBase</highlight></codeline>
<codeline lineno="3996"><highlight class="normal">};</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"></highlight></codeline>
<codeline lineno="3998"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3999"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x64::Variables]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4000"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4002"><highlight class="comment">//!<sp/>@internal</highlight></codeline>
<codeline lineno="4003"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="4004"><highlight class="comment">//!<sp/>@brief<sp/>Mapping<sp/>of<sp/>x64<sp/>variables<sp/>into<sp/>their<sp/>real<sp/>IDs.</highlight></codeline>
<codeline lineno="4005"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="4006"><highlight class="comment">//!<sp/>This<sp/>mapping<sp/>translates<sp/>the<sp/>following:</highlight></codeline>
<codeline lineno="4007"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeIntPtr<sp/>to<sp/>@c<sp/>kVarTypeInt64.</highlight></codeline>
<codeline lineno="4008"><highlight class="comment">//!<sp/>-<sp/>@c<sp/>kVarTypeUIntPtr<sp/>to<sp/>@c<sp/>kVarTypeUInt64.</highlight></codeline>
<codeline lineno="4009"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>_varMapping[<ref refid="group__asmjit__x86x64_1ggac1cff950c5a6c4a09fa2807d40d6b74ea3641077aa54ea95d5cf1b3cf5fcaf240" kindref="member" tooltip="Count of variable types.">kVarTypeCount</ref>];</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight></codeline>
<codeline lineno="4011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x64::Registers]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4015"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4016"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>spl;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4017"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4018"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>bpl;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4019"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4020"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>sil;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4021"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4022"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>dil;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4023"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4024"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r8b;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4025"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4026"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r9b;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4027"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4028"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r10b;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4029"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4030"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r11b;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4031"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4032"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r12b;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4033"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4034"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r13b;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4035"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4036"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r14b;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4037"><highlight class="comment">//!<sp/>@brief<sp/>Gpb<sp/>register.</highlight></codeline>
<codeline lineno="4038"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r15b;</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4040"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="4041"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r8w;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4042"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="4043"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r9w;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4044"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="4045"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r10w;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4046"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="4047"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r11w;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4048"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="4049"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r12w;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4050"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="4051"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r13w;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4052"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="4053"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r14w;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4054"><highlight class="comment">//!<sp/>@brief<sp/>Gpw<sp/>register.</highlight></codeline>
<codeline lineno="4055"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r15w;</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4057"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="4058"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r8d;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4059"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="4060"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r9d;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4061"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="4062"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r10d;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4063"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="4064"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r11d;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4065"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="4066"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r12d;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4067"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="4068"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r13d;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4069"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="4070"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r14d;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4071"><highlight class="comment">//!<sp/>@brief<sp/>Gpd<sp/>register.</highlight></codeline>
<codeline lineno="4072"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r15d;</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4074"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4075"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>rax;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4076"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4077"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>rcx;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4078"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4079"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>rdx;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4080"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4081"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>rbx;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4082"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4083"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>rsp;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4084"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4085"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>rbp;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4086"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4087"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>rsi;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4088"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4089"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>rdi;</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4091"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4092"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r8;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4093"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4094"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r9;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4095"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4096"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r10;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4097"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4098"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r11;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4099"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4100"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r12;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4101"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4102"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r13;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4103"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4104"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r14;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4105"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4106"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>r15;</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4108"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4109"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zax;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4110"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4111"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zcx;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4112"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4113"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zdx;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4114"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4115"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zbx;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4116"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4117"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zsp;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4118"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4119"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zbp;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4120"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4121"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zsi;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4122"><highlight class="comment">//!<sp/>@brief<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4123"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg<sp/>zdi;</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4125"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="4126"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/>xmm8;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4127"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="4128"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/>xmm9;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4129"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="4130"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/>xmm10;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4131"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="4132"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/>xmm11;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4133"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="4134"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/>xmm12;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4135"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="4136"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/>xmm13;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4137"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="4138"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/>xmm14;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4139"><highlight class="comment">//!<sp/>@brief<sp/>Xmm<sp/>register.</highlight></codeline>
<codeline lineno="4140"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>XmmReg<sp/>xmm15;</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4142"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="4143"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/>ymm8;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4144"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="4145"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/>ymm9;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4146"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="4147"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/>ymm10;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4148"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="4149"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/>ymm11;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4150"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="4151"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/>ymm12;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4152"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="4153"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/>ymm13;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4154"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="4155"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/>ymm14;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4156"><highlight class="comment">//!<sp/>@brief<sp/>Ymm<sp/>register.</highlight></codeline>
<codeline lineno="4157"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YmmReg<sp/>ymm15;</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4159"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4160"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>GpReg<sp/>gpq(uint32_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GpReg(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>,<sp/>index,<sp/>8);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4161"><highlight class="comment">//!<sp/>@brief<sp/>Get<sp/>Gpq<sp/>register.</highlight></codeline>
<codeline lineno="4162"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>GpReg<sp/>gpz(uint32_t<sp/>index)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GpReg(<ref refid="group__asmjit__x86x64_1gga5e994ba992c6c8d421eb8065435b06efa2574618ff8c9a42c7acf35cb25c7ee6d" kindref="member" tooltip="Gpq register.">kRegTypeGpq</ref>,<sp/>index,<sp/>8);<sp/>}</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"></highlight></codeline>
<codeline lineno="4164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::x64::Mem]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4168"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>64-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="4169"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Label&amp;<sp/>label,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>disp,<sp/>8);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4170"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>64-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="4171"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Label&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/>8);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4172"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>64-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="4173"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Label&amp;<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpVar&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(label,<sp/>index,<sp/>shift,<sp/>disp,<sp/>8);<sp/>}</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4175"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>64-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="4176"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr_abs(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>disp,<sp/>8);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4177"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>64-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="4178"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr_abs(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/>8);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4179"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>64-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="4180"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr_abs(<ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref><sp/>pAbs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpVar&amp;<sp/>index,<sp/>uint32_t<sp/>shift,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1ga5e5237d40af505062c8d2f0882e06fc6" kindref="member" tooltip="Create a custom pointer operand.">ptr_abs</ref>(pAbs,<sp/>index,<sp/>shift,<sp/>disp,<sp/>8);<sp/>}</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4182"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>64-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="4183"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/>8);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4184"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>64-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="4185"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpVar&amp;<sp/>base,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>disp,<sp/>8);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4186"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>64-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="4187"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpReg&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/>8);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4188"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>an<sp/>intptr_t<sp/>64-bit<sp/>pointer<sp/>operand.</highlight></codeline>
<codeline lineno="4189"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>Mem<sp/>intptr_ptr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpVar&amp;<sp/>base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GpVar&amp;<sp/>index,<sp/>uint32_t<sp/>shift<sp/>=<sp/>0,<sp/>int32_t<sp/>disp<sp/>=<sp/>0)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__asmjit__x86x64_1gac030fe377fda8eac8f0dbcaac345f961" kindref="member" tooltip="Create a custom pointer operand.">ptr</ref>(base,<sp/>index,<sp/>shift,<sp/>disp,<sp/>8);<sp/>}</highlight></codeline>
<codeline lineno="4190"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="4191"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="4192"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4193"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>x64<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4195"><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_BUILD_X64</highlight></codeline>
<codeline lineno="4197"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4199"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal"></highlight></codeline>
<codeline lineno="4201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_ASMJIT_X86_X86DEFS_H</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/x86/x86defs.h"/>
  </compounddef>
</doxygen>
