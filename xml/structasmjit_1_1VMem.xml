<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="structasmjit_1_1VMem" kind="struct" prot="public">
    <compoundname>asmjit::VMem</compoundname>
    <includes local="no">vmem.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structasmjit_1_1VMem_1aaf08965d4c0b29f1f79061273bda7f8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API void *</type>
        <definition>void * asmjit::VMem::alloc</definition>
        <argsstring>(size_t length, size_t *allocated, bool canExecute)</argsstring>
        <name>alloc</name>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>allocated</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>canExecute</declname>
        </param>
        <briefdescription>
<para>Allocate virtual memory. </para>        </briefdescription>
        <detaileddescription>
<para>Pages are readable/writeable, but they are not guaranteed to be executable unless &apos;canExecute&apos; is true. Returns the address of allocated memory, or NULL on failure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/vmem.h" line="44" bodyfile="/home/ryan/asmjit/src/asmjit/base/vmem.cpp" bodystart="116" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1VMem_1a388c4ed369967910f5797dd9a2477de3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API void</type>
        <definition>void asmjit::VMem::release</definition>
        <argsstring>(void *addr, size_t length)</argsstring>
        <name>release</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Free memory allocated by <computeroutput><ref refid="structasmjit_1_1VMem_1aaf08965d4c0b29f1f79061273bda7f8b" kindref="member">alloc()</ref></computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/vmem.h" line="47" bodyfile="/home/ryan/asmjit/src/asmjit/base/vmem.cpp" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1VMem_1ae5436cdbea13e3428ead9ff8e12d5a41" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API size_t</type>
        <definition>size_t asmjit::VMem::getAlignment</definition>
        <argsstring>()</argsstring>
        <name>getAlignment</name>
        <briefdescription>
<para>Get the alignment guaranteed by <ref refid="structasmjit_1_1VMem_1aaf08965d4c0b29f1f79061273bda7f8b" kindref="member">alloc()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/vmem.h" line="62" bodyfile="/home/ryan/asmjit/src/asmjit/base/vmem.cpp" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1VMem_1abbc46fc937c7f352ba6c68e2c81b9620" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API size_t</type>
        <definition>size_t asmjit::VMem::getPageSize</definition>
        <argsstring>()</argsstring>
        <name>getPageSize</name>
        <briefdescription>
<para>Get size of the single page. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/vmem.h" line="65" bodyfile="/home/ryan/asmjit/src/asmjit/base/vmem.cpp" bodystart="137" bodyend="139"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class that helps with allocating memory for executing code generated by JIT compiler. </para>    </briefdescription>
    <detaileddescription>
<para>There are defined functions that provides facility to allocate and free memory where can be executed code. If processor and operating system supports execution protection then you can&apos;t run code from normally malloc()&apos;ed memory.</para><para>Functions are internally implemented by operating system dependent way. VirtualAlloc() function is used for Windows operating system and mmap() for posix ones. If you want to study or create your own functions, look at VirtualAlloc() or mmap() documentation (depends on you target OS).</para><para>Under posix operating systems is also useable mprotect() function, that can enable execution protection to malloc()&apos;ed memory block. </para>    </detaileddescription>
    <location file="/home/ryan/asmjit/src/asmjit/base/vmem.h" line="38" bodyfile="/home/ryan/asmjit/src/asmjit/base/vmem.h" bodystart="38" bodyend="66"/>
    <listofallmembers>
      <member refid="structasmjit_1_1VMem_1aaf08965d4c0b29f1f79061273bda7f8b" prot="public" virt="non-virtual"><scope>asmjit::VMem</scope><name>alloc</name></member>
      <member refid="structasmjit_1_1VMem_1ae5436cdbea13e3428ead9ff8e12d5a41" prot="public" virt="non-virtual"><scope>asmjit::VMem</scope><name>getAlignment</name></member>
      <member refid="structasmjit_1_1VMem_1abbc46fc937c7f352ba6c68e2c81b9620" prot="public" virt="non-virtual"><scope>asmjit::VMem</scope><name>getPageSize</name></member>
      <member refid="structasmjit_1_1VMem_1a388c4ed369967910f5797dd9a2477de3" prot="public" virt="non-virtual"><scope>asmjit::VMem</scope><name>release</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
