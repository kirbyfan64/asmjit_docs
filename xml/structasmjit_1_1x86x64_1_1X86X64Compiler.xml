<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="structasmjit_1_1x86x64_1_1X86X64Compiler" kind="struct" prot="public">
    <compoundname>asmjit::x86x64::X86X64Compiler</compoundname>
    <basecompoundref refid="structasmjit_1_1BaseCompiler" prot="public" virt="non-virtual">asmjit::BaseCompiler</basecompoundref>
    <includes local="no">x86compiler.h</includes>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1027a9b1bb7242262d891c1bf688c06f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>asmjit::x86x64::X86X64Compiler::X86X64Compiler</definition>
        <argsstring>(const X86X64Compiler &amp;other)</argsstring>
        <name>X86X64Compiler</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound">X86X64Compiler</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1216"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0f984840eea95946dd86db610b7fdc6" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound">X86X64Compiler</ref> &amp;</type>
        <definition>X86X64Compiler&amp; asmjit::x86x64::X86X64Compiler::operator=</definition>
        <argsstring>(const X86X64Compiler &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound">X86X64Compiler</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1216"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7bd0b077ca7802d538dd6f9dc648b16c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API</type>
        <definition>ASMJIT_API asmjit::x86x64::X86X64Compiler::X86X64Compiler</definition>
        <argsstring>(BaseRuntime *runtime)</argsstring>
        <name>X86X64Compiler</name>
        <param>
          <type><ref refid="structasmjit_1_1BaseRuntime" kindref="compound">BaseRuntime</ref> *</type>
          <declname>runtime</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound">X86X64Compiler</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1223"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a96590105a115514f8a02c1c2f792f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API</type>
        <definition>ASMJIT_API asmjit::x86x64::X86X64Compiler::~X86X64Compiler</definition>
        <argsstring>()</argsstring>
        <name>~X86X64Compiler</name>
        <briefdescription>
<para>Destroy the <ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound">X86X64Compiler</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1225"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::newInst</definition>
        <argsstring>(uint32_t code)</argsstring>
        <name>newInst</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Create a new <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1232"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4034496c6079a5ebfcf13484c49a57db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::newInst</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0)</argsstring>
        <name>newInst</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1234"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8997e02865f9970ba3f919020cacb9d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::newInst</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0, const Operand &amp;o1)</argsstring>
        <name>newInst</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1236"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aadbf2acf656e4312a0f54616c1b0a512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::newInst</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0, const Operand &amp;o1, const Operand &amp;o2)</argsstring>
        <name>newInst</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1238"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a6ece9e1753e4a87e6ed48ca13360b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::newInst</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0, const Operand &amp;o1, const Operand &amp;o2, const Operand &amp;o3)</argsstring>
        <name>newInst</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1240"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aafac050234e33877b42fb22d14552232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::newInst</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0, const Operand &amp;o1, const Operand &amp;o2, const Operand &amp;o3, const Operand &amp;o4)</argsstring>
        <name>newInst</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o3</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1242"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::emit</definition>
        <argsstring>(uint32_t code)</argsstring>
        <name>emit</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Add a new <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1245"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4d37f5c11b9478e61f4640b2358ab756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::emit</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0)</argsstring>
        <name>emit</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1247"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af422b5b2b6df8d931fcfe8ea53f7a1b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::emit</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0, const Operand &amp;o1)</argsstring>
        <name>emit</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1249"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2954b46b4ea553d69a73a77c21aafd8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::emit</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0, const Operand &amp;o1, const Operand &amp;o2)</argsstring>
        <name>emit</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1251"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a813689e2bb11af5c58d6b4dd12bf8694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::emit</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0, const Operand &amp;o1, const Operand &amp;o2, const Operand &amp;o3)</argsstring>
        <name>emit</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o3</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1253"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0e65a80fe36ae2e231337c327aee2ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::emit</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0, const Operand &amp;o1, const Operand &amp;o2, const Operand &amp;o3, const Operand &amp;o4)</argsstring>
        <name>emit</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o3</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1255"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9c2dae18e413ace382ee6a44471121cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::emit</definition>
        <argsstring>(uint32_t code, int o0)</argsstring>
        <name>emit</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1258"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73db9fb68da9d7a22a7614efb5d6f8e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::emit</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0, int o1)</argsstring>
        <name>emit</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1260"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d2ea71e65fec96f98498ec372bd51d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>ASMJIT_API InstNode* asmjit::x86x64::X86X64Compiler::emit</definition>
        <argsstring>(uint32_t code, const Operand &amp;o0, const Operand &amp;o1, int o2)</argsstring>
        <name>emit</name>
        <param>
          <type>uint32_t</type>
          <declname>code</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1262"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad9246ac7123b213ad66e6d13984fdcc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound">X86X64FuncNode</ref> *</type>
        <definition>ASMJIT_API X86X64FuncNode* asmjit::x86x64::X86X64Compiler::newFunc</definition>
        <argsstring>(uint32_t conv, const FuncPrototype &amp;p)</argsstring>
        <name>newFunc</name>
        <param>
          <type>uint32_t</type>
          <declname>conv</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1FuncPrototype" kindref="compound">FuncPrototype</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Create a new <ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound">X86X64FuncNode</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1269"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a37bc8aee85db0136f85f7f27123dd522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound">X86X64FuncNode</ref> *</type>
        <definition>ASMJIT_API X86X64FuncNode* asmjit::x86x64::X86X64Compiler::addFunc</definition>
        <argsstring>(uint32_t conv, const FuncPrototype &amp;p)</argsstring>
        <name>addFunc</name>
        <param>
          <type>uint32_t</type>
          <declname>conv</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1FuncPrototype" kindref="compound">FuncPrototype</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Add a new function. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cconv</parametername>
</parameternamelist>
<parameterdescription>
<para>Calling convention to use (see <computeroutput>kFuncConv</computeroutput> enum) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Function arguments prototype.</para></parameterdescription>
</parameteritem>
</parameterlist>
This method is usually used as a first step when generating functions by <computeroutput>Compiler</computeroutput>. First parameter <emphasis>cconv</emphasis> specifies function calling convention to use. Second parameter <emphasis>params</emphasis> specifies function arguments. To create function arguments are used templates <computeroutput>BuildFunction0&lt;</computeroutput>...&gt;, <computeroutput>BuildFunction1&lt;</computeroutput>...&gt;, <computeroutput>BuildFunction2&lt;</computeroutput>...&gt;, etc...</para><para>Templates with BuildFunction prefix are used to generate argument IDs based on real C++ types. See next example how to generate function with two 32-bit integer arguments.</para><para><programlisting><codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Building<sp/>function<sp/>using<sp/>asmjit::Compiler<sp/>example.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Compiler<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>Compiler<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Begin<sp/>of<sp/>function<sp/>(also<sp/>emits<sp/>function<sp/>@c<sp/>Prolog)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.addFunc(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>calling<sp/>convention<sp/>(32-bit<sp/>cdecl<sp/>or<sp/>64-bit<sp/>for<sp/>host<sp/>OS)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>kFuncConvHost,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>function<sp/>builder<sp/>to<sp/>generate<sp/>arguments<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>BuildFunction2&lt;FnVoid,<sp/>int,<sp/>int&gt;());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>function<sp/>(also<sp/>emits<sp/>function<sp/>@c<sp/>Epilog)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.endFunc();</highlight></codeline>
</programlisting></para><para>You can see that building functions is really easy. Previous code snipped will generate code for function with two 32-bit integer arguments. You can access arguments by <computeroutput>asmjit::Function::argument()</computeroutput> method. Arguments are indexed from 0 (like everything in C).</para><para><programlisting><codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Accessing<sp/>function<sp/>arguments<sp/>through<sp/>asmjit::Function<sp/>example.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Compiler<sp/>instance</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>Compiler<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>a0(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>a1(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Begin<sp/>of<sp/>function<sp/>(also<sp/>emits<sp/>function<sp/>@c<sp/>Prolog)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.addFunc(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>calling<sp/>convention<sp/>(32-bit<sp/>cdecl<sp/>or<sp/>64-bit<sp/>for<sp/>host<sp/>OS)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>kFuncConvHost,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Using<sp/>function<sp/>builder<sp/>to<sp/>generate<sp/>arguments<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>BuildFunction2&lt;FnVoid,<sp/>int,<sp/>int&gt;());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.setArg(0,<sp/>a0);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.setArg(1,<sp/>a1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.add(a0,<sp/>a1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>function<sp/>-<sp/>emits<sp/>function<sp/>epilog<sp/>and<sp/>return<sp/>instruction.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.endFunc();</highlight></codeline>
</programlisting></para><para>Arguments are like variables. How to manipulate with variables is documented in <computeroutput>asmjit::Compiler</computeroutput>, variables section.</para><para><simplesect kind="note"><para>To get current function use <computeroutput>currentFunction()</computeroutput> method or save pointer to <computeroutput>asmjit::Function</computeroutput> returned by <computeroutput>asmjit::Compiler::addFunc&lt;&gt;</computeroutput> method. Recommended is to save the pointer.</para></simplesect>
<simplesect kind="see"><para><computeroutput>BuildFunction0</computeroutput>, <computeroutput>BuildFunction1</computeroutput>, <computeroutput>BuildFunction2</computeroutput>, ... </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1342"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae1a5b508ee29fb5e6037595f986a16a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1EndNode" kindref="compound">EndNode</ref> *</type>
        <definition>ASMJIT_API EndNode* asmjit::x86x64::X86X64Compiler::endFunc</definition>
        <argsstring>()</argsstring>
        <name>endFunc</name>
        <briefdescription>
<para>End of current function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1345"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9419277c77af58ddd9d4c813f847cc0f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound">X86X64FuncNode</ref> *</type>
        <definition>X86X64FuncNode* asmjit::x86x64::X86X64Compiler::getFunc</definition>
        <argsstring>() const </argsstring>
        <name>getFunc</name>
        <reimplements refid="structasmjit_1_1BaseCompiler_1a9869bf24be59d50354a36c2d1a04877a">getFunc</reimplements>
        <briefdescription>
<para>Get current function as <ref refid="structasmjit_1_1x86x64_1_1X86X64FuncNode" kindref="compound">X86X64FuncNode</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This method can be called within <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a37bc8aee85db0136f85f7f27123dd522" kindref="member">addFunc()</ref></computeroutput> and <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae1a5b508ee29fb5e6037595f986a16a4" kindref="member">endFunc()</ref></computeroutput> block to get current function you are working with. It&apos;s recommended to store <computeroutput>asmjit::Function</computeroutput> pointer returned by <computeroutput>addFunc&lt;&gt;</computeroutput> method, because this allows you in future implement function sections outside of function itself (yeah, this is possible!). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1354" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1354" bodyend="1354"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a12952f38011b3b735e8948fa2f6a6bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1RetNode" kindref="compound">RetNode</ref> *</type>
        <definition>ASMJIT_API RetNode* asmjit::x86x64::X86X64Compiler::newRet</definition>
        <argsstring>(const Operand &amp;o0, const Operand &amp;o1)</argsstring>
        <name>newRet</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Create a new <ref refid="structasmjit_1_1RetNode" kindref="compound">RetNode</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1361"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af3c42c808f44535e3e2eb4209e7ab642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1RetNode" kindref="compound">RetNode</ref> *</type>
        <definition>ASMJIT_API RetNode* asmjit::x86x64::X86X64Compiler::addRet</definition>
        <argsstring>(const Operand &amp;o0, const Operand &amp;o1)</argsstring>
        <name>addRet</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Add a new <ref refid="structasmjit_1_1RetNode" kindref="compound">RetNode</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1363"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd80bd82013272ecdae209cd41802dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound">X86X64CallNode</ref> *</type>
        <definition>ASMJIT_API X86X64CallNode* asmjit::x86x64::X86X64Compiler::newCall</definition>
        <argsstring>(const Operand &amp;o0, uint32_t conv, const FuncPrototype &amp;p)</argsstring>
        <name>newCall</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>conv</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1FuncPrototype" kindref="compound">FuncPrototype</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Create a new <ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound">X86X64CallNode</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1370"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c211bbb8bac7d8cf10ec2410e38aca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API <ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound">X86X64CallNode</ref> *</type>
        <definition>ASMJIT_API X86X64CallNode* asmjit::x86x64::X86X64Compiler::addCall</definition>
        <argsstring>(const Operand &amp;o0, uint32_t conv, const FuncPrototype &amp;p)</argsstring>
        <name>addCall</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Operand" kindref="compound">Operand</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>conv</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1FuncPrototype" kindref="compound">FuncPrototype</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Add a new <ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound">X86X64CallNode</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1372"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0772c01f808f117609a87f7b344f9694" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API Error</type>
        <definition>ASMJIT_API Error asmjit::x86x64::X86X64Compiler::setArg</definition>
        <argsstring>(uint32_t argIndex, BaseVar &amp;var)</argsstring>
        <name>setArg</name>
        <param>
          <type>uint32_t</type>
          <declname>argIndex</declname>
        </param>
        <param>
          <type><ref refid="structasmjit_1_1BaseVar" kindref="compound">BaseVar</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <briefdescription>
<para>Set function argument to <emphasis>var</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1379"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0962b154aaa99a436acbc67f29d0ac12" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ASMJIT_API Error</type>
        <definition>virtual ASMJIT_API Error asmjit::x86x64::X86X64Compiler::_newVar</definition>
        <argsstring>(BaseVar *var, uint32_t type, const char *name)</argsstring>
        <name>_newVar</name>
        <reimplements refid="structasmjit_1_1BaseCompiler_1a0a0d78ffb95c9b74d4c6fd0205519b62">_newVar</reimplements>
        <param>
          <type><ref refid="structasmjit_1_1BaseVar" kindref="compound">BaseVar</ref> *</type>
          <declname>var</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1382"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a692e27df983960f8d7c8c19fbc694" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref></type>
        <definition>GpVar asmjit::x86x64::X86X64Compiler::newGpVar</definition>
        <argsstring>(uint32_t vType=kVarTypeIntPtr, const char *name=NULL)</argsstring>
        <name>newGpVar</name>
        <param>
          <type>uint32_t</type>
          <declname>vType</declname>
          <defval>kVarTypeIntPtr</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Create a new Gp variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1385" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1385" bodyend="1392"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae814d711f1f21a98b4488580d5d0ec6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref></type>
        <definition>MmVar asmjit::x86x64::X86X64Compiler::newMmVar</definition>
        <argsstring>(uint32_t vType=kVarTypeMm, const char *name=NULL)</argsstring>
        <name>newMmVar</name>
        <param>
          <type>uint32_t</type>
          <declname>vType</declname>
          <defval>kVarTypeMm</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Create a new Mm variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1395" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1395" bodyend="1402"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a082f52511cc0a1ab45368e5c49007507" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref></type>
        <definition>XmmVar asmjit::x86x64::X86X64Compiler::newXmmVar</definition>
        <argsstring>(uint32_t vType=kVarTypeXmm, const char *name=NULL)</argsstring>
        <name>newXmmVar</name>
        <param>
          <type>uint32_t</type>
          <declname>vType</declname>
          <defval>kVarTypeXmm</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Create a new Xmm variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1405" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1405" bodyend="1412"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a755ee1db53a664b32f78387fda8250" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1YmmVar" kindref="compound">YmmVar</ref></type>
        <definition>YmmVar asmjit::x86x64::X86X64Compiler::newYmmVar</definition>
        <argsstring>(uint32_t vType=kVarTypeYmm, const char *name=NULL)</argsstring>
        <name>newYmmVar</name>
        <param>
          <type>uint32_t</type>
          <declname>vType</declname>
          <defval>kVarTypeYmm</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Create a new Ymm variable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1415" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1415" bodyend="1422"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2255f7e21de773b532660deface8041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API void</type>
        <definition>ASMJIT_API void asmjit::x86x64::X86X64Compiler::getMemoryHome</definition>
        <argsstring>(BaseVar &amp;var, GpVar *home, int *displacement=NULL)</argsstring>
        <name>getMemoryHome</name>
        <param>
          <type><ref refid="structasmjit_1_1BaseVar" kindref="compound">BaseVar</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> *</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>displacement</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Get memory home of variable <emphasis>var</emphasis>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1425"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a21f700b79f8aa21c42e7e4ff30955815" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ASMJIT_API void</type>
        <definition>ASMJIT_API void asmjit::x86x64::X86X64Compiler::setMemoryHome</definition>
        <argsstring>(BaseVar &amp;var, const GpVar &amp;home, int displacement=0)</argsstring>
        <name>setMemoryHome</name>
        <param>
          <type><ref refid="structasmjit_1_1BaseVar" kindref="compound">BaseVar</ref> &amp;</type>
          <declname>var</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>home</declname>
        </param>
        <param>
          <type>int</type>
          <declname>displacement</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Set memory home of variable <emphasis>var</emphasis>. </para>        </briefdescription>
        <detaileddescription>
<para>Default memory home location is on stack (ESP/RSP), but when needed the bebahior can be changed by this method.</para><para>It is an error to chaining memory home locations. For example the given code is invalid:</para><para><programlisting><codeline><highlight class="normal"><sp/>Compiler<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>v0(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a773337143d44de47e460e5e280661e3e" kindref="member" tooltip="Variable is target intptr_t (not compatible with host intptr_t).">kVarTypeIntPtr</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>v1(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a773337143d44de47e460e5e280661e3e" kindref="member" tooltip="Variable is target intptr_t (not compatible with host intptr_t).">kVarTypeIntPtr</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>v2(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a773337143d44de47e460e5e280661e3e" kindref="member" tooltip="Variable is target intptr_t (not compatible with host intptr_t).">kVarTypeIntPtr</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>v3(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a773337143d44de47e460e5e280661e3e" kindref="member" tooltip="Variable is target intptr_t (not compatible with host intptr_t).">kVarTypeIntPtr</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.setMemoryHome(v1,<sp/>v0,<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>Allowed,<sp/>[v0+0]<sp/>is<sp/>memory<sp/>home<sp/>for<sp/>v1.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.setMemoryHome(v2,<sp/>v0,<sp/>4);<sp/></highlight><highlight class="comment">//<sp/>Allowed,<sp/>[v0+4]<sp/>is<sp/>memory<sp/>home<sp/>for<sp/>v2.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.setMemoryHome(v3,<sp/>v2);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CHAINING,<sp/>NOT<sp/>ALLOWED!</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1449"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d9fb7b8d7cb33e3b327bad6c28202b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ASMJIT_API Error</type>
        <definition>virtual ASMJIT_API Error asmjit::x86x64::X86X64Compiler::_newStack</definition>
        <argsstring>(BaseMem *mem, uint32_t size, uint32_t alignment, const char *name)</argsstring>
        <name>_newStack</name>
        <reimplements refid="structasmjit_1_1BaseCompiler_1a93a3e24196bf66d1268338da451548e7">_newStack</reimplements>
        <param>
          <type><ref refid="structasmjit_1_1BaseMem" kindref="compound">BaseMem</ref> *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1456"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71172afbc9428df19ef66c5d191ca35a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref></type>
        <definition>Mem asmjit::x86x64::X86X64Compiler::newStack</definition>
        <argsstring>(uint32_t size, uint32_t alignment, const char *name=NULL)</argsstring>
        <name>newStack</name>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Create a new memory chunk allocated on the stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1459" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1459" bodyend="1463"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad4464655c36cd55f4955dca238c52f83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::db</definition>
        <argsstring>(uint8_t x)</argsstring>
        <name>db</name>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 8-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1470" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1470" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3bdf68fd6842743327026df289fa9b2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dw</definition>
        <argsstring>(uint16_t x)</argsstring>
        <name>dw</name>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 16-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1472" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1472" bodyend="1472"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6df3589e0c252fd17b2b4029b90adca7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dd</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>dd</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 32-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1474" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1474" bodyend="1474"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a61c053a876f282c30e129f4134ab7372" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dq</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>dq</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 64-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1476" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1476" bodyend="1476"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf1211770f6b58916375a85d7e3ef53c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dint8</definition>
        <argsstring>(int8_t x)</argsstring>
        <name>dint8</name>
        <param>
          <type>int8_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 8-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1479" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1479" bodyend="1479"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82c2e70cdf9a27465b2549199867b8bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::duint8</definition>
        <argsstring>(uint8_t x)</argsstring>
        <name>duint8</name>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 8-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1481" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1481" bodyend="1481"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1effc4b31d1e1ab9451a5495e9df6c00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dint16</definition>
        <argsstring>(int16_t x)</argsstring>
        <name>dint16</name>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 16-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1484" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1484" bodyend="1484"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a98e0f0dc6d1dfdb9e42acbf488692e79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::duint16</definition>
        <argsstring>(uint16_t x)</argsstring>
        <name>duint16</name>
        <param>
          <type>uint16_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 16-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1486" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1486" bodyend="1486"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6f8bb23e9a8b63560c540d84de0c7eb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dint32</definition>
        <argsstring>(int32_t x)</argsstring>
        <name>dint32</name>
        <param>
          <type>int32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 32-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1489" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1489" bodyend="1489"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ea902788572d94f1d63eee7576bc13a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::duint32</definition>
        <argsstring>(uint32_t x)</argsstring>
        <name>duint32</name>
        <param>
          <type>uint32_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 32-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1491" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1491" bodyend="1491"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a193b389ed59705a7f2f5005dbe83f338" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dint64</definition>
        <argsstring>(int64_t x)</argsstring>
        <name>dint64</name>
        <param>
          <type>int64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 64-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1494" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1494" bodyend="1494"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a334ced2272d029ec9048552ad5ec2270" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::duint64</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>duint64</name>
        <param>
          <type>uint64_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add 64-bit integer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1496" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1496" bodyend="1496"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76a5474b0fb62bba2cf29e38bec1516e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dfloat</definition>
        <argsstring>(float x)</argsstring>
        <name>dfloat</name>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add float data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1499" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1499" bodyend="1499"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4c6a2be22bef9c6f370023d6d9b1ad6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::ddouble</definition>
        <argsstring>(double x)</argsstring>
        <name>ddouble</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add double data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1501" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1501" bodyend="1501"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae47eacd7a07027b46025c2dded2a4d14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dptr</definition>
        <argsstring>(void *x)</argsstring>
        <name>dptr</name>
        <param>
          <type>void *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add pointer data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1504" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1504" bodyend="1504"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf09a0d58c5ee3f8002be181db1ebfbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dmm</definition>
        <argsstring>(const MmData &amp;x)</argsstring>
        <name>dmm</name>
        <param>
          <type>const <ref refid="unionasmjit_1_1Vec64Data" kindref="compound">MmData</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add Mm data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1507" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1507" bodyend="1507"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a021bef6ff59c63b19d2d2b809d07f2fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dxmm</definition>
        <argsstring>(const XmmData &amp;x)</argsstring>
        <name>dxmm</name>
        <param>
          <type>const <ref refid="unionasmjit_1_1Vec128Data" kindref="compound">XmmData</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add Xmm data to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1509" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1509" bodyend="1509"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a340cced0bf25827c505ddd6527b080fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structasmjit_1_1EmbedNode" kindref="compound">EmbedNode</ref> *</type>
        <definition>EmbedNode* asmjit::x86x64::X86X64Compiler::dstruct</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>dstruct</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add data in a given structure instance to the instuction stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1513" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1513" bodyend="1513"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff8fecf22ca3f324379e2c06c16941cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ASMJIT_API void *</type>
        <definition>virtual ASMJIT_API void* asmjit::x86x64::X86X64Compiler::make</definition>
        <argsstring>()</argsstring>
        <name>make</name>
        <reimplements refid="structasmjit_1_1CodeGen_1a7cf3bed43532764d3958bce6d498ff22">make</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1520"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a930f6d27a016a7ddcd5ffa06f198056e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>ASMJIT_API Error</type>
        <definition>virtual ASMJIT_API Error asmjit::x86x64::X86X64Compiler::serialize</definition>
        <argsstring>(BaseAssembler &amp;assembler)</argsstring>
        <name>serialize</name>
        <reimplements refid="structasmjit_1_1BaseCompiler_1a32fb90970a7d2603987e062daf6d0dae">serialize</reimplements>
        <param>
          <type><ref refid="structasmjit_1_1BaseAssembler" kindref="compound">BaseAssembler</ref> &amp;</type>
          <declname>assembler</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1527"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b0e3a386b1e52cb8b2e739fd67f6b0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound">X86X64Compiler</ref> &amp;</type>
        <definition>X86X64Compiler&amp; asmjit::x86x64::X86X64Compiler::short_</definition>
        <argsstring>()</argsstring>
        <name>short_</name>
        <briefdescription>
<para>Force short form of jmp/jcc/other instruction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1534" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1534" bodyend="1537"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe7ad9b26ae424e1b0c37768d1e2b7e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound">X86X64Compiler</ref> &amp;</type>
        <definition>X86X64Compiler&amp; asmjit::x86x64::X86X64Compiler::long_</definition>
        <argsstring>()</argsstring>
        <name>long_</name>
        <briefdescription>
<para>Force long form of jmp/jcc/other instruction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1540" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1540" bodyend="1543"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa645898777e8f4eceed896d118d08dec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound">X86X64Compiler</ref> &amp;</type>
        <definition>X86X64Compiler&amp; asmjit::x86x64::X86X64Compiler::taken</definition>
        <argsstring>()</argsstring>
        <name>taken</name>
        <briefdescription>
<para>Condition is likely to be taken. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1546" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1546" bodyend="1549"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22dbcf0fb59edcf4de0101214c5e532d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound">X86X64Compiler</ref> &amp;</type>
        <definition>X86X64Compiler&amp; asmjit::x86x64::X86X64Compiler::notTaken</definition>
        <argsstring>()</argsstring>
        <name>notTaken</name>
        <briefdescription>
<para>Condition is unlikely to be taken. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1552" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1552" bodyend="1555"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58414d7d73f2d245e6d469c3bd22b7d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler" kindref="compound">X86X64Compiler</ref> &amp;</type>
        <definition>X86X64Compiler&amp; asmjit::x86x64::X86X64Compiler::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <briefdescription>
<para><ref refid="structasmjit_1_1Lock" kindref="compound">Lock</ref> prefix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1558" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1558" bodyend="1561"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a23f394e50720250b658ad50f1a4a3719" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::adc</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>adc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Add with carry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1568" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1568" bodyend="1568"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9a5901641713c61e8ca96aa293e12593" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::adc</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>adc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1570" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1570" bodyend="1570"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a80cac8bec17bdf3dbf247d2bfb4949" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::adc</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>adc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1572" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1572" bodyend="1572"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6a99cc0a5a0b7de92f49c3b05344df80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::adc</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>adc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1572" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1572" bodyend="1572"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7c16966ae671cb1c7e451c82b17a048" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::adc</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>adc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1574" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1574" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8cd80983c5c08bd6f4940894238f7662" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::adc</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>adc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1576" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1576" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2982ce57357c1b4178a10c17d4baf198" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::adc</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>adc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1576" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1576" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a37c7e177895c7ffeaafc3536efcd7b40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::add</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Add. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1579" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1579" bodyend="1579"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73b8b383a992e8da2ee123d2f1ae082e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::add</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1581" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1581" bodyend="1581"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a08b8f00c2cf9e40443480ffc4c1b223e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::add</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1583" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1583" bodyend="1583"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af714bdb54c54e2997dfcd5f7cfb76e4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::add</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1583" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1583" bodyend="1583"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa2ec051f1e17c34153c2e9e3c6e645d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::add</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1585" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1585" bodyend="1585"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa5ff93f4dce31944026061052d024d35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::add</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1587" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1587" bodyend="1587"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abae05ef8e2d74f0caeee04c486a5f8a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::add</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1587" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1587" bodyend="1587"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3af459a9d9964da7610f817c0f82a1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::and_</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>and_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>And. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1590" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1590" bodyend="1590"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac936ab35308a2a35824049ae57051e3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::and_</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>and_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1592" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1592" bodyend="1592"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a426f13308d2365da9a27faca833d9909" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::and_</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>and_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1594" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1594" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2ca1a329420c06bc34f7bea585ea6716" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::and_</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>and_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1594" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1594" bodyend="1594"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a885f5046a66bc3485209d181ec350963" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::and_</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>and_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1596" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1596" bodyend="1596"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2938da08584a201c635b5fb91e77f222" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::and_</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>and_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1598" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1598" bodyend="1598"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a80162cdcca326f56d3a7e01e3ef3f803" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::and_</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>and_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1598" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1598" bodyend="1598"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a418c282c528153dec1092963a78b6c60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bsf</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>bsf</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Bit scan forward. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1601" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1601" bodyend="1601"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95d85dfd24bfb7109e192165ec1fd2e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bsf</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>bsf</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1603" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1603" bodyend="1603"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac202154b577e23342bc61454088663a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bsr</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>bsr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Bit scan reverse. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1606" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1606" bodyend="1606"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac71fab03aa5a95dae1d294fba7828706" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bsr</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>bsr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1608" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1608" bodyend="1608"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8816df859e5fce1302cea819853ead2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bswap</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>bswap</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Byte swap (32-bit or 64-bit registers only) (i486). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1611" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1611" bodyend="1611"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ec66bfb37b4cde8d0bc93f2ae5020bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bt</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>bt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Bit test. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1614" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1614" bodyend="1614"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a739c607e0f84ecb4338595692d01bf4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bt</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>bt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1616" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1616" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac2350685c1bd7ea57ffd9cde858d4e44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bt</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>bt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1616" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1616" bodyend="1616"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a360804ca332277edba328c55fe79f0da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bt</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>bt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1618" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1618" bodyend="1618"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a142f546aa55847ee63741f3553a6d2cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bt</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>bt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1620" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1620" bodyend="1620"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d51828901f68f64a7c129de858a6765" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bt</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>bt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1620" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1620" bodyend="1620"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe9ceb332a5c597c4b4a6a016981c85f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btc</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>btc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Bit test and complement. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1623" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1623" bodyend="1623"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a02df1a8c03aff2c52b855d747d8b97e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btc</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>btc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1625" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1625" bodyend="1625"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8be126491b2883c35240c07cf1a58497" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btc</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>btc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1625" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1625" bodyend="1625"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade9e499fd02dc97e9e0b63a3b1955336" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btc</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>btc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1627" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1627" bodyend="1627"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac04f0ba2c56c1e53f60328cef5c1d364" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btc</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>btc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1629" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1629" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab9e7c58cb00ff959f0e97644c6913959" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btc</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>btc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1629" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1629" bodyend="1629"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a00c644f2e672c460a49682d6abf63cd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btr</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>btr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Bit test and reset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1632" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1632" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2c5f229a065c1b717f8802fec25d0a1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btr</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>btr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1634" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1634" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af170839bd6d015c9f3661084f31d2b7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btr</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>btr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1634" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1634" bodyend="1634"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af7bb8330a30fec76bab67b7387384174" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btr</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>btr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1636" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1636" bodyend="1636"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe49f37d64953216e6ef7e94280d3d38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btr</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>btr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1638" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1638" bodyend="1638"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7375fb44d6a6d56a1463df9c8fba4c6c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::btr</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>btr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1638" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1638" bodyend="1638"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8a2e21156c4ed3401c37feb0430f377b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bts</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>bts</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Bit test and set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1641" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1641" bodyend="1641"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a598ab82900d310abb03d22351077f73e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bts</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>bts</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1643" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1643" bodyend="1643"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae55e7aa1e260efcb39f18d3fc296c28f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bts</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>bts</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1643" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1643" bodyend="1643"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7dbd6a93a071f7cab10e8e6345eafd88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bts</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>bts</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1645" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1645" bodyend="1645"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa2c9685ab3f6fa623ec2fca9ab75a591" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bts</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>bts</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1647" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1647" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3994ceea4888fb70ef636bc263c18833" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::bts</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>bts</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1647" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1647" bodyend="1647"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa41fa68c7f7070da0aec2ae44f0b8e00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound">X86X64CallNode</ref> *</type>
        <definition>X86X64CallNode* asmjit::x86x64::X86X64Compiler::call</definition>
        <argsstring>(const GpVar &amp;dst, uint32_t conv, const FuncPrototype &amp;p)</argsstring>
        <name>call</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>conv</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1FuncPrototype" kindref="compound">FuncPrototype</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Call. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1650" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1650" bodyend="1652"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a78c6bd8bcb63beda9bf841c9cc32e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound">X86X64CallNode</ref> *</type>
        <definition>X86X64CallNode* asmjit::x86x64::X86X64Compiler::call</definition>
        <argsstring>(const Mem &amp;dst, uint32_t conv, const FuncPrototype &amp;p)</argsstring>
        <name>call</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>conv</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1FuncPrototype" kindref="compound">FuncPrototype</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1654" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1654" bodyend="1656"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70739a1464211c7dd7b9064a8275aa90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound">X86X64CallNode</ref> *</type>
        <definition>X86X64CallNode* asmjit::x86x64::X86X64Compiler::call</definition>
        <argsstring>(const Imm &amp;dst, uint32_t conv, const FuncPrototype &amp;p)</argsstring>
        <name>call</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>conv</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1FuncPrototype" kindref="compound">FuncPrototype</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1658" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1658" bodyend="1660"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a056c7354058e6f44265dd666ca31fdb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound">X86X64CallNode</ref> *</type>
        <definition>X86X64CallNode* asmjit::x86x64::X86X64Compiler::call</definition>
        <argsstring>(void *dst, uint32_t conv, const FuncPrototype &amp;p)</argsstring>
        <name>call</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>conv</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1FuncPrototype" kindref="compound">FuncPrototype</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1662" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1662" bodyend="1665"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf970107c41569a2abc54ef5489da64d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1x86x64_1_1X86X64CallNode" kindref="compound">X86X64CallNode</ref> *</type>
        <definition>X86X64CallNode* asmjit::x86x64::X86X64Compiler::call</definition>
        <argsstring>(const Label &amp;label, uint32_t conv, const FuncPrototype &amp;p)</argsstring>
        <name>call</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>label</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>conv</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1FuncPrototype" kindref="compound">FuncPrototype</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1667" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1667" bodyend="1669"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07b39ead4d18aacf700eff62c8eb4d40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::clc</definition>
        <argsstring>()</argsstring>
        <name>clc</name>
        <briefdescription>
<para>Clear carry flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1672" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1672" bodyend="1672"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acd9b7abf95f9533e6b2c5b2882df311c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cld</definition>
        <argsstring>()</argsstring>
        <name>cld</name>
        <briefdescription>
<para>Clear direction flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1674" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1674" bodyend="1674"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc5a4a77840e064776f3b12592c08a93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmc</definition>
        <argsstring>()</argsstring>
        <name>cmc</name>
        <briefdescription>
<para>Complement carry Flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1676" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1676" bodyend="1676"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96bda354d73ef98d78b7a2443fd229eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cbw</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>cbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Convert byte to word (AX &lt;- Sign Extend AL). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1679" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1679" bodyend="1679"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e34e3ac2fda37c19c8677f363a15804" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cwd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert word to dword (DX:AX &lt;- Sign Extend AX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1681" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1681" bodyend="1681"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d10570860aa6971169bc6a75ec4fd53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cwde</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>cwde</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Convert word to dword (EAX &lt;- Sign Extend AX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1683" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1683" bodyend="1683"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0349306595d0af510fa4e8d45d5a6b25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cdq</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert dword to qword (EDX:EAX &lt;- Sign Extend EAX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1685" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1685" bodyend="1685"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a585af1881d98b46bb53c5e79a96e33c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmov</definition>
        <argsstring>(uint32_t cc, const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmov</name>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Conditional move. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa9e5c2ef9bb98c54e2ad7a93abf6efa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmova</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmova</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3949964cc6f6ec3a8df37ce2ba6f31c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovae</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovae</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a840215c7fbc84e163114f9cee06ad014" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovb</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af5ca43d89ba308c3357793cc2707f9b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovbe</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d36b656244c8799704f4c7b98e6174f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovc</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac31a05e21e9a7eac40ee425411759470" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmove</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmove</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0e6b1e7e5a45df9902cae546fcfda062" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovg</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a04004857d2715c96b87e8b1216e5b053" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovge</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8b0448004fccf976364963ca1ee0e271" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovl</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8cd5a26089f2fae0c914ea78619208f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovle</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovle</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab0c55fcadb68d1304447d8780ccadc71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovna</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovna</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5adb451bce0f3d0275b6255e9410ec49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnae</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovnae</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aca3ad41ef11d4c000619b6d0c81208a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnb</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovnb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aebbda390780686046e5eed972d96eaf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnbe</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovnbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1eef6060b4ae5ed877dccd2cf52dbafa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnc</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovnc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad38fb2118335f0a6f45f331605fed0b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovne</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovne</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adcaea9efd88d9af9569c9c7753f754ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovng</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovng</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa005aadd77125b7152a0d0178dd2cd48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnge</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovnge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab7c07cb026b548d5e2d57f73e6c57319" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnl</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovnl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af09908fb6290e8520069072a783c5e09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnle</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovnle</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41236f06057ffaa9b2a64475b47bc1bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovno</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovno</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7555976e13d31a3049257f9b20749f8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnp</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovnp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad94a0435ac837bf14666454232e59f24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovns</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovns</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7630f1c76be87afbbd58e2a0252ce02b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnz</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovnz</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a163287b77abd99e810d4e87fbeda5f6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovo</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovo</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9ee82e28dbdc328a412f09d4ba3ce168" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovp</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae67470dd08f77179ad9dbeb224f012dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovpe</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovpe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a418190ec243f809e716ff71aa63f9cfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovpo</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovpo</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9db8793a201ff7fb1e41ac070253d6f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovs</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovs</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1289e2d70a4c75fd2386985c7386079b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovz</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmovz</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1688" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1688" bodyend="1688"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7ff69d129d1b73da9b818f902cd8ccb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmov</definition>
        <argsstring>(uint32_t cc, const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmov</name>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Conditional move. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a8c0e7a6f2c92276e881349bdc7b33a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmova</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmova</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d958498fe4c06d5b779dcc3e9bae4e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovae</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovae</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa875fd61a62551c5b1ad49d60ccd7be7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovb</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2a3cd3ebe6162ffa4fd348fb75dbc9d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovbe</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf05e4b5e2753047486c488b40918d38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovc</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a99f33ccb1392a7c8424e2ecab35f31af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmove</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmove</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66951c1235ae862474465caec66d50f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovg</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac5495c2df2f0823cccde62b0ebdb1792" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovge</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af545ae279a0c049075894d08e53b9ecf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovl</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac6b337079af4207d8279cb9038c1b916" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovle</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovle</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab74f3e304de1d4f909fa645ab5cb55ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovna</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovna</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a33502010dbf0b98a4e6ba0a4752a0d89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnae</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovnae</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7436534d27cc95186e80d0704e58b747" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnb</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovnb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac89e7b6add832ad268f7f5f8f65b1b86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnbe</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovnbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1affcdb7520f2d61297e4daaf5cfa4edb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnc</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovnc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acabe55bc027b4bbb026c84aa0be51a0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovne</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovne</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a85b531377172c0fb3efa787b025e1943" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovng</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovng</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4606f328b9680944cb77941dfdf4ceaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnge</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovnge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3b477f4b1138fea147eadab037dd0ed5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnl</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovnl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad837e82e5b4bc23fa90690a701a6d40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnle</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovnle</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3a532b9020d74a35cc3a7778727e64c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovno</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovno</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad8ddb410020c4fcb90ca6cf65159cba4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnp</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovnp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3b4282318568253273e12b6e620f0b66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovns</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovns</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a93c57f6233716023e5c6212afad91d41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovnz</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovnz</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aecf0a925275d089242cd0cfc1bad2383" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovo</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovo</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d783e5fcbff15aba101cf2190f38ea5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovp</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a905b55a0b0bc4e3cd1f617cf4046613e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovpe</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovpe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4e940cd613492d90ef0749b398996a0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovpo</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovpo</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a97d2a09fab8799a0a9bdbc2f5180315b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovs</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovs</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a51ccf3b348b02f6ab67e836c037bdbfb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmovz</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmovz</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1690" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1690" bodyend="1690"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a86ea5d8bd088a5129f671f0e1c20cae3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmp</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Compare two operands. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1693" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1693" bodyend="1693"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaa6fad5ed68a004b7b2bf40d516e8c58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmp</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cmp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1695" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1695" bodyend="1695"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f32ff89caedafb8772f4e7b5a9bf9c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmp</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>cmp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1697" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1697" bodyend="1697"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa2136a1bebecb2d448eaa5cfcb24638" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmp</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>cmp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1697" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1697" bodyend="1697"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1553ea527761a2a647e94210c7cbd254" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmp</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cmp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1699" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1699" bodyend="1699"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a949564caca1756d4456686b194d13ec8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmp</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>cmp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1701" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1701" bodyend="1701"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afd8a26ebbb0bbf218e1b7befd3ce2e4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmp</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>cmp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1701" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1701" bodyend="1701"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41202c94f73489c2ca3dde54346ab608" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpxchg</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>cmpxchg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Compare and exchange (i486). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1704" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1704" bodyend="1704"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79dfaf56f31dbf3d1326926159775c7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpxchg</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>cmpxchg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1706" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1706" bodyend="1706"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fecdbc314a40bcdc9c1082d55c6308d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpxchg8b</definition>
        <argsstring>(const GpVar &amp;cmp_edx, const GpVar &amp;cmp_eax, const GpVar &amp;cmp_ecx, const GpVar &amp;cmp_ebx, const Mem &amp;dst)</argsstring>
        <name>cmpxchg8b</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>cmp_edx</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>cmp_eax</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>cmp_ecx</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>cmp_ebx</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Compares the 64-bit value in EDX:EAX with the memory operand (Pentium). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1712" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1709" bodyend="1715"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a19c941a097527535d1e59ecc333cb7b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cpuid</definition>
        <argsstring>(const GpVar &amp;inout_eax, const GpVar &amp;out_ebx, const GpVar &amp;out_ecx, const GpVar &amp;out_edx)</argsstring>
        <name>cpuid</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>inout_eax</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>out_ebx</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>out_ecx</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>out_edx</declname>
        </param>
        <briefdescription>
<para>CPU identification (i486). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1722" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1718" bodyend="1730"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1d7d834d5e3f74ec03e461f60693207f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::crc32</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>crc32</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Accumulate crc32 value (polynomial 0x11EDC6F41) (SSE4.2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1733" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1733" bodyend="1733"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af89a591f66886a62c70d1fc8785742f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::crc32</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>crc32</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1735" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1735" bodyend="1735"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec0851ea27c14395707d2fd6a2237fe6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::dec</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>dec</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Decrement by 1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1738" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1738" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36fc55a484798fd2e3f12a126cbb3e7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::dec</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>dec</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1740" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1740" bodyend="1740"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a629ffef33b3354224ffc8c168738422a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::div</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>div</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Unsigned divide (o0:o1 &lt;- o0:o1 / o2). </para>        </briefdescription>
        <detaileddescription>
<para>Remainder is stored in <emphasis>o0</emphasis>, quotient is stored in <emphasis>o1</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1745" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1745" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad091cb3328c660106f52bc91807e2f4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::div</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const Mem &amp;o2)</argsstring>
        <name>div</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1747" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1747" bodyend="1747"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1938b6615f97dc3c970552c35696753" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::idiv</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>idiv</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Signed divide (o0:o1 &lt;- o0:o1 / o2). </para>        </briefdescription>
        <detaileddescription>
<para>Remainder is stored in <emphasis>o0</emphasis>, quotient is stored in <emphasis>o1</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1752" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1752" bodyend="1752"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a532bf85f7fb4ce1b7d64286ec67909a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::idiv</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const Mem &amp;o2)</argsstring>
        <name>idiv</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1754" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1754" bodyend="1754"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad8e31bc43c5825dbf9c2e46f068301b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::imul</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>imul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Signed multiply (o0:o1 &lt;- o1 * o2). </para>        </briefdescription>
        <detaileddescription>
<para>Hi value is stored in <emphasis>o0</emphasis>, lo value is stored in <emphasis>o1</emphasis>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1759" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1759" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adcc003810acb79e972dfb20cf5eb495e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::imul</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const Mem &amp;o2)</argsstring>
        <name>imul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1761" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1761" bodyend="1761"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad31b4f2e1c1058d78ee7b1720c2baaaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::imul</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>imul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Signed multiply. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1764" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1764" bodyend="1764"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58a0b19a22837f0632013a2e34cc9c24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::imul</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>imul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1766" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1766" bodyend="1766"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1096fc97f7928ef9aa932bc2ebcacfbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::imul</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>imul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1768" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1768" bodyend="1768"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2abb0f7a892647af62013c3b2176f4a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::imul</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>imul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1768" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1768" bodyend="1768"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee585ee23326894f6834d9d9666359e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::imul</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>imul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Signed multiply. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1771" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1771" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96755509cc48bc3c3bb20ebec3145a8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::imul</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, int o2)</argsstring>
        <name>imul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1771" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1771" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70ea5b8424ea5abeceeb57fc653d0810" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::imul</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>imul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1773" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1773" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c3714ce4ce46e2e23177745d19ebacf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::imul</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>imul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1773" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1773" bodyend="1773"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a75aa4bbf2d4bcd773e3614fcb9afdcb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::inc</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>inc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Increment by 1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1776" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1776" bodyend="1776"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac55aa19c903aeee19bb91c6063da532d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::inc</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>inc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1778" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1778" bodyend="1778"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e233f556c1269a06d7bf44311672ee3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::int_</definition>
        <argsstring>(const Imm &amp;o0)</argsstring>
        <name>int_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Interrupt. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1781" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1781" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad644bcb0e9dd41c630495b58b173e3f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::int_</definition>
        <argsstring>(int o0)</argsstring>
        <name>int_</name>
        <param>
          <type>int</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1781" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1781" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4dd05feb7d3d80f69c4c952beb8a67fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::int3</definition>
        <argsstring>()</argsstring>
        <name>int3</name>
        <briefdescription>
<para>Interrupt 3 - trap to debugger. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1783" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1783" bodyend="1783"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a28bcac7a270da9ff6c1a615c343a50ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::j</definition>
        <argsstring>(uint32_t cc, const Label &amp;o0)</argsstring>
        <name>j</name>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Jump to label <emphasis>label</emphasis> if condition <emphasis>cc</emphasis> is met. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a908cf15a4679a5bebee453f154399589" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ja</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>ja</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acdf9f4cabae5b8e5475282e7271abd9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jae</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jae</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab7fff8f8a8153ea972df12d624e41012" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jb</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e4f311fcb524246f6c9e32b8262e1b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jbe</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afde257cc0f5873938687955c94361871" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jc</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9933be546ae631aa5fd226618d0fe1df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::je</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>je</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b92d6e4f5bde388ba570556719339e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jg</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8ee4daed780dd71dab368bb7d7de34a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jge</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2beed39f98e1411b1b01d1205c4d66ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jl</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a056664e359ef39528b4cc6d1834971b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jle</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jle</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1752058dc8577111eff655a1f832615" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jna</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jna</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf661bf68f3dce5c3b378314888a68fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jnae</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jnae</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2c648bc22593019a30f9d613f9640dce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jnb</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jnb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8ffbae89c99aa777dbedb5706bd2c8cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jnbe</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jnbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a533e2eefd54720cd7da555449694da67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jnc</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jnc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeae2b8228675eb2759cb8892c17f6060" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jne</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jne</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3c0a9f63aa7056954adc293304afdc0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jng</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jng</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe2d61ccaf45755457d9d9b86cb11445" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jnge</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jnge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78ae95c1e1aba5e9160b16509bf0b51f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jnl</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jnl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc1cc70c49a414892f0f62cd90605f18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jnle</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jnle</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a00191b56ee127013ca3753af3e2e487c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jno</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jno</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3cf30b8139a2eb1abd6647b5ed8cb00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jnp</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jnp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a566cddb26ade5cd3c7e64e91353b2a3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jns</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jns</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2a7604099ef6c75c532b5b8537779895" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jnz</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jnz</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab23161885b8640fd37018ed6075ba6d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jo</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jo</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab257d3a8a80fda473c6f437a86b36735" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jp</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa22e5c405bdb3a52df82ec8e64c1b54e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jpe</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jpe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec6bbcc92db242ca0b1009d437eb1a80" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jpo</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jpo</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1abea9ad1fe8689721b13204a4d06082" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::js</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>js</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade7f5f66760fa94c38552e4c1205fd24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jz</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jz</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1786" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a389bceea77b5d3631dccc33df334a80b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jmp</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>jmp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Jump. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1789" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1789" bodyend="1789"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2d7b5aad95e6d761a13800ef62976fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jmp</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>jmp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1791" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1791" bodyend="1791"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76abad105294f6391ed6f53d4b3a5a6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jmp</definition>
        <argsstring>(const Label &amp;o0)</argsstring>
        <name>jmp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Label" kindref="compound">Label</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1793" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1793" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af088b3f2bb793af45cdbd006545d9b7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jmp</definition>
        <argsstring>(const Imm &amp;o0)</argsstring>
        <name>jmp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1795" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1795" bodyend="1795"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab38d1e6f5782e17e30ccd2ad264ddd2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::jmp</definition>
        <argsstring>(void *dst)</argsstring>
        <name>jmp</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1797" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1797" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaa9f213911923fa6b20fc827e1fdda3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::lahf</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>lahf</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Load AH from flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1800" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1800" bodyend="1800"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac878a2ddea722ad11aab623849f23c3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::lea</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>lea</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Load effective address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1803" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1803" bodyend="1803"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aed8555f624e41277f2565916d27d7f61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>mov</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1806" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1806" bodyend="1806"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd5ff88498023b27dc25e1e7e3e4b660" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>mov</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1808" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1808" bodyend="1808"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad76cfedc4ad88b6e4f2d849a274647dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>mov</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1810" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1810" bodyend="1810"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f4f73537dda763e53651444cf5ea359" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>mov</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1810" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1810" bodyend="1810"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a91f8a28cb02dd1af0863230a003e3cd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>mov</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1812" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1812" bodyend="1812"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1dbfc8795631a2d5e06af41c600111e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>mov</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1814" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1814" bodyend="1814"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe871874bfadd174d1975820ea16ad60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>mov</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1814" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1814" bodyend="1814"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1accc9744ab150ebfe91de63b5737e46e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov</definition>
        <argsstring>(const GpVar &amp;o0, const SegReg &amp;o1)</argsstring>
        <name>mov</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound">SegReg</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move from segment register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1817" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1817" bodyend="1817"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7806aaa4062a67aaea42f5d93e53123" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov</definition>
        <argsstring>(const Mem &amp;o0, const SegReg &amp;o1)</argsstring>
        <name>mov</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound">SegReg</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1819" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1819" bodyend="1819"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a09367e438bf4c5f187252f5cb9d6e4db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov</definition>
        <argsstring>(const SegReg &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>mov</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound">SegReg</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move to segment register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1821" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1821" bodyend="1821"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adebf9a6cb73f735652bf2afadd70d664" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov</definition>
        <argsstring>(const SegReg &amp;o0, const Mem &amp;o1)</argsstring>
        <name>mov</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound">SegReg</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1823" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1823" bodyend="1823"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76078c748a233466a497590c36991878" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov_ptr</definition>
        <argsstring>(const GpVar &amp;dst, void *src)</argsstring>
        <name>mov_ptr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Move (AL|AX|EAX|RAX &lt;- absolute address in immediate). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1826" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1826" bodyend="1829"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf49d9f9cc6564349e7c916b4f402291" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mov_ptr</definition>
        <argsstring>(void *dst, const GpVar &amp;src)</argsstring>
        <name>mov_ptr</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Move (absolute address in immediate &lt;- AL|AX|EAX|RAX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1831" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1831" bodyend="1834"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a3a0af2ca8d34b30ca6c675019ee7eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movbe</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move data after swapping bytes (SSE3 - Atom). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1837" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1837" bodyend="1837"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2efa4881e7fef0a2f4a7684cd8a30222" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movbe</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>movbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1839" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1839" bodyend="1839"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab22b913da837ea06b67d533e6c027d6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movsx</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>movsx</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move with sign-extension. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1842" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1842" bodyend="1842"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae2c283292003b3ac03f24cb740594417" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movsx</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movsx</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1844" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1844" bodyend="1844"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab64d4a04b00e2ec471d6850a5683efa3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movzx</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>movzx</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move with zero-extension. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1847" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1847" bodyend="1847"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0abca612bc68be735ea07fc87264af0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movzx</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movzx</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1849" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1849" bodyend="1849"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a022a569528a2ba1cc8f5fc39eb916515" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mul</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>mul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Unsigned multiply (o0:o1 &lt;- o1 * o2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1852" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1852" bodyend="1852"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a74f0e735cd136b611d8633e191b050ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mul</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const Mem &amp;o2)</argsstring>
        <name>mul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1854" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1854" bodyend="1854"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1f33314a90b2369c68fb9baf97da5172" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::neg</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>neg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Two&apos;s complement negation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1857" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1857" bodyend="1857"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9b942310868202770e788d907775c71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::neg</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>neg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1859" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1859" bodyend="1859"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a759f87aec703dc52478ec6f5dbbe56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::nop</definition>
        <argsstring>()</argsstring>
        <name>nop</name>
        <briefdescription>
<para>No operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1862" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1862" bodyend="1862"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a110b5863ff3f5dd6e64fca2f9b2a1711" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::not_</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>not_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>One&apos;s complement negation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1865" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1865" bodyend="1865"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af29c45cd1d0655929a4246fbccbf4fcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::not_</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>not_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1867" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1867" bodyend="1867"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a959eecceb2f5605298a79202787351c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::or_</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>or_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Or. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1870" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1870" bodyend="1870"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a250b78bf276194b17f61a19721f34faa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::or_</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>or_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1872" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1872" bodyend="1872"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a53beaca170385683502d0d3b2fcb2f7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::or_</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>or_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1874" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1874" bodyend="1874"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78d0c454c4405e2656ac0e489f47d0a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::or_</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>or_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1874" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1874" bodyend="1874"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a1e2378e6bc9af1e22e573d5fe86ca6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::or_</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>or_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1876" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1876" bodyend="1876"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef3947bd84f6775526d5b2c24c5295b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::or_</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>or_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1878" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1878" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab0a6234cadfbb141bfd9991ce592ed98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::or_</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>or_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1878" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1878" bodyend="1878"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae3afaceee4e7fdeb915b6fc69f5862fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pop</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>pop</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Pop a value from the stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1881" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1881" bodyend="1881"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42e846a5c857d869a8cad1aeebc54f60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pop</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>pop</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1883" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1883" bodyend="1883"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e7f6a1d920445fe74d3440023eaef9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::popf</definition>
        <argsstring>()</argsstring>
        <name>popf</name>
        <briefdescription>
<para>Pop stack into EFLAGS Register (32-bit or 64-bit). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1886" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1886" bodyend="1886"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a08b8da5cfdcd92d1995846512f788c2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::popcnt</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>popcnt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Return the count of number of bits set to 1 (SSE4.2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1889" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1889" bodyend="1889"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af5d0370a47ad314c3e51ace65493c9df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::popcnt</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>popcnt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1891" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1891" bodyend="1891"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae9943d65f3e4e083ac88c41acaaf7eba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::push</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>push</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Push word/dword/qword on the stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1894" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1894" bodyend="1894"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af160c895f16ff86e6ab91e8d71c1f2f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::push</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>push</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Push word/dword/qword on the stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1896" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1896" bodyend="1896"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b0cc1373b49e323d28640c300802e4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::push</definition>
        <argsstring>(const SegReg &amp;o0)</argsstring>
        <name>push</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1SegReg" kindref="compound">SegReg</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Push segment register on the stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1898" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1898" bodyend="1898"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aecbcc7699209991dd4f6b0ebc21e1814" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::push</definition>
        <argsstring>(const Imm &amp;o0)</argsstring>
        <name>push</name>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Push word/dword/qword on the stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1900" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1900" bodyend="1900"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad91531a7a348a85de7d8a7569d739acd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::push</definition>
        <argsstring>(int o0)</argsstring>
        <name>push</name>
        <param>
          <type>int</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1900" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1900" bodyend="1900"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a25bccbcb7d7bb922dae1a5f53826aa0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pushf</definition>
        <argsstring>()</argsstring>
        <name>pushf</name>
        <briefdescription>
<para>Push EFLAGS register (32-bit or 64-bit) on the stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1903" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1903" bodyend="1903"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a2dfada44bd3affe98384715b5cd7e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcl</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>rcl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Rotate bits left. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1906" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1906" bodyend="1906"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b39457d4b129b99e609e69cc737338c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcl</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>rcl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1908" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1908" bodyend="1908"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab5c3ef6c47da27123fe453032a9ab44e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcl</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>rcl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Rotate bits left. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1910" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1910" bodyend="1910"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4c5293d606128415a70b040c62ff559a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcl</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>rcl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1910" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1910" bodyend="1910"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e3d509b7c29787a51eb5e3bc3110da9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcl</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>rcl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1912" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1912" bodyend="1912"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66557759465753360c9b3d9971edf805" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcl</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>rcl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1912" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1912" bodyend="1912"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac8ba27dad408fa2ef55408a0b667afdb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcr</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>rcr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Rotate bits right. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1915" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1915" bodyend="1915"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf8f40c87075c3ad2fa1274458c36c38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcr</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>rcr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1917" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1917" bodyend="1917"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad34df409f961716de40d02a1451b1e3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcr</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>rcr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Rotate bits right. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1919" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1919" bodyend="1919"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9eff064708aad2065d8b9f81a489b99f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcr</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>rcr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1919" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1919" bodyend="1919"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30004bb88a394ed3b4af706cc1bea407" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcr</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>rcr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1921" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1921" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a75bd2a74e50caba619cec95852e9e767" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcr</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>rcr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1921" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1921" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95158998d232836a2a647291ef983f7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rdtsc</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>rdtsc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Read time-stamp counter (Pentium). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1924" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1924" bodyend="1924"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a34b0023317306a6f04e5e00c106f035e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rdtscp</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>rdtscp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Read time-stamp counter and processor id (Pentium). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1926" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1926" bodyend="1926"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abdf78213f847c43f6df2c57507677bd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rep_lodsb</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>rep_lodsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Load ECX/RCX bytes from DS:[ESI/RSI] to AL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1929" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1929" bodyend="1929"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a04da2a4f855dfb6fc9d04c4c58abf9bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rep_lodsd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>rep_lodsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Load ECX/RCX dwords from DS:[ESI/RSI] to AL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1931" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1931" bodyend="1931"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a20fca3e7b98ee5a103608e7319e56410" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rep_lodsw</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>rep_lodsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Load ECX/RCX words from DS:[ESI/RSI] to AX. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1933" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1933" bodyend="1933"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab058f17b0a38e119a87d44793e4a1f45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rep_movsb</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>rep_movsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Move ECX/RCX bytes from DS:[ESI/RSI] to ES:[EDI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1936" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1936" bodyend="1936"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae6ae390867bb33d60680ac389b3166a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rep_movsd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>rep_movsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Move ECX/RCX dwords from DS:[ESI/RSI] to ES:[EDI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1938" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1938" bodyend="1938"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab59b48b2b7a837340a4e0c60eb24edc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rep_movsw</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>rep_movsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Move ECX/RCX dwords from DS:[ESI/RSI] to ES:[EDI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1940" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1940" bodyend="1940"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abccebac50970ffa6a22bbce255663139" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rep_stosb</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>rep_stosb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Fill ECX/RCX bytes at ES:[EDI/RDI] with AL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1943" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1943" bodyend="1943"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a38c5925f4924c4848791b17b9194548e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rep_stosd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>rep_stosd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Fill ECX/RCX dwords at ES:[EDI/RDI] with EAX. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1945" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1945" bodyend="1945"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a35986a14629b60c439631224e208dde0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rep_stosw</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>rep_stosw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Fill ECX/RCX words at ES:[EDI/RDI] with AX. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1947" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1947" bodyend="1947"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a447f3343dbeec4bab2c79a7107c18061" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repe_cmpsb</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repe_cmpsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Repeated find nonmatching bytes in ES:[EDI/RDI] and DS:[ESI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1950" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1950" bodyend="1950"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a103de4fbee42f1ea20efcb5870652870" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repe_cmpsd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repe_cmpsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Repeated find nonmatching dwords in ES:[EDI/RDI] and DS:[ESI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1952" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1952" bodyend="1952"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a48cef50fe588742773bb3c5c2b567f43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repe_cmpsw</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repe_cmpsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Repeated find nonmatching words in ES:[EDI/RDI] and DS:[ESI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1954" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1954" bodyend="1954"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afb3d0053de0c2d73f687330e40bf14f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repe_scasb</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repe_scasb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Find non-AL byte starting at ES:[EDI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1957" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1957" bodyend="1957"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a822d518388a764ab322f19a7dec64126" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repe_scasd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repe_scasd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Find non-EAX dword starting at ES:[EDI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1959" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1959" bodyend="1959"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79023558ed6f653f7c8c78589c72508d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repe_scasw</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repe_scasw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Find non-AX word starting at ES:[EDI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1961" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1961" bodyend="1961"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e28400f859dd93d61a5abb526399e99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repne_cmpsb</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repne_cmpsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Find matching bytes in [RDI] and [RSI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1964" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1964" bodyend="1964"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a517f13f63a07139903b0ea17f26b300b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repne_cmpsd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repne_cmpsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Find matching dwords in [RDI] and [RSI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1966" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1966" bodyend="1966"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf6e364fea49c0fa79060513111acb48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repne_cmpsw</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repne_cmpsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Find matching words in [RDI] and [RSI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1968" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1968" bodyend="1968"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1114f419e06b204c6b7a3a1a0db4210" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repne_scasb</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repne_scasb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Find AL, starting at ES:[EDI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1971" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1971" bodyend="1971"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c0a1845403a57b5dde04cada2606cf3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repne_scasd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repne_scasd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Find EAX, starting at ES:[EDI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1973" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1973" bodyend="1973"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7bb4ddfc466c439466cc89acd42aa4c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::repne_scasw</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>repne_scasw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Find AX, starting at ES:[EDI/RDI]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1975" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1975" bodyend="1975"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe1fd80625da5ff775c29584b4c2b167" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1RetNode" kindref="compound">RetNode</ref> *</type>
        <definition>RetNode* asmjit::x86x64::X86X64Compiler::ret</definition>
        <argsstring>()</argsstring>
        <name>ret</name>
        <briefdescription>
<para>Return. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1978" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1978" bodyend="1978"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8b4bada2b56c3bd4980ee4422e598aa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1RetNode" kindref="compound">RetNode</ref> *</type>
        <definition>RetNode* asmjit::x86x64::X86X64Compiler::ret</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>ret</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1980" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1980" bodyend="1980"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9bd4c07f92025b08710e69e882e44a3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1RetNode" kindref="compound">RetNode</ref> *</type>
        <definition>RetNode* asmjit::x86x64::X86X64Compiler::ret</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>ret</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1982" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1982" bodyend="1982"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1fc9b7c1ce6b70c5b1705c0da580bdc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1RetNode" kindref="compound">RetNode</ref> *</type>
        <definition>RetNode* asmjit::x86x64::X86X64Compiler::ret</definition>
        <argsstring>(const XmmVar &amp;o0)</argsstring>
        <name>ret</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1984" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1984" bodyend="1984"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a24d82b5b3ada3a145d5e822b04c49250" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1RetNode" kindref="compound">RetNode</ref> *</type>
        <definition>RetNode* asmjit::x86x64::X86X64Compiler::ret</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>ret</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1986" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1986" bodyend="1986"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afd118fe5cd77e8306fe495c9a8a94c34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rol</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>rol</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Rotate bits left. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1989" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1989" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3f89017c6e52bc3fb86701be9b0ab36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rol</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>rol</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1991" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1991" bodyend="1991"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8691b383fb7ea59ae39e0e2ce4d566b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rol</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>rol</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Rotate bits left. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1993" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1993" bodyend="1993"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10a1c800ef69e900a235da948e3e5c1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rol</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>rol</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1993" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1993" bodyend="1993"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf8c21582aeb5e633b7f7345241a671f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rol</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>rol</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1995" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1995" bodyend="1995"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acd03a3fbb376ad431cbd2cb66d5b44d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rol</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>rol</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1995" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1995" bodyend="1995"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a424c7e5f81c7e4c5f0918dd4724b5545" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ror</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>ror</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Rotate bits right. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1998" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1998" bodyend="1998"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2616c3ecc3894bd7d8c7c529d9f8b63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ror</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>ror</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2000" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2000" bodyend="2000"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9aded5fe8b3083a91c18aa11f877fbf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ror</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>ror</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Rotate bits right. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2002" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2002" bodyend="2002"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2eb7055ff23eb00a21a472a69dd00e94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ror</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>ror</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2002" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2002" bodyend="2002"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac41b0da666e9fecccf734491609539d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ror</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>ror</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2004" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2004" bodyend="2004"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d5be477ad291daac1604672a957d0ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ror</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>ror</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2004" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2004" bodyend="2004"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afd5aafa6ef08cbb306317328f5120a8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sahf</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>sahf</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Store <emphasis>var</emphasis> (allocated in AH/AX/EAX/RAX) into Flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2007" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2007" bodyend="2007"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad153aee45b70221b7eddd5cd21fe5c72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sbb</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>sbb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Integer subtraction with borrow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2010" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2010" bodyend="2010"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac5012ccf08c2c841f1186ae9d74854e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sbb</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>sbb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2012" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2012" bodyend="2012"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22a206ced518ce641f02595f31ed49ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sbb</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>sbb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2014" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2014" bodyend="2014"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a685b7e130113a1a416d5c148eaf0ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sbb</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>sbb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2014" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2014" bodyend="2014"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a35e0eca979ec9e0f5de96535fcb71112" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sbb</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>sbb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2016" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2016" bodyend="2016"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af85d642738ea9a2c6090edc91d2bcb6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sbb</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>sbb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2018" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2018" bodyend="2018"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a80a5132789b556bea8a0174644629854" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sbb</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>sbb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2018" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2018" bodyend="2018"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acdea1a4a8e06b8e37fc63fb2e2c68450" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sal</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>sal</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Shift bits left. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2021" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2021" bodyend="2021"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aceac9fc0a731d558fdecb4b3112de8f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sal</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>sal</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2023" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2023" bodyend="2023"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa5075fdda83347c463c017246e978cad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sal</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>sal</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Shift bits left. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2025" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2025" bodyend="2025"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5bb1d7b5af3ab424312e91e07030730b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sal</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>sal</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2025" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2025" bodyend="2025"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a85605fc008609698a4198ad2ddeebd17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sal</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>sal</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2027" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2027" bodyend="2027"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af013dbf23ef796db4a4b89967a18be82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sal</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>sal</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2027" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2027" bodyend="2027"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9cd5af9d4b531c900d3a568afe1f355a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sar</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>sar</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Shift bits right. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2030" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2030" bodyend="2030"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8667815306a2afb44685d6f1726b6300" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sar</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>sar</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2032" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2032" bodyend="2032"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a2da1060c4fed40ad1e6a3836969725" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sar</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>sar</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Shift bits right. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2034" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2034" bodyend="2034"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a29f5d5a09719624a227aafc7a47ce012" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sar</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>sar</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2034" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2034" bodyend="2034"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5900f80db7fd4c0bd44ab196bf58cc77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sar</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>sar</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2036" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2036" bodyend="2036"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a657d1dd137edc75d6e016c029e8e3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sar</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>sar</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2036" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2036" bodyend="2036"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8081167edd2724631baba1d793f94af5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::set</definition>
        <argsstring>(uint32_t cc, const GpVar &amp;o0)</argsstring>
        <name>set</name>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Set byte on condition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa70734a5673345c240e0563cfc867c05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::seta</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>seta</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af34c88130ef7d2c9021cf3e7b13201e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setae</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setae</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6eadfb754d73a31096c9a8be6fa5baaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setb</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a539455df68c61b6bf92fc1dc505eb18a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setbe</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9a73ad1446326aa6a9ca000c18659295" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setc</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af55755bca03ff42ddad7dfd16cc6a369" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sete</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>sete</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a2fafb3a76e84130ae2a1acdd08ff3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setg</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2aba122b6ad68d15f4fc1c938b7c04d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setge</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac5052c667eea6bd8bb65f9098d5afede" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setl</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a67cfd95721a3ad25fd55af09b767a597" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setle</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setle</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b0a9cd43d7534d8be877e81fa0bfd96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setna</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setna</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9dd9e021f64c0a5694f1845e3f5d5c68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnae</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setnae</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3ffcab3e9cfc03e66cb27522c7b6669f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnb</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setnb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79d7d917fae826d3ca98c0b35269b6cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnbe</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setnbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a02a28004148e0a74c567177283a60cac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnc</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setnc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac57b4bf85e3ec3f0a29dbcb90309f13d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setne</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setne</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66aa46dc5fa97105247ab3627dade5da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setng</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setng</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e3b194ec67c6160b84c0727999b1ab3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnge</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setnge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e47b98829f2231ec518ee31f4d069c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnl</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setnl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66d0afdc5e96520b3defbb4f847e4254" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnle</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setnle</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae207c19303d5475365c35ae4430c01b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setno</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setno</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2e0a85685a31dfc9a7cb1265945405eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnp</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setnp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2af5916c2d4d72af7f71d0b83c3886b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setns</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setns</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a52479754e7b22a3f6ee53c5f073dbe9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnz</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setnz</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6060a5553e0dc114d026600cd5553e66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::seto</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>seto</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae8148366e64584f43b99b5e552457305" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setp</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af4002fc4cf01c21b9940424d5111f7ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setpe</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setpe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a86c5cbaf123b453dae0783c7f4203662" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setpo</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setpo</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3db3b8b7be7b73f42369dcfe0e0a6cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sets</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>sets</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4812e169c504db6c23e5433a9daa48cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setz</definition>
        <argsstring>(const GpVar &amp;o0)</argsstring>
        <name>setz</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2039" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2039" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5611b7858855c465d44212fd94763345" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::set</definition>
        <argsstring>(uint32_t cc, const Mem &amp;o0)</argsstring>
        <name>set</name>
        <param>
          <type>uint32_t</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Set byte on condition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7c1352be6c7436faa44f2b6bd3c3b837" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::seta</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>seta</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76fd49c177d8cd71c069f9aa4fc38278" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setae</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setae</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae814456693531e1590b7100cb906e853" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setb</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5bc41da3771255ed658c2dba1f9b77d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setbe</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac8aede1de405ad1a6ed26402ae1cd757" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setc</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab339ae1389cd24bd862e1f101083b105" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sete</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>sete</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae66a96bffd715ddeae125c9f29899050" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setg</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d8968f6ad07097b4f12830d86c23ef8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setge</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad3463281b86e006ed8e31f721f7874f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setl</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad08c13e031aa4a3a7c7c0547a5b0f6bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setle</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setle</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa2888dacacce4f31f47d1df4968ab88" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setna</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setna</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a63cd16e737017391d4fad2663ee4fed8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnae</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setnae</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac51c1ea360c0883045bc66738cefc6ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnb</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setnb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aea9015552ad05c7eae0ab8dddafc68db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnbe</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setnbe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9326d8a8cc8cf6d0823cfd48e0213d38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnc</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setnc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a428b9ff141b7d038904f3fc555e30bd8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setne</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setne</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae637c24ea7f5f0005f9bfb8f87b08ca6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setng</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setng</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1f26798011cab27f1911d17fee7e3c6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnge</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setnge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aceaa6f4d6d0f70940c4092b8c2b92637" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnl</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setnl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa5001daa81a1175c6485cc91b48673be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnle</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setnle</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22a4b7bda3e92f36b2fbb2feba3ca26d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setno</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setno</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8ae6cadca9628e2e74f80afaf900aeae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnp</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setnp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d49b3d4aaf781ad33705ac89f5fd527" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setns</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setns</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee434b017c9e7a362f57072428acc55f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setnz</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setnz</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a946b8c099d6cb66e0ef806443f01b235" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::seto</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>seto</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f326a77bbf5f5bea81d3b411e46a18b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setp</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa58f11692eb78e955651b5ac19e20244" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setpe</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setpe</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3181de8ae7286a6e27f2ae7d0903394" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setpo</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setpo</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8eb0cce96184df20440bcc8bec317984" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sets</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>sets</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14538a8ff5d8e123df0ec0ecb144b26b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::setz</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>setz</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2041" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a824abd324b49960df327c6aa6212c258" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shl</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>shl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Shift bits left. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2044" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2044" bodyend="2044"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a397160c5b3a44ef1281abb73ab79ee4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shl</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>shl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2046" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2046" bodyend="2046"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa40ef3b0624d684ed76f0d35dab45402" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shl</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>shl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Shift bits left. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2048" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2048" bodyend="2048"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c728fe51574c4ed32a6aaf2446d1521" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shl</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>shl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2048" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2048" bodyend="2048"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ee1d956467bee1eac6202987577120d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shl</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>shl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2050" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2050" bodyend="2050"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a77837bc3a9f12f1a76cdcfdaf6bc147c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shl</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>shl</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2050" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2050" bodyend="2050"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a09c677470aabfef0cdc269e4eed3d79e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shr</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>shr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Shift bits right. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2053" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2053" bodyend="2053"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a464b16315eac00694b25b916c319f7b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shr</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>shr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2055" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2055" bodyend="2055"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af17bb5053a7484a1def1f2c73b647079" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shr</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>shr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Shift bits right. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2057" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2057" bodyend="2057"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30cd46a6c0014074c8e75544b0db9332" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shr</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>shr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2057" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2057" bodyend="2057"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2cb9140853a7e21288cc99c1a1b060d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shr</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>shr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2059" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2059" bodyend="2059"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a856f110b58ebe3be741e4494a2113e34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shr</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>shr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2059" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2059" bodyend="2059"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1affc9d7c47a8f691eb8bb8b835e7b037f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shld</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>shld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Double precision shift left. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2062" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2062" bodyend="2062"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9fe2471b5857cc17bc71877f5885dbe5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shld</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>shld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2064" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2064" bodyend="2064"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee073f26f65fe7cbdbe30ba3b2346f44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shld</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>shld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Double precision shift left. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2066" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2066" bodyend="2066"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af193f63be5986f76908e3ba3383cb51c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shld</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, int o2)</argsstring>
        <name>shld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2066" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2066" bodyend="2066"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73932825f517076f9e5e52caf32d6eeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shld</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>shld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2068" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2068" bodyend="2068"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf6a8e83eeb37e50b20b97d187306b79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shld</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1, int o2)</argsstring>
        <name>shld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2068" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2068" bodyend="2068"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acb0b4181ad36a987c77a266ddddc75f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shrd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>shrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Double precision shift right. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2071" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2071" bodyend="2071"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab60ad8101f11a716cd4dd60fdfb455dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shrd</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1, const GpVar &amp;o2)</argsstring>
        <name>shrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2073" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2073" bodyend="2073"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac6ce87aee95a884ba1ddee2820d89763" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shrd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>shrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Double precision shift right. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2075" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2075" bodyend="2075"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4e1ee07213e348ac36aa52fdde6185ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shrd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1, int o2)</argsstring>
        <name>shrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2075" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2075" bodyend="2075"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a688296e67c9a2156e8b74ff239c72684" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shrd</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>shrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2077" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2077" bodyend="2077"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee5993a1fc6ca87029163a7f93ceaf7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shrd</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1, int o2)</argsstring>
        <name>shrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2077" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2077" bodyend="2077"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4e03aab8be126bf9a83489cf4b1c31ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::stc</definition>
        <argsstring>()</argsstring>
        <name>stc</name>
        <briefdescription>
<para>Set carry flag to 1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2080" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2080" bodyend="2080"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1addf3862a603b5d030b9ead7b1ec87c46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::std</definition>
        <argsstring>()</argsstring>
        <name>std</name>
        <briefdescription>
<para>Set direction flag to 1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2082" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2082" bodyend="2082"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8901a8f15109bcaf4b92486fb5a325b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sub</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Subtract. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2085" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2085" bodyend="2085"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb09251fe30f53ba7e62ea49cbb7abab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sub</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2087" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2087" bodyend="2087"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2e48866584df04bc5253744a93127ae3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sub</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2089" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2089" bodyend="2089"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a027a768a53819c100282fe2410259c23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sub</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2089" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2089" bodyend="2089"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa605eb4a95b8daf6ac7a95b40702c7e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sub</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2091" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2091" bodyend="2091"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aada75c0f706c139308c7be82d6161e83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sub</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2093" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2093" bodyend="2093"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec461e723a0bb05a39a71a7f6b12abca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sub</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2093" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2093" bodyend="2093"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e02f05b1fcc68c09f1d341e9a479096" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::test</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>test</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Logical compare. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2096" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2096" bodyend="2096"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71d2272e1bd11893470c04c4ef4110d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::test</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>test</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2098" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2098" bodyend="2098"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a633e6c4b6ac08115068139c775345afa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::test</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>test</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2098" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2098" bodyend="2098"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acb8ef2b1e91d9b101880564740e44b50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::test</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>test</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2100" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2100" bodyend="2100"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4e19a6ba0d34f04a2ec3fb5e8b047e05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::test</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>test</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2102" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2102" bodyend="2102"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af29a67269fde1b3af58220df0603f66d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::test</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>test</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2102" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2102" bodyend="2102"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a694e4377a1de4b9e8d55d029dce01e87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ud2</definition>
        <argsstring>()</argsstring>
        <name>ud2</name>
        <briefdescription>
<para>Undefined instruction - Raise #UD exception. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2105" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2105" bodyend="2105"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7655edcd17dcbddf08e4b303f0236723" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xadd</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>xadd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Exchange and add. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2108" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2108" bodyend="2108"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a234b5b60f663341b4a14c5ec41a86f38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xadd</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>xadd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2110" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2110" bodyend="2110"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a700e4b7e566989bd923f4adf95d1a06d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xchg</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>xchg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Exchange register/memory with register. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2113" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2113" bodyend="2113"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1add50d568b168526f329722d68e09a540" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xchg</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>xchg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2115" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2115" bodyend="2115"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1c8753d74aecd3bd8641c84c637f4ed6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xchg</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>xchg</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2117" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2117" bodyend="2117"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2df7dadf4877d4065242d611443b5d08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xor_</definition>
        <argsstring>(const GpVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>xor_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Xor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2120" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2120" bodyend="2120"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a784e90b232c74afb59a0de575c195e1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xor_</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>xor_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2122" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2122" bodyend="2122"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a56c139b47c10377943bb370e48c69ceb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xor_</definition>
        <argsstring>(const GpVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>xor_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2124" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2124" bodyend="2124"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4f53482a92e25029630853fb104939a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xor_</definition>
        <argsstring>(const GpVar &amp;o0, int o1)</argsstring>
        <name>xor_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2124" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2124" bodyend="2124"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae5bd022a2d5b2755f7a8b8ac794fe4a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xor_</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>xor_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2126" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2126" bodyend="2126"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa287b3a0209495a176d8d92de16fa32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xor_</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>xor_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2128" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2128" bodyend="2128"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a84027883fa8479ef16d5d523de9c37dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xor_</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>xor_</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2128" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2128" bodyend="2128"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adff48078c99c14e08fb2a1c6cc2fc7ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movd</definition>
        <argsstring>(const Mem &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>movd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move dword (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2135" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2135" bodyend="2135"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6a5d38fea0aff991ccf78476d2edbb9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movd</definition>
        <argsstring>(const GpVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>movd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2137" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2137" bodyend="2137"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa4d85e5980febe458dabd9dd0c3bdf89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2139" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2139" bodyend="2139"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa43842bfd88efc83f113e751a130a8fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movd</definition>
        <argsstring>(const MmVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>movd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2141" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2141" bodyend="2141"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a28523fac15a7623342cf0ecff2c0abd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movq</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>movq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move qword (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2144" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2144" bodyend="2144"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7f4bc547be76919a62059a27de0a5cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movq</definition>
        <argsstring>(const Mem &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>movq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2146" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2146" bodyend="2146"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae87e71e6433f824a25fe95893d76f839" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movq</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2148" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2148" bodyend="2148"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9c2a6fd08e47cc5095b73c01343bfb02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packsswb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>packsswb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Pack with signed saturation (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2151" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2151" bodyend="2151"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aace7b004cf9a43b1224c983c31d5609b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packsswb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>packsswb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2153" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2153" bodyend="2153"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a297321f1449b6cd1bd36038431672734" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packssdw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>packssdw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Pack with signed saturation (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2156" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2156" bodyend="2156"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8dc6e7e451db37d79accc4b6cf68cc14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packssdw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>packssdw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2158" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2158" bodyend="2158"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2691f0fc9b9238f5065c45b7323a3ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packuswb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>packuswb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Pack with unsigned saturation (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2161" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2161" bodyend="2161"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae64a52335db5b040d19e651620ce8c95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packuswb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>packuswb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2163" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2163" bodyend="2163"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff1aae5a24df592b694b0f329fe84ab9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>paddb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed byte add (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2166" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2166" bodyend="2166"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4db41fd01a6da88af1948afaa785630d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2168" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2168" bodyend="2168"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70825a99a45af4c99b5e7f23f19a4d30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>paddw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed word add (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2171" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2171" bodyend="2171"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7231c821a78c271e660a3188260f48e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2173" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2173" bodyend="2173"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae216028d44b3707deb0f121cdc6ae345" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>paddd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed dword add (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2176" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2176" bodyend="2176"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6ebfc0c64abbbc12af1ad5c1168e80f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2178" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2178" bodyend="2178"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a163dadbfea0e24ede3d65dcf505b81da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddsb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>paddsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed add with saturation (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2181" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2181" bodyend="2181"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ceabf9eb86f7c535644a2fd23929336" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddsb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2183" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2183" bodyend="2183"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b49e8a86a5e7e30793248ea01096d04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddsw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>paddsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed add with saturation (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2186" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2186" bodyend="2186"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaefbf007f1f49e517754707ae7b71a1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddsw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2188" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2188" bodyend="2188"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abceea02ce1ace3f819ea2947ce403a12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddusb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>paddusb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed add unsigned with saturation (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2191" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2191" bodyend="2191"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d9f6aa74cfe134a3c20fc2772b9b5e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddusb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddusb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2193" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2193" bodyend="2193"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a647bec191f5f80435f1622a7123f6e65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddusw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>paddusw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed add unsigned with saturation (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2196" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2196" bodyend="2196"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f23bcd27b1087756f185a4b202883f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddusw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddusw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2198" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2198" bodyend="2198"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6ce826d34c2ea3e1efd2359772677648" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pand</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pand</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>And (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2201" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2201" bodyend="2201"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a46bfba969ee39c413dc138c85a9e3ff9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pand</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pand</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2203" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2203" bodyend="2203"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d73e1e249f0ad89a42c2692ec5228c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pandn</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pandn</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>And-not (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2206" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2206" bodyend="2206"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae87a4051dc72e483745ea366bd72b774" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pandn</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pandn</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2208" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2208" bodyend="2208"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc9eb9a90058e0b5fa38fba44d40eec3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pcmpeqb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare bytes for equal (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2211" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2211" bodyend="2211"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa7bb031e4bb610232d4b6e7f832c920" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpeqb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2213" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2213" bodyend="2213"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad3c69007a3c742b98bb6508a30f00f4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pcmpeqw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare words for equal (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2216" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2216" bodyend="2216"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a900667c43073fa3a9d18c6d1d0cf698d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpeqw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2218" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2218" bodyend="2218"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af95854364938495ff5446be077c1f607" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pcmpeqd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare dwords for equal (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2221" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2221" bodyend="2221"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a72f82722bc2d2cd5c4f8424990feb422" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpeqd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2223" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2223" bodyend="2223"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6f8cb31d06c58ce2f5d7e3dc63bb7700" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pcmpgtb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare bytes for greater than (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2226" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2226" bodyend="2226"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b316f0192ceab2c848292408586b30e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpgtb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2228" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2228" bodyend="2228"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3e3eb41ea42e9f01160f8ced0c32b2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pcmpgtw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare words for greater than (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2231" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2231" bodyend="2231"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aac30639307fc3bbf9a55a15e607946b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpgtw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2233" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2233" bodyend="2233"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7e25db987d3ea45506a3c2af1108abfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pcmpgtd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare dwords for greater than (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2236" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2236" bodyend="2236"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3460ece4a261ead1539e3b65a072b825" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpgtd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2238" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2238" bodyend="2238"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76d65341e10ac3f47dc047dcad53d899" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pmulhw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply high (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2241" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2241" bodyend="2241"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95fee473d06c70796da1a5330f8a0479" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmulhw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2243" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2243" bodyend="2243"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec19d8884baab3e37b85c83c765b6aa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmullw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pmullw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply low (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2246" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2246" bodyend="2246"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac407cc860c12d871535c98c1f807b21c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmullw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmullw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2248" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2248" bodyend="2248"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab9379a5f007cb59ddc83678265921b01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::por</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>por</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Bitwise logical or (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2251" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2251" bodyend="2251"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abeba91527b0a510d7ea2844589a83334" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::por</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>por</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2253" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2253" bodyend="2253"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d8dae83c3ba875c0a256f4b1ec06779" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaddwd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pmaddwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply and add (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2256" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2256" bodyend="2256"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf6a94cb18051d2b6c7c2d1ef92cc4f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaddwd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaddwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2258" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2258" bodyend="2258"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab527554056a845fcce237de576b017ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pslld</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pslld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift left logical (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2261" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2261" bodyend="2261"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab23eae2fd4311ab7fe5c0436a223cdd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pslld</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pslld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2263" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2263" bodyend="2263"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2bba6fd1ee16a4454f05a28a1c30b95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pslld</definition>
        <argsstring>(const MmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>pslld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2265" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2265" bodyend="2265"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3ec1461b69fb925b35f2db087587f255" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pslld</definition>
        <argsstring>(const MmVar &amp;o0, int o1)</argsstring>
        <name>pslld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2265" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2265" bodyend="2265"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3c62ba50ea82d5741c5dd10c02b4cc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllq</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psllq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift left logical (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2268" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2268" bodyend="2268"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adfb50247643357ab8a5c0e7d6f4c66d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllq</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psllq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2270" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2270" bodyend="2270"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96f88718aecbb2e63aa051c4033dca16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllq</definition>
        <argsstring>(const MmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psllq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2272" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2272" bodyend="2272"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41c8195d8a3277d69b410111a677d0af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllq</definition>
        <argsstring>(const MmVar &amp;o0, int o1)</argsstring>
        <name>psllq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2272" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2272" bodyend="2272"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0933a75305ce20d3327b08d3a201fa09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psllw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift left logical (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2275" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2275" bodyend="2275"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9fd47ea6a3de8c05d970925b7e0062bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psllw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2277" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2277" bodyend="2277"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a99c044c077503a2f5221e9167ffb579c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllw</definition>
        <argsstring>(const MmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psllw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2279" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2279" bodyend="2279"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae80601de0661757431e81c94dd33f588" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllw</definition>
        <argsstring>(const MmVar &amp;o0, int o1)</argsstring>
        <name>psllw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2279" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2279" bodyend="2279"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4df8619909c3ec93f7d32e4ad0a8b1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrad</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psrad</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift right arithmetic (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2282" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2282" bodyend="2282"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a462777045512e24a066edee1eaa53883" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrad</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psrad</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2284" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2284" bodyend="2284"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9a442757d6928d1afd0b85f5edf1636" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrad</definition>
        <argsstring>(const MmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psrad</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2286" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2286" bodyend="2286"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a862213f3c4ab05fe1f07cc64c894ffc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrad</definition>
        <argsstring>(const MmVar &amp;o0, int o1)</argsstring>
        <name>psrad</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2286" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2286" bodyend="2286"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd6796e6cd2ba2368235c7ba607f4fe6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psraw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psraw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift right arithmetic (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2289" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2289" bodyend="2289"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a59d21271b10cbb4a50c19a618255c842" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psraw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psraw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2291" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2291" bodyend="2291"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30abc1a605fb64f4ebf3075dd7323bb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psraw</definition>
        <argsstring>(const MmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psraw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2293" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2293" bodyend="2293"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22ecf0f41987ae39b576ff3473a96324" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psraw</definition>
        <argsstring>(const MmVar &amp;o0, int o1)</argsstring>
        <name>psraw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2293" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2293" bodyend="2293"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4a67bfa12fcdd3ad926cd1c2eaecff6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrld</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psrld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift right logical (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2296" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2296" bodyend="2296"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a61b800d6bf12c5103509c9a0ac44b180" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrld</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psrld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2298" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2298" bodyend="2298"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a18bc45fb4bda8c59bd58c4beffe3b35b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrld</definition>
        <argsstring>(const MmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psrld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2300" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2300" bodyend="2300"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a816fa09f20d63639987fdb22f8822c53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrld</definition>
        <argsstring>(const MmVar &amp;o0, int o1)</argsstring>
        <name>psrld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2300" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2300" bodyend="2300"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7892cb8aae44f9f321e0c0b51fe7e6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlq</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psrlq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift right logical (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2303" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2303" bodyend="2303"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e37fcaa49449a47701169d2206ff655" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlq</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psrlq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2305" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2305" bodyend="2305"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2ef2a5bc7fd8bf254897f82ae7fcb2a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlq</definition>
        <argsstring>(const MmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psrlq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2307" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2307" bodyend="2307"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a32a201201d16d7e3755b21c262a7e382" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlq</definition>
        <argsstring>(const MmVar &amp;o0, int o1)</argsstring>
        <name>psrlq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2307" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2307" bodyend="2307"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ace1fce8eae8280e58d068935fdf5f16c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psrlw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift right logical (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2310" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2310" bodyend="2310"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a154dc5378d5124d7704a5d9d17a20894" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psrlw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2312" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2312" bodyend="2312"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d87fb39e91ae26dec2e9d2dbd868446" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlw</definition>
        <argsstring>(const MmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psrlw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2314" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2314" bodyend="2314"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa86bbf82d494924b55053597dff03826" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlw</definition>
        <argsstring>(const MmVar &amp;o0, int o1)</argsstring>
        <name>psrlw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2314" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2314" bodyend="2314"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2177ac53ea642d7424670cd66b9743f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psubb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2317" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2317" bodyend="2317"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b1a56d76bee14b5ebed9ea0032dd1d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2319" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2319" bodyend="2319"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7738bb1d39a09410244e4ecd6b1b763c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psubw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2322" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2322" bodyend="2322"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0c378adfcb24a5c27cd639660688608" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2324" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2324" bodyend="2324"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7a3590feb29acce2a142d250fbcd840" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psubd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2327" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2327" bodyend="2327"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0cd95bebe14d8783fb7529959599bd89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2329" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2329" bodyend="2329"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5fcc2e755a8122276a013375bccfc2f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubsb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psubsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract with saturation (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2332" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2332" bodyend="2332"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af45765e4a2bac45d3048f95516ea263b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubsb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2334" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2334" bodyend="2334"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a042f9291b10fa705ccd61c97e5dadcf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubsw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract with saturation (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2337" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2337" bodyend="2337"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeb276415f9346fe8b060c79beed066d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubsw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2339" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2339" bodyend="2339"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa903e49700c9df683321e2e743b32f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubusb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psubusb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract with unsigned saturation (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2342" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2342" bodyend="2342"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a44b9f8408cc3d75204bd1b4f6451fc00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubusb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubusb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2344" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2344" bodyend="2344"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a370b2c4b4d4908e89045c64242d4e651" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubusw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psubusw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract with unsigned saturation (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2347" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2347" bodyend="2347"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0ce80c356c8cb91abad15aa9404db5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubusw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubusw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2349" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2349" bodyend="2349"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae3a751362da5d33d5f665e3d1089b89e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhbw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>punpckhbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack high packed data (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2352" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2352" bodyend="2352"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad83345ca713edc9b4034960d1b9a04bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhbw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpckhbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2354" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2354" bodyend="2354"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aed6b631122a14893b4d6b14f12aa8b13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhwd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>punpckhwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack high packed data (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2357" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2357" bodyend="2357"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7fea33f780a1cdc47afe0f8ff41eeea0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhwd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpckhwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2359" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2359" bodyend="2359"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae56a6c0cdce4ee316ab55b1de0856f2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhdq</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>punpckhdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack high packed data (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2362" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2362" bodyend="2362"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7f08dedd3574e58d635052ec7680190f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhdq</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpckhdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2364" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2364" bodyend="2364"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1add56c3bbc5fad8cca1eb33f1d43ba004" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpcklbw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>punpcklbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack high packed data (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2367" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2367" bodyend="2367"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7e987336b9518128be2e705048bc5f68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpcklbw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpcklbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2369" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2369" bodyend="2369"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a81c779685b1b397a0cacec96da3c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpcklwd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>punpcklwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack high packed data (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2372" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2372" bodyend="2372"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73074ff40f269e8e26d199c37b14835d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpcklwd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpcklwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2374" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2374" bodyend="2374"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afbd0039138525c6c33a8386435e42832" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckldq</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>punpckldq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack high packed data (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2377" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2377" bodyend="2377"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a227c02b427969d3b037272cd4bf584ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckldq</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpckldq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2379" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2379" bodyend="2379"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d0e4475d4a99ff8076a1d2f04c992b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pxor</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pxor</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Xor (MMX). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2382" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2382" bodyend="2382"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6b23d49fea6595ac4017303894a30630" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pxor</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pxor</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2384" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2384" bodyend="2384"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef638b7e81a34c45769fa8de642a47d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::emms</definition>
        <argsstring>()</argsstring>
        <name>emms</name>
        <briefdescription>
<para>Empty MMX state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2387" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2387" bodyend="2387"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff4d70df64ca8a99153a4f1bd2a4ce9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pf2id</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pf2id</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP to integer convert (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2394" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2394" bodyend="2394"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a25bd2ff91fe42bbd50c9680a2d5dedf3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pf2id</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pf2id</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2396" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2396" bodyend="2396"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4d2b7e95605bef887224eb3eb9be0b83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pf2iw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pf2iw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP to integer word convert (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2399" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2399" bodyend="2399"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3de2b3eee568e9b85fca4d81cd8511c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pf2iw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pf2iw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2401" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2401" bodyend="2401"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0283b85ee9a80016d7535d2e73280db1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfacc</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfacc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP accumulate (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2404" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2404" bodyend="2404"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4925b0fe8099979f3ec9044244ffcd48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfacc</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfacc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2406" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2406" bodyend="2406"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeeadb11d9e0a862ba54c1599632b869b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfadd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfadd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP addition (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2409" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2409" bodyend="2409"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2bfe871fc56f2c377da766b0a49ff8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfadd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfadd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2411" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2411" bodyend="2411"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb3e965737a4e8684cc6995d722d9f4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfcmpeq</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfcmpeq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP compare - dst == src (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2414" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2414" bodyend="2414"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a97befa742a4d900e1c03d98ed9cb74ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfcmpeq</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfcmpeq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2416" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2416" bodyend="2416"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5480faef08410e0931cb1775cdaaacf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfcmpge</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfcmpge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP compare - dst &gt;= src (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2419" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2419" bodyend="2419"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a75a4cc1cf69eb1f8fe4463a9101ab3d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfcmpge</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfcmpge</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2421" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2421" bodyend="2421"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1633ca57f38ff54ccefd62041407ba7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfcmpgt</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfcmpgt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP compare - dst &gt; src (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2424" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2424" bodyend="2424"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7e738093d7e6d5eb86ec80295ea64dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfcmpgt</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfcmpgt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2426" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2426" bodyend="2426"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a29ea44766aa89008eb0e5deadb26ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfmax</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfmax</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP maximum (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2429" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2429" bodyend="2429"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a337b6a3e3de7993a1f53c988f61fb6d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfmax</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfmax</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2431" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2431" bodyend="2431"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad8292c3e01712dfa89ebe1bb7fbe9e08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfmin</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfmin</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP minimum (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2434" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2434" bodyend="2434"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afb8871705f97b870c8891d76a92102ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfmin</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfmin</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2436" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2436" bodyend="2436"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a17a505c01dada442c7890ea977abcd3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfmul</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfmul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP multiply (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2439" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2439" bodyend="2439"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a43ff88a006843bcb1770d8727771e855" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfmul</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfmul</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2441" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2441" bodyend="2441"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab213fd1cc5c4b31f5aa17b90f4135a96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfnacc</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfnacc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP negative accumulate (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2444" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2444" bodyend="2444"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd4809819b273a0c551ea9dbd69b0cb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfnacc</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfnacc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2446" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2446" bodyend="2446"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab97d1ca63ee4ae0af8bba5bd7388fa98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfpnacc</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfpnacc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP mixed accumulate (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2449" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2449" bodyend="2449"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a55fdd7166d1529b1b01ac4040f2561be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfpnacc</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfpnacc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2451" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2451" bodyend="2451"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac41a6aef4c747a1d07acb0d2779e06b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfrcp</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfrcp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP reciprocal approximation (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2454" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2454" bodyend="2454"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6426a2eecd4236a3daa01f5c95fa816d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfrcp</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfrcp</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2456" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2456" bodyend="2456"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78dd5941dd2b41a05b17b94215541f0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfrcpit1</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfrcpit1</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP reciprocal, first iteration step (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2459" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2459" bodyend="2459"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae4e13dde8718880085cafcd7a9e7aec4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfrcpit1</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfrcpit1</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2461" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2461" bodyend="2461"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b1cd75dfe19d2b37b56000d74cd84a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfrcpit2</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfrcpit2</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP reciprocal, second iteration step (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2464" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2464" bodyend="2464"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad3689044b28ed9625d3c25ebac14bef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfrcpit2</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfrcpit2</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2466" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2466" bodyend="2466"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8fc2f9ef8ffb5cfbacd227c4da908339" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfrsqit1</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfrsqit1</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP reciprocal square root, first iteration step (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2469" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2469" bodyend="2469"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae20da1202b2814c0bdfbb6de9de80835" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfrsqit1</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfrsqit1</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2471" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2471" bodyend="2471"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0305ce60d80d0212e176a35bb760cb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfrsqrt</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfrsqrt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP reciprocal square root approximation (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2474" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2474" bodyend="2474"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae8bbc1b21a9624ab42dd2ea61a1d6948" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfrsqrt</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfrsqrt</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2476" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2476" bodyend="2476"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a688ff752f51b4de87718d2df03a6c629" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfsub</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfsub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP subtract (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2479" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2479" bodyend="2479"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a926012d7605d7c5b823c0a663619cd22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfsub</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfsub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2481" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2481" bodyend="2481"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a496f0eff6eb294c7f6625f58763082cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfsubr</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pfsubr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP reverse subtract (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2484" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2484" bodyend="2484"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a707b28d0a4d03c9cc87a22ab8f1c6280" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pfsubr</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pfsubr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2486" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2486" bodyend="2486"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a564f6670117878d87e65d38304b9b669" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pi2fd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pi2fd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed dwords to SP-FP (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2489" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2489" bodyend="2489"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a006ccda1ae211182ebf7a66a73a5d49f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pi2fd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pi2fd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2491" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2491" bodyend="2491"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a164dc4066b06c540abdfe0e0f5d0a989" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pi2fw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pi2fw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed words to SP-FP (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2494" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2494" bodyend="2494"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0473f122202aa26dfd848639d47802a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pi2fw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pi2fw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2496" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2496" bodyend="2496"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10884a9a77b73d51f82b96231256ed76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pswapd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pswapd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed swap dword (3dNow!) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2499" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2499" bodyend="2499"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa2123ab3d3f17aaf51453d5f4d7288d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pswapd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pswapd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2501" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2501" bodyend="2501"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a1ad214f2263bd8b0915a133fd74032" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::prefetch_3dnow</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>prefetch_3dnow</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Prefetch (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2504" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2504" bodyend="2504"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb54e0884308d2a9781771bc6cd6194e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::prefetchw_3dnow</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>prefetchw_3dnow</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Prefetch and set cache to modified (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2507" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2507" bodyend="2507"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a39ffd6f6a6f4b470fe002ef76180e802" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::femms</definition>
        <argsstring>()</argsstring>
        <name>femms</name>
        <briefdescription>
<para>Faster EMMS (3dNow!). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2510" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2510" bodyend="2510"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac85e5c64f0b5b9f4435cd653390ca8dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>addps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP add (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2517" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2517" bodyend="2517"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a60feb051121edab0bcecacb114a32704" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>addps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2519" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2519" bodyend="2519"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aba0f15c2c3b2e8466ae27fbf08cea262" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>addss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar SP-FP add (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2522" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2522" bodyend="2522"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa5bb6121b9039eaa8b010f21b51ffc54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>addss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2524" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2524" bodyend="2524"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e3447dcb8b4873856b5cf2d8a0d616e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::andnps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>andnps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>And-not For SP-FP (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2527" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2527" bodyend="2527"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1117ba895da3469729a5ffda6f656efc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::andnps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>andnps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2529" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2529" bodyend="2529"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae4fa1c3a76a32a1347ddbb68f21de56a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::andps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>andps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>And for SP-FP (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2532" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2532" bodyend="2532"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaa2bd13989df0f4e89f1d098f786eff2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::andps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>andps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2534" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2534" bodyend="2534"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae9f99a706f185191ba7e5c44c1e7ec10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>cmpps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP compare (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2537" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2537" bodyend="2537"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae4c542401b66b3dd7c43770f833454f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>cmpps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2537" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2537" bodyend="2537"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ee0da2a288f2391cc2464e876ac1414" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>cmpps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2539" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2539" bodyend="2539"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad34648182b9ce41a11090c33bf800ca5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>cmpps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2539" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2539" bodyend="2539"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41284ace24e95221b3436bdfeb469431" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>cmpss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Compare scalar SP-FP Values (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2542" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2542" bodyend="2542"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ab3a10b839f4672bd81842c04e46d5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>cmpss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2542" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2542" bodyend="2542"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96a498675cf7dc476b46c70d95e1bd7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>cmpss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2544" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2544" bodyend="2544"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1add716bd0315630067d141431949a1f04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>cmpss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2544" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2544" bodyend="2544"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f265af8aa3b9cbeb748c9ab07f78345" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::comiss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>comiss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar ordered SP-FP compare and set EFLAGS (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2547" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2547" bodyend="2547"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aacacfa4ba7240036e8e00b581067ba41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::comiss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>comiss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2549" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2549" bodyend="2549"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa6e14017cb7f65de4d4d1da225f031df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtpi2ps</definition>
        <argsstring>(const XmmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>cvtpi2ps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed signed INT32 to packed SP-FP conversion (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2552" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2552" bodyend="2552"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9083630bc46f8f1f963d49deca43e534" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtpi2ps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtpi2ps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2554" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2554" bodyend="2554"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a023326c36d12261ffd24011cd8eb996c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtps2pi</definition>
        <argsstring>(const MmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtps2pi</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP to packed INT32 conversion (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2557" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2557" bodyend="2557"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afff4316bcaaf1b4b5fc1fe31bbf10f69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtps2pi</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtps2pi</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2559" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2559" bodyend="2559"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4d02801886a6ea95d25e0d51ce658a32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtsi2ss</definition>
        <argsstring>(const XmmVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cvtsi2ss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar signed INT32 to SP-FP conversion (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2562" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2562" bodyend="2562"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae78d5394a6763b076d516a2c1a6f32f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtsi2ss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtsi2ss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2564" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2564" bodyend="2564"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a743215648c239d85028f3cc98a116e7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtss2si</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtss2si</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar SP-FP to Signed INT32 conversion (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2567" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2567" bodyend="2567"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9ff3cdc5289b1bd6f12564d2f5f70b55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtss2si</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtss2si</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2569" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2569" bodyend="2569"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ec275e00c4ac98155598bd5474d10fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttps2pi</definition>
        <argsstring>(const MmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvttps2pi</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP to packed INT32 conversion (truncate) (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2572" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2572" bodyend="2572"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4bd56f2d95771b82c56134b3ade44019" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttps2pi</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvttps2pi</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2574" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2574" bodyend="2574"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad21e9bfcd6d8291a4df1057284c05edf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttss2si</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvttss2si</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar SP-FP to signed INT32 conversion (truncate) (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2577" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2577" bodyend="2577"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a93ea80b2d4a6390e01b3bba78bc823" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttss2si</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvttss2si</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2579" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2579" bodyend="2579"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a17452086b8be1de2e6e491f39b388928" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::divps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>divps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP divide (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2582" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2582" bodyend="2582"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd5b4f0bfcf231302e26f0ae0bba0cf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::divps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>divps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2584" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2584" bodyend="2584"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a49eadf01b6cccc999e7627aa227868c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::divss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>divss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar SP-FP divide (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2587" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2587" bodyend="2587"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76ba48aea6d454659b26762467ecc028" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::divss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>divss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2589" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2589" bodyend="2589"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3dd1aea2975beeaf3344c0b250be22f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ldmxcsr</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>ldmxcsr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Load streaming SIMD extension control/status (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2592" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2592" bodyend="2592"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1add30eb7d480e633fb899487d35b74b01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::maskmovq</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>maskmovq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Byte mask write (SSE). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The default memory location is specified by DS:EDI. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2597" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2597" bodyend="2597"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6def903b8512e338dc0f1e3a8fad9221" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::maxps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>maxps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP maximum (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2600" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2600" bodyend="2600"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab0fd5a23f14242b2bd6f32ef91d2e462" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::maxps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>maxps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2602" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2602" bodyend="2602"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42bb2126854b3a46f52fba5e3622e8a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::maxss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>maxss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar SP-FP maximum (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2605" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2605" bodyend="2605"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b85388b03b27f15ae9f9462041aa50a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::maxss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>maxss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2607" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2607" bodyend="2607"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aac569d722b1f79bb02672f420a3ed455" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::minps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>minps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP minimum (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2610" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2610" bodyend="2610"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a649a2424178e170bc4f947c9249bb16f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::minps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>minps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2612" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2612" bodyend="2612"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adad5abca1d9deee2853ce234378160d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::minss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>minss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar SP-FP minimum (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2615" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2615" bodyend="2615"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2699c27608c7e72109517efcfb713ad1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::minss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>minss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2617" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2617" bodyend="2617"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aae3e2d59ce2e1dc369ed1ac09674b7da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movaps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movaps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move aligned packed SP-FP values (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2620" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2620" bodyend="2620"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae2cfbf39e91dedc85c485e20ac9d5561" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movaps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movaps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2622" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2622" bodyend="2622"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a673581bad0129a8b9bd4fef2062a16f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movaps</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movaps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move aligned packed SP-FP values (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2624" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2624" bodyend="2624"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7f6c26e5add172df7e4a71684082b976" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movd</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move dword. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2627" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2627" bodyend="2627"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae84331cac9eea860ca3e8dd01d0dd1d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movd</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2629" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2629" bodyend="2629"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a599090848c073d330f73099b22a65e6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2631" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2631" bodyend="2631"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0e0585bc44c2e9c0d8ff45157b36b29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movd</definition>
        <argsstring>(const XmmVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>movd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2633" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2633" bodyend="2633"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa0c63c542745bf034d80a2f98d42434e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move qword (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2636" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2636" bodyend="2636"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b337e24dc6d9e7063692c0bd5ff3122" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movq</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2638" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2638" bodyend="2638"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2a1651efe5a044511544d92addf3118" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2640" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2640" bodyend="2640"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6dceefbe1f4530c2e176c7fe9f25578d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movntq</definition>
        <argsstring>(const Mem &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>movntq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move 64 bits non-temporal (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2643" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2643" bodyend="2643"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a241f3c486dc4e9e512ed16cefc9d59cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movhlps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movhlps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>High to low packed SP-FP (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2646" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2646" bodyend="2646"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a47f6273514288c3774f600622ad3e925" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movhps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movhps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move high packed SP-FP (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2649" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2649" bodyend="2649"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6073771299aff094bbd40e942b301474" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movhps</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movhps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move high packed SP-FP (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2651" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2651" bodyend="2651"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14a4df14f9f5a70a21ba9c0092db2ba1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movlhps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movlhps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move low to high packed SP-FP (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2654" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2654" bodyend="2654"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbabed7202fc355fa3f4ba7db303a6c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movlps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movlps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move low packed SP-FP (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2657" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2657" bodyend="2657"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a583570fdf45bcaac5efad2d7cbdca60a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movlps</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movlps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move low packed SP-FP (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2659" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2659" bodyend="2659"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4affd26e96f61c063a32659b10ef78e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movntps</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movntps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move aligned four packed SP-FP non-temporal (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2662" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2662" bodyend="2662"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a67a44e0d9c5846eb8a194d1c8f6591ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move scalar SP-FP (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2665" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2665" bodyend="2665"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a1e3331eeb2704003cafc71c5fa62d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2667" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2667" bodyend="2667"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7f11aa7bc7c8be78c8c3ca9372fe18a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movss</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2669" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2669" bodyend="2669"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acdd03e3b8fe7fb856038f7c9497fafa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movups</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movups</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move unaligned packed SP-FP values (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2672" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2672" bodyend="2672"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3a78e57a2d45fb0c8e674d2fddc150b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movups</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movups</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2674" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2674" bodyend="2674"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07bdd4bafec6b38d7e7a701551efab97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movups</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movups</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2676" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2676" bodyend="2676"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6636ca1b2589d57553496f3e7b21cbd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mulps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>mulps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP multiply (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2679" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2679" bodyend="2679"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a81a0c3aac93c3f07428f47a0788feaad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mulps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>mulps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2681" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2681" bodyend="2681"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abeeb8b7c0276c220725e93b1c8ba0698" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mulss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>mulss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar SP-FP multiply (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2684" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2684" bodyend="2684"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeb50a4da8dbbb26f1b71c068e0f6baf3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mulss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>mulss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2686" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2686" bodyend="2686"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a307aafbcb9740933febc98c9f9b3a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::orps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>orps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Or for SP-FP data (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2689" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2689" bodyend="2689"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa63edef6ce15a10ca915ed4529483749" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::orps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>orps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2691" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2691" bodyend="2691"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afeb6936340cadd93686a216457347ac5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pavgb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pavgb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed average (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2694" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2694" bodyend="2694"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3c06a0cfaff61e8e4fe21bf4e9b39016" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pavgb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pavgb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2696" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2696" bodyend="2696"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2bd5c84f7525a2221f8c67742a462b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pavgw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pavgw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed average (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2699" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2699" bodyend="2699"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0722143d816ef1301e0cf1b68bb71bf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pavgw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pavgw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2701" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2701" bodyend="2701"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1affc8688f59255a24b9099cd1cb3567e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrw</definition>
        <argsstring>(const GpVar &amp;o0, const MmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pextrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Extract word (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2704" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2704" bodyend="2704"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4db0c9222e34c05fcd1a5589f0883dda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrw</definition>
        <argsstring>(const GpVar &amp;o0, const MmVar &amp;o1, int o2)</argsstring>
        <name>pextrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2704" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2704" bodyend="2704"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872ec1da15e70eaedd580e987b37b926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrw</definition>
        <argsstring>(const MmVar &amp;o0, const GpVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pinsrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Insert word (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2707" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2707" bodyend="2707"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a271e476c55d1081c4e992aaa8f1aa48e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrw</definition>
        <argsstring>(const MmVar &amp;o0, const GpVar &amp;o1, int o2)</argsstring>
        <name>pinsrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2707" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2707" bodyend="2707"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6c7e87247f484830afefeb770d647b82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pinsrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2709" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2709" bodyend="2709"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abac7e462793a045eb9f8907de1bf3f95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pinsrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2709" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2709" bodyend="2709"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af08357c0362493c146b5a0a4d2023677" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxsw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pmaxsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed signed integer word maximum (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2712" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2712" bodyend="2712"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af57a447dfc4fe8ee53c92848b96b0448" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxsw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaxsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2714" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2714" bodyend="2714"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aae266aed351f6ba8583e32a189eee747" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxub</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pmaxub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed unsigned integer byte maximum (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2717" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2717" bodyend="2717"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a2b255ab90577e4ebfb5af164fe0c31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxub</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaxub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2719" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2719" bodyend="2719"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4267e08cc369f5a29f945bed3f895f73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminsw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pminsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed signed integer word minimum (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2722" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2722" bodyend="2722"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66dd47d6ab84b33143a242572cf86cdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminsw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pminsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2724" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2724" bodyend="2724"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66253552ed74cea6f0a5e1c74b150926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminub</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pminub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed unsigned integer byte minimum (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2727" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2727" bodyend="2727"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a064b6a0fc4bab4e4a600bfd13517a626" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminub</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pminub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2729" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2729" bodyend="2729"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f6a10214e53c9a8eab24cb5fa00e1aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovmskb</definition>
        <argsstring>(const GpVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pmovmskb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move byte mask to integer (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2732" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2732" bodyend="2732"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a3af827f33d4c5eb831d9008592e9b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhuw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pmulhuw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply high unsigned (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2735" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2735" bodyend="2735"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aea207c46c0c2c60e5a6a1a21e3d2129f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhuw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmulhuw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2737" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2737" bodyend="2737"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adc319ba98e4fce513c4e1f4486868ed1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psadbw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psadbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed sum of absolute differences (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2740" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2740" bodyend="2740"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a044a817ab9d34d32a7a905fd6c68af3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psadbw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psadbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2742" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2742" bodyend="2742"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b642106c1ec24baf27191085a48b35a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pshufw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Packed shuffle word (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2745" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2745" bodyend="2745"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a20d62922e6424016456438c48c7dfc21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1, int o2)</argsstring>
        <name>pshufw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2745" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2745" bodyend="2745"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa6bdc9feed5f82a4dcb51847b68fa44a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pshufw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2747" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2747" bodyend="2747"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb27aabfde13fc3b98f77a7571104667" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pshufw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2747" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2747" bodyend="2747"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b6358f840370734c102ae86bbe01301" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcpps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>rcpps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP reciprocal (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2750" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2750" bodyend="2750"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4f9083467d0195dbebee5c3215928fed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcpps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>rcpps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2752" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2752" bodyend="2752"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a729375bf11b562666b03b867d7c3432d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcpss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>rcpss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar SP-FP reciprocal (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2755" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2755" bodyend="2755"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b6041f76f63b6cc7169332437db7d4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rcpss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>rcpss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2757" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2757" bodyend="2757"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1a7396f787bde7f01626ed3a9bf9e9ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::prefetch</definition>
        <argsstring>(const Mem &amp;o0, const Imm &amp;o1)</argsstring>
        <name>prefetch</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Prefetch (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2760" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2760" bodyend="2760"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a31b040401b7ccbb94cdf519e5c4faff6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::prefetch</definition>
        <argsstring>(const Mem &amp;o0, int o1)</argsstring>
        <name>prefetch</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2760" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2760" bodyend="2760"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a503367e95dcfc2eb4e992f6c66371299" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psadbw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psadbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Compute sum of absolute differences (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2763" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2763" bodyend="2763"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aabdeaf447da6cc9744a52346fce9a29f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psadbw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psadbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2765" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2765" bodyend="2765"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a401d62622ec374e10409f8225cc0ddad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rsqrtps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>rsqrtps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP Square root reciprocal (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2768" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2768" bodyend="2768"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f518e2e058c4febd6662e63ef795349" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rsqrtps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>rsqrtps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2770" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2770" bodyend="2770"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a339d6ad906783f68bb32abbce6ba00aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rsqrtss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>rsqrtss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar SP-FP Square root reciprocal (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2773" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2773" bodyend="2773"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf71a0f40a72f662a2e251160ca271c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::rsqrtss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>rsqrtss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2775" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2775" bodyend="2775"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a11af9f2436a11ba97cf8424934f91759" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sfence</definition>
        <argsstring>()</argsstring>
        <name>sfence</name>
        <briefdescription>
<para>Store fence (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2778" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2778" bodyend="2778"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b3d697649f0461ae485507aa700b223" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shufps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>shufps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Shuffle SP-FP (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2781" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2781" bodyend="2781"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a92104bddadf3331640a51811069e5590" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shufps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>shufps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2781" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2781" bodyend="2781"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66b21a28a2e1cc970141d0f9a5411a30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shufps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>shufps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2783" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2783" bodyend="2783"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a076bbe5e089a189ef3b466f3f04637ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shufps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>shufps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2783" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2783" bodyend="2783"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b59bdecf44016c55f2e6654fdf0d021" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sqrtps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>sqrtps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP square root (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2786" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2786" bodyend="2786"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af02dae9371074c14243778ae51b83792" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sqrtps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>sqrtps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2788" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2788" bodyend="2788"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1cbe0a9cddd400e7c6c0fb1427545dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sqrtss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>sqrtss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar SP-FP square root (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2791" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2791" bodyend="2791"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb0387ae83b6cca55d6ffba4c5c12fdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sqrtss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>sqrtss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2793" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2793" bodyend="2793"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7377730dd81095284e76a97786bc8d06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::stmxcsr</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>stmxcsr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Store streaming SIMD extension control/status (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2796" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2796" bodyend="2796"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3f1f776c7d8bee98681e73057a1dd5fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::subps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>subps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP subtract (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2799" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2799" bodyend="2799"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a62994b5f37a188bc725b2a6846a0e187" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::subps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>subps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2801" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2801" bodyend="2801"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fa1d6b57ffbff8c6f19fe5618ebb095" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::subss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>subss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar SP-FP subtract (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2804" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2804" bodyend="2804"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1f25cfc03d86d3bbd974053b77099ec2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::subss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>subss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2806" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2806" bodyend="2806"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57842af8fa7ba1b3e36130c740b698ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ucomiss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>ucomiss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unordered scalar SP-FP compare and set EFLAGS (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2809" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2809" bodyend="2809"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa25b258b06bc68b4170dd0f2aa34fea4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ucomiss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>ucomiss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2811" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2811" bodyend="2811"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a682eef3329befdfdb604bcdd8e6660d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::unpckhps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>unpckhps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack high packed SP-FP data (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2814" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2814" bodyend="2814"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa8cf302002f6c50edfa705446e28333" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::unpckhps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>unpckhps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2816" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2816" bodyend="2816"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab46d71e58038daa6241b784ee6b016f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::unpcklps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>unpcklps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack low packed SP-FP data (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2819" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2819" bodyend="2819"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abf9b365a2ad26ca625a1bee939a2e538" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::unpcklps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>unpcklps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2821" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2821" bodyend="2821"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae69474d3cf97c67db980056d08c18d33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xorps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>xorps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Xor for SP-FP data (SSE). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2824" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2824" bodyend="2824"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a34a52286d5d578337c9f7a57bc9e9910" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xorps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>xorps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2826" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2826" bodyend="2826"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ba63ef015fd28dbaa37dc5ba01bd991" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>addpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed DP-FP add (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2829" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2829" bodyend="2829"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a43e266965f126f825dd1f7aca1fede4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>addpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2831" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2831" bodyend="2831"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d5970c4014057b00080bd58b1b08b6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>addsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar DP-FP add (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2834" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2834" bodyend="2834"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6042e4dccc0e7846f39d57a500cce4ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>addsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2836" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2836" bodyend="2836"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a84d1eb207883ddb33b68b51350443ac0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::andnpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>andnpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>And-not for DP-FP (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2839" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2839" bodyend="2839"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2dc7b59a96149ad4cf3b43d07fe76b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::andnpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>andnpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2841" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2841" bodyend="2841"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a095b6f856f02f87bcac85f61dacc0179" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::andpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>andpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>And for DP-FP (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2844" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2844" bodyend="2844"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0edb3a8f3a37172ac36dbf5fe8b7036" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::andpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>andpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2846" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2846" bodyend="2846"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab36c65eedc887fb2738bda33599c4706" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::clflush</definition>
        <argsstring>(const Mem &amp;o0)</argsstring>
        <name>clflush</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <briefdescription>
<para>Flush cache line (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2849" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2849" bodyend="2849"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a516b0a27c81b92b75c5e24c038c64106" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmppd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>cmppd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Packed DP-FP compare (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2852" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2852" bodyend="2852"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a099dff33474aa8b65381687a11d10190" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmppd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>cmppd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2852" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2852" bodyend="2852"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d07c01ebc53c145065b645c8ddf14be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmppd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>cmppd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2854" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2854" bodyend="2854"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4f5498cbafa1ef5613c98ac328b91569" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmppd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>cmppd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2854" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2854" bodyend="2854"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af019986f1fe96ee9f667bfb05e0c5570" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>cmpsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Compare scalar SP-FP values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2857" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2857" bodyend="2857"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5412b78e7f7b860cc3ccf929be2d7ba9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>cmpsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2857" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2857" bodyend="2857"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abbd03059a613ffb7d80a434e85af2e0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>cmpsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2859" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2859" bodyend="2859"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af95d96caa1f2f56b09a0fd2b5b09d084" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cmpsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>cmpsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2859" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2859" bodyend="2859"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbcdee1ea8d0be154cb53816a9d8e5e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::comisd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>comisd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar ordered DP-FP compare and set EFLAGS (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2862" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2862" bodyend="2862"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4eac8e77d3d151797d633621319987ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::comisd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>comisd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2864" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2864" bodyend="2864"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf4cfe911acb2abf3874a3d94f2053a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtdq2pd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtdq2pd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert packed Dword integers to packed DP-FP values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2867" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2867" bodyend="2867"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1accfdd79c9d108b9686d326bb79b785f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtdq2pd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtdq2pd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2869" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2869" bodyend="2869"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad33522db0add8f99cbe2642a2ec3f78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtdq2ps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtdq2ps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert packed Dword integers to packed SP-FP values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2872" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2872" bodyend="2872"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2036c1a3b93170b325c9f0062ed75e3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtdq2ps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtdq2ps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2874" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2874" bodyend="2874"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9d4f3bca1d13960e0dcfea3bf5ddb3ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtpd2dq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtpd2dq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert packed DP-FP values to packed dword integers (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2877" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2877" bodyend="2877"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a32b34acdf4c6247eb795eb15c56f5614" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtpd2dq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtpd2dq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2879" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2879" bodyend="2879"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a47a13f24ee14c156860d0588538cb5aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtpd2pi</definition>
        <argsstring>(const MmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtpd2pi</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert packed DP-FP values to packed dword integers (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2882" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2882" bodyend="2882"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe068c7af8e2fa4074f4b2aca253d81b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtpd2pi</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtpd2pi</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2884" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2884" bodyend="2884"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a63df5ad4b651016e4481b0f17ea85c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtpd2ps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtpd2ps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert packed DP-FP values to packed SP-FP values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2887" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2887" bodyend="2887"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a44ac1d63d42063c6aaf7c2275f20c023" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtpd2ps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtpd2ps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2889" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2889" bodyend="2889"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2a98c07bc4593dad9b95398e31cde61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtpi2pd</definition>
        <argsstring>(const XmmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>cvtpi2pd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert packed dword integers to packed DP-FP values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2892" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2892" bodyend="2892"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe04a4b92986116d85102efe736e3113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtpi2pd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtpi2pd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2894" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2894" bodyend="2894"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acda2bb660b30d030b53290cb867e1ccb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtps2dq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtps2dq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert packed SP-FP values to packed dword integers (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2897" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2897" bodyend="2897"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a18e2440b1b342db43fa4a63004ace3b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtps2dq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtps2dq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2899" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2899" bodyend="2899"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae6cceb27f7c80d9db150b6b88b594f3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtps2pd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtps2pd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert packed SP-FP values to packed DP-FP values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2902" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2902" bodyend="2902"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a61d517777d19ec79bc2431dc2547f443" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtps2pd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtps2pd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2904" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2904" bodyend="2904"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb40598c2459e5a76d723d39f89234fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtsd2si</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtsd2si</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert scalar DP-FP value to dword Integer (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2907" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2907" bodyend="2907"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af07deb9f81a1b08735c282878667ea4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtsd2si</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtsd2si</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2909" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2909" bodyend="2909"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0c7c24f0abdb24a22d33c9f8bff1903d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtsd2ss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtsd2ss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert scalar DP-FP value to scalar SP-FP value (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2912" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2912" bodyend="2912"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30ae1b527a7daa8215745cc924a138a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtsd2ss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtsd2ss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2914" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2914" bodyend="2914"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad35ab7d8ffec802ce21b6a46bd200a31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtsi2sd</definition>
        <argsstring>(const XmmVar &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>cvtsi2sd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert dword integer to scalar DP-FP value (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2917" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2917" bodyend="2917"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a51ed83732d540114841a988c560e2749" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtsi2sd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtsi2sd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2919" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2919" bodyend="2919"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b843ba29233f20ed1ce92cff8687243" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtss2sd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvtss2sd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert scalar SP-FP value to scalar DP-FP value (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2922" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2922" bodyend="2922"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4cb949dc10daadc0ccba923b93068764" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvtss2sd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvtss2sd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2924" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2924" bodyend="2924"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5e7369e624cafc40201a89203db6db0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttpd2pi</definition>
        <argsstring>(const MmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvttpd2pi</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert with truncation packed DP-FP values to packed dword Integers (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2927" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2927" bodyend="2927"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1a711d2d72290c625022791655b54db5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttpd2pi</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvttpd2pi</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2929" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2929" bodyend="2929"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96374e752c1417d94697d7c04ff1b1f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttpd2dq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvttpd2dq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert with truncation packed DP-FP values to packed qword Integers (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2932" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2932" bodyend="2932"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa31d9a23d4fdbac92e7da1d69d78590d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttpd2dq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvttpd2dq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2934" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2934" bodyend="2934"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a31c142eb74f4814c2cc22eab3347b47e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttps2dq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvttps2dq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert with truncation packed SP-FP values to packed qword Integers (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2937" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2937" bodyend="2937"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0c64c6f078e0122344d5c1615dd4bce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttps2dq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvttps2dq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2939" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2939" bodyend="2939"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5fdfae0506c84f79f838933cd352ac4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttsd2si</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>cvttsd2si</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Convert with truncation scalar DP-FP value to signed dword Integer (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2942" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2942" bodyend="2942"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adc356ff240209e912c1e72a6be7d431c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::cvttsd2si</definition>
        <argsstring>(const GpVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>cvttsd2si</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2944" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2944" bodyend="2944"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab58e63fb78244e2c05515bb476ff18d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::divpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>divpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed DP-FP divide (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2947" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2947" bodyend="2947"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0e6304fa57d5d46845c98aadc148b42e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::divpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>divpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2949" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2949" bodyend="2949"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a54907e1320b6ff940eda795bbcd74c45" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::divsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>divsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar DP-FP divide (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2952" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2952" bodyend="2952"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a097727fbd43217057f84c7046d85efe3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::divsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>divsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2954" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2954" bodyend="2954"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a226eaf3b21ccf9340e13d6c61b03905a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::lfence</definition>
        <argsstring>()</argsstring>
        <name>lfence</name>
        <briefdescription>
<para>Load fence (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2957" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2957" bodyend="2957"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ee19007eaa233117507a24534743dcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::maskmovdqu</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>maskmovdqu</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Store selected bytes of oword (SSE2). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Target is DS:EDI. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2962" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2962" bodyend="2962"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0beb29e9fbfd0d45bef92c9f69228ee8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::maxpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>maxpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Return maximum packed DP-FP values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2965" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2965" bodyend="2965"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e42b098bb087438e70f8d89a2d427c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::maxpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>maxpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2967" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2967" bodyend="2967"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8df8c8482b85f92c063903e3594c730e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::maxsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>maxsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Return maximum scalar DP-FP value (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2970" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2970" bodyend="2970"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6f9e6804f08cbfdbd4709e8fa0e602d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::maxsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>maxsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2972" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2972" bodyend="2972"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad486e012879de99fc7c84868f7a86199" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mfence</definition>
        <argsstring>()</argsstring>
        <name>mfence</name>
        <briefdescription>
<para>Memory fence (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2975" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2975" bodyend="2975"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a755b0a4280fd25357b0537cb035e40ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::minpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>minpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Return minimum packed DP-FP Values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2978" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2978" bodyend="2978"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa75fae8fc93d39d81c87482ac8f83d73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::minpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>minpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2980" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2980" bodyend="2980"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41dbe6942d6027a9b787e3aaa8fd93cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::minsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>minsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Return minimum scalar DP-FP value (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2983" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2983" bodyend="2983"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a684580dd4e8a064d7ef5aa240b6dde36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::minsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>minsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2985" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2985" bodyend="2985"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9de8bc70ab57f2387ca1528e5c202e2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movdqa</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movdqa</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move aligned oword (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2988" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2988" bodyend="2988"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af576eb69c02417e9b9fbbe2b53bd30b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movdqa</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movdqa</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2990" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2990" bodyend="2990"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57fd5fccf4f3192a3f3f1b02be5e3dc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movdqa</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movdqa</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2992" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2992" bodyend="2992"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95bb3f9b0804d2929e05e1db20428bca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movdqu</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movdqu</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move unaligned oword (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2995" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2995" bodyend="2995"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b00a75772f90ad513bc42546e4db916" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movdqu</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movdqu</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2997" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2997" bodyend="2997"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac51985511a2d932c9c0a597790b3f034" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movdqu</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movdqu</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="2999" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="2999" bodyend="2999"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbd1c70b1a16e4ce065ab05b3c0cf448" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movmskps</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movmskps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Extract packed SP-FP sign mask (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3002" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3002" bodyend="3002"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3a5ce3724031be149cf52d398d0a493" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movmskpd</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movmskpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Extract packed DP-FP sign mask (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3005" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3005" bodyend="3005"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2276367eb8c7495102de3a889a4c3431" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move scalar DP-FP value (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3008" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3008" bodyend="3008"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acd1959207b4f2222af5928f112fd151b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3010" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3010" bodyend="3010"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a095708809b78b9f3d7b95fe403cd4d09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movsd</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3012" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3012" bodyend="3012"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8291d5e858f3395a9df8fd9966d2f1c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movapd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movapd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move aligned packed DP-FP values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3015" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3015" bodyend="3015"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a60b69318598e315545a99d56f23a96f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movapd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movapd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3017" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3017" bodyend="3017"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6ed76da8a6ddb2052c2cd8ba61d437eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movapd</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movapd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3019" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3019" bodyend="3019"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a03a45ece0f311de5b7cc834804822461" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movdq2q</definition>
        <argsstring>(const MmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movdq2q</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move qword from Xmm to Mm register (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3022" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3022" bodyend="3022"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a23e7450f5ef9c7b9199585831e2980e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movq2dq</definition>
        <argsstring>(const XmmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>movq2dq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move qword from Mm to Xmm register (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3025" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3025" bodyend="3025"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872667f5b79bb5130b600fcd3be07096" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movhpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movhpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move high packed DP-FP value (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3028" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3028" bodyend="3028"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a63a0be291a2a0aabc6eb065be80c53ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movhpd</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movhpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3030" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3030" bodyend="3030"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad4509ecae6b6a457c3ad1db95786d5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movlpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movlpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move low packed DP-FP value (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3033" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3033" bodyend="3033"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9580ec5a76bb06e875e60d18f9910fb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movlpd</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movlpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3035" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3035" bodyend="3035"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78ad704d7a38d8e9405428f4dfe63df7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movntdq</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movntdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Store oword using non-temporal hint (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3038" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3038" bodyend="3038"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afee1c53925e55fafed0578fc4bb7e834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movnti</definition>
        <argsstring>(const Mem &amp;o0, const GpVar &amp;o1)</argsstring>
        <name>movnti</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Store dword using non-temporal hint (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3041" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3041" bodyend="3041"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd542f72e71c8a17edf7818970a67e5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movntpd</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movntpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Store packed DP-FP values using non-temporal hint (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3044" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3044" bodyend="3044"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10e33f492b9edb8bf5e9ef3be9d20971" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movupd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movupd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move unaligned packed DP-FP values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3047" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3047" bodyend="3047"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3131c7c6d85edb8680815836740a1dbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movupd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movupd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3049" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3049" bodyend="3049"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abf4f581d3e9a4fb3fdff98d484ea2fcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movupd</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movupd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3051" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3051" bodyend="3051"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a80f116dbba09e6de96bb1d0ac06eccc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mulpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>mulpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed DP-FP multiply (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3054" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3054" bodyend="3054"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d6cf7bf2aa5a9916e4d3b5d16217f0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mulpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>mulpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3056" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3056" bodyend="3056"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad76b17624ec02f8c4d30a1b1c3ff83cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mulsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>mulsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar DP-FP multiply (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3059" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3059" bodyend="3059"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a05f4f867dc76c239092719950cd0d4a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mulsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>mulsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3061" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3061" bodyend="3061"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab46fa215a727039025e67e8578c1c12c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::orpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>orpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Or for DP-FP data (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3064" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3064" bodyend="3064"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3c06f674813de696548fe5ebe34423ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::orpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>orpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3066" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3066" bodyend="3066"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b2a6485608fa2761b51f854db70d77c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packsswb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>packsswb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Pack with signed saturation (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3069" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3069" bodyend="3069"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af9994752da38ff1da2ae23867323141c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packsswb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>packsswb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3071" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3071" bodyend="3071"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a192c3feda976ab72c8d4a25d5877be26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packssdw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>packssdw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Pack with signed saturation (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3074" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3074" bodyend="3074"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad06db1cae84aad9cb8c6f5c5aadd134b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packssdw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>packssdw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3076" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3076" bodyend="3076"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d8dc7a9712b031668e9b2b22cd4332c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packuswb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>packuswb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Pack with unsigned saturation (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3079" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3079" bodyend="3079"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab5a67020fd092f35e0f22150cc5f7c82" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packuswb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>packuswb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3081" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3081" bodyend="3081"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa998103f1b35abdb149b43bc79c0b675" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>paddb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed byte add (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3084" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3084" bodyend="3084"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afcb84e9b9b7ca2cb0d3aea97d896e17e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3086" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3086" bodyend="3086"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07356f5171ad009d0f32c481e1697520" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>paddw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed word add (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3089" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3089" bodyend="3089"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af8d57c7c941767b78cfc3c5671397da8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3091" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3091" bodyend="3091"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a850c812efa58d4a6c115c88d651babd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>paddd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed dword add (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3094" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3094" bodyend="3094"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaee88720feb3dcd9dbb402ea401cfe46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3096" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3096" bodyend="3096"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa8932f7b42f4bd96195f89d97059fea7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddq</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>paddq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed qword add (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3099" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3099" bodyend="3099"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afc21acec62b986d5ef117e9e461117a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddq</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3101" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3101" bodyend="3101"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a26b05a3a7d8daf864c3465d550b86692" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>paddq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed qword add (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3104" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3104" bodyend="3104"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a4308783997b673606e81ee30ed65d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3106" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3106" bodyend="3106"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d8d240ae1fd2c8ee3879d191ad9c262" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddsb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>paddsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed add with saturation (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3109" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3109" bodyend="3109"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac20f67e26ab125a8d6a8292786a6caeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddsb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3111" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3111" bodyend="3111"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a987d76a698cd1e6bdebf85c946e2b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddsw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>paddsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed add with saturation (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3114" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3114" bodyend="3114"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a124056a2105f1852f6baaf8082fe6114" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddsw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3116" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3116" bodyend="3116"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1455bd24b3758567ec7b14a18577fba2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddusb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>paddusb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed add unsigned with saturation (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3119" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3119" bodyend="3119"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a478c58425e5ff800b11b72c091538d36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddusb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddusb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3121" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3121" bodyend="3121"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afde1f3adf3fb0f567b0268ad7d113188" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddusw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>paddusw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed add unsigned with saturation (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3124" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3124" bodyend="3124"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aab1d6f9bb70ff1d2dd2737146f4a27b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::paddusw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>paddusw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3126" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3126" bodyend="3126"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8fb3b791650941c9fd214f00f1544975" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pand</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pand</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>And (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3129" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3129" bodyend="3129"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa0e87e29a731c957bd38d5495014c000" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pand</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pand</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3131" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3131" bodyend="3131"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b9d26b60aa197f39e38491d764b2a90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pandn</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pandn</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>And-not (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3134" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3134" bodyend="3134"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a813e1472f0b7b057e33c789cfc3fe40a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pandn</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pandn</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3136" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3136" bodyend="3136"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7e978aa22481a4b94e55cc426a4eb41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pause</definition>
        <argsstring>()</argsstring>
        <name>pause</name>
        <briefdescription>
<para>Spin loop hint (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3139" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3139" bodyend="3139"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af800899e5efb8a15d64602c08e5994e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pavgb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pavgb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed average (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3142" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3142" bodyend="3142"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab0fa374e3188fe7ef86ccde1de7b06e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pavgb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pavgb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3144" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3144" bodyend="3144"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f91ab72aba3f8a1839f62364dd7c9c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pavgw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pavgw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed average (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3147" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3147" bodyend="3147"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaca852d618ea8599fbc2511b2d393569" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pavgw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pavgw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3149" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3149" bodyend="3149"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2908aa3a4f86a060b8dbe63fc9554fa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pcmpeqb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare bytes for equal (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3152" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3152" bodyend="3152"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a27f21cab457477fe8638ac7a4b3c3f9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpeqb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3154" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3154" bodyend="3154"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b926c5e2c8dfa06f55e52fb6fcac8eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pcmpeqw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare words for equal (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3157" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3157" bodyend="3157"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeb9af5acfbf6887754255b703a9cae7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpeqw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3159" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3159" bodyend="3159"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1bd1c40a568a3223137331b186eff32e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pcmpeqd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare dwords for equal (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3162" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3162" bodyend="3162"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6207e1097eb762d37197b927372ff979" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpeqd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3164" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3164" bodyend="3164"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abdddb1b371306c496bab741bcef11aed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pcmpgtb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare bytes for greater than (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3167" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3167" bodyend="3167"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adc8d34367462938af55a947b9c057bff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpgtb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3169" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3169" bodyend="3169"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a53079ab2f1d0b60153d3c1417d3a3796" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pcmpgtw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare words for greater than (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3172" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3172" bodyend="3172"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78eaa406fd9d22abc9e808bdc3d1c759" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpgtw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3174" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3174" bodyend="3174"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a0341f35ba8c3112537d7b311d0ab68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pcmpgtd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed compare dwords for greater than (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3177" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3177" bodyend="3177"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a91cc0c65ef57f0e15772e7da55772cf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpgtd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3179" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3179" bodyend="3179"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a00d998f39c05e5d4e981d7276ee14e9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrw</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pextrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Extract word (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3182" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3182" bodyend="3182"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0931cc72729594b3a072be7de41dff4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrw</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pextrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3182" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3182" bodyend="3182"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaba0aea9069dabb42bc3f11d6b7a3868" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrw</definition>
        <argsstring>(const XmmVar &amp;o0, const GpVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pinsrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Insert word (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3185" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3185" bodyend="3185"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1addecbfb4713fd5a04f11d3a90c34c368" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrw</definition>
        <argsstring>(const XmmVar &amp;o0, const GpVar &amp;o1, int o2)</argsstring>
        <name>pinsrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3185" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3185" bodyend="3185"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a823a97270349b1362c9956edd6bd4b05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pinsrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3187" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3187" bodyend="3187"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad08643729180ce2625915c24a22ed36b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pinsrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3187" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3187" bodyend="3187"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac36bba7bb44deb9b50c73a1cbe376522" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxsw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmaxsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed signed integer word maximum (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3190" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3190" bodyend="3190"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30e490ba7932bd8b1f35f9878aec0df5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxsw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaxsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3192" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3192" bodyend="3192"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab30c5c4012638ed37ebf145cd70f10b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxub</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmaxub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed unsigned integer byte maximum (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3195" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3195" bodyend="3195"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af66a9eeeb8054d2ecf7de89c9ab7de58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxub</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaxub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3197" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3197" bodyend="3197"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6d924c37268f2f1660c9e68b451f3743" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminsw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pminsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed signed integer word minimum (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3200" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3200" bodyend="3200"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d92e81a51e1cd4a64692f93598e8d37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminsw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pminsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3202" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3202" bodyend="3202"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4aca95a7719b8447f22966f355c2ea51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminub</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pminub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed unsigned integer byte minimum (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3205" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3205" bodyend="3205"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3469486084b213fb9b08b901896553ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminub</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pminub</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3207" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3207" bodyend="3207"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1eaaab2b1e7a80a1225cbd64df36c059" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovmskb</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovmskb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move byte mask (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3210" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3210" bodyend="3210"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41c9ceb3056688ecb9e0abf711d5ce5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmulhw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply high (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3213" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3213" bodyend="3213"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b8219c0c763c2503f88061b4a3d684c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmulhw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3215" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3215" bodyend="3215"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f9eb59359a568c5898f07d744e38369" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhuw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmulhuw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply high Unsigned (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3218" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3218" bodyend="3218"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a624d0494fa2db9e376b4d6bac888e7ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhuw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmulhuw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3220" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3220" bodyend="3220"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3ab8d65d0400a6f50816983eb352e87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmullw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmullw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply low (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3223" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3223" bodyend="3223"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9e292a606faecdd0f75908e9f3883b84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmullw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmullw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3225" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3225" bodyend="3225"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82afe0b6f0cd014baa318cf100f4cb5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmuludq</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pmuludq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply to QWORD (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3228" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3228" bodyend="3228"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57687ddaa6dd32af0052d68d60549a1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmuludq</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmuludq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3230" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3230" bodyend="3230"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a811e0b5d0c6d10802fd0f5c037dc2cf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmuludq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmuludq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply to QWORD (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3233" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3233" bodyend="3233"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a03a67b7b7ffe99d33da3c74829504b6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmuludq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmuludq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3235" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3235" bodyend="3235"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9c2b97a8699560440ca64f865d8dae9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::por</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>por</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Or (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3238" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3238" bodyend="3238"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f41588cddf9f270d7026c0e191d63aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::por</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>por</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3240" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3240" bodyend="3240"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b659c81a6cc813dc39c2cf547043929" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pslld</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pslld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift left logical (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3243" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3243" bodyend="3243"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0c4f39ca31bb5587146630b2f33a19f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pslld</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pslld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3245" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3245" bodyend="3245"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a399882ec1d945beaa40a0e2e512d4d24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pslld</definition>
        <argsstring>(const XmmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>pslld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3247" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3247" bodyend="3247"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a365a8070cefdb5137b06c02f89be6589" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pslld</definition>
        <argsstring>(const XmmVar &amp;o0, int o1)</argsstring>
        <name>pslld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3247" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3247" bodyend="3247"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4ec43ee93b58d905b6b80ff6af018c3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psllq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift left logical (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3250" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3250" bodyend="3250"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a85d16e39c25b5bfee4f4d560b48e6fde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psllq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3252" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3252" bodyend="3252"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96bcfeb3fc20407f7d5d379a211425c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllq</definition>
        <argsstring>(const XmmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psllq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3254" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3254" bodyend="3254"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeb679b1183abc46ef2c5ba3b8a1c69b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllq</definition>
        <argsstring>(const XmmVar &amp;o0, int o1)</argsstring>
        <name>psllq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3254" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3254" bodyend="3254"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5121769d0da3d26d99870b6bdf889638" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psllw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift left logical (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3257" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3257" bodyend="3257"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a39cefba51eaf7ed745c636649f627bb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psllw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3259" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3259" bodyend="3259"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a88314968afef79d8ec2f825270a1c059" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllw</definition>
        <argsstring>(const XmmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psllw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3261" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3261" bodyend="3261"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad1b514151398468f37b100c4a869ca47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psllw</definition>
        <argsstring>(const XmmVar &amp;o0, int o1)</argsstring>
        <name>psllw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3261" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3261" bodyend="3261"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abff003feadda880d6121dc3a34be98f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pslldq</definition>
        <argsstring>(const XmmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>pslldq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift left logical (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3264" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3264" bodyend="3264"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a686c8d8fed21cd3b82fb517b426b57c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pslldq</definition>
        <argsstring>(const XmmVar &amp;o0, int o1)</argsstring>
        <name>pslldq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3264" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3264" bodyend="3264"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3b977b24a759c5727dd370051c1de710" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrad</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psrad</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift right arithmetic (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3267" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3267" bodyend="3267"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a380bafd61ae577e800a705f8fff80749" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrad</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psrad</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3269" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3269" bodyend="3269"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b50e4c531ea7c2dbb7332158659c007" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrad</definition>
        <argsstring>(const XmmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psrad</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3271" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3271" bodyend="3271"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a48d716d6cedfb415a7e7f276547933" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrad</definition>
        <argsstring>(const XmmVar &amp;o0, int o1)</argsstring>
        <name>psrad</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3271" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3271" bodyend="3271"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad6c139fc500364825976c2007b54623c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psraw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psraw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift right arithmetic (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3274" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3274" bodyend="3274"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf7633f9bf5d0b7a92e0f68c0d4011f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psraw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psraw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3276" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3276" bodyend="3276"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae3ba4d1d1307e2897bf661a4bb2fdfe8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psraw</definition>
        <argsstring>(const XmmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psraw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3278" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3278" bodyend="3278"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a92b6b3465f8b09629dc46401e363b5ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psraw</definition>
        <argsstring>(const XmmVar &amp;o0, int o1)</argsstring>
        <name>psraw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3278" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3278" bodyend="3278"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7903df69e45d5b211988509b46382832" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psubb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3281" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3281" bodyend="3281"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7fefeba370b4517c49ef2df6c6b8713" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3283" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3283" bodyend="3283"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec2f517ea23aff784404053dd66706bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psubw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3286" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3286" bodyend="3286"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9b36f9d8c36dcef067ab17a716687ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3288" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3288" bodyend="3288"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac21ec2acf7c2456907cbc2814152dd33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psubd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3291" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3291" bodyend="3291"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad93bd4211ae540d7a47e58a067e7383c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3293" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3293" bodyend="3293"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe806ad48033f0c35fd7d96c61dfae1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubq</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psubq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3296" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3296" bodyend="3296"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af972fca8c6ae533e0242d3c415eebfc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubq</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3298" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3298" bodyend="3298"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f93930ae658bebf5e7cb05e2145729a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psubq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3301" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3301" bodyend="3301"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6d6b497c86305996461736e53af76080" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3303" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3303" bodyend="3303"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a672a0cdbe29c54ec79e07bc4d450fc40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaddwd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmaddwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply and Add (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3306" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3306" bodyend="3306"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a04a53e008a10e022858f75dc196f2231" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaddwd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaddwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3308" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3308" bodyend="3308"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa538f45f981234f6b885f2c44766c183" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pshufd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Shuffle packed dwords (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3311" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3311" bodyend="3311"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef4fc5de22d139edaf0c89885216b2a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pshufd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3311" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3311" bodyend="3311"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af6bf94bea2b6d36eaac390f0d5425cd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pshufd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3313" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3313" bodyend="3313"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a69da22932de079103a8f965fe680fdb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pshufd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3313" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3313" bodyend="3313"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a605eacfb7d5c64c495b8695195428a00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufhw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pshufhw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Shuffle packed high words (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3316" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3316" bodyend="3316"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd64217734e60fdb02f554f7f55c60f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufhw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pshufhw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3316" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3316" bodyend="3316"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a65e42900e882bd64fef0d26aeea2b919" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufhw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pshufhw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3318" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3318" bodyend="3318"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa9578e166857c90dc5efbd1b95d49e55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufhw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pshufhw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3318" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3318" bodyend="3318"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa0a5785cb30354745f931b97c19a35a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshuflw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pshuflw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Shuffle packed low words (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3321" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3321" bodyend="3321"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1855c9b4bf14878a9c9dae25dd20796b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshuflw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pshuflw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3321" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3321" bodyend="3321"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae9c3ebe0dec1287017b210f8a22a38e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshuflw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pshuflw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3323" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3323" bodyend="3323"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a31272099e3168b285aab3834e0b9ad6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshuflw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pshuflw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3323" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3323" bodyend="3323"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adebfe6062db925170b7a6a09ddc7f9d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrld</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psrld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift right logical (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3326" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3326" bodyend="3326"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0140e2cb501e904a97b273477922768d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrld</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psrld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3328" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3328" bodyend="3328"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a709d77fa11b070ef978fe5b249dab48e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrld</definition>
        <argsstring>(const XmmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psrld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3330" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3330" bodyend="3330"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71b516764a2a3a99d8cae665ff8f0b40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrld</definition>
        <argsstring>(const XmmVar &amp;o0, int o1)</argsstring>
        <name>psrld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3330" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3330" bodyend="3330"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8cd0031d0cc2a79b7662c686a5d8b295" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psrlq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift right logical (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3333" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3333" bodyend="3333"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6d292a6be0f3846dbc8f18ec6a6d5fcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psrlq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3335" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3335" bodyend="3335"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73db1e8873f4045a4137d4fb20d73d2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlq</definition>
        <argsstring>(const XmmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psrlq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3337" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3337" bodyend="3337"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8ed28d7bf1c86718afc400b6af83e1dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlq</definition>
        <argsstring>(const XmmVar &amp;o0, int o1)</argsstring>
        <name>psrlq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3337" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3337" bodyend="3337"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ec2275bc3af5431f3acd0bd8cedd92e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrldq</definition>
        <argsstring>(const XmmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psrldq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Oword shift right logical (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3340" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3340" bodyend="3340"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a60940936e6991c028f18af8f81b1bc83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrldq</definition>
        <argsstring>(const XmmVar &amp;o0, int o1)</argsstring>
        <name>psrldq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3340" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3340" bodyend="3340"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae0bbbd93c6af33ba6434c43c1a5951a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psrlw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shift right logical (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3343" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3343" bodyend="3343"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a889da08fec1e4c6951bb0435956d5001" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psrlw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3345" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3345" bodyend="3345"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6aed53cb2ae18fbc3aa40253b0be7c03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlw</definition>
        <argsstring>(const XmmVar &amp;o0, const Imm &amp;o1)</argsstring>
        <name>psrlw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3347" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3347" bodyend="3347"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1abec43de760c6afbc72ca2d8be6178" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psrlw</definition>
        <argsstring>(const XmmVar &amp;o0, int o1)</argsstring>
        <name>psrlw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3347" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3347" bodyend="3347"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade11414de46653767d88f217d2c94cbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubsb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psubsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract with saturation (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3350" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3350" bodyend="3350"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade520c48c0a3dd58dc95e453ec4b421a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubsb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3352" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3352" bodyend="3352"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae03dddecb8da09d740ae5fe1b91c5b07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubsw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract with saturation (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3355" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3355" bodyend="3355"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee2aaf88386848e26b48566f16554153" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubsw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3357" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3357" bodyend="3357"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af39f51ba392767f20b3ebf5c1b94e67d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubusb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psubusb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract with unsigned saturation (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3360" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3360" bodyend="3360"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc087f34e07058f2afdc8c346971ef43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubusb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubusb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3362" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3362" bodyend="3362"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b9a29055d8c1c758207849dae286e01" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubusw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psubusw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed subtract with unsigned saturation (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3365" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3365" bodyend="3365"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9eb382adaacfc58a889e7c83cfdf1fe8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psubusw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psubusw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3367" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3367" bodyend="3367"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2dad9e369b62515f1abe39e4246d615d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhbw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>punpckhbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack high data (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3370" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3370" bodyend="3370"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af4e1d066690ef481bebe0e9979dbc462" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhbw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpckhbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3372" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3372" bodyend="3372"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a93d5a36236672c13e8abd6631109b794" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhwd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>punpckhwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack high data (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3375" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3375" bodyend="3375"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a856633d5dbbe6e7d889ef40a062d7fdb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhwd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpckhwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3377" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3377" bodyend="3377"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e841d8108c9d491647f0d923f645fe7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhdq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>punpckhdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack high data (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3380" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3380" bodyend="3380"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a08a90a3a3169593eb0f427def134be3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhdq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpckhdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3382" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3382" bodyend="3382"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab4d5d5fe0a46aef9d0c406de165cbea7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhqdq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>punpckhqdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack high data (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3385" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3385" bodyend="3385"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a569d93dd9d18e08eb68f4d459d6e3b33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckhqdq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpckhqdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3387" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3387" bodyend="3387"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade88b981a8358728a5dc1c34739be7cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpcklbw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>punpcklbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack low data (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3390" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3390" bodyend="3390"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2d94eefd06a8c1225f97ef165cc42e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpcklbw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpcklbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3392" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3392" bodyend="3392"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae23513151b115100f3e0e527fc01d41b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpcklwd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>punpcklwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack low data (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3395" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3395" bodyend="3395"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adbabdc9b4ae89fd78b9ee28c27701dcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpcklwd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpcklwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3397" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3397" bodyend="3397"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a539016ca7705022105bf6d096f061fc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckldq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>punpckldq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack low data (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3400" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3400" bodyend="3400"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad0e39280395ad193388af0c3fde9a02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpckldq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpckldq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3402" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3402" bodyend="3402"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78a6be35927a6231e229a2ae60abd25a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpcklqdq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>punpcklqdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack low data (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3405" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3405" bodyend="3405"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aea0dbe6e0943f81525056f828c729b0e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::punpcklqdq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>punpcklqdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3407" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3407" bodyend="3407"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae8a3a30b5e982f19f8d6cfea605d49a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pxor</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pxor</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Xor (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3410" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3410" bodyend="3410"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4ba565fad8b5f0615f975fd5e936349e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pxor</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pxor</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3412" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3412" bodyend="3412"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a77ddd2a6fe77507f596e604944d5199b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shufpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>shufpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Shuffle DP-FP (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3415" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3415" bodyend="3415"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a19d62edbaf8c94fd3841424e35036483" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shufpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>shufpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3415" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3415" bodyend="3415"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a92fc8a986a0c452e9e246e5d704eab9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shufpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>shufpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3417" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3417" bodyend="3417"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41b33c6af6d8881233d0abb574a15711" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::shufpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>shufpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3417" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3417" bodyend="3417"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae128fa9d55ed83818201eede9aad2981" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sqrtpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>sqrtpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Compute square roots of packed DP-FP Values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3420" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3420" bodyend="3420"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e65f28bfb97c52042fe339551b0f617" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sqrtpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>sqrtpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3422" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3422" bodyend="3422"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a13307df348f7327bdc573f13f71cc1d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sqrtsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>sqrtsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Compute square root of scalar DP-FP value (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3425" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3425" bodyend="3425"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acea5450b0d92222d2de3e2f159925594" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::sqrtsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>sqrtsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3427" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3427" bodyend="3427"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f7183ac22890fb305344b8d2faf142f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::subpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>subpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed DP-FP subtract (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3430" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3430" bodyend="3430"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab54bd6b0f6787b089ae5dc30c68043ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::subpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>subpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3432" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3432" bodyend="3432"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a336b6ba66a81446c4269a6184ff89e3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::subsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>subsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar DP-FP subtract (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3435" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3435" bodyend="3435"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1585c2df9420e439b827c8b131db1329" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::subsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>subsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3437" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3437" bodyend="3437"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a24df0e3292803f105a10f05ed09a071b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ucomisd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>ucomisd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Scalar unordered DP-FP compare and set EFLAGS (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3440" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3440" bodyend="3440"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abc889767f90ab098b0417833007ce51b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ucomisd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>ucomisd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3442" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3442" bodyend="3442"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a32783d720c7f68453ba447c39bca6aaa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::unpckhpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>unpckhpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack and interleave high packed DP-FP values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3445" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3445" bodyend="3445"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abaf2c69e2e7a2e3fd84bb1a9e6aba0e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::unpckhpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>unpckhpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3447" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3447" bodyend="3447"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae5a5e5d1aea8d64e21c5acd8f6863865" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::unpcklpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>unpcklpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Unpack and interleave low packed DP-FP values (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3450" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3450" bodyend="3450"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae45dc0bfdae9360263bb38f559ee3490" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::unpcklpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>unpcklpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3452" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3452" bodyend="3452"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adbbf2d39655fdae2404029872d2caabc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xorpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>xorpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Or for DP-FP data (SSE2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3455" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3455" bodyend="3455"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a9c954f85f1b0bec7308582c89cfed5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::xorpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>xorpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3457" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3457" bodyend="3457"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f635858f805d754465d37e778a1e8cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addsubpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>addsubpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed DP-FP add/subtract (SSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3464" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3464" bodyend="3464"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36b01e4cd81127b3078f8c5600fdcf25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addsubpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>addsubpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3466" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3466" bodyend="3466"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade964d2387cd311cd45684468a80041a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addsubps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>addsubps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP add/subtract (SSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3469" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3469" bodyend="3469"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac331393450d4930b78c07a948803955c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::addsubps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>addsubps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3471" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3471" bodyend="3471"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0107e8a0d40a189a824308317dc388f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::haddpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>haddpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed DP-FP horizontal add (SSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3477" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3477" bodyend="3477"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad4782b0a4f138c62f05a60bf783ae62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::haddpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>haddpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3479" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3479" bodyend="3479"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a238fa4b58a0f24834cd3cca9dc5a35a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::haddps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>haddps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP horizontal add (SSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3482" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3482" bodyend="3482"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73932cdf49f5a333ddff598fc727f014" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::haddps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>haddps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3484" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3484" bodyend="3484"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b4f635b03dbdf7ef00db798f36a879b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::hsubpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>hsubpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed DP-FP horizontal subtract (SSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3487" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3487" bodyend="3487"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57c5a8c09b768baf8f69c25c53b95e18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::hsubpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>hsubpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3489" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3489" bodyend="3489"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9fb59a2617d897b4694b4444e19b59c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::hsubps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>hsubps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed SP-FP horizontal subtract (SSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3492" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3492" bodyend="3492"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0cb75f7eb9002475f4382cafcd7ce514" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::hsubps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>hsubps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3494" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3494" bodyend="3494"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fefdb388bfc4c98a1b7c7377c023e5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::lddqu</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>lddqu</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Load unaligned Integer 128 Bits (SSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3497" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3497" bodyend="3497"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a301bdc0ed6c2b2a89be2e87db19055d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movddup</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movddup</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move one DP-FP and duplicate (SSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3503" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3503" bodyend="3503"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a671c1253d50bd0f723cfa10e0b79e04f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movddup</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movddup</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3505" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3505" bodyend="3505"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5df362143c05b815b98d089d90d0bed6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movshdup</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movshdup</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move packed SP-FP high and duplicate (SSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3508" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3508" bodyend="3508"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee38b085944f30c0916b266ccd55aa13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movshdup</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movshdup</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3510" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3510" bodyend="3510"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6b9cf87e3d7f89517f0ecab7b7ecc313" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movsldup</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>movsldup</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Move packed SP-FP low and duplicate (SSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3513" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3513" bodyend="3513"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbc2de939efcd8ffd8f898d75b069b15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movsldup</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movsldup</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3515" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3515" bodyend="3515"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a543dbb502031ccfefee72a8624a74b00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psignb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed sign (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3525" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3525" bodyend="3525"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aea0e12f40fef985dee95b284bfada73b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psignb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3527" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3527" bodyend="3527"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a781fb6bd528aea76140dc6327b0f4f4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psignb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed sign (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3530" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3530" bodyend="3530"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66762afea764f334ee98d533c1c19a62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psignb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3532" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3532" bodyend="3532"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0eebaa7b636b99f63e0c860999cc083" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psignw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed sign (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3535" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3535" bodyend="3535"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae83cec96d78a90e5ef89a159f5fa73aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psignw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3537" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3537" bodyend="3537"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa514c43428a9e706f0f71ed92ce1abf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psignw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed sign (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3540" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3540" bodyend="3540"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae0beb3c3d10eec47d93d46b6c301e8e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psignw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3542" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3542" bodyend="3542"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2d4a964759906046b12caf08bd1d252" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>psignd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed sign (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3545" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3545" bodyend="3545"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a65e14e06accdb35341675180637b2a96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psignd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3547" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3547" bodyend="3547"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a723fe97ab5ad341f98e4b88263019e92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>psignd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed sign (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3550" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3550" bodyend="3550"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aacfd2d2419aea77562ac1fc1985ecdb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::psignd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>psignd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3552" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3552" bodyend="3552"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb5c597d6a794309e3ba3168673a2dc1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>phaddw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal add (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3555" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3555" bodyend="3555"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1acbf35e8d82ec3ff5678c5bc9187ef2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phaddw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3557" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3557" bodyend="3557"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a487dd46e394f5a5d3dc1c99df32ecc05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>phaddw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal add (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3560" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3560" bodyend="3560"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2c0abaf336426c12e5396f2daf9a3a96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phaddw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3562" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3562" bodyend="3562"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4859edae455912b388e219958e1d99a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>phaddd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal add (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3565" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3565" bodyend="3565"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2506f0550f90c4df91f23e21b762270d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phaddd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3567" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3567" bodyend="3567"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8a7826322a19abf67bd2434d94618a38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>phaddd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal add (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3570" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3570" bodyend="3570"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adfb9235a9c86491c12be95d6240db2c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phaddd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3572" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3572" bodyend="3572"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a93cbc4de8f5c322326995962bec15df6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddsw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>phaddsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal add and saturate (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3575" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3575" bodyend="3575"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa6e4db4492b2d51af1b0c664aafc5587" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddsw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phaddsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3577" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3577" bodyend="3577"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a239a3795ba53dde47d9831e53dc4fc20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddsw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>phaddsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal add and saturate (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3580" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3580" bodyend="3580"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ae108357eeafc535cce30c9cbdabcb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phaddsw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phaddsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3582" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3582" bodyend="3582"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a236170eaf8b1b37c87a914b46093c14d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>phsubw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal subtract (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3585" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3585" bodyend="3585"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa96c4ad9172b352c3caf0c3c05dcb0be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phsubw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3587" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3587" bodyend="3587"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1a422e9979272ba479e20f0e9a579c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>phsubw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal subtract (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3590" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3590" bodyend="3590"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3145b6e322e29634c6f82fe94b2f3f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phsubw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3592" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3592" bodyend="3592"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf526b8177758f640a676055bc03be55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>phsubd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal subtract (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3595" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3595" bodyend="3595"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a6a32c8a120d3e21a8d25498de7c532" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phsubd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3597" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3597" bodyend="3597"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8dc0323ae09577588debec62db2c7757" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>phsubd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal subtract (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3600" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3600" bodyend="3600"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58ec2e0d4025659788917ba270af50e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phsubd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3602" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3602" bodyend="3602"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3105d636489ee37e359d876786b34ea2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubsw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>phsubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal subtract and saturate (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3605" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3605" bodyend="3605"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82d55f7f6c2ceb850849154055f5b577" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubsw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phsubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3607" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3607" bodyend="3607"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9a89732cbf917fa291322ac0e97683b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubsw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>phsubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal subtract and saturate (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3610" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3610" bodyend="3610"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76b1120079df2495187bf79b93b93836" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phsubsw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phsubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3612" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3612" bodyend="3612"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9e8de443f4187d245027db7144ff4a65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaddubsw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pmaddubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Multiply and add packed signed and unsigned bytes (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3615" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3615" bodyend="3615"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2fa17f572bbd2ea826b89f72959239a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaddubsw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaddubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3617" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3617" bodyend="3617"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a59d1160663dd1e97f3286d811d27a8f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaddubsw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmaddubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Multiply and add packed signed and unsigned bytes (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3620" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3620" bodyend="3620"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1d0f58a01f00b7c5c2da05f7b1183841" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaddubsw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaddubsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3622" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3622" bodyend="3622"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1514f9677fab11d16da654ee7d1d3346" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pabsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed absolute value (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3625" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3625" bodyend="3625"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a490158e08df05253e0f5210a240feb8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pabsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3627" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3627" bodyend="3627"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aebe2259e59bb0efc2413bf48fe345a92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pabsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed absolute value (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3630" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3630" bodyend="3630"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6feeb3fd9abc8762bab46e13778293bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pabsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3632" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3632" bodyend="3632"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a184158e02c49f238c4e4edb4aed2a8e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pabsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed absolute value (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3635" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3635" bodyend="3635"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aba883d9f1378ebf18da6bf27c43f76f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pabsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3637" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3637" bodyend="3637"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a464c2331aef41f3965c082e9dc5ee99d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pabsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed absolute value (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3640" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3640" bodyend="3640"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f4c6039c90dd50d29988902daff49de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pabsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3642" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3642" bodyend="3642"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af9f9c430de2c82299f552238e093f771" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsd</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pabsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed absolute value (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3645" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3645" bodyend="3645"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab469386d8f1bb909c332c481338b7b68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsd</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pabsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3647" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3647" bodyend="3647"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abcb9b42a0d0db8dfa26325569f806714" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pabsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed absolute value (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3650" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3650" bodyend="3650"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad78e2fc2cd99aeef58191797318db674" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pabsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pabsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3652" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3652" bodyend="3652"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad6ee51af75f6188140db45d313713236" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhrsw</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pmulhrsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply high with round and scale (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3655" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3655" bodyend="3655"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad05fc1e0553c74f0cb2478acb8e2c007" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhrsw</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmulhrsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3657" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3657" bodyend="3657"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad0355ef40d3d7f4e309d7f4aa3aebc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhrsw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmulhrsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed multiply high with round and scale (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3660" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3660" bodyend="3660"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1783b608f85f7606f155fc02496d52fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulhrsw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmulhrsw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3662" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3662" bodyend="3662"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa28b1960fb27aabca1c8f70fc1bda1e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufb</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1)</argsstring>
        <name>pshufb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shuffle bytes (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3665" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3665" bodyend="3665"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a90e415a1917e803dfcef7869120eb711" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufb</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pshufb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3667" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3667" bodyend="3667"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2c14b3e6c5ee5fe7cf062c8e491e9f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pshufb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed shuffle bytes (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3670" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3670" bodyend="3670"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2059be959ce7ec0f66ae1051caf17e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pshufb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pshufb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3672" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3672" bodyend="3672"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a67186dbeb85350309a630c760e580a68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::palignr</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>palignr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Packed shuffle bytes (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3675" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3675" bodyend="3675"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa4b9a5f7917f3d9c8d02f3eddf8afce0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::palignr</definition>
        <argsstring>(const MmVar &amp;o0, const MmVar &amp;o1, int o2)</argsstring>
        <name>palignr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3675" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3675" bodyend="3675"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad1ed86055ff3330ad93fdb64ce46c2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::palignr</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>palignr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3677" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3677" bodyend="3677"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a81bbb573a8d162585bd2d05ef7836d93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::palignr</definition>
        <argsstring>(const MmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>palignr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3677" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3677" bodyend="3677"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a9f7f6d9a72a6144b70df2209b20473" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::palignr</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>palignr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Packed shuffle bytes (SSSE3). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3680" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3680" bodyend="3680"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a04d802f56c6afe9e396a15108955e9df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::palignr</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>palignr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3680" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3680" bodyend="3680"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a11879ca122f5934de63fa0ef7435b80c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::palignr</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>palignr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3682" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3682" bodyend="3682"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1addc702214a7b1f9bca10663728ab0d14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::palignr</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>palignr</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3682" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3682" bodyend="3682"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872bb9410d7b35ee74128be9855ae932" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>blendpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Blend packed DP-FP values (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3689" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3689" bodyend="3689"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3dad15b8cc89d783820c74692cc0064e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>blendpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3689" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3689" bodyend="3689"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afcc40a7e124fc2b4c94f8ba26f4e6a2e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>blendpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3691" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3691" bodyend="3691"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abf16dfb91a30c4cd423cce22c2bc09f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>blendpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3691" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3691" bodyend="3691"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e6105636f75c06a62d3a0cc7c679b85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>blendps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Blend packed SP-FP values (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3694" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3694" bodyend="3694"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a327983e688d72acab945037d4e8f4109" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>blendps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3694" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3694" bodyend="3694"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6698adc7fc8c9580dc16fb26a76f1e63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>blendps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3696" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3696" bodyend="3696"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afae9800707024ae89fc1e788406e63a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>blendps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3696" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3696" bodyend="3696"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a912a0773bd30b5eeb2f70f52d83ca22d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendvpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const XmmVar &amp;o2)</argsstring>
        <name>blendvpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Variable blend packed DP-FP values (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3699" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3699" bodyend="3699"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42029e45f201adac20b125a92a4875cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendvpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const XmmVar &amp;o2)</argsstring>
        <name>blendvpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3701" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3701" bodyend="3701"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a919a687afa8776351d506f8a575af495" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendvps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const XmmVar &amp;o2)</argsstring>
        <name>blendvps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Variable blend packed SP-FP values (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3704" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3704" bodyend="3704"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a213659ebac73d53d4197ff555bd184ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::blendvps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const XmmVar &amp;o2)</argsstring>
        <name>blendvps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3706" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3706" bodyend="3706"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aadd7b19c764c76ab332b51f35bb855c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::dppd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>dppd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Dot product of packed DP-FP values (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3709" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3709" bodyend="3709"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f3d2f5b87e9b5f744b3cc4a28f17d58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::dppd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>dppd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3709" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3709" bodyend="3709"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5442e4966bb0fcd68ee9eeda01445cf1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::dppd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>dppd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3711" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3711" bodyend="3711"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a0071a475367bc4b86d38a3928d2541" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::dppd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>dppd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3711" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3711" bodyend="3711"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f2f8bd38f40af0f70eaf28eab16afc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::dpps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>dpps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Dot product of packed SP-FP values (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3714" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3714" bodyend="3714"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa8067c1f4135834a46ba9a455ec95d23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::dpps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>dpps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3714" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3714" bodyend="3714"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14cdee0e8c97555ca0a895659f2badf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::dpps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>dpps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3716" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3716" bodyend="3716"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a064bc109c9a2869cdccf1d0cde4e05b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::dpps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>dpps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3716" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3716" bodyend="3716"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2a434a5fb4e968d794950f04a72d92e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::extractps</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>extractps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Extract packed SP-FP value (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3719" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3719" bodyend="3719"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af7d16625a4a7c42447b20317e53ca5fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::extractps</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>extractps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3719" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3719" bodyend="3719"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad91c5223001a916b5261aac267d91692" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::extractps</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>extractps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3721" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3721" bodyend="3721"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa96ef3c4cdf7e44aeb997ff8873963a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::extractps</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>extractps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3721" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3721" bodyend="3721"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aecf1a375dc5616e7ef76ecb54ed74291" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::movntdqa</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>movntdqa</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Load oword non-temporal aligned hint (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3724" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3724" bodyend="3724"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10ea4efa8e2e65da6ba7e8d7c97c7f93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mpsadbw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>mpsadbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Compute multiple packed sums of absolute difference (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3727" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3727" bodyend="3727"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad486c1fe271a122dfe12fb0bfe760616" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mpsadbw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>mpsadbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3727" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3727" bodyend="3727"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7f837e54d1b906d01d339dbf8945bdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mpsadbw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>mpsadbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3729" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3729" bodyend="3729"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a715d99a4e9eb698eb850d8669d1f0427" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::mpsadbw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>mpsadbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3729" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3729" bodyend="3729"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71c597675c1c98df1306626f5f9f0cc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packusdw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>packusdw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Pack with unsigned saturation (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3732" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3732" bodyend="3732"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abad2fdd9e8a2021037e9c83e4dfc8f76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::packusdw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>packusdw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3734" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3734" bodyend="3734"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae0e27a3dd4e9fe686f9b27939a60ae63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pblendvb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const XmmVar &amp;o2)</argsstring>
        <name>pblendvb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Variable blend packed bytes (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3737" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3737" bodyend="3737"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a853b11ae3c88257f88bf87e7f85e01c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pblendvb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const XmmVar &amp;o2)</argsstring>
        <name>pblendvb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3739" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3739" bodyend="3739"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c396e1ec13cd719703a5c2298748f35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pblendw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pblendw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Blend packed words (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3742" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3742" bodyend="3742"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a713a59ac8bcb1a62cb3b1d050d15da11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pblendw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pblendw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3742" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3742" bodyend="3742"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af7d5eb1e949cdf42eaf72e6b51c3fb4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pblendw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pblendw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3744" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3744" bodyend="3744"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a14d9b31fb773b6d6a9b43b9dea60e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pblendw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pblendw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3744" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3744" bodyend="3744"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2bdd09b4a8d7bd690b30a93a4a25ba57" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pcmpeqq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Compare packed qword Data for Equal (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3747" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3747" bodyend="3747"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6009f460f752e9bf9eb16238bef99fc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpeqq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpeqq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3749" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3749" bodyend="3749"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb2dc64741f0f16973dddb73e711c69a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrb</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pextrb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Extract byte (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3752" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3752" bodyend="3752"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a98f7bf4ef49bb81f1abf9f652397eae6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrb</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pextrb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3752" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3752" bodyend="3752"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e3584b6fc96a93469bd1f57fecf0379" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrb</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pextrb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3754" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3754" bodyend="3754"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1f0d1a568de976ad8198a4c120abf64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrb</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pextrb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3754" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3754" bodyend="3754"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6e2554083be9e7fd46cb214dbc74cfee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrd</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pextrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Extract dword (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3757" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3757" bodyend="3757"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab16f8663e9bc24178c8a41cd2b2e71f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrd</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pextrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3757" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3757" bodyend="3757"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07c2b396125f44aab8abcdd97902cb1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrd</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pextrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3759" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3759" bodyend="3759"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b3a4a796dae3e3264749173a9bb3a59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrd</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pextrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3759" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3759" bodyend="3759"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1835103ea4b6b3c045e4a1c5d4519fbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrq</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pextrq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Extract qword (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3762" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3762" bodyend="3762"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a88b3535d619482dcb5422a8daf55dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrq</definition>
        <argsstring>(const GpVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pextrq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3762" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3762" bodyend="3762"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c3d3efbe7d9fc4dc64ba98289c6d062" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrq</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pextrq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3764" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3764" bodyend="3764"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a52046e9efd644d5d16bab1358bf341e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrq</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pextrq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3764" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3764" bodyend="3764"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a52e7f8e8049bf85d17878431e0f7cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrw</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pextrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Extract word (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3767" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3767" bodyend="3767"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab844501efea3042bbda77e5c98ca1aa3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pextrw</definition>
        <argsstring>(const Mem &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pextrw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3767" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3767" bodyend="3767"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f68713843df8685372d449f79dcb6d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phminposuw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>phminposuw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed horizontal word minimum (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3770" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3770" bodyend="3770"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8f93e4617ef90ae34f81cbdb341bf500" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::phminposuw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>phminposuw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3772" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3772" bodyend="3772"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a46cc69d3d6df5e19630dddb412d5380b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrb</definition>
        <argsstring>(const XmmVar &amp;o0, const GpVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pinsrb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Insert byte (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3775" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3775" bodyend="3775"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a412d6d18d0fdf99a3b0f4115125b006b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrb</definition>
        <argsstring>(const XmmVar &amp;o0, const GpVar &amp;o1, int o2)</argsstring>
        <name>pinsrb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3775" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3775" bodyend="3775"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a91cf75fd1d0a0dbe4e5acb499b221277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pinsrb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3777" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3777" bodyend="3777"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a86f54871f9d895225c56b32db90ce640" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pinsrb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3777" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3777" bodyend="3777"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70c5529b92de7b476037a39a665ee646" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrd</definition>
        <argsstring>(const XmmVar &amp;o0, const GpVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pinsrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Insert dword (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3780" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3780" bodyend="3780"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8bc41a85cd397e59a99102535ec26098" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrd</definition>
        <argsstring>(const XmmVar &amp;o0, const GpVar &amp;o1, int o2)</argsstring>
        <name>pinsrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3780" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3780" bodyend="3780"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a416b6df44088e0f7b2df865be22eb4d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pinsrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3782" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3782" bodyend="3782"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a11e3f7d83ce571f1e97c634d1b30df0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pinsrd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3782" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3782" bodyend="3782"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0348d0a2e18972309b8b7f11cb47a405" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrq</definition>
        <argsstring>(const XmmVar &amp;o0, const GpVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pinsrq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Insert qword (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3785" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3785" bodyend="3785"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7349b2bddcb9bba04fc7d0f2fc93283" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrq</definition>
        <argsstring>(const XmmVar &amp;o0, const GpVar &amp;o1, int o2)</argsstring>
        <name>pinsrq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3785" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3785" bodyend="3785"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab881761824ccb2f6d24e4c2b2256d3e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pinsrq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3787" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3787" bodyend="3787"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a92d85a1d4dad2ef7bb791cf34643d27c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pinsrq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pinsrq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3787" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3787" bodyend="3787"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a555272214bb7ec1d58b74e9bbf99a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxuw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmaxuw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Maximum of packed word integers (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3790" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3790" bodyend="3790"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7e875e86391aac23ac16b01000215e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxuw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaxuw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3792" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3792" bodyend="3792"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57390eaf1fcc6b3b19eda6db43aa85cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxsb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmaxsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Maximum of packed signed byte integers (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3795" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3795" bodyend="3795"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aab5733851395fc271259034ea6f36b0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxsb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaxsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3797" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3797" bodyend="3797"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af05d268c11e604ee2d78f88a79a2c9f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmaxsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Maximum of packed signed dword integers (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3800" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3800" bodyend="3800"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a83c7e8d8a8675ace91e9b5e1eae8e5ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaxsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3802" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3802" bodyend="3802"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af45a1bb00ff0148e301f9bb22a9ee325" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxud</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmaxud</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Maximum of packed unsigned dword integers (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3805" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3805" bodyend="3805"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adedbcffe724a807a0c0592cea0cef9e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmaxud</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmaxud</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3807" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3807" bodyend="3807"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a567dcb6823d382d9d400d1848694fca3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminsb</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pminsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Minimum of packed signed byte integers (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3810" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3810" bodyend="3810"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab8c02452eb84aaffc56fa480e5d92625" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminsb</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pminsb</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3812" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3812" bodyend="3812"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a690ff0dea1897abeb9dc498c3e7c6303" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminuw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pminuw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Minimum of packed word integers (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3815" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3815" bodyend="3815"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a286eff68500c2652dfec7d923b266ba7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminuw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pminuw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3817" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3817" bodyend="3817"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a25d47a334fcd97439f5d29696e1c39a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminud</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pminud</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Minimum of packed dword integers (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3820" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3820" bodyend="3820"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a60201d5ace2305836b0238d005208b1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminud</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pminud</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3822" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3822" bodyend="3822"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6beb0ee57a43bdbb16aa02a58270c2b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pminsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Minimum of packed dword integers (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3825" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3825" bodyend="3825"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a328d39da3d3d91a815db85557578945b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pminsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pminsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3827" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3827" bodyend="3827"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aacdbda97e2648642a9bcc2b5d952c0b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxbw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovsxbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed move with sign extend (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3830" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3830" bodyend="3830"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae47d7a5127de3e67c91a5d5efa4be3ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxbw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovsxbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3832" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3832" bodyend="3832"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef5ec0d1a4f4b4f51bd4b7b19a2a925a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxbd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovsxbd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed move with sign extend (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3835" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3835" bodyend="3835"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1b0881130f81bdc2e3267889ea547cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxbd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovsxbd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3837" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3837" bodyend="3837"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42a78877d9a7007d50bbb5519302e229" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxbq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovsxbq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed move with sign extend (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3840" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3840" bodyend="3840"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a229c1187ce592f0581cf73988149d5d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxbq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovsxbq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3842" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3842" bodyend="3842"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a306400d99b7fa336a9835cf1fafabfcc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxwd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovsxwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed move with sign extend (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3845" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3845" bodyend="3845"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3464fa8c6f5a92d04579f84689c7c0a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxwd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovsxwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3847" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3847" bodyend="3847"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab7a24ce229193cb0b08c8480639ba376" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxwq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovsxwq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>(SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3850" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3850" bodyend="3850"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa1e6b316d0d928b42ebdebe47de58ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxwq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovsxwq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3852" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3852" bodyend="3852"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f5891c47cb5e5823714cef2e67d08cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxdq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovsxdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>(SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3855" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3855" bodyend="3855"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a59082639e09883f5c406435cd01a7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovsxdq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovsxdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3857" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3857" bodyend="3857"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76c9b0fd9bb0830d71919c51ed1e1ed3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxbw</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovzxbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed move with zero extend (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3860" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3860" bodyend="3860"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a83e306467378ddf0338f575ef7442f4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxbw</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovzxbw</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3862" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3862" bodyend="3862"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3957d6ee7bd6af30ac092499bc342f12" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxbd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovzxbd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed move with zero extend (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3865" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3865" bodyend="3865"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b4714ce4ce65953271160edb4143e38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxbd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovzxbd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3867" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3867" bodyend="3867"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae22ccf66b1053922f0e9ce9c3e10af6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxbq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovzxbq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed move with zero extend (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3870" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3870" bodyend="3870"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14dbd3cf6ea5faf8d63fa172450b1094" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxbq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovzxbq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3872" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3872" bodyend="3872"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a279d779f1e4923ed8f8fdb698aa57cfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxwd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovzxwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Packed move with zero extend (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3875" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3875" bodyend="3875"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adceb9c2c647453407b4638768438c2ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxwd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovzxwd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3877" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3877" bodyend="3877"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f3fb9957fdf82b3bf30a753e3b377b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxwq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovzxwq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>(SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3880" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3880" bodyend="3880"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1adec44f72d067988332fd759f95ab76d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxwq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovzxwq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3882" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3882" bodyend="3882"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a538827b3bccc807c060a8094e8cddc85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxdq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmovzxdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>(SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3885" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3885" bodyend="3885"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae1f547c39f1535b76f16e0b829c8a48d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmovzxdq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmovzxdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3887" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3887" bodyend="3887"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af78537b1358b267180a5d2379a8530a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmuldq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmuldq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Multiply packed signed dword integers (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3890" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3890" bodyend="3890"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1a6f4e247c05e546329bfdc2df3732ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmuldq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmuldq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3892" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3892" bodyend="3892"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac01f83e45189eb6510e2a8dd708b9a27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulld</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pmulld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Multiply packed signed integers and store low result (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3895" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3895" bodyend="3895"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ca2a133a52a90ee2b79b80bcbe4a31a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pmulld</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pmulld</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3897" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3897" bodyend="3897"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a005a5e6bb339f2076d98e8e094206a35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ptest</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>ptest</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Logical compare (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3900" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3900" bodyend="3900"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7fae782f0fcffd7d02551c075bc5218" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::ptest</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>ptest</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3902" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3902" bodyend="3902"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6520da409d717efe86511ce36cc72084" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>roundps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Round packed SP-FP values (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3905" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3905" bodyend="3905"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c8bad7fffc53524b42b6b56764d42a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundps</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>roundps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3905" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3905" bodyend="3905"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a362a94075420dbccdc84e39ef5120b67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>roundps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3907" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3907" bodyend="3907"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a72c29d4845e95351c15cff92fc0a7f86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundps</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>roundps</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3907" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3907" bodyend="3907"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a88cd0fbe99a0eb7a9e79338d058f766d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>roundss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Round scalar SP-FP values (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3910" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3910" bodyend="3910"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a456057772c846eade95f31c69fcb7386" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundss</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>roundss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3910" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3910" bodyend="3910"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad1f23b30e3ca88ae3bba9efe71456332" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>roundss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3912" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3912" bodyend="3912"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4712e190b1e3ab77a22d6b7c0f7f73af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundss</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>roundss</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3912" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3912" bodyend="3912"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab67fffb8a9c1af4bc43e7bb438aa2307" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>roundpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Round packed DP-FP values (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3915" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3915" bodyend="3915"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af9f06ce92dc281cedd5cc56dfd48bbce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundpd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>roundpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3915" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3915" bodyend="3915"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a887dcd9e796963ce2858bd34872a2670" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>roundpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3917" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3917" bodyend="3917"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a086bfcd8cc9f8fe8a91e9b29310861d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundpd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>roundpd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3917" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3917" bodyend="3917"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a55aaa72b80f109a5031e15de7376a70c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>roundsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Round scalar DP-FP values (SSE4.1). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3920" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3920" bodyend="3920"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d218ad2e0b0275bbd189d9bbf9a7466" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundsd</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>roundsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3920" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3920" bodyend="3920"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8778e2e5acf712a5af3542d350531a36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>roundsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3922" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3922" bodyend="3922"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d073bd371ddb49768a027e5c09e9f73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::roundsd</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>roundsd</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3922" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3922" bodyend="3922"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82d9428176a4fc7c8f2224d65af1bffc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpestri</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pcmpestri</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Packed compare explicit length strings, return index (SSE4.2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3929" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3929" bodyend="3929"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3b0c1cfc93996b5508a61a2d83628204" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpestri</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pcmpestri</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3929" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3929" bodyend="3929"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4eb88dc71db1fec4b86bce45512264fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpestri</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pcmpestri</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3931" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3931" bodyend="3931"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a83e9e7f9941b0c9fbdb60d4f8f72b42a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpestri</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pcmpestri</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3931" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3931" bodyend="3931"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ed7d9b2fadb69f122a23a738766004b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpestrm</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pcmpestrm</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Packed compare explicit length strings, return mask (SSE4.2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3934" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3934" bodyend="3934"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a28e836bf60f589ca7a979f82ce6621d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpestrm</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pcmpestrm</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3934" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3934" bodyend="3934"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a15b1b7e460d8ba86fbd1cb283a71839f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpestrm</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pcmpestrm</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3936" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3936" bodyend="3936"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac552ba9d38c36b62bf1d90eef80e62f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpestrm</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pcmpestrm</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3936" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3936" bodyend="3936"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad9cd74795243b85a27830e8abcb10dab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpistri</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pcmpistri</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Packed compare implicit length strings, return index (SSE4.2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3939" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3939" bodyend="3939"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a92ee6d4d3771b5365cfea5a9301b2627" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpistri</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pcmpistri</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3939" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3939" bodyend="3939"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7b181a491c9ebe8780bf0059a211178" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpistri</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pcmpistri</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3941" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3941" bodyend="3941"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1f48194763839646a34a282e43016c65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpistri</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pcmpistri</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3941" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3941" bodyend="3941"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad4aca140114667dc4cc53eb20934f5e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpistrm</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pcmpistrm</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Packed compare implicit length strings, return mask (SSE4.2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3944" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3944" bodyend="3944"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7de74ff37b5eb5a86b7e8b68b2db2ca9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpistrm</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pcmpistrm</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3944" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3944" bodyend="3944"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1af7915e9e50f2f6a6ada795f27375ef75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpistrm</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pcmpistrm</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3946" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3946" bodyend="3946"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0091cbfc08d01694cba55f54576ec23a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpistrm</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pcmpistrm</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3946" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3946" bodyend="3946"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa90432fba89d55ae23eab1a62b97e1e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>pcmpgtq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Compare packed data for greater than (SSE4.2). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3949" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3949" bodyend="3949"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6cb4e7b285ea7d77ee6277e256fb255b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pcmpgtq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>pcmpgtq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3951" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3951" bodyend="3951"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a491a77840021294403438f5654e9be49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aesdec</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>aesdec</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Perform a single round of the AES decryption flow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3958" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3958" bodyend="3958"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa157569aa6c3ac5d75d601655c5f2ae5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aesdec</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>aesdec</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3960" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3960" bodyend="3960"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a361aa644c40abe73d28d3546649c9427" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aesdeclast</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>aesdeclast</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Perform the last round of the AES decryption flow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3963" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3963" bodyend="3963"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab5831db70f119449997ee59328f7bf7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aesdeclast</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>aesdeclast</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3965" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3965" bodyend="3965"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79ea3fe4b28a1cab55a80bd73cd87532" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aesenc</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>aesenc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Perform a single round of the AES encryption flow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3968" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3968" bodyend="3968"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad24fa249a4e58fe15a9a93dd11338835" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aesenc</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>aesenc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3970" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3970" bodyend="3970"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96096517869da941ff009efe2ff9094a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aesenclast</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>aesenclast</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Perform the last round of the AES encryption flow. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3973" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3973" bodyend="3973"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a399af2c3c64893ec9200449ef69933b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aesenclast</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>aesenclast</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3975" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3975" bodyend="3975"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a608d404fc477cc28fb483b8befde80c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aesimc</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1)</argsstring>
        <name>aesimc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
<para>Perform the InvMixColumns transformation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3978" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3978" bodyend="3978"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b9132ccdbe5357c25c3e9394822e5e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aesimc</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1)</argsstring>
        <name>aesimc</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3980" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3980" bodyend="3980"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0dc7cdda47edf2ec1a52c84d32a54fa8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aeskeygenassist</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>aeskeygenassist</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Assist in expanding the AES cipher key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3983" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3983" bodyend="3983"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abda52a36e0911dae054158fc4a2caf3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aeskeygenassist</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>aeskeygenassist</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3983" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3983" bodyend="3983"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa59e7703b2dc15c870a7bc23a638a873" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aeskeygenassist</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>aeskeygenassist</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3985" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3985" bodyend="3985"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a85a4da1207c71eb1f95f915e29504e0a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::aeskeygenassist</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>aeskeygenassist</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3985" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3985" bodyend="3985"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1abc2d90b80095e7a91244f7e19f8e22f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pclmulqdq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pclmulqdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
<para>Carry-less multiplication quadword. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3992" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3992" bodyend="3992"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1aca2fb8f014ca560233c41204788dbaaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pclmulqdq</definition>
        <argsstring>(const XmmVar &amp;o0, const XmmVar &amp;o1, int o2)</argsstring>
        <name>pclmulqdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3992" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3992" bodyend="3992"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a862e79f5255a8b2e25493b6bd04ccff1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pclmulqdq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, const Imm &amp;o2)</argsstring>
        <name>pclmulqdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1Imm" kindref="compound">Imm</ref> &amp;</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3994" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3994" bodyend="3994"/>
      </memberdef>
      <memberdef kind="function" id="structasmjit_1_1x86x64_1_1X86X64Compiler_1a677bdc92df3ed4b6ed7edb9fb84e564c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structasmjit_1_1InstNode" kindref="compound">InstNode</ref> *</type>
        <definition>InstNode* asmjit::x86x64::X86X64Compiler::pclmulqdq</definition>
        <argsstring>(const XmmVar &amp;o0, const Mem &amp;o1, int o2)</argsstring>
        <name>pclmulqdq</name>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref> &amp;</type>
          <declname>o0</declname>
        </param>
        <param>
          <type>const <ref refid="structasmjit_1_1x86x64_1_1Mem" kindref="compound">Mem</ref> &amp;</type>
          <declname>o1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>o2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="3994" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="3994" bodyend="3994"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>X86/X64 compiler. </para>    </briefdescription>
    <detaileddescription>
<para>This class is used to store instruction stream and allows to modify it on the fly. It uses different concept than <computeroutput>asmjit::Assembler</computeroutput> class and in fact <computeroutput>asmjit::Assembler</computeroutput> is only used as a backend. Compiler never emits machine code and each instruction you use is stored to instruction array instead. This allows to modify instruction stream later and for example to reorder instructions to make better performance.</para><para>asmjit::X86X64Compiler moves code generation to a higher level. Higher level constructs allows to write more abstract and extensible code that is not possible with pure <computeroutput>asmjit::Assembler</computeroutput> class. Because <computeroutput>asmjit::Compiler</computeroutput> needs to create many objects and lifetime of these objects is small (same as <computeroutput>asmjit::Compiler</computeroutput> lifetime itself) it uses very fast memory management model. This model allows to create object instances in nearly zero time (compared to <computeroutput>malloc()</computeroutput> or <computeroutput>new()</computeroutput> operators) so overhead by creating machine code by <computeroutput>asmjit::Compiler</computeroutput> is minimized.</para><sect1 id="structasmjit_1_1x86x64_1_1X86X64Compiler_1asmjit_compiler_introduction">
<title>The Story</title>
<para>Before telling you how Compiler works I&apos;d like to write a story. I&apos;d like to cover reasons why this class was created and why I&apos;m recommending to use it. When I released the first version of AsmJit (0.1) it was a toy. The first function I wrote was function which is still available as testjit and which simply returns 1024. The reason why function works for both 32-bit/ 64-bit mode and for Windows/Unix specific calling conventions is luck, no arguments usage and no registers usage except returning value in EAX/RAX.</para><para>Then I started a project called BlitJit which was targetted to generating JIT code for computer graphics. After writing some lines I decided that I can&apos;t join pieces of code together without abstraction, should be pixels source pointer in ESI/RSI or EDI/RDI or it&apos;s completelly irrellevant? What about destination pointer and SSE2 register for reading input pixels? The simple answer might be &quot;just pick some one and use it&quot;.</para><para>Another reason for abstraction is function calling-conventions. It&apos;s really not easy to write assembler code for 32-bit and 64-bit platform supporting three calling conventions (32-bit is similar between Windows and Unix, but 64-bit calling conventions are different).</para><para>At this time I realized that I can&apos;t write code which uses named registers, I need to abstract it. In most cases you don&apos;t need specific register, you need to emit instruction that does something with &apos;virtual&apos; register(s), memory, immediate or label.</para><para>The first version of AsmJit with Compiler was 0.5 (or 0.6?, can&apos;t remember). There was support for 32-bit and 64-bit mode, function calling conventions, but when emitting instructions the developer needed to decide which registers are changed, which are only read or completely overwritten. This model helped a lot when generating code, especially when joining more code-sections together, but there was also small possibility for mistakes. Simply the first version of Compiler was great improvement over low-level Assembler class, but the API design wasn&apos;t perfect.</para><para>The second version of Compiler, completelly rewritten and based on different goals, is part of AsmJit starting at version 1.0. This version was designed after the first one and it contains serious improvements over the old one. The first improvement is that you just use instructions with virtual registers - called variables. When using compiler there is no way to use native registers, there are variables instead. AsmJit is smarter than before and it knows which register is needed only for read (r), read/write (w) or overwrite (x). Supported are also instructions which are using some registers in implicit way (these registers are not part of instruction definition in string form). For example to use CPUID instruction you must give it four variables which will be automatically allocated in input/output registers (EAX, EBX, ECX, EDX).</para><para>Another improvement is algorithm used by a register allocator. In first version the registers were allocated when creating instruction stream. In new version registers are allocated after calling <computeroutput>Compiler::make()</computeroutput>, thus register allocator has information about scope of all variables and statistics of their usage. The algorithm to allocate registers is very simple and it&apos;s always called as a &apos;linear scan register allocator&apos;. When you get out of registers the all possible variables are scored and the worst is spilled. Of course algorithm ignores the variables used for current instruction.</para><para>In addition, because registers are allocated after the code stream is generated, the state switches between jumps are handled by Compiler too. You don&apos;t need to worry about jumps, compiler always do this dirty work for you.</para><para>The nearly last thing I&apos;d like to present is calling other functions from the generated code. AsmJit uses a <computeroutput><ref refid="structasmjit_1_1FuncPrototype" kindref="compound">FuncPrototype</ref></computeroutput> class to hold function parameters, their position in stack (or register index) and return value. This class is used internally, but it can be used to create your own function calling-convention. All standard function calling conventions are implemented.</para><para>Please enjoy the new version of Compiler, it was created for writing a low-level code using high-level API, leaving developer to concentrate on real problems and not to solving a register puzzle.</para></sect1>
<sect1 id="structasmjit_1_1x86x64_1_1X86X64Compiler_1asmjit_compiler_codegeneration">
<title>Code Generation</title>
<para>First that is needed to know about compiler is that compiler never emits machine code. It&apos;s used as a middleware between <computeroutput>asmjit::Assembler</computeroutput> and your code. There is also convenience method <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff8fecf22ca3f324379e2c06c16941cd" kindref="member">make()</ref></computeroutput> that allows to generate machine code directly without creating <computeroutput>asmjit::Assembler</computeroutput> instance.</para><para>Comparison of generating machine code through <computeroutput>Assembler</computeroutput> and directly by <computeroutput>Compiler:</computeroutput> </para><para><programlisting><codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Assembler<sp/>instance<sp/>is<sp/>low<sp/>level<sp/>code<sp/>generation<sp/>class<sp/>that<sp/>emits</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>machine<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>Assembler<sp/>a;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Compiler<sp/>instance<sp/>is<sp/>high<sp/>level<sp/>code<sp/>generation<sp/>class<sp/>that<sp/>stores<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>instructions<sp/>in<sp/>internal<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>Compiler<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>...<sp/>put<sp/>your<sp/>code<sp/>here<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Final<sp/>step<sp/>-<sp/>generate<sp/>code.<sp/>asmjit::Compiler::serialize()<sp/>will<sp/>send<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>instructions<sp/>into<sp/>Assembler<sp/>and<sp/>this<sp/>ensures<sp/>generating<sp/>real<sp/>machine<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.serialize(a);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Your<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>fn<sp/>=<sp/>a.make();</highlight></codeline>
</programlisting></para><para>Example how to generate machine code using only <computeroutput>Compiler</computeroutput> (preferred):</para><para><programlisting><codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Compiler<sp/>instance<sp/>is<sp/>enough.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>Compiler<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>...<sp/>put<sp/>your<sp/>code<sp/>here<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Your<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>fn<sp/>=<sp/>c.make();</highlight></codeline>
</programlisting></para><para>You can see that there is <computeroutput>asmjit::Compiler::serialize()</computeroutput> function that emits instructions into <computeroutput>asmjit::Assembler()</computeroutput>. This layered architecture means that each class is used for something different and there is no code duplication. For convenience there is also <computeroutput>asmjit::Compiler::make()</computeroutput> method that can create your function using <computeroutput>asmjit::Assembler</computeroutput>, but internally (this is preferred bahavior when using <computeroutput>asmjit::Compiler</computeroutput>).</para><para>The <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff8fecf22ca3f324379e2c06c16941cd" kindref="member">make()</ref></computeroutput> method allocates memory using <ref refid="structasmjit_1_1BaseRuntime" kindref="compound">BaseRuntime</ref> instance passed into the <computeroutput>Compiler</computeroutput> constructor. If code generator is used to create JIT function then virtual memory allocated by <computeroutput><ref refid="structasmjit_1_1MemoryManager" kindref="compound">MemoryManager</ref></computeroutput> is used. To get global memory manager use <computeroutput><ref refid="structasmjit_1_1MemoryManager_1a9f49c72d7c2fac093dd76a5ff800f0fe" kindref="member">MemoryManager::getGlobal()</ref></computeroutput>.</para><para><programlisting><codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Compiler<sp/>instance<sp/>is<sp/>enough.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>Compiler<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>...<sp/>put<sp/>your<sp/>code<sp/>using<sp/>Compiler<sp/>instance<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Your<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>fn<sp/>=<sp/>c.make();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>it<sp/>if<sp/>you<sp/>don&apos;t<sp/>want<sp/>it<sp/>anymore</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>(using<sp/>global<sp/>memory<sp/>manager<sp/>instance)</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><ref refid="structasmjit_1_1MemoryManager_1a9f49c72d7c2fac093dd76a5ff800f0fe" kindref="member" tooltip="Get global memory manager instance.">MemoryManager::getGlobal</ref>()-&gt;free(fn);</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="structasmjit_1_1x86x64_1_1X86X64Compiler_1asmjit_compiler_Functions">
<title>Functions</title>
<para>To build functions with <computeroutput>Compiler</computeroutput>, see <computeroutput>asmjit::Compiler::addFunc()</computeroutput> method.</para></sect1>
<sect1 id="structasmjit_1_1x86x64_1_1X86X64Compiler_1asmjit_compiler_Variables">
<title>Variables</title>
<para>Compiler is able to manage variables and function arguments. Function arguments are moved to variables by using <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0772c01f808f117609a87f7b344f9694" kindref="member">setArg()</ref></computeroutput> method, where the first parameter is argument index and second parameter is the variable instance. To declare variable use <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a692e27df983960f8d7c8c19fbc694" kindref="member">newGpVar()</ref></computeroutput>, <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae814d711f1f21a98b4488580d5d0ec6c" kindref="member">newMmVar()</ref></computeroutput> and <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a082f52511cc0a1ab45368e5c49007507" kindref="member">newXmmVar()</ref></computeroutput> methods. The <computeroutput>newXXX()</computeroutput> methods accept also parameter describing the variable type. For example the <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a692e27df983960f8d7c8c19fbc694" kindref="member">newGpVar()</ref></computeroutput> method always creates variable which size matches the target architecture size (for 32-bit target the 32-bit variable is created, for 64-bit target the variable size is 64-bit). To override this behavior the variable type must be specified.</para><para><programlisting><codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Compiler<sp/>and<sp/>function<sp/>declaration<sp/>-<sp/>void<sp/>f(int*);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>Compiler<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>a0(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a773337143d44de47e460e5e280661e3e" kindref="member" tooltip="Variable is target intptr_t (not compatible with host intptr_t).">kVarTypeIntPtr</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.addFunc(kFuncConvHost,<sp/>BuildFunction1&lt;FnVoid,<sp/>int*&gt;());</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.setArg(0,<sp/>a0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>your<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>x0(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>x1(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>your<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.mov(x0,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.mov(x1,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>...<sp/>your<sp/>code<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.add(x0,<sp/>x1);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>...<sp/>your<sp/>code<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>result<sp/>to<sp/>a<sp/>given<sp/>pointer<sp/>in<sp/>first<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.mov(<ref refid="group__asmjit__x86x64_1gacb3da80de191d540f364469338809f30" kindref="member" tooltip="Create a dword pointer operand.">dword_ptr</ref>(a0),<sp/>x0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>End<sp/>of<sp/>function<sp/>body.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.endFunc();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*MyFunc)(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*);</highlight></codeline>
<codeline><highlight class="normal"><sp/>MyFunc<sp/>func<sp/>=<sp/>asmjit_cast&lt;MyFunc&gt;(c.make());</highlight></codeline>
</programlisting></para><para>This code snipped needs to be explained. You can see that there are more variable types that can be used by <computeroutput>Compiler</computeroutput>. Most useful variables can be allocated using general purpose registers (<computeroutput><ref refid="structasmjit_1_1x86x64_1_1GpVar" kindref="compound">GpVar</ref></computeroutput>), MMX registers (<computeroutput><ref refid="structasmjit_1_1x86x64_1_1MmVar" kindref="compound">MmVar</ref></computeroutput>) or SSE/SSE2 registers (<computeroutput><ref refid="structasmjit_1_1x86x64_1_1XmmVar" kindref="compound">XmmVar</ref></computeroutput>).</para><para>X86/X64 variable types:</para><para><itemizedlist>
<listitem><para><computeroutput>kVarTypeInt8</computeroutput> - Signed 8-bit integer, mapped to Gpd register (eax, ebx, ...).</para></listitem><listitem><para><computeroutput>kVarTypeUInt8</computeroutput> - Unsigned 8-bit integer, mapped to Gpd register (eax, ebx, ...).</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><computeroutput>kVarTypeInt16</computeroutput> - Signed 16-bit integer, mapped to Gpd register (eax, ebx, ...).</para></listitem><listitem><para><computeroutput>kVarTypeUInt16</computeroutput> - Unsigned 16-bit integer, mapped to Gpd register (eax, ebx, ...).</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><computeroutput>kVarTypeInt32</computeroutput> - Signed 32-bit integer, mapped to Gpd register (eax, ebx, ...).</para></listitem><listitem><para><computeroutput>kVarTypeUInt32</computeroutput> - Unsigned 32-bit integer, mapped to Gpd register (eax, ebx, ...).</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><computeroutput>kVarTypeInt64</computeroutput> - Signed 64-bit integer, mapped to Gpq register (rax, rbx, ...).</para></listitem><listitem><para><computeroutput>kVarTypeUInt64</computeroutput> - Unsigned 64-bit integer, mapped to Gpq register (rax, rbx, ...).</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><computeroutput>kVarTypeIntPtr</computeroutput> - intptr_t, mapped to Gpd/Gpq register; depends on target, not host!</para></listitem><listitem><para><computeroutput>kVarTypeUIntPtr</computeroutput> - uintptr_t, mapped to Gpd/Gpq register; depends on target, not host!</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><computeroutput>kVarTypeFp32</computeroutput> - 32-bit floating point register (fp0, fp1, ...).</para></listitem><listitem><para><computeroutput>kVarTypeFp64</computeroutput> - 64-bit floating point register (fp0, fp1, ...).</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><computeroutput>kVarTypeMm</computeroutput> - 64-bit Mm register (mm0, mm1, ...).</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><computeroutput>kVarTypeXmm</computeroutput> - 128-bit SSE register.</para></listitem><listitem><para><computeroutput>kVarTypeXmmSs</computeroutput> - 128-bit SSE register that contains a scalar 32-bit SP-FP value.</para></listitem><listitem><para><computeroutput>kVarTypeXmmSd</computeroutput> - 128-bit SSE register that contains a scalar 64-bit DP-FP value.</para></listitem><listitem><para><computeroutput>kVarTypeXmmPs</computeroutput> - 128-bit SSE register that contains 4 packed 32-bit SP-FP values.</para></listitem><listitem><para><computeroutput>kVarTypeXmmPd</computeroutput> - 128-bit SSE register that contains 2 packed 64-bit DP-FP values.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><computeroutput>kVarTypeYmm</computeroutput> - 256-bit AVX register.</para></listitem><listitem><para><computeroutput>kVarTypeYmmPs</computeroutput> - 256-bit AVX register that contains 4 packed 32-bit SP-FP values.</para></listitem><listitem><para><computeroutput>kVarTypeYmmPd</computeroutput> - 256-bit AVX register that contains 2 packed 64-bit DP-FP values.</para></listitem></itemizedlist>
</para><para>Variable states:</para><para><itemizedlist>
<listitem><para><computeroutput>kVarStateUnused</computeroutput> - State that is assigned to newly created variables or to not used variables (dereferenced to zero).</para></listitem><listitem><para><computeroutput>kVarStateReg</computeroutput> - State that means that variable is currently allocated in register.</para></listitem><listitem><para><computeroutput>kVarStateMem</computeroutput> - State that means that variable is currently only in memory location.</para></listitem></itemizedlist>
</para><para>When you create new variable, initial state is always <computeroutput>kVarStateUnused</computeroutput>, allocating it to register or spilling to memory changes this state to <computeroutput>kVarStateReg</computeroutput> or <computeroutput>kVarStateMem</computeroutput>, respectively. During variable lifetime it&apos;s usual that its state is changed multiple times. To generate better code, you can control allocating and spilling by using up to four types of methods that allows it (see next list).</para><para>Explicit variable allocating / spilling methods:</para><para><itemizedlist>
<listitem><para><computeroutput>Compiler::alloc()</computeroutput> - Explicit method to alloc variable into register. You can use this before loops or code blocks.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><computeroutput>Compiler::spill()</computeroutput> - Explicit method to spill variable. If variable is in register and you call this method, it&apos;s moved to its home memory location. If variable is not in register no operation is performed.</para></listitem></itemizedlist>
</para><para><itemizedlist>
<listitem><para><computeroutput>Compiler::unuse()</computeroutput> - Unuse variable (you can use this to end the variable scope or sub-scope).</para></listitem></itemizedlist>
</para><para>Please see AsmJit tutorials (testcompiler.cpp and testvariables.cpp) for more complete examples.</para></sect1>
<sect1 id="structasmjit_1_1x86x64_1_1X86X64Compiler_1asmjit_compiler_MemoryManagement">
<title>Memory Management</title>
<para><computeroutput>Compiler</computeroutput> Memory management follows these rules:<itemizedlist>
<listitem><para>Everything created by <computeroutput>Compiler</computeroutput> is always freed by <computeroutput>Compiler</computeroutput>.</para></listitem><listitem><para>To get decent performance, compiler always uses larger memory buffer for objects to allocate and when compiler instance is destroyed, this buffer is freed. Destructors of active objects are called when destroying compiler instance. Destructors of abadonded compiler objects are called immediately after abadonding them.</para></listitem><listitem><para>This type of memory management is called &apos;zone memory management&apos;.</para></listitem></itemizedlist>
</para><para>This means that you can&apos;t use any <computeroutput>Compiler</computeroutput> object after destructing it, it also means that each object like <computeroutput><ref refid="structasmjit_1_1Label" kindref="compound">Label</ref></computeroutput>, <computeroutput><ref refid="structasmjit_1_1BaseVar" kindref="compound">BaseVar</ref></computeroutput> and others are created and managed by <computeroutput><ref refid="structasmjit_1_1BaseCompiler" kindref="compound">BaseCompiler</ref></computeroutput> itself. These objects contain ID which is used internally by Compiler to store additional information about these objects.</para></sect1>
<sect1 id="structasmjit_1_1x86x64_1_1X86X64Compiler_1asmjit_compiler_StateManagement">
<title>Control-Flow and State Management.</title>
<para>The <computeroutput>Compiler</computeroutput> automatically manages state of the variables when using control flow instructions like jumps, conditional jumps and calls. There is minimal heuristics for choosing the method how state is saved or restored.</para><para>Generally the state can be changed only when using jump or conditional jump instruction. When using non-conditional jump then state change is embedded into the instruction stream before the jump. When using conditional jump the <computeroutput>Compiler</computeroutput> decides whether to restore state before the jump or whether to use another block where state is restored. The last case is that no-code have to be emitted and there is no state change (this is of course ideal).</para><para>Choosing whether to embed &apos;restore-state&apos; section before conditional jump is quite simple. If jump is likely to be &apos;taken&apos; then code is embedded, if jump is unlikely to be taken then the small code section for state-switch will be generated instead.</para><para>Next example is the situation where the extended code block is used to do state-change:</para><para><programlisting><codeline><highlight class="normal"><sp/>Compiler<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.addFunc(kFuncConvHost,<sp/>FuncBuilder0&lt;FnVoid&gt;());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Labels.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>Label<sp/>L0(c);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>var0(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>var1(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Cleanup.<sp/>After<sp/>these<sp/>two<sp/>lines,<sp/>the<sp/>var0<sp/>and<sp/>var1<sp/>will<sp/>be<sp/>always<sp/>stored</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>in<sp/>registers.<sp/>Our<sp/>example<sp/>is<sp/>very<sp/>small,<sp/>but<sp/>in<sp/>larger<sp/>code<sp/>the<sp/>var0<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>be<sp/>spilled<sp/>by<sp/>xor(var1,<sp/>var1).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.xor_(var0,<sp/>var0);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.xor_(var1,<sp/>var1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.cmp(var0,<sp/>var1);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>State:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>We<sp/>manually<sp/>spill<sp/>these<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.spill(var0);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.spill(var1);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>State:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var0<sp/>-<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var1<sp/>-<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Conditional<sp/>jump<sp/>to<sp/>L0.<sp/>It<sp/>will<sp/>be<sp/>always<sp/>taken,<sp/>but<sp/>compiler<sp/>thinks<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>unlikely<sp/>taken<sp/>so<sp/>it<sp/>will<sp/>embed<sp/>state<sp/>change<sp/>code<sp/>somewhere.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.je(L0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something.<sp/>The<sp/>variables<sp/>var0<sp/>and<sp/>var1<sp/>will<sp/>be<sp/>allocated<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.add(var0,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.add(var1,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>State:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>label<sp/>here,<sp/>the<sp/>state<sp/>is<sp/>not<sp/>changed.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.bind(L0);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>State:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>use<sp/>var0<sp/>and<sp/>var1,<sp/>because<sp/>if<sp/>compiler<sp/>detects<sp/>that<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>are<sp/>out<sp/>of<sp/>scope<sp/>then<sp/>it<sp/>optimizes<sp/>the<sp/>state-change.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.sub(var0,<sp/>var1);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>State:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.endFunc();</highlight></codeline>
</programlisting></para><para>The output:</para><para><verbatim>
//! xor eax, eax                    ; xor var_0, var_0
//! xor ecx, ecx                    ; xor var_1, var_1
//! cmp eax, ecx                    ; cmp var_0, var_1
//! mov [esp - 24], eax             ; spill var_0
//! mov [esp - 28], ecx             ; spill var_1
//! je L0_Switch
//! mov eax, [esp - 24]             ; alloc var_0
//! add eax, 1                      ; add var_0, 1
//! mov ecx, [esp - 28]             ; alloc var_1
//! add ecx, 2                      ; add var_1, 2
//! L0:
//! sub eax, ecx                    ; sub var_0, var_1
//! ret
//!
//! ; state-switch begin
//! L0_Switch0:
//! mov eax, [esp - 24]             ; alloc var_0
//! mov ecx, [esp - 28]             ; alloc var_1
//! jmp short L0
//! ; state-switch end
//! </verbatim></para><para>You can see that the state-switch section was generated (see L0_Switch0). The compiler is unable to restore state immediately when emitting the forward jump (the code is generated from first to last instruction and the target state is simply not known at this time).</para><para>To tell <computeroutput>Compiler</computeroutput> that you want to embed state-switch code before jump it&apos;s needed to create backward jump (where also processor expects that it will be taken). To demonstrate the possibility to embed state-switch before jump we use slightly modified code:</para><para><programlisting><codeline><highlight class="normal"><sp/>Compiler<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.addFunc(kFuncConvHost,<sp/>FuncBuilder0&lt;FnVoid&gt;());</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Labels.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>Label<sp/>L0(c);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>var0(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>var1(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Cleanup.<sp/>After<sp/>these<sp/>two<sp/>lines,<sp/>the<sp/>var0<sp/>and<sp/>var1<sp/>will<sp/>be<sp/>always<sp/>stored</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>in<sp/>registers.<sp/>Our<sp/>example<sp/>is<sp/>very<sp/>small,<sp/>but<sp/>in<sp/>larger<sp/>code<sp/>the<sp/>var0<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>be<sp/>spilled<sp/>by<sp/>xor(var1,<sp/>var1).</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.xor_(var0,<sp/>var0);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.xor_(var1,<sp/>var1);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>State:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>We<sp/>manually<sp/>spill<sp/>these<sp/>variables.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.spill(var0);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.spill(var1);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>State:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var0<sp/>-<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var1<sp/>-<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>our<sp/>label<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.bind(L0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>something,<sp/>the<sp/>variables<sp/>will<sp/>be<sp/>allocated<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.add(var0,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.add(var1,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>State:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var0<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>var1<sp/>-<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Backward<sp/>conditional<sp/>jump<sp/>to<sp/>L0.<sp/>The<sp/>default<sp/>behavior<sp/>is<sp/>that<sp/>it<sp/>is<sp/>taken</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>so<sp/>state-change<sp/>code<sp/>will<sp/>be<sp/>embedded<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.je(L0);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.endFunc();</highlight></codeline>
</programlisting></para><para>The output:</para><para><verbatim>
//! xor ecx, ecx                    ; xor var_0, var_0
//! xor edx, edx                    ; xor var_1, var_1
//! mov [esp - 24], ecx             ; spill var_0
//! mov [esp - 28], edx             ; spill var_1
//! L2:
//! mov ecx, [esp - 24]             ; alloc var_0
//! add ecx, 1                      ; add var_0, 1
//! mov edx, [esp - 28]             ; alloc var_1
//! add edx, 2                      ; add var_1, 2
//!
//! ; state-switch begin
//! mov [esp - 24], ecx             ; spill var_0
//! mov [esp - 28], edx             ; spill var_1
//! ; state-switch end
//!
//! je short L2
//! ret
//! </verbatim></para><para>Please notice where the state-switch section is located. The <computeroutput>Compiler</computeroutput> decided that jump is likely to be taken so the state change is embedded before the conditional jump. To change this behavior into the previous case it&apos;s needed to add an option (kInstOptionTaken/kInstOptionNotTaken).</para><para>Replacing the <computeroutput>c.je(L0)</computeroutput> by <computeroutput>c.taken(); c.je(L0)</computeroutput> will generate code like this:</para><para><verbatim>
//! xor ecx, ecx                    ; xor var_0, var_0
//! xor edx, edx                    ; xor var_1, var_1
//! mov [esp - 24], ecx             ; spill var_0
//! mov [esp - 28], edx             ; spill var_1
//! L0:
//! mov ecx, [esp - 24]             ; alloc var_0
//! add ecx, 1                      ; add var_0, a
//! mov edx, [esp - 28]             ; alloc var_1
//! add edx, 2                      ; add var_1, 2
//! je L0_Switch, 2
//! ret
//!
//! ; state-switch begin
//! L0_Switch:
//! mov [esp - 24], ecx             ; spill var_0
//! mov [esp - 28], edx             ; spill var_1
//! jmp short L0
//! ; state-switch end
//! </verbatim></para><para>This section provided information about how state-change works. The behavior is deterministic and it can be overridden.</para></sect1>
<sect1 id="structasmjit_1_1x86x64_1_1X86X64Compiler_1asmjit_compiler_AdvancedCodeGeneration">
<title>Advanced Code Generation</title>
<para>This section describes advanced method of code generation available to <computeroutput>Compiler</computeroutput> (but also to <computeroutput>Assembler</computeroutput>). When emitting code to instruction stream the methods like <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aed8555f624e41277f2565916d27d7f61" kindref="member">mov()</ref></computeroutput>, <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a37c7e177895c7ffeaafc3536efcd7b40" kindref="member">add()</ref></computeroutput>, <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8901a8f15109bcaf4b92486fb5a325b5" kindref="member">sub()</ref></computeroutput> can be called directly (advantage is static-type control performed also by C++ compiler) or indirectly using <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member">emit()</ref></computeroutput> method. The <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member">emit()</ref></computeroutput> method needs only instruction code and operands.</para><para>Example of code generating by standard type-safe API:</para><para><programlisting><codeline><highlight class="normal"><sp/>Compiler<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>var0(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>var1(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.mov(var0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.add(var0,<sp/>var1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.sub(var0,<sp/>var1);</highlight></codeline>
</programlisting></para><para>The code above can be rewritten as:</para><para><programlisting><codeline><highlight class="normal"><sp/>Compiler<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>var0(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/>GpVar<sp/>var1(c,<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>...</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/>c.emit(kInstMov,<sp/>var0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.emit(kInstAdd,<sp/>var0,<sp/>var1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>c.emit(kInstSub,<sp/>var0,<sp/>var1);</highlight></codeline>
</programlisting></para><para>The advantage of first snippet is very friendly API and type-safe control that is controlled by the C++ compiler. The advantage of second snippet is availability to replace or generate instruction code in different places. See the next example how the <computeroutput><ref refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" kindref="member">emit()</ref></computeroutput> method can be used to generate abstract code.</para><para>Use case:</para><para><programlisting><codeline><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>emitArithmetic(Compiler&amp;<sp/>c,<sp/>XmmVar&amp;<sp/>var0,<sp/>XmmVar&amp;<sp/>var1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op)</highlight></codeline>
<codeline><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>code<sp/>=<sp/><ref refid="group__asmjit__base_1ggac34fc57ca3f35b031f715fded4fb35f3a40322f3634e1579cf825c83e286dc39b" kindref="member" tooltip="No instruction.">kInstNone</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(op,<sp/></highlight><highlight class="stringliteral">&quot;ADD&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>kInstAddss;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(op,<sp/></highlight><highlight class="stringliteral">&quot;SUBTRACT&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>kInstSubss;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(op,<sp/></highlight><highlight class="stringliteral">&quot;MULTIPLY&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>kInstMulss;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(op,<sp/></highlight><highlight class="stringliteral">&quot;DIVIDE&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>code<sp/>=<sp/>kInstDivss;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>parameter?</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>c.emit(code,<sp/>var0,<sp/>var1);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting></para><para>Other use cases are waiting for you! Be sure that instruction you are emitting is correct and encodable, because if not, Assembler will set status code to <computeroutput>kErrorAssemblerUnknownInst</computeroutput>. </para></sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="1262">
        <label>asmjit::CodeGen</label>
        <link refid="structasmjit_1_1CodeGen"/>
      </node>
      <node id="1261">
        <label>asmjit::BaseCompiler</label>
        <link refid="structasmjit_1_1BaseCompiler"/>
        <childnode refid="1262" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1260">
        <label>asmjit::x86x64::X86X64Compiler</label>
        <link refid="structasmjit_1_1x86x64_1_1X86X64Compiler"/>
        <childnode refid="1261" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1266">
        <label>asmjit::BaseLogger</label>
        <link refid="structasmjit_1_1BaseLogger"/>
      </node>
      <node id="1267">
        <label>asmjit::Zone</label>
        <link refid="structasmjit_1_1Zone"/>
      </node>
      <node id="1268">
        <label>asmjit::BaseRuntime</label>
        <link refid="structasmjit_1_1BaseRuntime"/>
      </node>
      <node id="1272">
        <label>asmjit::BaseVarState</label>
        <link refid="structasmjit_1_1BaseVarState"/>
      </node>
      <node id="1265">
        <label>asmjit::CodeGen</label>
        <link refid="structasmjit_1_1CodeGen"/>
        <childnode refid="1266" relation="usage">
          <edgelabel>_logger</edgelabel>
        </childnode>
        <childnode refid="1267" relation="usage">
          <edgelabel>_zoneAllocator</edgelabel>
        </childnode>
        <childnode refid="1268" relation="usage">
          <edgelabel>_runtime</edgelabel>
        </childnode>
      </node>
      <node id="1271">
        <label>asmjit::BaseNode</label>
        <link refid="structasmjit_1_1BaseNode"/>
        <childnode refid="1272" relation="usage">
          <edgelabel>_state</edgelabel>
        </childnode>
        <childnode refid="1273" relation="usage">
          <edgelabel>_liveness</edgelabel>
        </childnode>
        <childnode refid="1271" relation="usage">
          <edgelabel>_prev</edgelabel>
          <edgelabel>_next</edgelabel>
        </childnode>
        <childnode refid="1274" relation="usage">
          <edgelabel>_varInst</edgelabel>
        </childnode>
      </node>
      <node id="1264">
        <label>asmjit::BaseCompiler</label>
        <link refid="structasmjit_1_1BaseCompiler"/>
        <childnode refid="1265" relation="public-inheritance">
        </childnode>
        <childnode refid="1269" relation="usage">
          <edgelabel>_vars</edgelabel>
        </childnode>
        <childnode refid="1270" relation="usage">
          <edgelabel>_targets</edgelabel>
        </childnode>
        <childnode refid="1267" relation="usage">
          <edgelabel>_varAllocator</edgelabel>
          <edgelabel>_stringAllocator</edgelabel>
        </childnode>
        <childnode refid="1271" relation="usage">
          <edgelabel>_lastNode</edgelabel>
          <edgelabel>_cursor</edgelabel>
          <edgelabel>_firstNode</edgelabel>
        </childnode>
        <childnode refid="1275" relation="usage">
          <edgelabel>_func</edgelabel>
        </childnode>
      </node>
      <node id="1277">
        <label>asmjit::JumpNode</label>
        <link refid="structasmjit_1_1JumpNode"/>
        <childnode refid="1278" relation="public-inheritance">
        </childnode>
        <childnode refid="1277" relation="usage">
          <edgelabel>_jumpNext</edgelabel>
        </childnode>
        <childnode refid="1276" relation="usage">
          <edgelabel>_target</edgelabel>
        </childnode>
      </node>
      <node id="1275">
        <label>asmjit::FuncNode</label>
        <link refid="structasmjit_1_1FuncNode"/>
        <childnode refid="1271" relation="public-inheritance">
        </childnode>
        <childnode refid="1276" relation="usage">
          <edgelabel>_exitNode</edgelabel>
          <edgelabel>_entryNode</edgelabel>
        </childnode>
        <childnode refid="1280" relation="usage">
          <edgelabel>_end</edgelabel>
        </childnode>
        <childnode refid="1281" relation="usage">
          <edgelabel>_decl</edgelabel>
        </childnode>
        <childnode refid="1283" relation="usage">
          <edgelabel>_argList</edgelabel>
        </childnode>
      </node>
      <node id="1280">
        <label>asmjit::EndNode</label>
        <link refid="structasmjit_1_1EndNode"/>
        <childnode refid="1271" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1263">
        <label>asmjit::x86x64::X86X64Compiler</label>
        <link refid="structasmjit_1_1x86x64_1_1X86X64Compiler"/>
        <childnode refid="1264" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1273">
        <label>asmjit::VarBits</label>
        <link refid="structasmjit_1_1VarBits"/>
      </node>
      <node id="1282">
        <label>asmjit::FuncInOut</label>
        <link refid="structasmjit_1_1FuncInOut"/>
      </node>
      <node id="1279">
        <label>asmjit::Operand</label>
        <link refid="structasmjit_1_1Operand"/>
      </node>
      <node id="1283">
        <label>asmjit::VarData</label>
        <link refid="structasmjit_1_1VarData"/>
      </node>
      <node id="1278">
        <label>asmjit::InstNode</label>
        <link refid="structasmjit_1_1InstNode"/>
        <childnode refid="1271" relation="public-inheritance">
        </childnode>
        <childnode refid="1279" relation="usage">
          <edgelabel>_opList</edgelabel>
        </childnode>
      </node>
      <node id="1270">
        <label>asmjit::PodVector&lt; TargetNode * &gt;</label>
        <link refid="structasmjit_1_1PodVector"/>
      </node>
      <node id="1281">
        <label>asmjit::FuncDecl</label>
        <link refid="structasmjit_1_1FuncDecl"/>
        <childnode refid="1282" relation="usage">
          <edgelabel>_retList</edgelabel>
          <edgelabel>_argList</edgelabel>
        </childnode>
      </node>
      <node id="1269">
        <label>asmjit::PodVector&lt; VarData * &gt;</label>
        <link refid="structasmjit_1_1PodVector"/>
      </node>
      <node id="1274">
        <label>asmjit::BaseVarInst</label>
        <link refid="structasmjit_1_1BaseVarInst"/>
      </node>
      <node id="1276">
        <label>asmjit::TargetNode</label>
        <link refid="structasmjit_1_1TargetNode"/>
        <childnode refid="1271" relation="public-inheritance">
        </childnode>
        <childnode refid="1277" relation="usage">
          <edgelabel>_from</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" line="1215" bodyfile="/home/ryan/asmjit/src/asmjit/x86/x86compiler.h" bodystart="1215" bodyend="3995"/>
    <listofallmembers>
      <member refid="structasmjit_1_1CodeGen_1a26c78e4494d88ab9805496e023d3baa0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_arch</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a6cb1a30025c1ba27490c5a9af56d9db4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_cursor</name></member>
      <member refid="structasmjit_1_1CodeGen_1a80674754a2e660567710113a61823594" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_error</name></member>
      <member refid="structasmjit_1_1CodeGen_1ae1a02cc46e87087c0c1b79c35849158f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_errorHandler</name></member>
      <member refid="structasmjit_1_1CodeGen_1a835716d06498d34b53a56a8565907d28" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_features</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a277d26b04a7c77b681b2aa4bb3153259" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_firstNode</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1afa054f0e028aa072a6b54a38e182812a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_func</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a19910ee3377191fbe806433bd057215c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_getVdArray</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a4fdfaf23e3ebb405a6fce1fa80c1c4c6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_lastNode</name></member>
      <member refid="structasmjit_1_1CodeGen_1aa548a9a7f87d7cbf4d34755c3cffa17b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_logger</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1af1693974a88dc5f515a77efbfa3576db" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_maxLookAhead</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1acd732ff3666fedb2a09d2cd127a9d942" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_newLabel</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d9fb7b8d7cb33e3b327bad6c28202b5" prot="public" virt="virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_newStack</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0962b154aaa99a436acbc67f29d0ac12" prot="public" virt="virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_newVar</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1acdb52f3841097c7f335c15ac6c221402" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_newVd</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1ae7811102fca26efd20d13628125ca9db" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_nodeFlags</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a9928c755a7d0cfe65fbb928efef40977" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_nodeFlowId</name></member>
      <member refid="structasmjit_1_1CodeGen_1a4fb02f71d3669ae2345645490a4b1539" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_options</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a9bb0e088212274bee8c2fe7fa5279d6d" prot="public" virt="virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_purge</name></member>
      <member refid="structasmjit_1_1CodeGen_1acbfa512e3ec91bff2364d868d2da3280" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_regSize</name></member>
      <member refid="structasmjit_1_1CodeGen_1a64fd203c2592221acd076eb8800acfea" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_runtime</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a9424cec63c505e47aae9e376d9f8a752" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_setCursor</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a72e0dd87a5728952e65969dca03bb7a6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_stringAllocator</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1ab1e68c5e9b3194a92f874f6f702b4128" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_targets</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a628212c11a148a6d4e63f2828f78a1cc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_targetVarMapping</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a4d491c8178d555cded21ef092455122c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_varAllocator</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a88ee18bc8626c78793233d684ba8eaef" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_vars</name></member>
      <member refid="structasmjit_1_1CodeGen_1a48c754a0ff7c8b76c0b0f1c9c4652a29" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>_zoneAllocator</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a23f394e50720250b658ad50f1a4a3719" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>adc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9a5901641713c61e8ca96aa293e12593" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>adc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a80cac8bec17bdf3dbf247d2bfb4949" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>adc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6a99cc0a5a0b7de92f49c3b05344df80" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>adc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7c16966ae671cb1c7e451c82b17a048" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>adc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8cd80983c5c08bd6f4940894238f7662" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>adc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2982ce57357c1b4178a10c17d4baf198" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>adc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a37c7e177895c7ffeaafc3536efcd7b40" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>add</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73b8b383a992e8da2ee123d2f1ae082e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>add</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a08b8f00c2cf9e40443480ffc4c1b223e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>add</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af714bdb54c54e2997dfcd5f7cfb76e4b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>add</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa2ec051f1e17c34153c2e9e3c6e645d7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>add</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa5ff93f4dce31944026061052d024d35" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>add</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abae05ef8e2d74f0caeee04c486a5f8a6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>add</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1af69209313ac46fdbac3de52a613f44ca" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addAlign</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c211bbb8bac7d8cf10ec2410e38aca0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addCall</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a722b06b738b08acdfeb3559796fd4f7c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addComment</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1ad99bcb737fa3489e3d3d120f979b1793" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addEmbed</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a37bc8aee85db0136f85f7f27123dd522" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addFunc</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1abbd6d4c4b95647520ba3c798e67f67f4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addHint</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a3e3feac0cab656ceb360cdb6498393ff" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addNode</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1aa4d5d57d89518fd8d3224bebb8e9ae4f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addNodeAfter</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a0cb4ee83c430e485d57f6c18b6857b9f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addNodeBefore</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ba63ef015fd28dbaa37dc5ba01bd991" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a43e266965f126f825dd1f7aca1fede4f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac85e5c64f0b5b9f4435cd653390ca8dc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a60feb051121edab0bcecacb114a32704" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af3c42c808f44535e3e2eb4209e7ab642" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addRet</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d5970c4014057b00080bd58b1b08b6b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6042e4dccc0e7846f39d57a500cce4ea" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aba0f15c2c3b2e8466ae27fbf08cea262" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa5bb6121b9039eaa8b010f21b51ffc54" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f635858f805d754465d37e778a1e8cb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addsubpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36b01e4cd81127b3078f8c5600fdcf25" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addsubpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade964d2387cd311cd45684468a80041a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addsubps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac331393450d4930b78c07a948803955c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addsubps</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a8e765ab9c84303bbc7cd50cd48978f74" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>addTarget</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a491a77840021294403438f5654e9be49" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aesdec</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa157569aa6c3ac5d75d601655c5f2ae5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aesdec</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a361aa644c40abe73d28d3546649c9427" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aesdeclast</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab5831db70f119449997ee59328f7bf7c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aesdeclast</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79ea3fe4b28a1cab55a80bd73cd87532" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aesenc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad24fa249a4e58fe15a9a93dd11338835" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aesenc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96096517869da941ff009efe2ff9094a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aesenclast</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a399af2c3c64893ec9200449ef69933b0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aesenclast</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a608d404fc477cc28fb483b8befde80c9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aesimc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b9132ccdbe5357c25c3e9394822e5e5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aesimc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0dc7cdda47edf2ec1a52c84d32a54fa8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aeskeygenassist</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abda52a36e0911dae054158fc4a2caf3c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aeskeygenassist</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa59e7703b2dc15c870a7bc23a638a873" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aeskeygenassist</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a85a4da1207c71eb1f95f915e29504e0a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>aeskeygenassist</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1aee491d0c270a38b9e3154e74be9ddd4c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>align</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a9887abcaf860aff3620f790071659a47" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>alloc</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a798bd50e7faac48769efd933fa7746d2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>alloc</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a3c08591c6376c4d9f042183cd5c3fb61" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>alloc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3af459a9d9964da7610f817c0f82a1d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>and_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac936ab35308a2a35824049ae57051e3a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>and_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a426f13308d2365da9a27faca833d9909" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>and_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2ca1a329420c06bc34f7bea585ea6716" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>and_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a885f5046a66bc3485209d181ec350963" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>and_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2938da08584a201c635b5fb91e77f222" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>and_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a80162cdcca326f56d3a7e01e3ef3f803" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>and_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a84d1eb207883ddb33b68b51350443ac0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>andnpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2dc7b59a96149ad4cf3b43d07fe76b4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>andnpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e3447dcb8b4873856b5cf2d8a0d616e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>andnps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1117ba895da3469729a5ffda6f656efc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>andnps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a095b6f856f02f87bcac85f61dacc0179" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>andpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0edb3a8f3a37172ac36dbf5fe8b7036" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>andpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae4fa1c3a76a32a1347ddbb68f21de56a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>andps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaa2bd13989df0f4e89f1d098f786eff2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>andps</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a7405f38e199666f295043fa1197e8c60" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>BaseCompiler</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a79453ba71cbe71378808768bd51a4326" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bind</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872bb9410d7b35ee74128be9855ae932" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3dad15b8cc89d783820c74692cc0064e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afcc40a7e124fc2b4c94f8ba26f4e6a2e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abf16dfb91a30c4cd423cce22c2bc09f2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e6105636f75c06a62d3a0cc7c679b85" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a327983e688d72acab945037d4e8f4109" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6698adc7fc8c9580dc16fb26a76f1e63" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afae9800707024ae89fc1e788406e63a4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a912a0773bd30b5eeb2f70f52d83ca22d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendvpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42029e45f201adac20b125a92a4875cf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendvpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a919a687afa8776351d506f8a575af495" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendvps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a213659ebac73d53d4197ff555bd184ed" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>blendvps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a418c282c528153dec1092963a78b6c60" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bsf</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95d85dfd24bfb7109e192165ec1fd2e8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bsf</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac202154b577e23342bc61454088663a2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bsr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac71fab03aa5a95dae1d294fba7828706" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bsr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8816df859e5fce1302cea819853ead2f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bswap</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ec66bfb37b4cde8d0bc93f2ae5020bc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a739c607e0f84ecb4338595692d01bf4a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac2350685c1bd7ea57ffd9cde858d4e44" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a360804ca332277edba328c55fe79f0da" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a142f546aa55847ee63741f3553a6d2cd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d51828901f68f64a7c129de858a6765" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe9ceb332a5c597c4b4a6a016981c85f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a02df1a8c03aff2c52b855d747d8b97e4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8be126491b2883c35240c07cf1a58497" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade9e499fd02dc97e9e0b63a3b1955336" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac04f0ba2c56c1e53f60328cef5c1d364" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab9e7c58cb00ff959f0e97644c6913959" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a00c644f2e672c460a49682d6abf63cd9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2c5f229a065c1b717f8802fec25d0a1f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af170839bd6d015c9f3661084f31d2b7c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af7bb8330a30fec76bab67b7387384174" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe49f37d64953216e6ef7e94280d3d38" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7375fb44d6a6d56a1463df9c8fba4c6c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>btr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8a2e21156c4ed3401c37feb0430f377b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bts</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a598ab82900d310abb03d22351077f73e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bts</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae55e7aa1e260efcb39f18d3fc296c28f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bts</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7dbd6a93a071f7cab10e8e6345eafd88" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bts</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa2c9685ab3f6fa623ec2fca9ab75a591" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bts</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3994ceea4888fb70ef636bc263c18833" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>bts</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa41fa68c7f7070da0aec2ae44f0b8e00" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>call</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a78c6bd8bcb63beda9bf841c9cc32e8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>call</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70739a1464211c7dd7b9064a8275aa90" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>call</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a056c7354058e6f44265dd666ca31fdb8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>call</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf970107c41569a2abc54ef5489da64d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>call</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96bda354d73ef98d78b7a2443fd229eb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0349306595d0af510fa4e8d45d5a6b25" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07b39ead4d18aacf700eff62c8eb4d40" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>clc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acd9b7abf95f9533e6b2c5b2882df311c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cld</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1afff080faca3b4a0ef878392ef8406efe" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>clear</name></member>
      <member refid="structasmjit_1_1CodeGen_1a20674b359509b562f6079bfef6342692" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>clearError</name></member>
      <member refid="structasmjit_1_1CodeGen_1a0f1f14151bf464a31a3bb1a7f69e9bfe" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>clearErrorHandler</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab36c65eedc887fb2738bda33599c4706" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>clflush</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc5a4a77840e064776f3b12592c08a93" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a585af1881d98b46bb53c5e79a96e33c0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7ff69d129d1b73da9b818f902cd8ccb1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa9e5c2ef9bb98c54e2ad7a93abf6efa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmova</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a8c0e7a6f2c92276e881349bdc7b33a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmova</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3949964cc6f6ec3a8df37ce2ba6f31c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovae</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d958498fe4c06d5b779dcc3e9bae4e0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovae</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a840215c7fbc84e163114f9cee06ad014" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa875fd61a62551c5b1ad49d60ccd7be7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af5ca43d89ba308c3357793cc2707f9b5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2a3cd3ebe6162ffa4fd348fb75dbc9d5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d36b656244c8799704f4c7b98e6174f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf05e4b5e2753047486c488b40918d38" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac31a05e21e9a7eac40ee425411759470" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmove</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a99f33ccb1392a7c8424e2ecab35f31af" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmove</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0e6b1e7e5a45df9902cae546fcfda062" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66951c1235ae862474465caec66d50f4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a04004857d2715c96b87e8b1216e5b053" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac5495c2df2f0823cccde62b0ebdb1792" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8b0448004fccf976364963ca1ee0e271" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af545ae279a0c049075894d08e53b9ecf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8cd5a26089f2fae0c914ea78619208f6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovle</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac6b337079af4207d8279cb9038c1b916" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovle</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab0c55fcadb68d1304447d8780ccadc71" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovna</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab74f3e304de1d4f909fa645ab5cb55ea" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovna</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5adb451bce0f3d0275b6255e9410ec49" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnae</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a33502010dbf0b98a4e6ba0a4752a0d89" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnae</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aca3ad41ef11d4c000619b6d0c81208a9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7436534d27cc95186e80d0704e58b747" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aebbda390780686046e5eed972d96eaf7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac89e7b6add832ad268f7f5f8f65b1b86" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1eef6060b4ae5ed877dccd2cf52dbafa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1affcdb7520f2d61297e4daaf5cfa4edb7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad38fb2118335f0a6f45f331605fed0b4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovne</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acabe55bc027b4bbb026c84aa0be51a0d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovne</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adcaea9efd88d9af9569c9c7753f754ee" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovng</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a85b531377172c0fb3efa787b025e1943" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovng</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa005aadd77125b7152a0d0178dd2cd48" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4606f328b9680944cb77941dfdf4ceaf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab7c07cb026b548d5e2d57f73e6c57319" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3b477f4b1138fea147eadab037dd0ed5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af09908fb6290e8520069072a783c5e09" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnle</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad837e82e5b4bc23fa90690a701a6d40" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnle</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41236f06057ffaa9b2a64475b47bc1bf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovno</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3a532b9020d74a35cc3a7778727e64c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovno</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7555976e13d31a3049257f9b20749f8b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad8ddb410020c4fcb90ca6cf65159cba4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad94a0435ac837bf14666454232e59f24" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovns</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3b4282318568253273e12b6e620f0b66" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovns</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7630f1c76be87afbbd58e2a0252ce02b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnz</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a93c57f6233716023e5c6212afad91d41" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovnz</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a163287b77abd99e810d4e87fbeda5f6e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovo</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aecf0a925275d089242cd0cfc1bad2383" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovo</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9ee82e28dbdc328a412f09d4ba3ce168" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d783e5fcbff15aba101cf2190f38ea5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae67470dd08f77179ad9dbeb224f012dd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovpe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a905b55a0b0bc4e3cd1f617cf4046613e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovpe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a418190ec243f809e716ff71aa63f9cfa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovpo</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4e940cd613492d90ef0749b398996a0c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovpo</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9db8793a201ff7fb1e41ac070253d6f8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovs</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a97d2a09fab8799a0a9bdbc2f5180315b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovs</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1289e2d70a4c75fd2386985c7386079b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovz</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a51ccf3b348b02f6ab67e836c037bdbfb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmovz</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a86ea5d8bd088a5129f671f0e1c20cae3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaa6fad5ed68a004b7b2bf40d516e8c58" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f32ff89caedafb8772f4e7b5a9bf9c5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa2136a1bebecb2d448eaa5cfcb24638" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1553ea527761a2a647e94210c7cbd254" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a949564caca1756d4456686b194d13ec8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afd8a26ebbb0bbf218e1b7befd3ce2e4a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a516b0a27c81b92b75c5e24c038c64106" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmppd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a099dff33474aa8b65381687a11d10190" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmppd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d07c01ebc53c145065b645c8ddf14be" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmppd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4f5498cbafa1ef5613c98ac328b91569" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmppd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae9f99a706f185191ba7e5c44c1e7ec10" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae4c542401b66b3dd7c43770f833454f6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ee0da2a288f2391cc2464e876ac1414" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad34648182b9ce41a11090c33bf800ca5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af019986f1fe96ee9f667bfb05e0c5570" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5412b78e7f7b860cc3ccf929be2d7ba9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abbd03059a613ffb7d80a434e85af2e0e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af95d96caa1f2f56b09a0fd2b5b09d084" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41284ace24e95221b3436bdfeb469431" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ab3a10b839f4672bd81842c04e46d5a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96a498675cf7dc476b46c70d95e1bd7c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1add716bd0315630067d141431949a1f04" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41202c94f73489c2ca3dde54346ab608" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpxchg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79dfaf56f31dbf3d1326926159775c7e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpxchg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fecdbc314a40bcdc9c1082d55c6308d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cmpxchg8b</name></member>
      <member refid="structasmjit_1_1CodeGen_1a3e5282956457ed71030395c96b753225" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>CodeGen</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbcdee1ea8d0be154cb53816a9d8e5e7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>comisd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4eac8e77d3d151797d633621319987ff" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>comisd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f265af8aa3b9cbeb748c9ab07f78345" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>comiss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aacacfa4ba7240036e8e00b581067ba41" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>comiss</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1af501c8ac8635d94c0fa28dbfa2c9701f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>comment</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a19c941a097527535d1e59ecc333cb7b5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cpuid</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1d7d834d5e3f74ec03e461f60693207f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>crc32</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af89a591f66886a62c70d1fc8785742f4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>crc32</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf4cfe911acb2abf3874a3d94f2053a9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtdq2pd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1accfdd79c9d108b9686d326bb79b785f2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtdq2pd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad33522db0add8f99cbe2642a2ec3f78" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtdq2ps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2036c1a3b93170b325c9f0062ed75e3f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtdq2ps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9d4f3bca1d13960e0dcfea3bf5ddb3ed" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtpd2dq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a32b34acdf4c6247eb795eb15c56f5614" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtpd2dq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a47a13f24ee14c156860d0588538cb5aa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtpd2pi</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe068c7af8e2fa4074f4b2aca253d81b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtpd2pi</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a63df5ad4b651016e4481b0f17ea85c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtpd2ps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a44ac1d63d42063c6aaf7c2275f20c023" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtpd2ps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2a98c07bc4593dad9b95398e31cde61" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtpi2pd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe04a4b92986116d85102efe736e3113" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtpi2pd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa6e14017cb7f65de4d4d1da225f031df" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtpi2ps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9083630bc46f8f1f963d49deca43e534" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtpi2ps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acda2bb660b30d030b53290cb867e1ccb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtps2dq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a18e2440b1b342db43fa4a63004ace3b8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtps2dq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae6cceb27f7c80d9db150b6b88b594f3d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtps2pd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a61d517777d19ec79bc2431dc2547f443" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtps2pd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a023326c36d12261ffd24011cd8eb996c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtps2pi</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afff4316bcaaf1b4b5fc1fe31bbf10f69" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtps2pi</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb40598c2459e5a76d723d39f89234fd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtsd2si</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af07deb9f81a1b08735c282878667ea4b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtsd2si</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0c7c24f0abdb24a22d33c9f8bff1903d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtsd2ss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30ae1b527a7daa8215745cc924a138a2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtsd2ss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad35ab7d8ffec802ce21b6a46bd200a31" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtsi2sd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a51ed83732d540114841a988c560e2749" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtsi2sd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4d02801886a6ea95d25e0d51ce658a32" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtsi2ss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae78d5394a6763b076d516a2c1a6f32f9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtsi2ss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b843ba29233f20ed1ce92cff8687243" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtss2sd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4cb949dc10daadc0ccba923b93068764" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtss2sd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a743215648c239d85028f3cc98a116e7b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtss2si</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9ff3cdc5289b1bd6f12564d2f5f70b55" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvtss2si</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96374e752c1417d94697d7c04ff1b1f7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttpd2dq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa31d9a23d4fdbac92e7da1d69d78590d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttpd2dq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5e7369e624cafc40201a89203db6db0b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttpd2pi</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1a711d2d72290c625022791655b54db5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttpd2pi</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a31c142eb74f4814c2cc22eab3347b47e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttps2dq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0c64c6f078e0122344d5c1615dd4bce" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttps2dq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ec275e00c4ac98155598bd5474d10fe" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttps2pi</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4bd56f2d95771b82c56134b3ade44019" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttps2pi</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5fdfae0506c84f79f838933cd352ac4b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttsd2si</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adc356ff240209e912c1e72a6be7d431c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttsd2si</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad21e9bfcd6d8291a4df1057284c05edf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttss2si</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a93ea80b2d4a6390e01b3bba78bc823" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cvttss2si</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e34e3ac2fda37c19c8677f363a15804" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d10570860aa6971169bc6a75ec4fd53" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>cwde</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad4464655c36cd55f4955dca238c52f83" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>db</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6df3589e0c252fd17b2b4029b90adca7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4c6a2be22bef9c6f370023d6d9b1ad6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ddouble</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec0851ea27c14395707d2fd6a2237fe6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dec</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36fc55a484798fd2e3f12a126cbb3e7d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dec</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76a5474b0fb62bba2cf29e38bec1516e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dfloat</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1effc4b31d1e1ab9451a5495e9df6c00" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dint16</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6f8bb23e9a8b63560c540d84de0c7eb2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dint32</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a193b389ed59705a7f2f5005dbe83f338" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dint64</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf1211770f6b58916375a85d7e3ef53c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dint8</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a629ffef33b3354224ffc8c168738422a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>div</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad091cb3328c660106f52bc91807e2f4b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>div</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab58e63fb78244e2c05515bb476ff18d7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>divpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0e6304fa57d5d46845c98aadc148b42e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>divpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a17452086b8be1de2e6e491f39b388928" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>divps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd5b4f0bfcf231302e26f0ae0bba0cf1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>divps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a54907e1320b6ff940eda795bbcd74c45" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>divsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a097727fbd43217057f84c7046d85efe3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>divsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a49eadf01b6cccc999e7627aa227868c0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>divss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76ba48aea6d454659b26762467ecc028" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>divss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf09a0d58c5ee3f8002be181db1ebfbd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dmm</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aadd7b19c764c76ab332b51f35bb855c8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dppd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f3d2f5b87e9b5f744b3cc4a28f17d58" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dppd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5442e4966bb0fcd68ee9eeda01445cf1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dppd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a0071a475367bc4b86d38a3928d2541" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dppd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f2f8bd38f40af0f70eaf28eab16afc6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dpps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa8067c1f4135834a46ba9a455ec95d23" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dpps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14cdee0e8c97555ca0a895659f2badf7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dpps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a064bc109c9a2869cdccf1d0cde4e05b7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dpps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae47eacd7a07027b46025c2dded2a4d14" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dptr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a61c053a876f282c30e129f4134ab7372" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a340cced0bf25827c505ddd6527b080fe" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dstruct</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a98e0f0dc6d1dfdb9e42acbf488692e79" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>duint16</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ea902788572d94f1d63eee7576bc13a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>duint32</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a334ced2272d029ec9048552ad5ec2270" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>duint64</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82c2e70cdf9a27465b2549199867b8bd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>duint8</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3bdf68fd6842743327026df289fa9b2e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a021bef6ff59c63b19d2d2b809d07f2fb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>dxmm</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a505588623f233dbf5c227fcbed17155a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>embed</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac40f2041265d35639c65ec4a79065b04" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>emit</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4d37f5c11b9478e61f4640b2358ab756" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>emit</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af422b5b2b6df8d931fcfe8ea53f7a1b7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>emit</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2954b46b4ea553d69a73a77c21aafd8c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>emit</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a813689e2bb11af5c58d6b4dd12bf8694" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>emit</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0e65a80fe36ae2e231337c327aee2ac" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>emit</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9c2dae18e413ace382ee6a44471121cc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>emit</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73db9fb68da9d7a22a7614efb5d6f8e2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>emit</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d2ea71e65fec96f98498ec372bd51d5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>emit</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef638b7e81a34c45769fa8de642a47d6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>emms</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae1a5b508ee29fb5e6037595f986a16a4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>endFunc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2a434a5fb4e968d794950f04a72d92e9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>extractps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af7d16625a4a7c42447b20317e53ca5fb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>extractps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad91c5223001a916b5261aac267d91692" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>extractps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa96ef3c4cdf7e44aeb997ff8873963a3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>extractps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a39ffd6f6a6f4b470fe002ef76180e802" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>femms</name></member>
      <member refid="structasmjit_1_1CodeGen_1af0de6375faa88373299618dc893c6e02" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getArch</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1ac895c34efb7f107ef1cc34fb277aa77a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getCursor</name></member>
      <member refid="structasmjit_1_1CodeGen_1a44e04ba3f82ffa90550d7227603e643d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getError</name></member>
      <member refid="structasmjit_1_1CodeGen_1acefc96c0ac363fcf81625d232ed3d34b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getErrorHandler</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a691ca99350207a8a9ed20b2851c8e010" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getFirstNode</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9419277c77af58ddd9d4c813f847cc0f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getFunc</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a864ab9b2610cb527070455f3e5e893f8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getLabelsCount</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a9461d4f3a68f11e07a22d5d0181ae0d1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getLastNode</name></member>
      <member refid="structasmjit_1_1CodeGen_1a74d11332a9175e011875b1fc63599f8e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getLogger</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a4be1b2c2b911122b2f50967c820340a1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getMaxLookAhead</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2255f7e21de773b532660deface8041" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getMemoryHome</name></member>
      <member refid="structasmjit_1_1CodeGen_1af8f725cbd3aa4c226ea0fc7175d0a92c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getOptions</name></member>
      <member refid="structasmjit_1_1CodeGen_1aab3bc0b503327c62bc7d952d41365705" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getOptionsAndClear</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a5a9364098d19d82b88c1a60e964369e5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getPriority</name></member>
      <member refid="structasmjit_1_1CodeGen_1a25290524d42466e7f341f0c41790ab34" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getRegSize</name></member>
      <member refid="structasmjit_1_1CodeGen_1a3d7daab958f99527363d5d97a0d32a0d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getRuntime</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a36d1e8d735fb1e7151ee5ccf6ef2bbe4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getSaveOnUnuse</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a9b6ebe8c5a3a53f755186ca84fa8a975" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getTarget</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1afda181597fca17f0b3ea3864820431e7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getTargetById</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a3468dca5f11839752d82a0fe2cbe25a6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getVd</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a31224d17544cd4932d003e310473ae01" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>getVdById</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0107e8a0d40a189a824308317dc388f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>haddpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad4782b0a4f138c62f05a60bf783ae62" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>haddpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a238fa4b58a0f24834cd3cca9dc5a35a6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>haddps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73932cdf49f5a333ddff598fc727f014" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>haddps</name></member>
      <member refid="structasmjit_1_1CodeGen_1a87c1df0563f369232f67d7d869710c65" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>hasFeature</name></member>
      <member refid="structasmjit_1_1CodeGen_1ae747a5b9778251fd11943d0f8a00bedd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>hasLogger</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b4f635b03dbdf7ef00db798f36a879b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>hsubpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57c5a8c09b768baf8f69c25c53b95e18" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>hsubpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9fb59a2617d897b4694b4444e19b59c3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>hsubps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0cb75f7eb9002475f4382cafcd7ce514" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>hsubps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1938b6615f97dc3c970552c35696753" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>idiv</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a532bf85f7fb4ce1b7d64286ec67909a4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>idiv</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad8e31bc43c5825dbf9c2e46f068301b9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>imul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adcc003810acb79e972dfb20cf5eb495e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>imul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad31b4f2e1c1058d78ee7b1720c2baaaf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>imul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58a0b19a22837f0632013a2e34cc9c24" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>imul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1096fc97f7928ef9aa932bc2ebcacfbb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>imul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2abb0f7a892647af62013c3b2176f4a2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>imul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee585ee23326894f6834d9d9666359e7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>imul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96755509cc48bc3c3bb20ebec3145a8c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>imul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70ea5b8424ea5abeceeb57fc653d0810" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>imul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c3714ce4ce46e2e23177745d19ebacf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>imul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a75aa4bbf2d4bcd773e3614fcb9afdcb4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>inc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac55aa19c903aeee19bb91c6063da532d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>inc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4dd05feb7d3d80f69c4c952beb8a67fc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>int3</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e233f556c1269a06d7bf44311672ee3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>int_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad644bcb0e9dd41c630495b58b173e3f9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>int_</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a731cc8cf46fa9456d9da537338975308" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>isLabelCreated</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a47d45c3cb329b30627222ecbbb033490" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>isVarCreated</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a28bcac7a270da9ff6c1a615c343a50ba" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>j</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a908cf15a4679a5bebee453f154399589" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ja</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acdf9f4cabae5b8e5475282e7271abd9b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jae</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab7fff8f8a8153ea972df12d624e41012" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e4f311fcb524246f6c9e32b8262e1b8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afde257cc0f5873938687955c94361871" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9933be546ae631aa5fd226618d0fe1df" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>je</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b92d6e4f5bde388ba570556719339e6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8ee4daed780dd71dab368bb7d7de34a2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2beed39f98e1411b1b01d1205c4d66ce" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a056664e359ef39528b4cc6d1834971b5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jle</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a389bceea77b5d3631dccc33df334a80b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2d7b5aad95e6d761a13800ef62976fc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76abad105294f6391ed6f53d4b3a5a6a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af088b3f2bb793af45cdbd006545d9b7b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab38d1e6f5782e17e30ccd2ad264ddd2c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jmp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1752058dc8577111eff655a1f832615" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jna</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf661bf68f3dce5c3b378314888a68fe" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jnae</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2c648bc22593019a30f9d613f9640dce" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jnb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8ffbae89c99aa777dbedb5706bd2c8cc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jnbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a533e2eefd54720cd7da555449694da67" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jnc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeae2b8228675eb2759cb8892c17f6060" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jne</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3c0a9f63aa7056954adc293304afdc0a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jng</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe2d61ccaf45755457d9d9b86cb11445" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jnge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78ae95c1e1aba5e9160b16509bf0b51f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jnl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc1cc70c49a414892f0f62cd90605f18" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jnle</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a00191b56ee127013ca3753af3e2e487c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jno</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3cf30b8139a2eb1abd6647b5ed8cb00" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jnp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a566cddb26ade5cd3c7e64e91353b2a3b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jns</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2a7604099ef6c75c532b5b8537779895" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jnz</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab23161885b8640fd37018ed6075ba6d6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jo</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab257d3a8a80fda473c6f437a86b36735" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa22e5c405bdb3a52df82ec8e64c1b54e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jpe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec6bbcc92db242ca0b1009d437eb1a80" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jpo</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1abea9ad1fe8689721b13204a4d06082" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>js</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade7f5f66760fa94c38552e4c1205fd24" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>jz</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaa9f213911923fa6b20fc827e1fdda3f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>lahf</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fefdb388bfc4c98a1b7c7377c023e5d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>lddqu</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3dd1aea2975beeaf3344c0b250be22f4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ldmxcsr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac878a2ddea722ad11aab623849f23c3f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>lea</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a226eaf3b21ccf9340e13d6c61b03905a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>lfence</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58414d7d73f2d245e6d469c3bd22b7d9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>lock</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afe7ad9b26ae424e1b0c37768d1e2b7e4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>long_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff8fecf22ca3f324379e2c06c16941cd" prot="public" virt="virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>make</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ee19007eaa233117507a24534743dcb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>maskmovdqu</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1add30eb7d480e633fb899487d35b74b01" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>maskmovq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0beb29e9fbfd0d45bef92c9f69228ee8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>maxpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e42b098bb087438e70f8d89a2d427c5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>maxpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6def903b8512e338dc0f1e3a8fad9221" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>maxps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab0fd5a23f14242b2bd6f32ef91d2e462" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>maxps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8df8c8482b85f92c063903e3594c730e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>maxsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6f9e6804f08cbfdbd4709e8fa0e602d1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>maxsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42bb2126854b3a46f52fba5e3622e8a6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>maxss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b85388b03b27f15ae9f9462041aa50a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>maxss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad486e012879de99fc7c84868f7a86199" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mfence</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a755b0a4280fd25357b0537cb035e40ff" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>minpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa75fae8fc93d39d81c87482ac8f83d73" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>minpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aac569d722b1f79bb02672f420a3ed455" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>minps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a649a2424178e170bc4f947c9249bb16f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>minps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41dbe6942d6027a9b787e3aaa8fd93cb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>minsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a684580dd4e8a064d7ef5aa240b6dde36" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>minsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adad5abca1d9deee2853ce234378160d0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>minss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2699c27608c7e72109517efcfb713ad1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>minss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aed8555f624e41277f2565916d27d7f61" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd5ff88498023b27dc25e1e7e3e4b660" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad76cfedc4ad88b6e4f2d849a274647dd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f4f73537dda763e53651444cf5ea359" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a91f8a28cb02dd1af0863230a003e3cd4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1dbfc8795631a2d5e06af41c600111e7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe871874bfadd174d1975820ea16ad60" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1accc9744ab150ebfe91de63b5737e46e9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7806aaa4062a67aaea42f5d93e53123" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a09367e438bf4c5f187252f5cb9d6e4db" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adebf9a6cb73f735652bf2afadd70d664" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76078c748a233466a497590c36991878" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov_ptr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf49d9f9cc6564349e7c916b4f402291" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mov_ptr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8291d5e858f3395a9df8fd9966d2f1c7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movapd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a60b69318598e315545a99d56f23a96f3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movapd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6ed76da8a6ddb2052c2cd8ba61d437eb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movapd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aae3e2d59ce2e1dc369ed1ac09674b7da" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movaps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae2cfbf39e91dedc85c485e20ac9d5561" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movaps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a673581bad0129a8b9bd4fef2062a16f4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movaps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a3a0af2ca8d34b30ca6c675019ee7eb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2efa4881e7fef0a2f4a7684cd8a30222" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adff48078c99c14e08fb2a1c6cc2fc7ff" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6a5d38fea0aff991ccf78476d2edbb9c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa4d85e5980febe458dabd9dd0c3bdf89" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa43842bfd88efc83f113e751a130a8fe" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7f6c26e5add172df7e4a71684082b976" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae84331cac9eea860ca3e8dd01d0dd1d4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a599090848c073d330f73099b22a65e6d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0e0585bc44c2e9c0d8ff45157b36b29" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a301bdc0ed6c2b2a89be2e87db19055d5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movddup</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a671c1253d50bd0f723cfa10e0b79e04f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movddup</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a03a45ece0f311de5b7cc834804822461" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movdq2q</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9de8bc70ab57f2387ca1528e5c202e2d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movdqa</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af576eb69c02417e9b9fbbe2b53bd30b9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movdqa</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57fd5fccf4f3192a3f3f1b02be5e3dc4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movdqa</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95bb3f9b0804d2929e05e1db20428bca" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movdqu</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b00a75772f90ad513bc42546e4db916" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movdqu</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac51985511a2d932c9c0a597790b3f034" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movdqu</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a241f3c486dc4e9e512ed16cefc9d59cc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movhlps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872667f5b79bb5130b600fcd3be07096" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movhpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a63a0be291a2a0aabc6eb065be80c53ec" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movhpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a47f6273514288c3774f600622ad3e925" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movhps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6073771299aff094bbd40e942b301474" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movhps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14a4df14f9f5a70a21ba9c0092db2ba1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movlhps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad4509ecae6b6a457c3ad1db95786d5f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movlpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9580ec5a76bb06e875e60d18f9910fb5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movlpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbabed7202fc355fa3f4ba7db303a6c5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movlps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a583570fdf45bcaac5efad2d7cbdca60a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movlps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3a5ce3724031be149cf52d398d0a493" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movmskpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbd1c70b1a16e4ce065ab05b3c0cf448" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movmskps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78ad704d7a38d8e9405428f4dfe63df7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movntdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aecf1a375dc5616e7ef76ecb54ed74291" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movntdqa</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afee1c53925e55fafed0578fc4bb7e834" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movnti</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd542f72e71c8a17edf7818970a67e5c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movntpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4affd26e96f61c063a32659b10ef78e1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movntps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6dceefbe1f4530c2e176c7fe9f25578d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movntq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a28523fac15a7623342cf0ecff2c0abd6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7f4bc547be76919a62059a27de0a5cd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae87e71e6433f824a25fe95893d76f839" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa0c63c542745bf034d80a2f98d42434e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b337e24dc6d9e7063692c0bd5ff3122" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2a1651efe5a044511544d92addf3118" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a23e7450f5ef9c7b9199585831e2980e9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movq2dq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2276367eb8c7495102de3a889a4c3431" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acd1959207b4f2222af5928f112fd151b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a095708809b78b9f3d7b95fe403cd4d09" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5df362143c05b815b98d089d90d0bed6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movshdup</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee38b085944f30c0916b266ccd55aa13" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movshdup</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6b9cf87e3d7f89517f0ecab7b7ecc313" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movsldup</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acbc2de939efcd8ffd8f898d75b069b15" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movsldup</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a67a44e0d9c5846eb8a194d1c8f6591ba" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a1e3331eeb2704003cafc71c5fa62d6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7f11aa7bc7c8be78c8c3ca9372fe18a3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab22b913da837ea06b67d533e6c027d6e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movsx</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae2c283292003b3ac03f24cb740594417" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movsx</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10e33f492b9edb8bf5e9ef3be9d20971" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movupd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3131c7c6d85edb8680815836740a1dbb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movupd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abf4f581d3e9a4fb3fdff98d484ea2fcd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movupd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acdd03e3b8fe7fb856038f7c9497fafa1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movups</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3a78e57a2d45fb0c8e674d2fddc150b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movups</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07bdd4bafec6b38d7e7a701551efab97" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movups</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab64d4a04b00e2ec471d6850a5683efa3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movzx</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0abca612bc68be735ea07fc87264af0e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>movzx</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10ea4efa8e2e65da6ba7e8d7c97c7f93" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mpsadbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad486c1fe271a122dfe12fb0bfe760616" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mpsadbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7f837e54d1b906d01d339dbf8945bdf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mpsadbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a715d99a4e9eb698eb850d8669d1f0427" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mpsadbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a022a569528a2ba1cc8f5fc39eb916515" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a74f0e735cd136b611d8633e191b050ee" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a80f116dbba09e6de96bb1d0ac06eccc0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mulpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d6cf7bf2aa5a9916e4d3b5d16217f0b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mulpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6636ca1b2589d57553496f3e7b21cbd0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mulps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a81a0c3aac93c3f07428f47a0788feaad" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mulps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad76b17624ec02f8c4d30a1b1c3ff83cd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mulsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a05f4f867dc76c239092719950cd0d4a7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mulsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abeeb8b7c0276c220725e93b1c8ba0698" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mulss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeb50a4da8dbbb26f1b71c068e0f6baf3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>mulss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1f33314a90b2369c68fb9baf97da5172" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>neg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9b942310868202770e788d907775c71" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>neg</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a463c4a6d099d52ea479a9650e696544a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newAlign</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd80bd82013272ecdae209cd41802dfa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newCall</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a9a246926cd01ea668fbba41741dff72d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newComment</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a869d5617c72c2728059a49a14bbe0362" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newEmbed</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad9246ac7123b213ad66e6d13984fdcc6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newFunc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a692e27df983960f8d7c8c19fbc694" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newGpVar</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a0d67198e55d11240e7b71a9d9e5e252e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newHint</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a623cf11a2471d05c41812e10d59efa30" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newInst</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4034496c6079a5ebfcf13484c49a57db" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newInst</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8997e02865f9970ba3f919020cacb9d3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newInst</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aadbf2acf656e4312a0f54616c1b0a512" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newInst</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a6ece9e1753e4a87e6ed48ca13360b0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newInst</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aafac050234e33877b42fb22d14552232" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newInst</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a5eef24a0d411d3eb54677ef5a53957b3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newLabel</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae814d711f1f21a98b4488580d5d0ec6c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newMmVar</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a62471319c38f63bc7efc349ba01e336f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newNode</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1afc83e461ed18d27c9c8236c86fe52a7c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newNode</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a15669375b4db699aeed1a0b2724efe94" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newNode</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1aec9219a5131baaa97366bd89b0d26fc9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newNode</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a12952f38011b3b735e8948fa2f6a6bc8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newRet</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71172afbc9428df19ef66c5d191ca35a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newStack</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a90c68e8beae42497baf524842a472154" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newTarget</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a082f52511cc0a1ab45368e5c49007507" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newXmmVar</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a755ee1db53a664b32f78387fda8250" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>newYmmVar</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a759f87aec703dc52478ec6f5dbbe56" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>nop</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a110b5863ff3f5dd6e64fca2f9b2a1711" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>not_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af29c45cd1d0655929a4246fbccbf4fcb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>not_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22dbcf0fb59edcf4de0101214c5e532d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>notTaken</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0f984840eea95946dd86db610b7fdc6" prot="private" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>operator=</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a959eecceb2f5605298a79202787351c5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>or_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a250b78bf276194b17f61a19721f34faa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>or_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a53beaca170385683502d0d3b2fcb2f7b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>or_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78d0c454c4405e2656ac0e489f47d0a0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>or_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a1e2378e6bc9af1e22e573d5fe86ca6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>or_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef3947bd84f6775526d5b2c24c5295b9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>or_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab0a6234cadfbb141bfd9991ce592ed98" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>or_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab46fa215a727039025e67e8578c1c12c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>orpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3c06f674813de696548fe5ebe34423ca" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>orpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a307aafbcb9740933febc98c9f9b3a5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>orps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa63edef6ce15a10ca915ed4529483749" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>orps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1514f9677fab11d16da654ee7d1d3346" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a490158e08df05253e0f5210a240feb8e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aebe2259e59bb0efc2413bf48fe345a92" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6feeb3fd9abc8762bab46e13778293bb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af9f9c430de2c82299f552238e093f771" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab469386d8f1bb909c332c481338b7b68" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abcb9b42a0d0db8dfa26325569f806714" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad78e2fc2cd99aeef58191797318db674" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a184158e02c49f238c4e4edb4aed2a8e5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aba883d9f1378ebf18da6bf27c43f76f1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a464c2331aef41f3965c082e9dc5ee99d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f4c6039c90dd50d29988902daff49de" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pabsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a297321f1449b6cd1bd36038431672734" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packssdw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8dc6e7e451db37d79accc4b6cf68cc14" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packssdw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a192c3feda976ab72c8d4a25d5877be26" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packssdw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad06db1cae84aad9cb8c6f5c5aadd134b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packssdw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9c2a6fd08e47cc5095b73c01343bfb02" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packsswb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aace7b004cf9a43b1224c983c31d5609b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packsswb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b2a6485608fa2761b51f854db70d77c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packsswb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af9994752da38ff1da2ae23867323141c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packsswb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71c597675c1c98df1306626f5f9f0cc6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packusdw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abad2fdd9e8a2021037e9c83e4dfc8f76" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packusdw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab2691f0fc9b9238f5065c45b7323a3ba" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packuswb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae64a52335db5b040d19e651620ce8c95" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packuswb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d8dc7a9712b031668e9b2b22cd4332c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packuswb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab5a67020fd092f35e0f22150cc5f7c82" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>packuswb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff1aae5a24df592b694b0f329fe84ab9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4db41fd01a6da88af1948afaa785630d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa998103f1b35abdb149b43bc79c0b675" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afcb84e9b9b7ca2cb0d3aea97d896e17e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae216028d44b3707deb0f121cdc6ae345" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6ebfc0c64abbbc12af1ad5c1168e80f1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a850c812efa58d4a6c115c88d651babd4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaee88720feb3dcd9dbb402ea401cfe46" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa8932f7b42f4bd96195f89d97059fea7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afc21acec62b986d5ef117e9e461117a8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a26b05a3a7d8daf864c3465d550b86692" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a4308783997b673606e81ee30ed65d5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a163dadbfea0e24ede3d65dcf505b81da" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ceabf9eb86f7c535644a2fd23929336" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5d8d240ae1fd2c8ee3879d191ad9c262" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac20f67e26ab125a8d6a8292786a6caeb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b49e8a86a5e7e30793248ea01096d04" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaefbf007f1f49e517754707ae7b71a1d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a987d76a698cd1e6bdebf85c946e2b0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a124056a2105f1852f6baaf8082fe6114" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abceea02ce1ace3f819ea2947ce403a12" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddusb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d9f6aa74cfe134a3c20fc2772b9b5e1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddusb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1455bd24b3758567ec7b14a18577fba2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddusb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a478c58425e5ff800b11b72c091538d36" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddusb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a647bec191f5f80435f1622a7123f6e65" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddusw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f23bcd27b1087756f185a4b202883f5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddusw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afde1f3adf3fb0f567b0268ad7d113188" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddusw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aab1d6f9bb70ff1d2dd2737146f4a27b5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddusw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70825a99a45af4c99b5e7f23f19a4d30" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7231c821a78c271e660a3188260f48e2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07356f5171ad009d0f32c481e1697520" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af8d57c7c941767b78cfc3c5671397da8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>paddw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a67186dbeb85350309a630c760e580a68" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>palignr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa4b9a5f7917f3d9c8d02f3eddf8afce0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>palignr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad1ed86055ff3330ad93fdb64ce46c2b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>palignr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a81bbb573a8d162585bd2d05ef7836d93" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>palignr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a9f7f6d9a72a6144b70df2209b20473" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>palignr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a04d802f56c6afe9e396a15108955e9df" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>palignr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a11879ca122f5934de63fa0ef7435b80c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>palignr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1addc702214a7b1f9bca10663728ab0d14" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>palignr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6ce826d34c2ea3e1efd2359772677648" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pand</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a46bfba969ee39c413dc138c85a9e3ff9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pand</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8fb3b791650941c9fd214f00f1544975" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pand</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa0e87e29a731c957bd38d5495014c000" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pand</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d73e1e249f0ad89a42c2692ec5228c9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pandn</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae87a4051dc72e483745ea366bd72b774" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pandn</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b9d26b60aa197f39e38491d764b2a90" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pandn</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a813e1472f0b7b057e33c789cfc3fe40a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pandn</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7e978aa22481a4b94e55cc426a4eb41" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pause</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afeb6936340cadd93686a216457347ac5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pavgb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3c06a0cfaff61e8e4fe21bf4e9b39016" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pavgb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af800899e5efb8a15d64602c08e5994e8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pavgb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab0fa374e3188fe7ef86ccde1de7b06e1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pavgb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2bd5c84f7525a2221f8c67742a462b6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pavgw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0722143d816ef1301e0cf1b68bb71bf9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pavgw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f91ab72aba3f8a1839f62364dd7c9c3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pavgw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaca852d618ea8599fbc2511b2d393569" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pavgw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae0e27a3dd4e9fe686f9b27939a60ae63" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pblendvb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a853b11ae3c88257f88bf87e7f85e01c6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pblendvb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c396e1ec13cd719703a5c2298748f35" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pblendw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a713a59ac8bcb1a62cb3b1d050d15da11" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pblendw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af7d5eb1e949cdf42eaf72e6b51c3fb4e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pblendw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a14d9b31fb773b6d6a9b43b9dea60e6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pblendw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abc2d90b80095e7a91244f7e19f8e22f2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pclmulqdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aca2fb8f014ca560233c41204788dbaaf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pclmulqdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a862e79f5255a8b2e25493b6bd04ccff1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pclmulqdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a677bdc92df3ed4b6ed7edb9fb84e564c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pclmulqdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc9eb9a90058e0b5fa38fba44d40eec3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa7bb031e4bb610232d4b6e7f832c920" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2908aa3a4f86a060b8dbe63fc9554fa7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a27f21cab457477fe8638ac7a4b3c3f9f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af95854364938495ff5446be077c1f607" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a72f82722bc2d2cd5c4f8424990feb422" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1bd1c40a568a3223137331b186eff32e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6207e1097eb762d37197b927372ff979" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2bdd09b4a8d7bd690b30a93a4a25ba57" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6009f460f752e9bf9eb16238bef99fc6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad3c69007a3c742b98bb6508a30f00f4f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a900667c43073fa3a9d18c6d1d0cf698d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b926c5e2c8dfa06f55e52fb6fcac8eb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeb9af5acfbf6887754255b703a9cae7a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpeqw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82d9428176a4fc7c8f2224d65af1bffc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpestri</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3b0c1cfc93996b5508a61a2d83628204" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpestri</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4eb88dc71db1fec4b86bce45512264fd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpestri</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a83e9e7f9941b0c9fbdb60d4f8f72b42a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpestri</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ed7d9b2fadb69f122a23a738766004b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpestrm</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a28e836bf60f589ca7a979f82ce6621d7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpestrm</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a15b1b7e460d8ba86fbd1cb283a71839f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpestrm</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac552ba9d38c36b62bf1d90eef80e62f4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpestrm</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6f8cb31d06c58ce2f5d7e3dc63bb7700" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b316f0192ceab2c848292408586b30e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abdddb1b371306c496bab741bcef11aed" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adc8d34367462938af55a947b9c057bff" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7e25db987d3ea45506a3c2af1108abfc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3460ece4a261ead1539e3b65a072b825" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a0341f35ba8c3112537d7b311d0ab68" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a91cc0c65ef57f0e15772e7da55772cf9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa90432fba89d55ae23eab1a62b97e1e3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6cb4e7b285ea7d77ee6277e256fb255b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3e3eb41ea42e9f01160f8ced0c32b2c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aac30639307fc3bbf9a55a15e607946b1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a53079ab2f1d0b60153d3c1417d3a3796" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78eaa406fd9d22abc9e808bdc3d1c759" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpgtw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad9cd74795243b85a27830e8abcb10dab" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpistri</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a92ee6d4d3771b5365cfea5a9301b2627" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpistri</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7b181a491c9ebe8780bf0059a211178" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpistri</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1f48194763839646a34a282e43016c65" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpistri</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad4aca140114667dc4cc53eb20934f5e3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpistrm</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7de74ff37b5eb5a86b7e8b68b2db2ca9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpistrm</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af7915e9e50f2f6a6ada795f27375ef75" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpistrm</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0091cbfc08d01694cba55f54576ec23a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pcmpistrm</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb2dc64741f0f16973dddb73e711c69a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a98f7bf4ef49bb81f1abf9f652397eae6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e3584b6fc96a93469bd1f57fecf0379" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1f0d1a568de976ad8198a4c120abf64" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6e2554083be9e7fd46cb214dbc74cfee" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab16f8663e9bc24178c8a41cd2b2e71f1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a07c2b396125f44aab8abcdd97902cb1d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b3a4a796dae3e3264749173a9bb3a59" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1835103ea4b6b3c045e4a1c5d4519fbf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a88b3535d619482dcb5422a8daf55dc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c3d3efbe7d9fc4dc64ba98289c6d062" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a52046e9efd644d5d16bab1358bf341e7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1affc8688f59255a24b9099cd1cb3567e9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4db0c9222e34c05fcd1a5589f0883dda" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a00d998f39c05e5d4e981d7276ee14e9e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0931cc72729594b3a072be7de41dff4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a52e7f8e8049bf85d17878431e0f7cf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab844501efea3042bbda77e5c98ca1aa3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pextrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aff4d70df64ca8a99153a4f1bd2a4ce9c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pf2id</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a25bd2ff91fe42bbd50c9680a2d5dedf3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pf2id</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4d2b7e95605bef887224eb3eb9be0b83" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pf2iw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3de2b3eee568e9b85fca4d81cd8511c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pf2iw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0283b85ee9a80016d7535d2e73280db1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfacc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4925b0fe8099979f3ec9044244ffcd48" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfacc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeeadb11d9e0a862ba54c1599632b869b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfadd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2bfe871fc56f2c377da766b0a49ff8d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfadd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb3e965737a4e8684cc6995d722d9f4e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfcmpeq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a97befa742a4d900e1c03d98ed9cb74ef" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfcmpeq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5480faef08410e0931cb1775cdaaacf6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfcmpge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a75a4cc1cf69eb1f8fe4463a9101ab3d5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfcmpge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1633ca57f38ff54ccefd62041407ba7c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfcmpgt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7e738093d7e6d5eb86ec80295ea64dd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfcmpgt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a29ea44766aa89008eb0e5deadb26ff" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfmax</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a337b6a3e3de7993a1f53c988f61fb6d1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfmax</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad8292c3e01712dfa89ebe1bb7fbe9e08" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfmin</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afb8871705f97b870c8891d76a92102ee" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfmin</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a17a505c01dada442c7890ea977abcd3d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfmul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a43ff88a006843bcb1770d8727771e855" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfmul</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab213fd1cc5c4b31f5aa17b90f4135a96" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfnacc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd4809819b273a0c551ea9dbd69b0cb8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfnacc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab97d1ca63ee4ae0af8bba5bd7388fa98" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfpnacc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a55fdd7166d1529b1b01ac4040f2561be" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfpnacc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac41a6aef4c747a1d07acb0d2779e06b4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfrcp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6426a2eecd4236a3daa01f5c95fa816d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfrcp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78dd5941dd2b41a05b17b94215541f0e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfrcpit1</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae4e13dde8718880085cafcd7a9e7aec4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfrcpit1</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b1cd75dfe19d2b37b56000d74cd84a5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfrcpit2</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad3689044b28ed9625d3c25ebac14bef" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfrcpit2</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8fc2f9ef8ffb5cfbacd227c4da908339" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfrsqit1</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae20da1202b2814c0bdfbb6de9de80835" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfrsqit1</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0305ce60d80d0212e176a35bb760cb6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfrsqrt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae8bbc1b21a9624ab42dd2ea61a1d6948" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfrsqrt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a688ff752f51b4de87718d2df03a6c629" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfsub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a926012d7605d7c5b823c0a663619cd22" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfsub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a496f0eff6eb294c7f6625f58763082cf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfsubr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a707b28d0a4d03c9cc87a22ab8f1c6280" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pfsubr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4859edae455912b388e219958e1d99a8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2506f0550f90c4df91f23e21b762270d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8a7826322a19abf67bd2434d94618a38" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adfb9235a9c86491c12be95d6240db2c0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a93cbc4de8f5c322326995962bec15df6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa6e4db4492b2d51af1b0c664aafc5587" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a239a3795ba53dde47d9831e53dc4fc20" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ae108357eeafc535cce30c9cbdabcb9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb5c597d6a794309e3ba3168673a2dc1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1acbf35e8d82ec3ff5678c5bc9187ef2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a487dd46e394f5a5d3dc1c99df32ecc05" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2c0abaf336426c12e5396f2daf9a3a96" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phaddw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f68713843df8685372d449f79dcb6d0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phminposuw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8f93e4617ef90ae34f81cbdb341bf500" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phminposuw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf526b8177758f640a676055bc03be55" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a6a32c8a120d3e21a8d25498de7c532" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8dc0323ae09577588debec62db2c7757" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a58ec2e0d4025659788917ba270af50e2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3105d636489ee37e359d876786b34ea2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82d55f7f6c2ceb850849154055f5b577" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9a89732cbf917fa291322ac0e97683b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76b1120079df2495187bf79b93b93836" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a236170eaf8b1b37c87a914b46093c14d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa96c4ad9172b352c3caf0c3c05dcb0be" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1a422e9979272ba479e20f0e9a579c1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3145b6e322e29634c6f82fe94b2f3f1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>phsubw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a564f6670117878d87e65d38304b9b669" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pi2fd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a006ccda1ae211182ebf7a66a73a5d49f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pi2fd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a164dc4066b06c540abdfe0e0f5d0a989" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pi2fw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac0473f122202aa26dfd848639d47802a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pi2fw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a46cc69d3d6df5e19630dddb412d5380b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a412d6d18d0fdf99a3b0f4115125b006b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a91cf75fd1d0a0dbe4e5acb499b221277" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a86f54871f9d895225c56b32db90ce640" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a70c5529b92de7b476037a39a665ee646" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8bc41a85cd397e59a99102535ec26098" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a416b6df44088e0f7b2df865be22eb4d9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a11e3f7d83ce571f1e97c634d1b30df0a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0348d0a2e18972309b8b7f11cb47a405" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7349b2bddcb9bba04fc7d0f2fc93283" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab881761824ccb2f6d24e4c2b2256d3e3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a92d85a1d4dad2ef7bb791cf34643d27c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a872ec1da15e70eaedd580e987b37b926" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a271e476c55d1081c4e992aaa8f1aa48e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6c7e87247f484830afefeb770d647b82" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abac7e462793a045eb9f8907de1bf3f95" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaba0aea9069dabb42bc3f11d6b7a3868" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1addecbfb4713fd5a04f11d3a90c34c368" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a823a97270349b1362c9956edd6bd4b05" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad08643729180ce2625915c24a22ed36b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pinsrw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9e8de443f4187d245027db7144ff4a65" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaddubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2fa17f572bbd2ea826b89f72959239a4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaddubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a59d1160663dd1e97f3286d811d27a8f9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaddubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1d0f58a01f00b7c5c2da05f7b1183841" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaddubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0d8dae83c3ba875c0a256f4b1ec06779" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaddwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf6a94cb18051d2b6c7c2d1ef92cc4f6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaddwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a672a0cdbe29c54ec79e07bc4d450fc40" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaddwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a04a53e008a10e022858f75dc196f2231" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaddwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57390eaf1fcc6b3b19eda6db43aa85cb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aab5733851395fc271259034ea6f36b0d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af05d268c11e604ee2d78f88a79a2c9f4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a83c7e8d8a8675ace91e9b5e1eae8e5ba" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af08357c0362493c146b5a0a4d2023677" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af57a447dfc4fe8ee53c92848b96b0448" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac36bba7bb44deb9b50c73a1cbe376522" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30e490ba7932bd8b1f35f9878aec0df5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aae266aed351f6ba8583e32a189eee747" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a2b255ab90577e4ebfb5af164fe0c31" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab30c5c4012638ed37ebf145cd70f10b4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af66a9eeeb8054d2ecf7de89c9ab7de58" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af45a1bb00ff0148e301f9bb22a9ee325" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxud</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adedbcffe724a807a0c0592cea0cef9e4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxud</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a555272214bb7ec1d58b74e9bbf99a9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxuw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac7e875e86391aac23ac16b01000215e7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmaxuw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a567dcb6823d382d9d400d1848694fca3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab8c02452eb84aaffc56fa480e5d92625" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6beb0ee57a43bdbb16aa02a58270c2b3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a328d39da3d3d91a815db85557578945b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4267e08cc369f5a29f945bed3f895f73" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66dd47d6ab84b33143a242572cf86cdd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6d924c37268f2f1660c9e68b451f3743" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d92e81a51e1cd4a64692f93598e8d37" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66253552ed74cea6f0a5e1c74b150926" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a064b6a0fc4bab4e4a600bfd13517a626" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4aca95a7719b8447f22966f355c2ea51" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3469486084b213fb9b08b901896553ca" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a25d47a334fcd97439f5d29696e1c39a3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminud</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a60201d5ace2305836b0238d005208b1e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminud</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a690ff0dea1897abeb9dc498c3e7c6303" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminuw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a286eff68500c2652dfec7d923b266ba7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pminuw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f6a10214e53c9a8eab24cb5fa00e1aa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovmskb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1eaaab2b1e7a80a1225cbd64df36c059" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovmskb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef5ec0d1a4f4b4f51bd4b7b19a2a925a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxbd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1b0881130f81bdc2e3267889ea547cb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxbd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42a78877d9a7007d50bbb5519302e229" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxbq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a229c1187ce592f0581cf73988149d5d6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxbq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aacdbda97e2648642a9bcc2b5d952c0b8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae47d7a5127de3e67c91a5d5efa4be3ed" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f5891c47cb5e5823714cef2e67d08cc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a59082639e09883f5c406435cd01a7f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a306400d99b7fa336a9835cf1fafabfcc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3464fa8c6f5a92d04579f84689c7c0a0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab7a24ce229193cb0b08c8480639ba376" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxwq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa1e6b316d0d928b42ebdebe47de58ab" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovsxwq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3957d6ee7bd6af30ac092499bc342f12" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxbd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b4714ce4ce65953271160edb4143e38" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxbd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae22ccf66b1053922f0e9ce9c3e10af6a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxbq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14dbd3cf6ea5faf8d63fa172450b1094" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxbq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76c9b0fd9bb0830d71919c51ed1e1ed3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a83e306467378ddf0338f575ef7442f4f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a538827b3bccc807c060a8094e8cddc85" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae1f547c39f1535b76f16e0b829c8a48d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a279d779f1e4923ed8f8fdb698aa57cfa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adceb9c2c647453407b4638768438c2ed" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f3fb9957fdf82b3bf30a753e3b377b4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxwq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adec44f72d067988332fd759f95ab76d4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmovzxwq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af78537b1358b267180a5d2379a8530a6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmuldq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1a6f4e247c05e546329bfdc2df3732ab" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmuldq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad6ee51af75f6188140db45d313713236" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhrsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad05fc1e0553c74f0cb2478acb8e2c007" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhrsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad0355ef40d3d7f4e309d7f4aa3aebc0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhrsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1783b608f85f7606f155fc02496d52fc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhrsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4a3af827f33d4c5eb831d9008592e9b0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhuw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aea207c46c0c2c60e5a6a1a21e3d2129f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhuw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2f9eb59359a568c5898f07d744e38369" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhuw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a624d0494fa2db9e376b4d6bac888e7ff" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhuw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76d65341e10ac3f47dc047dcad53d899" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95fee473d06c70796da1a5330f8a0479" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41c9ceb3056688ecb9e0abf711d5ce5e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b8219c0c763c2503f88061b4a3d684c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulhw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac01f83e45189eb6510e2a8dd708b9a27" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5ca2a133a52a90ee2b79b80bcbe4a31a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmulld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec19d8884baab3e37b85c83c765b6aa4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmullw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac407cc860c12d871535c98c1f807b21c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmullw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3ab8d65d0400a6f50816983eb352e87" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmullw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9e292a606faecdd0f75908e9f3883b84" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmullw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a82afe0b6f0cd014baa318cf100f4cb5d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmuludq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57687ddaa6dd32af0052d68d60549a1d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmuludq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a811e0b5d0c6d10802fd0f5c037dc2cf7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmuludq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a03a67b7b7ffe99d33da3c74829504b6b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pmuludq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae3afaceee4e7fdeb915b6fc69f5862fd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pop</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a42e846a5c857d869a8cad1aeebc54f60" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pop</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a08b8da5cfdcd92d1995846512f788c2c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>popcnt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af5d0370a47ad314c3e51ace65493c9df" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>popcnt</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e7f6a1d920445fe74d3440023eaef9f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>popf</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab9379a5f007cb59ddc83678265921b01" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>por</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abeba91527b0a510d7ea2844589a83334" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>por</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9c2b97a8699560440ca64f865d8dae9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>por</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f41588cddf9f270d7026c0e191d63aa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>por</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1a7396f787bde7f01626ed3a9bf9e9ac" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>prefetch</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a31b040401b7ccbb94cdf519e5c4faff6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>prefetch</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a1ad214f2263bd8b0915a133fd74032" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>prefetch_3dnow</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb54e0884308d2a9781771bc6cd6194e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>prefetchw_3dnow</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adc319ba98e4fce513c4e1f4486868ed1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psadbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a044a817ab9d34d32a7a905fd6c68af3d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psadbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a503367e95dcfc2eb4e992f6c66371299" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psadbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aabdeaf447da6cc9744a52346fce9a29f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psadbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa28b1960fb27aabca1c8f70fc1bda1e3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a90e415a1917e803dfcef7869120eb711" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2c14b3e6c5ee5fe7cf062c8e491e9f2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2059be959ce7ec0f66ae1051caf17e0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa538f45f981234f6b885f2c44766c183" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aef4fc5de22d139edaf0c89885216b2a6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af6bf94bea2b6d36eaac390f0d5425cd5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a69da22932de079103a8f965fe680fdb2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a605eacfb7d5c64c495b8695195428a00" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufhw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd64217734e60fdb02f554f7f55c60f8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufhw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a65e42900e882bd64fef0d26aeea2b919" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufhw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa9578e166857c90dc5efbd1b95d49e55" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufhw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa0a5785cb30354745f931b97c19a35a3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshuflw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1855c9b4bf14878a9c9dae25dd20796b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshuflw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae9c3ebe0dec1287017b210f8a22a38e5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshuflw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a31272099e3168b285aab3834e0b9ad6e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshuflw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2b642106c1ec24baf27191085a48b35a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a20d62922e6424016456438c48c7dfc21" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa6bdc9feed5f82a4dcb51847b68fa44a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abb27aabfde13fc3b98f77a7571104667" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pshufw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a543dbb502031ccfefee72a8624a74b00" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aea0e12f40fef985dee95b284bfada73b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a781fb6bd528aea76140dc6327b0f4f4c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66762afea764f334ee98d533c1c19a62" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2d4a964759906046b12caf08bd1d252" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a65e14e06accdb35341675180637b2a96" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a723fe97ab5ad341f98e4b88263019e92" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aacfd2d2419aea77562ac1fc1985ecdb2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0eebaa7b636b99f63e0c860999cc083" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae83cec96d78a90e5ef89a159f5fa73aa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa514c43428a9e706f0f71ed92ce1abf6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae0beb3c3d10eec47d93d46b6c301e8e9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psignw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab527554056a845fcce237de576b017ad" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pslld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab23eae2fd4311ab7fe5c0436a223cdd9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pslld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2bba6fd1ee16a4454f05a28a1c30b95" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pslld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3ec1461b69fb925b35f2db087587f255" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pslld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b659c81a6cc813dc39c2cf547043929" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pslld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0c4f39ca31bb5587146630b2f33a19f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pslld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a399882ec1d945beaa40a0e2e512d4d24" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pslld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a365a8070cefdb5137b06c02f89be6589" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pslld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abff003feadda880d6121dc3a34be98f2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pslldq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a686c8d8fed21cd3b82fb517b426b57c6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pslldq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3c62ba50ea82d5741c5dd10c02b4cc4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adfb50247643357ab8a5c0e7d6f4c66d5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96f88718aecbb2e63aa051c4033dca16" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41c8195d8a3277d69b410111a677d0af" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4ec43ee93b58d905b6b80ff6af018c3e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a85d16e39c25b5bfee4f4d560b48e6fde" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a96bcfeb3fc20407f7d5d379a211425c7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeb679b1183abc46ef2c5ba3b8a1c69b5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0933a75305ce20d3327b08d3a201fa09" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9fd47ea6a3de8c05d970925b7e0062bd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a99c044c077503a2f5221e9167ffb579c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae80601de0661757431e81c94dd33f588" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5121769d0da3d26d99870b6bdf889638" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a39cefba51eaf7ed745c636649f627bb0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a88314968afef79d8ec2f825270a1c059" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad1b514151398468f37b100c4a869ca47" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psllw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4df8619909c3ec93f7d32e4ad0a8b1d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrad</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a462777045512e24a066edee1eaa53883" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrad</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9a442757d6928d1afd0b85f5edf1636" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrad</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a862213f3c4ab05fe1f07cc64c894ffc9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrad</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3b977b24a759c5727dd370051c1de710" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrad</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a380bafd61ae577e800a705f8fff80749" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrad</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b50e4c531ea7c2dbb7332158659c007" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrad</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a48d716d6cedfb415a7e7f276547933" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrad</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abd6796e6cd2ba2368235c7ba607f4fe6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psraw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a59d21271b10cbb4a50c19a618255c842" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psraw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30abc1a605fb64f4ebf3075dd7323bb8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psraw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22ecf0f41987ae39b576ff3473a96324" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psraw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad6c139fc500364825976c2007b54623c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psraw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf7633f9bf5d0b7a92e0f68c0d4011f6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psraw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae3ba4d1d1307e2897bf661a4bb2fdfe8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psraw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a92b6b3465f8b09629dc46401e363b5ca" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psraw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac4a67bfa12fcdd3ad926cd1c2eaecff6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a61b800d6bf12c5103509c9a0ac44b180" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a18bc45fb4bda8c59bd58c4beffe3b35b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a816fa09f20d63639987fdb22f8822c53" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adebfe6062db925170b7a6a09ddc7f9d9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0140e2cb501e904a97b273477922768d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a709d77fa11b070ef978fe5b249dab48e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71b516764a2a3a99d8cae665ff8f0b40" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1ec2275bc3af5431f3acd0bd8cedd92e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrldq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a60940936e6991c028f18af8f81b1bc83" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrldq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7892cb8aae44f9f321e0c0b51fe7e6d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e37fcaa49449a47701169d2206ff655" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2ef2a5bc7fd8bf254897f82ae7fcb2a4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a32a201201d16d7e3755b21c262a7e382" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8cd0031d0cc2a79b7662c686a5d8b295" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6d292a6be0f3846dbc8f18ec6a6d5fcb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73db1e8873f4045a4137d4fb20d73d2c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8ed28d7bf1c86718afc400b6af83e1dc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ace1fce8eae8280e58d068935fdf5f16c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a154dc5378d5124d7704a5d9d17a20894" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d87fb39e91ae26dec2e9d2dbd868446" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa86bbf82d494924b55053597dff03826" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae0bbbd93c6af33ba6434c43c1a5951a6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a889da08fec1e4c6951bb0435956d5001" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6aed53cb2ae18fbc3aa40253b0be7c03" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab1abec43de760c6afbc72ca2d8be6178" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psrlw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2177ac53ea642d7424670cd66b9743f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b1a56d76bee14b5ebed9ea0032dd1d6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7903df69e45d5b211988509b46382832" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7fefeba370b4517c49ef2df6c6b8713" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad7a3590feb29acce2a142d250fbcd840" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0cd95bebe14d8783fb7529959599bd89" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac21ec2acf7c2456907cbc2814152dd33" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad93bd4211ae540d7a47e58a067e7383c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe806ad48033f0c35fd7d96c61dfae1f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af972fca8c6ae533e0242d3c415eebfc0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f93930ae658bebf5e7cb05e2145729a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6d6b497c86305996461736e53af76080" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5fcc2e755a8122276a013375bccfc2f4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af45765e4a2bac45d3048f95516ea263b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade11414de46653767d88f217d2c94cbc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade520c48c0a3dd58dc95e453ec4b421a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a042f9291b10fa705ccd61c97e5dadcf6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aeb276415f9346fe8b060c79beed066d2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae03dddecb8da09d740ae5fe1b91c5b07" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee2aaf88386848e26b48566f16554153" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa903e49700c9df683321e2e743b32f7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubusb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a44b9f8408cc3d75204bd1b4f6451fc00" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubusb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af39f51ba392767f20b3ebf5c1b94e67d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubusb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acc087f34e07058f2afdc8c346971ef43" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubusb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a370b2c4b4d4908e89045c64242d4e651" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubusw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad0ce80c356c8cb91abad15aa9404db5e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubusw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b9a29055d8c1c758207849dae286e01" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubusw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9eb382adaacfc58a889e7c83cfdf1fe8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubusw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7738bb1d39a09410244e4ecd6b1b763c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af0c378adfcb24a5c27cd639660688608" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec2f517ea23aff784404053dd66706bf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac9b36f9d8c36dcef067ab17a716687ad" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>psubw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10884a9a77b73d51f82b96231256ed76" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pswapd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa2123ab3d3f17aaf51453d5f4d7288d3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pswapd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a005a5e6bb339f2076d98e8e094206a35" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ptest</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae7fae782f0fcffd7d02551c075bc5218" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ptest</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae3a751362da5d33d5f665e3d1089b89e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad83345ca713edc9b4034960d1b9a04bc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2dad9e369b62515f1abe39e4246d615d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af4e1d066690ef481bebe0e9979dbc462" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae56a6c0cdce4ee316ab55b1de0856f2b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7f08dedd3574e58d635052ec7680190f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e841d8108c9d491647f0d923f645fe7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a08a90a3a3169593eb0f427def134be3e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab4d5d5fe0a46aef9d0c406de165cbea7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhqdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a569d93dd9d18e08eb68f4d459d6e3b33" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhqdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aed6b631122a14893b4d6b14f12aa8b13" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7fea33f780a1cdc47afe0f8ff41eeea0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a93d5a36236672c13e8abd6631109b794" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a856633d5dbbe6e7d889ef40a062d7fdb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckhwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1add56c3bbc5fad8cca1eb33f1d43ba004" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpcklbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7e987336b9518128be2e705048bc5f68" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpcklbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ade88b981a8358728a5dc1c34739be7cc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpcklbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af2d94eefd06a8c1225f97ef165cc42e2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpcklbw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afbd0039138525c6c33a8386435e42832" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckldq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a227c02b427969d3b037272cd4bf584ce" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckldq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a539016ca7705022105bf6d096f061fc1" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckldq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad0e39280395ad193388af0c3fde9a02" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpckldq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a78a6be35927a6231e229a2ae60abd25a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpcklqdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aea0dbe6e0943f81525056f828c729b0e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpcklqdq</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a81c779685b1b397a0cacec96da3c4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpcklwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73074ff40f269e8e26d199c37b14835d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpcklwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae23513151b115100f3e0e527fc01d41b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpcklwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adbabdc9b4ae89fd78b9ee28c27701dcf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>punpcklwd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae9943d65f3e4e083ac88c41acaaf7eba" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>push</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af160c895f16ff86e6ab91e8d71c1f2f3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>push</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b0cc1373b49e323d28640c300802e4d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>push</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aecbcc7699209991dd4f6b0ebc21e1814" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>push</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad91531a7a348a85de7d8a7569d739acd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>push</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a25bccbcb7d7bb922dae1a5f53826aa0a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pushf</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d0e4475d4a99ff8076a1d2f04c992b6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pxor</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6b23d49fea6595ac4017303894a30630" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pxor</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae8a3a30b5e982f19f8d6cfea605d49a4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pxor</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4ba565fad8b5f0615f975fd5e936349e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>pxor</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3a2dfada44bd3affe98384715b5cd7e8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7b39457d4b129b99e609e69cc737338c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab5c3ef6c47da27123fe453032a9ab44e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4c5293d606128415a70b040c62ff559a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e3d509b7c29787a51eb5e3bc3110da9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66557759465753360c9b3d9971edf805" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0b6358f840370734c102ae86bbe01301" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcpps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4f9083467d0195dbebee5c3215928fed" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcpps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a729375bf11b562666b03b867d7c3432d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcpss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b6041f76f63b6cc7169332437db7d4f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcpss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac8ba27dad408fa2ef55408a0b667afdb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf8f40c87075c3ad2fa1274458c36c38" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad34df409f961716de40d02a1451b1e3b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9eff064708aad2065d8b9f81a489b99f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30004bb88a394ed3b4af706cc1bea407" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a75bd2a74e50caba619cec95852e9e767" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rcr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a95158998d232836a2a647291ef983f7f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rdtsc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a34b0023317306a6f04e5e00c106f035e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rdtscp</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1aeca9652a56df1842c3342bfcd774a3b9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>removeNode</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1ae87563494bc6261b12d22fdfd094500f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>removeNodes</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a81286497909c2862d4ad440b47be7990" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rename</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abdf78213f847c43f6df2c57507677bd7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rep_lodsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a04da2a4f855dfb6fc9d04c4c58abf9bd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rep_lodsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a20fca3e7b98ee5a103608e7319e56410" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rep_lodsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab058f17b0a38e119a87d44793e4a1f45" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rep_movsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae6ae390867bb33d60680ac389b3166a2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rep_movsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab59b48b2b7a837340a4e0c60eb24edc4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rep_movsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abccebac50970ffa6a22bbce255663139" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rep_stosb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a38c5925f4924c4848791b17b9194548e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rep_stosd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a35986a14629b60c439631224e208dde0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rep_stosw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a447f3343dbeec4bab2c79a7107c18061" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repe_cmpsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a103de4fbee42f1ea20efcb5870652870" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repe_cmpsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a48cef50fe588742773bb3c5c2b567f43" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repe_cmpsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afb3d0053de0c2d73f687330e40bf14f3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repe_scasb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a822d518388a764ab322f19a7dec64126" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repe_scasd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79023558ed6f653f7c8c78589c72508d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repe_scasw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e28400f859dd93d61a5abb526399e99" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repne_cmpsb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a517f13f63a07139903b0ea17f26b300b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repne_cmpsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aaf6e364fea49c0fa79060513111acb48" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repne_cmpsw</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1114f419e06b204c6b7a3a1a0db4210" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repne_scasb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c0a1845403a57b5dde04cada2606cf3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repne_scasd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7bb4ddfc466c439466cc89acd42aa4c4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>repne_scasw</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a66ebed2ec94250d109a0cea4d9cb7cbc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>reset</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abe1fd80625da5ff775c29584b4c2b167" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ret</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8b4bada2b56c3bd4980ee4422e598aa5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ret</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9bd4c07f92025b08710e69e882e44a3e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ret</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1fc9b7c1ce6b70c5b1705c0da580bdc8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ret</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a24d82b5b3ada3a145d5e822b04c49250" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ret</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afd118fe5cd77e8306fe495c9a8a94c34" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rol</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3f89017c6e52bc3fb86701be9b0ab36" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rol</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8691b383fb7ea59ae39e0e2ce4d566b7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rol</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a10a1c800ef69e900a235da948e3e5c1a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rol</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf8c21582aeb5e633b7f7345241a671f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rol</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acd03a3fbb376ad431cbd2cb66d5b44d5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rol</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a424c7e5f81c7e4c5f0918dd4724b5545" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ror</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2616c3ecc3894bd7d8c7c529d9f8b63" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ror</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9aded5fe8b3083a91c18aa11f877fbf9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ror</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2eb7055ff23eb00a21a472a69dd00e94" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ror</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac41b0da666e9fecccf734491609539d4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ror</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d5be477ad291daac1604672a957d0ef" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ror</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab67fffb8a9c1af4bc43e7bb438aa2307" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af9f06ce92dc281cedd5cc56dfd48bbce" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a887dcd9e796963ce2858bd34872a2670" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a086bfcd8cc9f8fe8a91e9b29310861d9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6520da409d717efe86511ce36cc72084" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c8bad7fffc53524b42b6b56764d42a6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a362a94075420dbccdc84e39ef5120b67" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a72c29d4845e95351c15cff92fc0a7f86" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a55aaa72b80f109a5031e15de7376a70c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d218ad2e0b0275bbd189d9bbf9a7466" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8778e2e5acf712a5af3542d350531a36" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7d073bd371ddb49768a027e5c09e9f73" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a88cd0fbe99a0eb7a9e79338d058f766d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a456057772c846eade95f31c69fcb7386" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad1f23b30e3ca88ae3bba9efe71456332" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4712e190b1e3ab77a22d6b7c0f7f73af" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>roundss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a401d62622ec374e10409f8225cc0ddad" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rsqrtps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9f518e2e058c4febd6662e63ef795349" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rsqrtps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a339d6ad906783f68bb32abbce6ba00aa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rsqrtss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adf71a0f40a72f662a2e251160ca271c0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>rsqrtss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afd5aafa6ef08cbb306317328f5120a8c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sahf</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acdea1a4a8e06b8e37fc63fb2e2c68450" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sal</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aceac9fc0a731d558fdecb4b3112de8f6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sal</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa5075fdda83347c463c017246e978cad" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sal</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5bb1d7b5af3ab424312e91e07030730b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sal</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a85605fc008609698a4198ad2ddeebd17" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sal</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af013dbf23ef796db4a4b89967a18be82" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sal</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9cd5af9d4b531c900d3a568afe1f355a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sar</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8667815306a2afb44685d6f1726b6300" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sar</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5a2da1060c4fed40ad1e6a3836969725" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sar</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a29f5d5a09719624a227aafc7a47ce012" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sar</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5900f80db7fd4c0bd44ab196bf58cc77" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sar</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a657d1dd137edc75d6e016c029e8e3b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sar</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1aa387c6a473cd28b3a7271d964d4864ba" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>save</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad153aee45b70221b7eddd5cd21fe5c72" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sbb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac5012ccf08c2c841f1186ae9d74854e7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sbb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22a206ced518ce641f02595f31ed49ed" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sbb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0a685b7e130113a1a416d5c148eaf0ef" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sbb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a35e0eca979ec9e0f5de96535fcb71112" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sbb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af85d642738ea9a2c6090edc91d2bcb6a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sbb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a80a5132789b556bea8a0174644629854" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sbb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a930f6d27a016a7ddcd5ffa06f198056e" prot="public" virt="virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>serialize</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8081167edd2724631baba1d793f94af5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>set</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5611b7858855c465d44212fd94763345" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>set</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa70734a5673345c240e0563cfc867c05" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>seta</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7c1352be6c7436faa44f2b6bd3c3b837" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>seta</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af34c88130ef7d2c9021cf3e7b13201e3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setae</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a76fd49c177d8cd71c069f9aa4fc38278" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setae</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0772c01f808f117609a87f7b344f9694" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setArg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6eadfb754d73a31096c9a8be6fa5baaf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae814456693531e1590b7100cb906e853" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a539455df68c61b6bf92fc1dc505eb18a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a5bc41da3771255ed658c2dba1f9b77d7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9a73ad1446326aa6a9ca000c18659295" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac8aede1de405ad1a6ed26402ae1cd757" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setc</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1ab258d8bb815f7c9e3368bdbab6fd6256" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setCursor</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af55755bca03ff42ddad7dfd16cc6a369" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sete</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab339ae1389cd24bd862e1f101083b105" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sete</name></member>
      <member refid="structasmjit_1_1CodeGen_1aee542611426601efd4f9acb2ac89f346" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setError</name></member>
      <member refid="structasmjit_1_1CodeGen_1ac96640528ff277229ba55c51d013820c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setErrorHandler</name></member>
      <member refid="structasmjit_1_1CodeGen_1aca656dd1075adc8eb87dff52775f29c6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setFeature</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a2fafb3a76e84130ae2a1acdd08ff3e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae66a96bffd715ddeae125c9f29899050" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2aba122b6ad68d15f4fc1c938b7c04d0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8d8968f6ad07097b4f12830d86c23ef8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac5052c667eea6bd8bb65f9098d5afede" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aad3463281b86e006ed8e31f721f7874f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a67cfd95721a3ad25fd55af09b767a597" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setle</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad08c13e031aa4a3a7c7c0547a5b0f6bc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setle</name></member>
      <member refid="structasmjit_1_1CodeGen_1af166f166ed4223a8ba11d1966bdbe63a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setLogger</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1abf82cd552edd42804ab616b89a2bee93" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setMaxLookAhead</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a21f700b79f8aa21c42e7e4ff30955815" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setMemoryHome</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b0a9cd43d7534d8be877e81fa0bfd96" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setna</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa2888dacacce4f31f47d1df4968ab88" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setna</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9dd9e021f64c0a5694f1845e3f5d5c68" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnae</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a63cd16e737017391d4fad2663ee4fed8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnae</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3ffcab3e9cfc03e66cb27522c7b6669f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac51c1ea360c0883045bc66738cefc6ec" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnb</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a79d7d917fae826d3ca98c0b35269b6cd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aea9015552ad05c7eae0ab8dddafc68db" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnbe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a02a28004148e0a74c567177283a60cac" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9326d8a8cc8cf6d0823cfd48e0213d38" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac57b4bf85e3ec3f0a29dbcb90309f13d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setne</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a428b9ff141b7d038904f3fc555e30bd8" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setne</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66aa46dc5fa97105247ab3627dade5da" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setng</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae637c24ea7f5f0005f9bfb8f87b08ca6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setng</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e3b194ec67c6160b84c0727999b1ab3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1f26798011cab27f1911d17fee7e3c6b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnge</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1e47b98829f2231ec518ee31f4d069c3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aceaa6f4d6d0f70940c4092b8c2b92637" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66d0afdc5e96520b3defbb4f847e4254" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnle</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa5001daa81a1175c6485cc91b48673be" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnle</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae207c19303d5475365c35ae4430c01b9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setno</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a22a4b7bda3e92f36b2fbb2feba3ca26d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setno</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2e0a85685a31dfc9a7cb1265945405eb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8ae6cadca9628e2e74f80afaf900aeae" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ad2af5916c2d4d72af7f71d0b83c3886b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setns</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2d49b3d4aaf781ad33705ac89f5fd527" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setns</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a52479754e7b22a3f6ee53c5f073dbe9d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnz</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee434b017c9e7a362f57072428acc55f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setnz</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6060a5553e0dc114d026600cd5553e66" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>seto</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a946b8c099d6cb66e0ef806443f01b235" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>seto</name></member>
      <member refid="structasmjit_1_1CodeGen_1a06a916b4813dc544d7991f06093bdfc0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setOptions</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae8148366e64584f43b99b5e552457305" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f326a77bbf5f5bea81d3b411e46a18b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setp</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af4002fc4cf01c21b9940424d5111f7ca" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setpe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa58f11692eb78e955651b5ac19e20244" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setpe</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a86c5cbaf123b453dae0783c7f4203662" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setpo</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa3181de8ae7286a6e27f2ae7d0903394" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setpo</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1af4d8526178948d9b59c533f5a07e599e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setPriority</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac3db3b8b7be7b73f42369dcfe0e0a6cc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sets</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8eb0cce96184df20440bcc8bec317984" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sets</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a317bae3f4011066c5efc7781cb4bc30e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setSaveOnUnuse</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4812e169c504db6c23e5433a9daa48cd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setz</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a14538a8ff5d8e123df0ec0ecb144b26b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>setz</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a11af9f2436a11ba97cf8424934f91759" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sfence</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a824abd324b49960df327c6aa6212c258" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a397160c5b3a44ef1281abb73ab79ee4b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa40ef3b0624d684ed76f0d35dab45402" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8c728fe51574c4ed32a6aaf2446d1521" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0ee1d956467bee1eac6202987577120d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a77837bc3a9f12f1a76cdcfdaf6bc147c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shl</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1affc9d7c47a8f691eb8bb8b835e7b037f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9fe2471b5857cc17bc71877f5885dbe5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee073f26f65fe7cbdbe30ba3b2346f44" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af193f63be5986f76908e3ba3383cb51c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a73932825f517076f9e5e52caf32d6eeb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acf6a8e83eeb37e50b20b97d187306b79" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shld</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4b0e3a386b1e52cb8b2e739fd67f6b0e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>short_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a09c677470aabfef0cdc269e4eed3d79e" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a464b16315eac00694b25b916c319f7b0" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af17bb5053a7484a1def1f2c73b647079" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a30cd46a6c0014074c8e75544b0db9332" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2cb9140853a7e21288cc99c1a1b060d9" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a856f110b58ebe3be741e4494a2113e34" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acb0b4181ad36a987c77a266ddddc75f6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab60ad8101f11a716cd4dd60fdfb455dc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ac6ce87aee95a884ba1ddee2820d89763" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4e1ee07213e348ac36aa52fdde6185ad" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a688296e67c9a2156e8b74ff239c72684" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aee5993a1fc6ca87029163a7f93ceaf7c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shrd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a77ddd2a6fe77507f596e604944d5199b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shufpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a19d62edbaf8c94fd3841424e35036483" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shufpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a92fc8a986a0c452e9e246e5d704eab9d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shufpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a41b33c6af6d8881233d0abb574a15711" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shufpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1b3d697649f0461ae485507aa700b223" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shufps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a92104bddadf3331640a51811069e5590" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shufps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a66b21a28a2e1cc970141d0f9a5411a30" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shufps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a076bbe5e089a189ef3b466f3f04637ae" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>shufps</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1ab816e5a2afbf8fd59c119b820f4c5954" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>spill</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae128fa9d55ed83818201eede9aad2981" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sqrtpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3e65f28bfb97c52042fe339551b0f617" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sqrtpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a9b59bdecf44016c55f2e6654fdf0d021" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sqrtps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af02dae9371074c14243778ae51b83792" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sqrtps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a13307df348f7327bdc573f13f71cc1d7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sqrtsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acea5450b0d92222d2de3e2f159925594" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sqrtsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af1cbe0a9cddd400e7c6c0fb1427545dd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sqrtss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb0387ae83b6cca55d6ffba4c5c12fdf" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sqrtss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4e03aab8be126bf9a83489cf4b1c31ca" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>stc</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1addf3862a603b5d030b9ead7b1ec87c46" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>std</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7377730dd81095284e76a97786bc8d06" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>stmxcsr</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8901a8f15109bcaf4b92486fb5a325b5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adb09251fe30f53ba7e62ea49cbb7abab" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2e48866584df04bc5253744a93127ae3" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a027a768a53819c100282fe2410259c23" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa605eb4a95b8daf6ac7a95b40702c7e6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aada75c0f706c139308c7be82d6161e83" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aec461e723a0bb05a39a71a7f6b12abca" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>sub</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a0f7183ac22890fb305344b8d2faf142f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>subpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab54bd6b0f6787b089ae5dc30c68043ee" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>subpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a3f1f776c7d8bee98681e73057a1dd5fd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>subps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a62994b5f37a188bc725b2a6846a0e187" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>subps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a336b6ba66a81446c4269a6184ff89e3f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>subsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1585c2df9420e439b827c8b131db1329" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>subsd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a6fa1d6b57ffbff8c6f19fe5618ebb095" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>subss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1f25cfc03d86d3bbd974053b77099ec2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>subss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa645898777e8f4eceed896d118d08dec" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>taken</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a8e02f05b1fcc68c09f1d341e9a479096" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>test</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a71d2272e1bd11893470c04c4ef4110d2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>test</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a633e6c4b6ac08115068139c775345afa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>test</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1acb8ef2b1e91d9b101880564740e44b50" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>test</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4e19a6ba0d34f04a2ec3fb5e8b047e05" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>test</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1af29a67269fde1b3af58220df0603f66d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>test</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a24df0e3292803f105a10f05ed09a071b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ucomisd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abc889767f90ab098b0417833007ce51b" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ucomisd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a57842af8fa7ba1b3e36130c740b698ad" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ucomiss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1aa25b258b06bc68b4170dd0f2aa34fea4" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ucomiss</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a694e4377a1de4b9e8d55d029dce01e87" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>ud2</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a32783d720c7f68453ba447c39bca6aaa" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>unpckhpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abaf2c69e2e7a2e3fd84bb1a9e6aba0e7" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>unpckhpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a682eef3329befdfdb604bcdd8e6660d5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>unpckhps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa8cf302002f6c50edfa705446e28333" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>unpckhps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae5a5e5d1aea8d64e21c5acd8f6863865" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>unpcklpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae45dc0bfdae9360263bb38f559ee3490" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>unpcklpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ab46d71e58038daa6241b784ee6b016f2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>unpcklps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1abf9b365a2ad26ca625a1bee939a2e538" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>unpcklps</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1a5d9021937d9570df4d89abe454bfcee6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>unuse</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1027a9b1bb7242262d891c1bf688c06f" prot="private" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>X86X64Compiler</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7bd0b077ca7802d538dd6f9dc648b16c" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>X86X64Compiler</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7655edcd17dcbddf08e4b303f0236723" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xadd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a234b5b60f663341b4a14c5ec41a86f38" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xadd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a700e4b7e566989bd923f4adf95d1a06d" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xchg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1add50d568b168526f329722d68e09a540" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xchg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a1c8753d74aecd3bd8641c84c637f4ed6" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xchg</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a2df7dadf4877d4065242d611443b5d08" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xor_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a784e90b232c74afb59a0de575c195e1a" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xor_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a56c139b47c10377943bb370e48c69ceb" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xor_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a4f53482a92e25029630853fb104939a2" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xor_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae5bd022a2d5b2755f7a8b8ac794fe4a5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xor_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1afa287b3a0209495a176d8d92de16fa32" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xor_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a84027883fa8479ef16d5d523de9c37dd" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xor_</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1adbbf2d39655fdae2404029872d2caabc" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xorpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a7a9c954f85f1b0bec7308582c89cfed5" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xorpd</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1ae69474d3cf97c67db980056d08c18d33" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xorps</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a34a52286d5d578337c9f7a57bc9e9910" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>xorps</name></member>
      <member refid="structasmjit_1_1BaseCompiler_1ad4e9cfa5d09e28246268e82d3b34eebe" prot="public" virt="virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>~BaseCompiler</name></member>
      <member refid="structasmjit_1_1CodeGen_1aaa96fd1cef6c0d59ba9f570b1d5d35c6" prot="public" virt="virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>~CodeGen</name></member>
      <member refid="structasmjit_1_1x86x64_1_1X86X64Compiler_1a36a96590105a115514f8a02c1c2f792f" prot="public" virt="non-virtual"><scope>asmjit::x86x64::X86X64Compiler</scope><name>~X86X64Compiler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
