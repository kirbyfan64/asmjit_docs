<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="defs_8h" kind="file">
    <compoundname>defs.h</compoundname>
    <includes refid="intutil_8h" local="yes">../base/intutil.h</includes>
    <includes refid="apibegin_8h" local="yes">../base/apibegin.h</includes>
    <includes refid="apiend_8h" local="yes">../base/apiend.h</includes>
    <includedby refid="codegen_8h" local="yes">codegen.h</includedby>
    <includedby refid="logger_8h" local="yes">logger.h</includedby>
    <includedby refid="string_8h" local="yes">string.h</includedby>
    <includedby refid="assembler_8h" local="yes">assembler.h</includedby>
    <includedby refid="podlist_8h" local="yes">podlist.h</includedby>
    <includedby refid="podvector_8h" local="yes">podvector.h</includedby>
    <includedby refid="compiler_8h" local="yes">compiler.h</includedby>
    <includedby refid="func_8h" local="yes">func.h</includedby>
    <includedby refid="base_8h" local="yes">base.h</includedby>
    <includedby refid="memorymanager_8h" local="yes">memorymanager.h</includedby>
    <includedby refid="vectypes_8h" local="yes">vectypes.h</includedby>
    <includedby refid="defs_8cpp" local="yes">defs.cpp</includedby>
    <includedby refid="runtime_8cpp" local="yes">runtime.cpp</includedby>
    <includedby refid="string_8cpp" local="yes">string.cpp</includedby>
    <includedby refid="zone_8cpp" local="yes">zone.cpp</includedby>
    <includedby refid="x86defs_8h" local="yes">x86defs.h</includedby>
    <includedby refid="x86func_8h" local="yes">x86func.h</includedby>
    <includedby refid="x86cpu_8h" local="yes">x86cpu.h</includedby>
    <incdepgraph>
      <node id="809">
        <label>../base/globals.h</label>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
      </node>
      <node id="817">
        <label>../base/apiend.h</label>
      </node>
      <node id="815">
        <label>stdarg.h</label>
      </node>
      <node id="819">
        <label>stdint.h</label>
      </node>
      <node id="813">
        <label>stdlib.h</label>
      </node>
      <node id="816">
        <label>../base/apibegin.h</label>
        <childnode refid="810" relation="include">
        </childnode>
      </node>
      <node id="807">
        <label>defs.h</label>
        <link refid="defs.h"/>
        <childnode refid="808" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
      </node>
      <node id="820">
        <label>limits.h</label>
      </node>
      <node id="818">
        <label>new</label>
      </node>
      <node id="811">
        <label>config.h</label>
      </node>
      <node id="808">
        <label>../base/intutil.h</label>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
      </node>
      <node id="810">
        <label>../build.h</label>
        <childnode refid="811" relation="include">
        </childnode>
        <childnode refid="812" relation="include">
        </childnode>
        <childnode refid="813" relation="include">
        </childnode>
        <childnode refid="814" relation="include">
        </childnode>
        <childnode refid="818" relation="include">
        </childnode>
        <childnode refid="819" relation="include">
        </childnode>
        <childnode refid="820" relation="include">
        </childnode>
      </node>
      <node id="812">
        <label>stdio.h</label>
      </node>
      <node id="814">
        <label>string.h</label>
        <childnode refid="807" relation="include">
        </childnode>
        <childnode refid="809" relation="include">
        </childnode>
        <childnode refid="815" relation="include">
        </childnode>
        <childnode refid="816" relation="include">
        </childnode>
        <childnode refid="817" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="856">
        <label>globals.h</label>
        <childnode refid="857" relation="include">
        </childnode>
        <childnode refid="854" relation="include">
        </childnode>
        <childnode refid="863" relation="include">
        </childnode>
        <childnode refid="864" relation="include">
        </childnode>
        <childnode refid="865" relation="include">
        </childnode>
        <childnode refid="867" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="870" relation="include">
        </childnode>
        <childnode refid="871" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
      </node>
      <node id="831">
        <label>testopcode.cpp</label>
      </node>
      <node id="861">
        <label>vmem.cpp</label>
      </node>
      <node id="858">
        <label>error.cpp</label>
      </node>
      <node id="822">
        <label>codegen.h</label>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="851" relation="include">
        </childnode>
      </node>
      <node id="876">
        <label>lock.h</label>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="871" relation="include">
        </childnode>
      </node>
      <node id="844">
        <label>x86context_p.h</label>
      </node>
      <node id="877">
        <label>memorymanager.h</label>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="849" relation="include">
        </childnode>
        <childnode refid="871" relation="include">
        </childnode>
        <childnode refid="850" relation="include">
        </childnode>
      </node>
      <node id="873">
        <label>error.h</label>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="874" relation="include">
        </childnode>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="864" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="858" relation="include">
        </childnode>
        <childnode refid="871" relation="include">
        </childnode>
        <childnode refid="850" relation="include">
        </childnode>
      </node>
      <node id="880">
        <label>defs.cpp</label>
      </node>
      <node id="870">
        <label>globals.cpp</label>
      </node>
      <node id="853">
        <label>logger.cpp</label>
      </node>
      <node id="850">
        <label>runtime.cpp</label>
      </node>
      <node id="826">
        <label>asmjit.h</label>
        <childnode refid="827" relation="include">
        </childnode>
        <childnode refid="828" relation="include">
        </childnode>
        <childnode refid="830" relation="include">
        </childnode>
        <childnode refid="832" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="834" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
        <childnode refid="829" relation="include">
        </childnode>
      </node>
      <node id="875">
        <label>zone.h</label>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="842" relation="include">
        </childnode>
        <childnode refid="862" relation="include">
        </childnode>
      </node>
      <node id="872">
        <label>apibegin.h</label>
        <childnode refid="856" relation="include">
        </childnode>
        <childnode refid="857" relation="include">
        </childnode>
        <childnode refid="821" relation="include">
        </childnode>
        <childnode refid="873" relation="include">
        </childnode>
        <childnode refid="854" relation="include">
        </childnode>
        <childnode refid="852" relation="include">
        </childnode>
        <childnode refid="874" relation="include">
        </childnode>
        <childnode refid="875" relation="include">
        </childnode>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="863" relation="include">
        </childnode>
        <childnode refid="864" relation="include">
        </childnode>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="865" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="867" relation="include">
        </childnode>
        <childnode refid="876" relation="include">
        </childnode>
        <childnode refid="877" relation="include">
        </childnode>
        <childnode refid="878" relation="include">
        </childnode>
        <childnode refid="879" relation="include">
        </childnode>
        <childnode refid="849" relation="include">
        </childnode>
        <childnode refid="851" relation="include">
        </childnode>
        <childnode refid="842" relation="include">
        </childnode>
        <childnode refid="841" relation="include">
        </childnode>
        <childnode refid="843" relation="include">
        </childnode>
        <childnode refid="868" relation="include">
        </childnode>
        <childnode refid="880" relation="include">
        </childnode>
        <childnode refid="858" relation="include">
        </childnode>
        <childnode refid="866" relation="include">
        </childnode>
        <childnode refid="870" relation="include">
        </childnode>
        <childnode refid="853" relation="include">
        </childnode>
        <childnode refid="871" relation="include">
        </childnode>
        <childnode refid="859" relation="include">
        </childnode>
        <childnode refid="850" relation="include">
        </childnode>
        <childnode refid="860" relation="include">
        </childnode>
        <childnode refid="861" relation="include">
        </childnode>
        <childnode refid="862" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
        <childnode refid="846" relation="include">
        </childnode>
        <childnode refid="848" relation="include">
        </childnode>
        <childnode refid="847" relation="include">
        </childnode>
        <childnode refid="844" relation="include">
        </childnode>
        <childnode refid="869" relation="include">
        </childnode>
      </node>
      <node id="833">
        <label>testdummy.cpp</label>
      </node>
      <node id="852">
        <label>logger.h</label>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="841" relation="include">
        </childnode>
        <childnode refid="853" relation="include">
        </childnode>
      </node>
      <node id="866">
        <label>func.cpp</label>
      </node>
      <node id="823">
        <label>assembler.h</label>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="849" relation="include">
        </childnode>
        <childnode refid="841" relation="include">
        </childnode>
        <childnode refid="850" relation="include">
        </childnode>
        <childnode refid="846" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
      </node>
      <node id="821">
        <label>defs.h</label>
        <link refid="defs.h"/>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="852" relation="include">
        </childnode>
        <childnode refid="854" relation="include">
        </childnode>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="863" relation="include">
        </childnode>
        <childnode refid="864" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="865" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="877" relation="include">
        </childnode>
        <childnode refid="878" relation="include">
        </childnode>
        <childnode refid="880" relation="include">
        </childnode>
        <childnode refid="850" relation="include">
        </childnode>
        <childnode refid="860" relation="include">
        </childnode>
        <childnode refid="862" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
        <childnode refid="848" relation="include">
        </childnode>
        <childnode refid="869" relation="include">
        </childnode>
      </node>
      <node id="871">
        <label>memorymanager.cpp</label>
      </node>
      <node id="849">
        <label>assembler.cpp</label>
      </node>
      <node id="859">
        <label>podvector.cpp</label>
      </node>
      <node id="863">
        <label>podlist.h</label>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
      </node>
      <node id="839">
        <label>x86.h</label>
      </node>
      <node id="847">
        <label>x86compiler.h</label>
        <childnode refid="844" relation="include">
        </childnode>
        <childnode refid="839" relation="include">
        </childnode>
      </node>
      <node id="841">
        <label>compiler.cpp</label>
      </node>
      <node id="825">
        <label>testsizeof.cpp</label>
      </node>
      <node id="864">
        <label>podvector.h</label>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="859" relation="include">
        </childnode>
      </node>
      <node id="824">
        <label>base.h</label>
        <childnode refid="825" relation="include">
        </childnode>
        <childnode refid="826" relation="include">
        </childnode>
        <childnode refid="835" relation="include">
        </childnode>
        <childnode refid="836" relation="include">
        </childnode>
        <childnode refid="837" relation="include">
        </childnode>
        <childnode refid="838" relation="include">
        </childnode>
        <childnode refid="839" relation="include">
        </childnode>
      </node>
      <node id="837">
        <label>winremoteruntime.h</label>
        <childnode refid="838" relation="include">
        </childnode>
      </node>
      <node id="829">
        <label>testx86.cpp</label>
      </node>
      <node id="848">
        <label>x86func.h</label>
        <childnode refid="847" relation="include">
        </childnode>
        <childnode refid="839" relation="include">
        </childnode>
      </node>
      <node id="879">
        <label>vmem.h</label>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="871" relation="include">
        </childnode>
        <childnode refid="861" relation="include">
        </childnode>
      </node>
      <node id="867">
        <label>cpu.h</label>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="841" relation="include">
        </childnode>
        <childnode refid="868" relation="include">
        </childnode>
        <childnode refid="850" relation="include">
        </childnode>
        <childnode refid="869" relation="include">
        </childnode>
      </node>
      <node id="869">
        <label>x86cpu.h</label>
        <childnode refid="839" relation="include">
        </childnode>
      </node>
      <node id="884">
        <label>x86cpu.cpp</label>
      </node>
      <node id="830">
        <label>genopcode.h</label>
        <childnode refid="827" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
      </node>
      <node id="842">
        <label>context_p.h</label>
        <childnode refid="841" relation="include">
        </childnode>
        <childnode refid="843" relation="include">
        </childnode>
        <childnode refid="844" relation="include">
        </childnode>
      </node>
      <node id="882">
        <label>x86compiler.cpp</label>
      </node>
      <node id="878">
        <label>vectypes.h</label>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
      </node>
      <node id="828">
        <label>genblend.h</label>
        <childnode refid="827" relation="include">
        </childnode>
        <childnode refid="829" relation="include">
        </childnode>
      </node>
      <node id="857">
        <label>intutil.h</label>
        <childnode refid="821" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="849" relation="include">
        </childnode>
        <childnode refid="851" relation="include">
        </childnode>
        <childnode refid="841" relation="include">
        </childnode>
        <childnode refid="843" relation="include">
        </childnode>
        <childnode refid="858" relation="include">
        </childnode>
        <childnode refid="853" relation="include">
        </childnode>
        <childnode refid="859" relation="include">
        </childnode>
        <childnode refid="860" relation="include">
        </childnode>
        <childnode refid="861" relation="include">
        </childnode>
        <childnode refid="862" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
        <childnode refid="844" relation="include">
        </childnode>
      </node>
      <node id="886">
        <label>x86func.cpp</label>
      </node>
      <node id="843">
        <label>context.cpp</label>
      </node>
      <node id="862">
        <label>zone.cpp</label>
      </node>
      <node id="874">
        <label>runtime.h</label>
        <childnode refid="822" relation="include">
        </childnode>
        <childnode refid="823" relation="include">
        </childnode>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="850" relation="include">
        </childnode>
      </node>
      <node id="846">
        <label>x86assembler.h</label>
        <childnode refid="847" relation="include">
        </childnode>
        <childnode refid="844" relation="include">
        </childnode>
        <childnode refid="839" relation="include">
        </childnode>
      </node>
      <node id="851">
        <label>codegen.cpp</label>
      </node>
      <node id="836">
        <label>winremoteruntime.cpp</label>
      </node>
      <node id="834">
        <label>testmem.cpp</label>
      </node>
      <node id="860">
        <label>string.cpp</label>
      </node>
      <node id="835">
        <label>host.h</label>
        <childnode refid="826" relation="include">
        </childnode>
      </node>
      <node id="885">
        <label>x86defs.cpp</label>
      </node>
      <node id="868">
        <label>cpu.cpp</label>
      </node>
      <node id="855">
        <label>build.h</label>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="856" relation="include">
        </childnode>
        <childnode refid="872" relation="include">
        </childnode>
        <childnode refid="876" relation="include">
        </childnode>
        <childnode refid="881" relation="include">
        </childnode>
        <childnode refid="882" relation="include">
        </childnode>
        <childnode refid="883" relation="include">
        </childnode>
        <childnode refid="884" relation="include">
        </childnode>
        <childnode refid="885" relation="include">
        </childnode>
        <childnode refid="886" relation="include">
        </childnode>
      </node>
      <node id="838">
        <label>contrib.h</label>
      </node>
      <node id="881">
        <label>x86assembler.cpp</label>
      </node>
      <node id="827">
        <label>benchx86.cpp</label>
      </node>
      <node id="832">
        <label>testcpu.cpp</label>
      </node>
      <node id="854">
        <label>string.h</label>
        <childnode refid="827" relation="include">
        </childnode>
        <childnode refid="832" relation="include">
        </childnode>
        <childnode refid="833" relation="include">
        </childnode>
        <childnode refid="834" relation="include">
        </childnode>
        <childnode refid="831" relation="include">
        </childnode>
        <childnode refid="825" relation="include">
        </childnode>
        <childnode refid="829" relation="include">
        </childnode>
        <childnode refid="855" relation="include">
        </childnode>
        <childnode refid="852" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="853" relation="include">
        </childnode>
        <childnode refid="860" relation="include">
        </childnode>
      </node>
      <node id="865">
        <label>func.h</label>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="866" relation="include">
        </childnode>
        <childnode refid="848" relation="include">
        </childnode>
      </node>
      <node id="840">
        <label>compiler.h</label>
        <childnode refid="824" relation="include">
        </childnode>
        <childnode refid="841" relation="include">
        </childnode>
        <childnode refid="842" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
        <childnode refid="847" relation="include">
        </childnode>
        <childnode refid="844" relation="include">
        </childnode>
      </node>
      <node id="883">
        <label>x86context.cpp</label>
      </node>
      <node id="845">
        <label>x86defs.h</label>
        <childnode refid="846" relation="include">
        </childnode>
        <childnode refid="847" relation="include">
        </childnode>
        <childnode refid="848" relation="include">
        </childnode>
        <childnode refid="844" relation="include">
        </childnode>
        <childnode refid="839" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structasmjit_1_1Operand" prot="public">asmjit::Operand</innerclass>
    <innerclass refid="structasmjit_1_1Operand_1_1BaseOp" prot="public">asmjit::Operand::BaseOp</innerclass>
    <innerclass refid="structasmjit_1_1Operand_1_1VRegOp" prot="public">asmjit::Operand::VRegOp</innerclass>
    <innerclass refid="structasmjit_1_1Operand_1_1VMemOp" prot="public">asmjit::Operand::VMemOp</innerclass>
    <innerclass refid="structasmjit_1_1Operand_1_1ImmOp" prot="public">asmjit::Operand::ImmOp</innerclass>
    <innerclass refid="structasmjit_1_1Operand_1_1LabelOp" prot="public">asmjit::Operand::LabelOp</innerclass>
    <innerclass refid="structasmjit_1_1OperandUtil" prot="public">asmjit::OperandUtil</innerclass>
    <innerclass refid="structasmjit_1_1BaseReg" prot="public">asmjit::BaseReg</innerclass>
    <innerclass refid="structasmjit_1_1BaseMem" prot="public">asmjit::BaseMem</innerclass>
    <innerclass refid="structasmjit_1_1BaseVar" prot="public">asmjit::BaseVar</innerclass>
    <innerclass refid="structasmjit_1_1Imm" prot="public">asmjit::Imm</innerclass>
    <innerclass refid="structasmjit_1_1Label" prot="public">asmjit::Label</innerclass>
    <innernamespace refid="namespaceasmjit">asmjit</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="defs_8h_1aa9cb1f6d9323e103ca2e03d5104000eb" prot="public" static="no">
        <name>ASMJIT_REG_OP</name>
        <param><defname>_Type_</defname></param>
        <initializer>ASMJIT_INLINE _Type_ clone() const { \
    return _Type_(*this); \
  } \
  \
  /*! @brief Set register @a size. */ \
  ASMJIT_INLINE _Type_&amp; setSize(uint32_t size) { \
    _vreg.size = static_cast&lt;uint8_t&gt;(size); \
    return *this; \
  } \
  \
  /*! @brief Set register @a code. */ \
  ASMJIT_INLINE _Type_&amp; setCode(uint32_t code) { \
    _vreg.code = static_cast&lt;uint16_t&gt;(code); \
    return *this; \
  } \
  \
  /*! @brief Set register @a type and @a index. */ \
  ASMJIT_INLINE _Type_&amp; setCode(uint32_t type, uint32_t index) { \
    _vreg.type = static_cast&lt;uint8_t&gt;(type); \
    _vreg.index = static_cast&lt;uint8_t&gt;(index); \
    return *this; \
  } \
  \
  /*! @brief Set register @a type. */ \
  ASMJIT_INLINE _Type_&amp; setType(uint32_t type) { \
    _vreg.type = static_cast&lt;uint8_t&gt;(type); \
    return *this; \
  } \
  \
  /*! @brief Set register @a index. */ \
  ASMJIT_INLINE _Type_&amp; setIndex(uint32_t index) { \
    _vreg.index = static_cast&lt;uint8_t&gt;(index); \
    return *this; \
  } \
  \
  ASMJIT_INLINE _Type_&amp; operator=(const _Type_&amp; other) { _copy(other); return *this; } \
  \
  ASMJIT_INLINE bool operator==(const _Type_&amp; other) const { return _packed[0].u32[0] == other._packed[0].u32[0]; } \
  ASMJIT_INLINE bool operator!=(const _Type_&amp; other) const { return !operator==(other); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/ryan/asmjit/src/asmjit/base/defs.h" line="699" bodyfile="/home/ryan/asmjit/src/asmjit/base/defs.h" bodystart="660" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>[AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complete<sp/>x86/x64<sp/>JIT<sp/>and<sp/>Remote<sp/>Assembler<sp/>for<sp/>C++.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[License]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Zlib<sp/>-<sp/>See<sp/>LICENSE.md<sp/>file<sp/>in<sp/>the<sp/>package.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_ASMJIT_BASE_DEFS_H</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>_ASMJIT_BASE_DEFS_H</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Dependencies<sp/>-<sp/>AsmJit]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/intutil.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-Begin]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apibegin.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">asmjit<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">//!<sp/>@addtogroup<sp/>asmjit_base</highlight></codeline>
<codeline lineno="20"><highlight class="comment">//!<sp/>@{</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Forward<sp/>Declarations]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BaseAssembler;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BaseCompiler;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kOperandType]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="33"><highlight class="comment">//!<sp/>@brief<sp/>Operand<sp/>types<sp/>that<sp/>can<sp/>be<sp/>encoded<sp/>in<sp/>@ref<sp/>Operand.</highlight></codeline>
<codeline lineno="34" refid="group__asmjit__base_1ga12e36dc942976d5794c1e88619b5e8cb" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__base_1ga12e36dc942976d5794c1e88619b5e8cb" kindref="member" tooltip="Operand types that can be encoded in Operand.">kOperandType</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Invalid<sp/>operand,<sp/>used<sp/>only<sp/>internally<sp/>(not<sp/>initialized<sp/>Operand).</highlight></codeline>
<codeline lineno="36" refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba5606bb706ba515b597456bed0abe8b03" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba5606bb706ba515b597456bed0abe8b03" kindref="member" tooltip="Invalid operand, used only internally (not initialized Operand).">kOperandTypeNone</ref><sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Operand<sp/>is<sp/>a<sp/>register.</highlight></codeline>
<codeline lineno="38" refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba8742403556c7e635e7531c58252de1ea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba8742403556c7e635e7531c58252de1ea" kindref="member" tooltip="Operand is a register.">kOperandTypeReg</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Operand<sp/>is<sp/>a<sp/>variable.</highlight></codeline>
<codeline lineno="40" refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cbad24fc6aeac580335e62f8a11e8a2043f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cbad24fc6aeac580335e62f8a11e8a2043f" kindref="member" tooltip="Operand is a variable.">kOperandTypeVar</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Operand<sp/>is<sp/>a<sp/>memory.</highlight></codeline>
<codeline lineno="42" refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref><sp/>=<sp/>3,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Operand<sp/>is<sp/>an<sp/>immediate<sp/>value.</highlight></codeline>
<codeline lineno="44" refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba1d91cd01cea7a2b5067aa24907d1372b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba1d91cd01cea7a2b5067aa24907d1372b" kindref="member" tooltip="Operand is an immediate value.">kOperandTypeImm</ref><sp/>=<sp/>4,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Operand<sp/>is<sp/>a<sp/>label.</highlight></codeline>
<codeline lineno="46" refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba2dcaa04fd5ea217510587264bb4ecac8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba2dcaa04fd5ea217510587264bb4ecac8" kindref="member" tooltip="Operand is a label.">kOperandTypeLabel</ref><sp/>=<sp/>5</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kOperandId]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">//!<sp/>@brief<sp/>Operand<sp/>id<sp/>masks<sp/>used<sp/>to<sp/>determine<sp/>the<sp/>operand<sp/>type.</highlight></codeline>
<codeline lineno="54" refid="group__asmjit__base_1ga1941577d59c9d0f61a4bcde8c19ec9c5" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__base_1ga1941577d59c9d0f61a4bcde8c19ec9c5" kindref="member" tooltip="Operand id masks used to determine the operand type.">kOperandId</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Operand<sp/>id<sp/>refers<sp/>to<sp/>@ref<sp/>BaseVar.</highlight></codeline>
<codeline lineno="56" refid="group__asmjit__base_1gga1941577d59c9d0f61a4bcde8c19ec9c5a295c08b8f3024d78e730ef790265d632" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga1941577d59c9d0f61a4bcde8c19ec9c5a295c08b8f3024d78e730ef790265d632" kindref="member" tooltip="Operand id refers to BaseVar.">kOperandIdVar</ref><sp/>=<sp/>0x80000000U,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Operand<sp/>id<sp/>to<sp/>real<sp/>index<sp/>mask.</highlight></codeline>
<codeline lineno="58" refid="group__asmjit__base_1gga1941577d59c9d0f61a4bcde8c19ec9c5a57978d4fcf92c565ed3798a59dfd3eda" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga1941577d59c9d0f61a4bcde8c19ec9c5a57978d4fcf92c565ed3798a59dfd3eda" kindref="member" tooltip="Operand id to real index mask.">kOperandIdNum</ref><sp/>=<sp/>0x7FFFFFFFU</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kRegClass]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">//!<sp/>@brief<sp/>Register<sp/>class.</highlight></codeline>
<codeline lineno="66" refid="group__asmjit__base_1ga99bcebf1cfe0e5748810ea481c0191e7" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__base_1ga99bcebf1cfe0e5748810ea481c0191e7" kindref="member" tooltip="Register class.">kRegClass</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Gp<sp/>register<sp/>class<sp/>(any<sp/>architecture).</highlight></codeline>
<codeline lineno="68" refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a4092691aba7dfe7861ea2853b6791517" kindref="member" tooltip="Gp register class (any architecture).">kRegClassGp</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Invalid<sp/>register<sp/>class.</highlight></codeline>
<codeline lineno="71" refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a9ee1beb9a4b48c08d666811d3776ed65" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga99bcebf1cfe0e5748810ea481c0191e7a9ee1beb9a4b48c08d666811d3776ed65" kindref="member" tooltip="Invalid register class.">kRegClassInvalid</ref><sp/>=<sp/>0xFF</highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kInstCode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment">//!<sp/>@brief<sp/>Instruction<sp/>codes<sp/>(stub).</highlight></codeline>
<codeline lineno="79" refid="group__asmjit__base_1gac34fc57ca3f35b031f715fded4fb35f3" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__base_1gac34fc57ca3f35b031f715fded4fb35f3" kindref="member" tooltip="Instruction codes (stub).">kInstCode</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>No<sp/>instruction.</highlight></codeline>
<codeline lineno="81" refid="group__asmjit__base_1ggac34fc57ca3f35b031f715fded4fb35f3a40322f3634e1579cf825c83e286dc39b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1ggac34fc57ca3f35b031f715fded4fb35f3a40322f3634e1579cf825c83e286dc39b" kindref="member" tooltip="No instruction.">kInstNone</ref><sp/>=<sp/>0</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kInstOptions]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">//!<sp/>@brief<sp/>Instruction<sp/>options<sp/>(stub).</highlight></codeline>
<codeline lineno="89" refid="group__asmjit__base_1ga1a4feb7204b0ca222114af10730305bc" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__base_1ga1a4feb7204b0ca222114af10730305bc" kindref="member" tooltip="Instruction options (stub).">kInstOptions</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>No<sp/>instruction<sp/>options.</highlight></codeline>
<codeline lineno="91" refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bcaba5334994b8849b668e2fce1bed61cea" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bcaba5334994b8849b668e2fce1bed61cea" kindref="member" tooltip="No instruction options.">kInstOptionNone</ref><sp/>=<sp/>0x00,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Emit<sp/>short<sp/>form<sp/>of<sp/>the<sp/>instruction.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/>//!<sp/>X86/X64:</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/>//!<sp/>Short<sp/>form<sp/>is<sp/>mostly<sp/>related<sp/>to<sp/>jmp<sp/>and<sp/>jcc<sp/>instructions,<sp/>but<sp/>can<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/>//!<sp/>by<sp/>other<sp/>instructions<sp/>supporting<sp/>8-bit<sp/>or<sp/>32-bit<sp/>immediates.<sp/>This<sp/>option</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/>//!<sp/>can<sp/>be<sp/>dangerous<sp/>if<sp/>the<sp/>short<sp/>jmp/jcc<sp/>is<sp/>required,<sp/>but<sp/>not<sp/>encodable<sp/>due</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/>//!<sp/>to<sp/>large<sp/>displacement,<sp/>in<sp/>such<sp/>case<sp/>an<sp/>error<sp/>happens<sp/>and<sp/>the<sp/>whole</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/>//!<sp/>assembler/compiler<sp/>stream<sp/>is<sp/>unusable.</highlight></codeline>
<codeline lineno="102" refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca3f497bb7cd655089b1e5470867cbc187" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca3f497bb7cd655089b1e5470867cbc187" kindref="member" tooltip="Emit short form of the instruction.">kInstOptionShortForm</ref><sp/>=<sp/>0x01,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Emit<sp/>long<sp/>form<sp/>of<sp/>the<sp/>instruction.</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/>//!<sp/>X86/X64:</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/>//!<sp/>Long<sp/>form<sp/>is<sp/>mosrlt<sp/>related<sp/>to<sp/>jmp<sp/>and<sp/>jcc<sp/>instructions,<sp/>but<sp/>like<sp/>the</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/>//!<sp/>@ref<sp/>kInstOptionShortForm<sp/>option<sp/>it<sp/>can<sp/>be<sp/>used<sp/>by<sp/>other<sp/>instructions</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/>//!<sp/>supporting<sp/>both<sp/>8-bit<sp/>and<sp/>32-bit<sp/>immediates.</highlight></codeline>
<codeline lineno="111" refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca0914ab67e09d24f2e0c0d512b70c7f08" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca0914ab67e09d24f2e0c0d512b70c7f08" kindref="member" tooltip="Emit long form of the instruction.">kInstOptionLongForm</ref><sp/>=<sp/>0x02,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Condition<sp/>is<sp/>likely<sp/>to<sp/>be<sp/>taken<sp/>(instruction).</highlight></codeline>
<codeline lineno="114" refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4df01d78f89add2e942ec79ad211a4f5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4df01d78f89add2e942ec79ad211a4f5" kindref="member" tooltip="Condition is likely to be taken (instruction).">kInstOptionTaken</ref><sp/>=<sp/>0x04,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Condition<sp/>is<sp/>unlikely<sp/>to<sp/>be<sp/>taken<sp/>(instruction).</highlight></codeline>
<codeline lineno="116" refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4c436f33ba83c4df5948e49e01a5ef67" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga1a4feb7204b0ca222114af10730305bca4c436f33ba83c4df5948e49e01a5ef67" kindref="member" tooltip="Condition is unlikely to be taken (instruction).">kInstOptionNotTaken</ref><sp/>=<sp/>0x08</highlight></codeline>
<codeline lineno="117"><highlight class="normal">};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kSize]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment">//!<sp/>@brief<sp/>Common<sp/>size<sp/>of<sp/>registers<sp/>and<sp/>pointers.</highlight></codeline>
<codeline lineno="124" refid="group__asmjit__base_1gaf2740675f6f8b14a3aea317cd6c75ade" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__base_1gaf2740675f6f8b14a3aea317cd6c75ade" kindref="member" tooltip="Common size of registers and pointers.">kSize</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>1<sp/>byte<sp/>size.</highlight></codeline>
<codeline lineno="126" refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeae3505415188fa8375d1c27b2feefd50b" kindref="member" tooltip="1 byte size.">kSizeByte</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>2<sp/>bytes<sp/>size.</highlight></codeline>
<codeline lineno="128" refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adeaebdde480fd98fcf031c32ff8ca9c4543" kindref="member" tooltip="2 bytes size.">kSizeWord</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>4<sp/>bytes<sp/>size.</highlight></codeline>
<codeline lineno="130" refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea04194d85cd5ea237e4bfe2a2a772a06d" kindref="member" tooltip="4 bytes size.">kSizeDWord</ref><sp/>=<sp/>4,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>8<sp/>bytes<sp/>size.</highlight></codeline>
<codeline lineno="132" refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea0ad65ff2feec4c11b32a22afd6d931f9" kindref="member" tooltip="8 bytes size.">kSizeQWord</ref><sp/>=<sp/>8,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>10<sp/>bytes<sp/>size.</highlight></codeline>
<codeline lineno="134" refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea18c9dc743897b1d3028cb10495312442" kindref="member" tooltip="10 bytes size.">kSizeTWord</ref><sp/>=<sp/>10,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>16<sp/>bytes<sp/>size.</highlight></codeline>
<codeline lineno="136" refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea85a2e0f1378aff0bd536bb7161f08203" kindref="member" tooltip="16 bytes size.">kSizeOWord</ref><sp/>=<sp/>16,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>32<sp/>bytes<sp/>size.</highlight></codeline>
<codeline lineno="138" refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1ggaf2740675f6f8b14a3aea317cd6c75adea939978c7a022820a3b19bf13ade6c533" kindref="member" tooltip="32 bytes size.">kSizeYWord</ref><sp/>=<sp/>32</highlight></codeline>
<codeline lineno="139"><highlight class="normal">};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kMemType]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment">//!<sp/>@brief<sp/>Type<sp/>of<sp/>memory<sp/>operand.</highlight></codeline>
<codeline lineno="146" refid="group__asmjit__base_1ga2c246b178fd6ed7e28cf318e9432af7c" refkind="member"><highlight class="comment"></highlight><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__base_1ga2c246b178fd6ed7e28cf318e9432af7c" kindref="member" tooltip="Type of memory operand.">kMemType</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>operand<sp/>is<sp/>a<sp/>combination<sp/>of<sp/>base<sp/>register,<sp/>optional<sp/>index</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/>//!<sp/>register<sp/>and<sp/>optional<sp/>displacement.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>The<sp/>@ref<sp/>Assembler<sp/>interprets<sp/>@ref<sp/>kMemTypeBaseIndex<sp/>and<sp/>@ref</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/>//!<sp/>kMemTypeStackIndex<sp/>types<sp/>the<sp/>same<sp/>way,<sp/>but<sp/>@ref<sp/>Compiler<sp/>interprets</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/>//!<sp/>@ref<sp/>kMemTypeBaseIndex<sp/>as<sp/>[base<sp/>+<sp/>index]<sp/>and<sp/>@ref<sp/>kMemTypeStackIndex<sp/>as</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/>//!<sp/>[stack(base)<sp/>+<sp/>index].</highlight></codeline>
<codeline lineno="154" refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>operand<sp/>is<sp/>a<sp/>combination<sp/>of<sp/>variable&apos;s<sp/>memory<sp/>location,</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/>//!<sp/>optional<sp/>index<sp/>register<sp/>and<sp/>displacement.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>The<sp/>@ref<sp/>Assembler<sp/>interprets<sp/>@ref<sp/>kMemTypeBaseIndex<sp/>and<sp/>@ref</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>//!<sp/>kMemTypeStackIndex<sp/>types<sp/>in<sp/>the<sp/>same<sp/>way,<sp/>but<sp/>@ref<sp/>Compiler<sp/>interprets</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>//!<sp/>@ref<sp/>kMemTypeBaseIndex<sp/>as<sp/>[base<sp/>+<sp/>index]<sp/>and<sp/>@ref<sp/>kMemTypeStackIndex<sp/>as</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/>//!<sp/>[stack(base)<sp/>+<sp/>index].</highlight></codeline>
<codeline lineno="163" refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>operand<sp/>refers<sp/>to<sp/>the<sp/>memory<sp/>location<sp/>specified<sp/>by<sp/>a<sp/>label.</highlight></codeline>
<codeline lineno="166" refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7cae82bd56fa0b87db8b547e91bd69ac096" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7cae82bd56fa0b87db8b547e91bd69ac096" kindref="member" tooltip="Memory operand refers to the memory location specified by a label.">kMemTypeLabel</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>operand<sp/>is<sp/>an<sp/>absolute<sp/>memory<sp/>location.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/><sp/>//!<sp/>Supported<sp/>mostly<sp/>by<sp/>x86,<sp/>truncated<sp/>to<sp/>a<sp/>32-bit<sp/>value<sp/>when<sp/>running<sp/>in</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/><sp/>//!<sp/>64-bit<sp/>mode<sp/>(x64).</highlight></codeline>
<codeline lineno="171" refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca1af22cea9780418b75dcac75808743ac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca1af22cea9780418b75dcac75808743ac" kindref="member" tooltip="Memory operand is an absolute memory location.">kMemTypeAbsolute</ref><sp/>=<sp/>3</highlight></codeline>
<codeline lineno="172"><highlight class="normal">};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kVarType]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="group__asmjit__base_1ga9ca66fe5934ea03c67056886d4738059" refkind="member"><highlight class="normal">ASMJIT_ENUM(<ref refid="group__asmjit__base_1ga9ca66fe5934ea03c67056886d4738059" kindref="member">kVarType</ref>)<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>signed<sp/>8-bit<sp/>integer.</highlight></codeline>
<codeline lineno="180" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref><sp/>=<sp/>0,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>unsigned<sp/>8-bit<sp/>integer.</highlight></codeline>
<codeline lineno="182" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a3ee9a32193d3de6737306b4ebdd46396" kindref="member" tooltip="Variable is unsigned 8-bit integer.">kVarTypeUInt8</ref><sp/>=<sp/>1,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>signed<sp/>16-bit<sp/>integer.</highlight></codeline>
<codeline lineno="184" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059ade60befa7efc6bcd6cc0f631a4222240" kindref="member" tooltip="Variable is signed 16-bit integer.">kVarTypeInt16</ref><sp/>=<sp/>2,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>unsigned<sp/>16-bit<sp/>integer.</highlight></codeline>
<codeline lineno="186" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b91e6694d291f3939a362d8abce65b0" kindref="member" tooltip="Variable is unsigned 16-bit integer.">kVarTypeUInt16</ref><sp/>=<sp/>3,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>signed<sp/>32-bit<sp/>integer.</highlight></codeline>
<codeline lineno="188" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a22b8e16a218e7eb130f00c175ef8da30" kindref="member" tooltip="Variable is signed 32-bit integer.">kVarTypeInt32</ref><sp/>=<sp/>4,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>unsigned<sp/>32-bit<sp/>integer.</highlight></codeline>
<codeline lineno="190" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2b5b4e7542d65fcc1459555feab4cd60" kindref="member" tooltip="Variable is unsigned 32-bit integer.">kVarTypeUInt32</ref><sp/>=<sp/>5,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>signed<sp/>64-bit<sp/>integer.</highlight></codeline>
<codeline lineno="192" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a121fd4fcfa17aac9f0b850e0e34e2b25" kindref="member" tooltip="Variable is signed 64-bit integer.">kVarTypeInt64</ref><sp/>=<sp/>6,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>unsigned<sp/>64-bit<sp/>integer.</highlight></codeline>
<codeline lineno="194" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a6f1417491d08df1d61a7573caea99008" kindref="member" tooltip="Variable is unsigned 64-bit integer.">kVarTypeUInt64</ref><sp/>=<sp/>7,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>target<sp/>@c<sp/>intptr_t<sp/>(not<sp/>compatible<sp/>with<sp/>host<sp/>@c<sp/>intptr_t).</highlight></codeline>
<codeline lineno="197" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a773337143d44de47e460e5e280661e3e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a773337143d44de47e460e5e280661e3e" kindref="member" tooltip="Variable is target intptr_t (not compatible with host intptr_t).">kVarTypeIntPtr</ref><sp/>=<sp/>8,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>target<sp/>@c<sp/>uintptr_t<sp/>(not<sp/>compatible<sp/>with<sp/>host<sp/>@c<sp/>uintptr_t).</highlight></codeline>
<codeline lineno="199" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a68a9e960e4b15136ae863da48d59f8cd" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a68a9e960e4b15136ae863da48d59f8cd" kindref="member" tooltip="Variable is target uintptr_t (not compatible with host uintptr_t).">kVarTypeUIntPtr</ref><sp/>=<sp/>9,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>32-bit<sp/>floating<sp/>point<sp/>(single<sp/>precision).</highlight></codeline>
<codeline lineno="202" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref><sp/>=<sp/>10,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>is<sp/>64-bit<sp/>floating<sp/>point<sp/>(double<sp/>precision).</highlight></codeline>
<codeline lineno="204" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref><sp/>=<sp/>11,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Invalid<sp/>variable<sp/>type.</highlight></codeline>
<codeline lineno="207" refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a1e19eaa393e8cb9865b1acd0d728d7bb" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a1e19eaa393e8cb9865b1acd0d728d7bb" kindref="member" tooltip="Invalid variable type.">kVarTypeInvalid</ref><sp/>=<sp/>0xFF,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="210"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>_kVarTypeIntStart<sp/>=<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059acf10d6f2844598b50613d23b7faa00a7" kindref="member" tooltip="Variable is signed 8-bit integer.">kVarTypeInt8</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="212"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>_kVarTypeIntEnd<sp/>=<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a68a9e960e4b15136ae863da48d59f8cd" kindref="member" tooltip="Variable is target uintptr_t (not compatible with host uintptr_t).">kVarTypeUIntPtr</ref>,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="215"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>_kVarTypeFpStart<sp/>=<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059aac768ea9e4bfff5bb8f798527b29b774" kindref="member" tooltip="Variable is 32-bit floating point (single precision).">kVarTypeFp32</ref>,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="217"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>_kVarTypeFpEnd<sp/>=<sp/><ref refid="group__asmjit__base_1gga9ca66fe5934ea03c67056886d4738059a2f7af65dffd6124bc00383fa686070f5" kindref="member" tooltip="Variable is 64-bit floating point (double precision).">kVarTypeFp64</ref></highlight></codeline>
<codeline lineno="218"><highlight class="normal">};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::kRelocMode]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">ASMJIT_ENUM(kRelocMode)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>kRelocAbsToAbs<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>kRelocRelToAbs<sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>kRelocAbsToRel<sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>kRelocTrampoline<sp/>=<sp/>3</highlight></codeline>
<codeline lineno="229"><highlight class="normal">};</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::Ptr]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment">//!<sp/>@brief<sp/>64-bit<sp/>signed<sp/>pointer,<sp/>compatible<sp/>with<sp/>JIT<sp/>and<sp/>non-JIT<sp/>generators.</highlight></codeline>
<codeline lineno="236" refid="group__asmjit__base_1ga39730f3011134c2aa11a5692aea2a4ae" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int64_t<sp/><ref refid="group__asmjit__base_1ga39730f3011134c2aa11a5692aea2a4ae" kindref="member" tooltip="64-bit signed pointer, compatible with JIT and non-JIT generators.">SignedPtr</ref>;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="238"><highlight class="comment">//!<sp/>@brief<sp/>64-bit<sp/>unsigned<sp/>pointer,<sp/>compatible<sp/>with<sp/>JIT<sp/>and<sp/>non-JIT<sp/>generators.</highlight></codeline>
<codeline lineno="239" refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint64_t<sp/><ref refid="group__asmjit__base_1ga45067c037ca46c0da9398ef3dd258186" kindref="member" tooltip="64-bit unsigned pointer, compatible with JIT and non-JIT generators.">Ptr</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::Operand]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="245"><highlight class="comment">//!<sp/>@brief<sp/>Operand<sp/>can<sp/>contain<sp/>register,<sp/>memory<sp/>location,<sp/>immediate,<sp/>or<sp/>label.</highlight></codeline>
<codeline lineno="246" refid="structasmjit_1_1Operand" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Structs]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Base<sp/>operand<sp/>data.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BaseOp<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Type<sp/>of<sp/>operand,<sp/>see<sp/>@c<sp/>kOperandType.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>op;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Size<sp/>of<sp/>operand<sp/>(register,<sp/>address,<sp/>immediate,<sp/>or<sp/>variable).</highlight></codeline>
<codeline lineno="258"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>size;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Flags,<sp/>each<sp/>operand<sp/>uses<sp/>this<sp/>byte<sp/>for<sp/>something<sp/>else.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reserved0;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Reserved<sp/>(not<sp/>used).</highlight></codeline>
<codeline lineno="262"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reserved1;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Operand<sp/>id<sp/>(private<sp/>variable<sp/>for<sp/>@ref<sp/>BaseAssembler<sp/>and</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@ref<sp/>BaseCompiler<sp/>classes).</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/>//!</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@note<sp/>Uninitialized<sp/>operand<sp/>has<sp/>always<sp/>set<sp/>id<sp/>to<sp/>@ref<sp/>kInvalidValue.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>id;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>or<sp/>Variable<sp/>operand<sp/>data.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VRegOp<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Type<sp/>of<sp/>operand,<sp/>@c<sp/>kOperandTypeReg.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>op;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Size<sp/>of<sp/>register<sp/>or<sp/>variable.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>size;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>code<sp/>=<sp/>(type<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>index.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>code;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>type<sp/>and<sp/>index<sp/>access.</highlight></codeline>
<codeline lineno="285"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(ASMJIT_HOST_LE)</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>index.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>index;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>type.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>type;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>type.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>type;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>index.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>index;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>ASMJIT_HOST</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>id<sp/>(used<sp/>by<sp/>@ref<sp/>BaseCompiler<sp/>to<sp/>identify<sp/>variables).</highlight></codeline>
<codeline lineno="301"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>id;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Variable<sp/>type.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>vType;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/>//!</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Unused.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>vUnused;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>or<sp/>Variable<sp/>operand<sp/>data.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">VMemOp<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Type<sp/>of<sp/>operand,<sp/>@c<sp/>kOperandTypeMem.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>op;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Size<sp/>of<sp/>the<sp/>pointer<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>size;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Type<sp/>of<sp/>the<sp/>memory<sp/>operand,<sp/>see<sp/>@ref<sp/>kMemType.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>type;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>X86/X64<sp/>layout:</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/><sp/><sp/>-<sp/>segment<sp/><sp/>[3<sp/>bits],<sp/>see<sp/>@ref<sp/>kSeg.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/><sp/><sp/>-<sp/>shift<sp/><sp/><sp/><sp/>[2<sp/>bits],<sp/>index<sp/>register<sp/>shift<sp/>(0<sp/>to<sp/>3).</highlight></codeline>
<codeline lineno="324"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>flags;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Base<sp/>register,<sp/>variable<sp/>or<sp/>label<sp/>id.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>base;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Index<sp/>register<sp/>or<sp/>variable.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>index;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>32-bit<sp/>displacement<sp/>or<sp/>absolute<sp/>address.</highlight></codeline>
<codeline lineno="331"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>displacement;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Immediate<sp/>operand<sp/>data.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ImmOp<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Type<sp/>of<sp/>operand,<sp/>@ref<sp/>kOperandTypeImm.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>op;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Size<sp/>of<sp/>immediate<sp/>(or<sp/>0<sp/>to<sp/>autodetect).</highlight></codeline>
<codeline lineno="341"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>size;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Reserved<sp/>(not<sp/>used).</highlight></codeline>
<codeline lineno="343"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reserved0;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Reserved<sp/>(not<sp/>used).</highlight></codeline>
<codeline lineno="345"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reserved1;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Operand<sp/>id<sp/>(@ref<sp/>kInvalidValue).</highlight></codeline>
<codeline lineno="348"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>id;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>8x<sp/>signed<sp/>8-bit<sp/>immediate<sp/>values.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int8_t<sp/>_i8[8];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>8x<sp/>unsigned<sp/>8-bit<sp/>immediate<sp/>values.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>_u8[8];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>4x<sp/>signed<sp/>16-bit<sp/>immediate<sp/>values.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>_i16[4];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>4x<sp/>unsigned<sp/>16-bit<sp/>immediate<sp/>values.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>_u16[4];</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>2x<sp/>signed<sp/>32-bit<sp/>immediate<sp/>values.</highlight></codeline>
<codeline lineno="362"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>_i32[2];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>2x<sp/>unsigned<sp/>32-bit<sp/>immediate<sp/>values.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>_u32[2];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>1x<sp/>signed<sp/>64-bit<sp/>immediate<sp/>value.</highlight></codeline>
<codeline lineno="367"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>_i64[1];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>1x<sp/>unsigned<sp/>64-bit<sp/>immediate<sp/>value.</highlight></codeline>
<codeline lineno="369"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>_u64[1];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>2x<sp/>SP-FP<sp/>values.</highlight></codeline>
<codeline lineno="372"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>_f32[2];</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>1x<sp/>DP-FP<sp/>value.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>_f64[1];</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>value;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Label<sp/>operand<sp/>data.</highlight></codeline>
<codeline lineno="381"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">LabelOp<sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Type<sp/>of<sp/>operand,<sp/>@c<sp/>kOperandTypeLabel.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>op;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Reserved<sp/>(not<sp/>used).</highlight></codeline>
<codeline lineno="385"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>size;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Reserved<sp/>(not<sp/>used).</highlight></codeline>
<codeline lineno="387"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reserved0;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Reserved<sp/>(not<sp/>used).</highlight></codeline>
<codeline lineno="389"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reserved1;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Operand<sp/>id.</highlight></codeline>
<codeline lineno="392"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>id;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>an<sp/>uninitialized<sp/>operand.</highlight></codeline>
<codeline lineno="400" refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>()<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba5606bb706ba515b597456bed0abe8b03" kindref="member" tooltip="Invalid operand, used only internally (not initialized Operand).">kOperandTypeNone</ref>,<sp/>0,<sp/>0,<sp/>0,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_d2_d3(0,<sp/>0);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>reference<sp/>to<sp/>@a<sp/>other<sp/>operand.</highlight></codeline>
<codeline lineno="406" refid="structasmjit_1_1Operand_1a55218d0096d0f0352484ecd0b7e3ef53" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Operand_1a55218d0096d0f0352484ecd0b7e3ef53" kindref="member" tooltip="Create a reference to other operand.">Operand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>_init(other);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operand]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>Operand.</highlight></codeline>
<codeline lineno="417" refid="structasmjit_1_1Operand_1a985b4db41884dae41b27d2d880c7e86f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref><sp/><ref refid="structasmjit_1_1Operand_1a985b4db41884dae41b27d2d880c7e86f" kindref="member" tooltip="Clone Operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Init<sp/>&amp;<sp/>Copy]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Initialize<sp/>operand<sp/>to<sp/>@a<sp/>other<sp/>(used<sp/>by<sp/>constructors).</highlight></codeline>
<codeline lineno="428"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>::memcpy(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;other,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>));</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_init_packed_op_sz_b0_b1_id(uint32_t<sp/>op,<sp/>uint32_t<sp/>sz,<sp/>uint32_t<sp/>r0,<sp/>uint32_t<sp/>r1,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>hack<sp/>is<sp/>not<sp/>for<sp/>performance,<sp/>but<sp/>to<sp/>decrease<sp/>the<sp/>size<sp/>of<sp/>the<sp/>binary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generated<sp/>when<sp/>constructing<sp/>AsmJit<sp/>operands<sp/>(mostly<sp/>for<sp/>third<sp/>parties).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>compilers<sp/>are<sp/>not<sp/>able<sp/>to<sp/>join<sp/>four<sp/>BYTE<sp/>writes<sp/>to<sp/>a<sp/>single<sp/>DWORD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write.<sp/>Because<sp/>the<sp/>&apos;a&apos;,<sp/>&apos;b&apos;,<sp/>&apos;c&apos;<sp/>and<sp/>&apos;d&apos;<sp/>variables<sp/>are<sp/>usually<sp/>compile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>constants<sp/>the<sp/>compiler<sp/>can<sp/>do<sp/>a<sp/>really<sp/>nice<sp/>job<sp/>if<sp/>they<sp/>are<sp/>joined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>using<sp/>bitwise<sp/>operations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].setPacked_2x32(IntUtil::pack32_4x8(op,<sp/>sz,<sp/>r0,<sp/>r1),<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_init_packed_op_sz_w0_id(uint32_t<sp/>op,<sp/>uint32_t<sp/>sz,<sp/>uint32_t<sp/>w0,<sp/>uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].setPacked_2x32(IntUtil::pack32_2x8_1x16(op,<sp/>sz,<sp/>w0),<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_init_packed_d0_d1(uint32_t<sp/>u0,<sp/>uint32_t<sp/>u1)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].setPacked_2x32(u0,<sp/>u1);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_init_packed_d2_d3(uint32_t<sp/>u2,<sp/>uint32_t<sp/>u3)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[1].setPacked_2x32(u2,<sp/>u3);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="454"><highlight class="comment"><sp/><sp/>//!<sp/>@internal</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Initialize<sp/>operand<sp/>to<sp/>@a<sp/>other<sp/>(used<sp/>by<sp/>assign<sp/>operators).</highlight></codeline>
<codeline lineno="457"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_copy(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>::memcpy(</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;other,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>));</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Data]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>T&amp;<sp/>getData()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>);<sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>getData()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">T&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>);<sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Type]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>type<sp/>of<sp/>the<sp/>operand,<sp/>see<sp/>@ref<sp/>kOperandType.</highlight></codeline>
<codeline lineno="476" refid="structasmjit_1_1Operand_1a2ea181bfeeae6d5467f7343dfddcb57c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1Operand_1a2ea181bfeeae6d5467f7343dfddcb57c" kindref="member" tooltip="Get type of the operand, see kOperandType.">getOp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.op;<sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>operand<sp/>is<sp/>none<sp/>(@ref<sp/>kOperandTypeNone).</highlight></codeline>
<codeline lineno="479" refid="structasmjit_1_1Operand_1ad09b5fd91f3d8c754980f98a2019be7b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ad09b5fd91f3d8c754980f98a2019be7b" kindref="member" tooltip="Get whether the operand is none (kOperandTypeNone).">isNone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.op<sp/>==<sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba5606bb706ba515b597456bed0abe8b03" kindref="member" tooltip="Invalid operand, used only internally (not initialized Operand).">kOperandTypeNone</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>operand<sp/>is<sp/>any<sp/>register<sp/>(@ref<sp/>kOperandTypeReg).</highlight></codeline>
<codeline lineno="481" refid="structasmjit_1_1Operand_1ae0ce4d16beb59e0934942cba222054af" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ae0ce4d16beb59e0934942cba222054af" kindref="member" tooltip="Get whether the operand is any register (kOperandTypeReg).">isReg</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.op<sp/>==<sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba8742403556c7e635e7531c58252de1ea" kindref="member" tooltip="Operand is a register.">kOperandTypeReg</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>operand<sp/>is<sp/>variable<sp/>(@ref<sp/>kOperandTypeVar).</highlight></codeline>
<codeline lineno="483" refid="structasmjit_1_1Operand_1a809703f677ab89fb8d619ad717c59a02" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a809703f677ab89fb8d619ad717c59a02" kindref="member" tooltip="Get whether the operand is variable (kOperandTypeVar).">isVar</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.op<sp/>==<sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cbad24fc6aeac580335e62f8a11e8a2043f" kindref="member" tooltip="Operand is a variable.">kOperandTypeVar</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>operand<sp/>is<sp/>memory<sp/>address<sp/>(@ref<sp/>kOperandTypeMem).</highlight></codeline>
<codeline lineno="485" refid="structasmjit_1_1Operand_1afb9863bc270de49d257dce8593e79cb4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1afb9863bc270de49d257dce8593e79cb4" kindref="member" tooltip="Get whether the operand is memory address (kOperandTypeMem).">isMem</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.op<sp/>==<sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>operand<sp/>is<sp/>an<sp/>immediate<sp/>value<sp/>(@ref<sp/>kOperandTypeImm).</highlight></codeline>
<codeline lineno="487" refid="structasmjit_1_1Operand_1ab85a3b5c7354a38ca52e78fea1739759" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ab85a3b5c7354a38ca52e78fea1739759" kindref="member" tooltip="Get whether the operand is an immediate value (kOperandTypeImm).">isImm</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.op<sp/>==<sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba1d91cd01cea7a2b5067aa24907d1372b" kindref="member" tooltip="Operand is an immediate value.">kOperandTypeImm</ref>);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>operand<sp/>is<sp/>label<sp/>(@ref<sp/>kOperandTypeLabel).</highlight></codeline>
<codeline lineno="489" refid="structasmjit_1_1Operand_1a2a77f09fc4951c9e58fccd18a6eaf1b3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a2a77f09fc4951c9e58fccd18a6eaf1b3" kindref="member" tooltip="Get whether the operand is label (kOperandTypeLabel).">isLabel</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.op<sp/>==<sp/><ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba2dcaa04fd5ea217510587264bb4ecac8" kindref="member" tooltip="Operand is a label.">kOperandTypeLabel</ref>);<sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Type<sp/>-<sp/>Combined]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>operand<sp/>is<sp/>register<sp/>of<sp/>@a<sp/>type.</highlight></codeline>
<codeline lineno="496" refid="structasmjit_1_1Operand_1a5dd129c65aac0057afdd4f844785437a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a5dd129c65aac0057afdd4f844785437a" kindref="member" tooltip="Get whether the operand is register of type.">isRegType</ref>(uint32_t<sp/>type)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].u32[0]<sp/>&amp;<sp/>IntUtil::pack32_2x8_1x16(0xFF,<sp/>0,<sp/>0xFF00))<sp/>==<sp/>IntUtil::pack32_2x8_1x16(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba8742403556c7e635e7531c58252de1ea" kindref="member" tooltip="Operand is a register.">kOperandTypeReg</ref>,<sp/>0,<sp/>(type<sp/>&lt;&lt;<sp/>8));</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>operand<sp/>is<sp/>register<sp/>and<sp/>of<sp/>@a<sp/>type<sp/>and<sp/>@a<sp/>index.</highlight></codeline>
<codeline lineno="501" refid="structasmjit_1_1Operand_1a1cd13703d63d231c97cf76c020e2b605" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a1cd13703d63d231c97cf76c020e2b605" kindref="member" tooltip="Get whether the operand is register and of type and index.">isRegCode</ref>(uint32_t<sp/>type,<sp/>uint32_t<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0].u32[0]<sp/>&amp;<sp/>IntUtil::pack32_2x8_1x16(0xFF,<sp/>0,<sp/>0xFFFF))<sp/>==<sp/>IntUtil::pack32_2x8_1x16(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba8742403556c7e635e7531c58252de1ea" kindref="member" tooltip="Operand is a register.">kOperandTypeReg</ref>,<sp/>0,<sp/>(type<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>index);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>operand<sp/>is<sp/>a<sp/>register<sp/>or<sp/>memory.</highlight></codeline>
<codeline lineno="506" refid="structasmjit_1_1Operand_1aea0d545eea3526cfb1ae0adb8871de78" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aea0d545eea3526cfb1ae0adb8871de78" kindref="member" tooltip="Get whether the operand is a register or memory.">isRegOrMem</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba8742403556c7e635e7531c58252de1ea" kindref="member" tooltip="Operand is a register.">kOperandTypeReg</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref><sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(static_cast&lt;uint32_t&gt;(<ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.op)<sp/>|<sp/>0x2U)<sp/>==<sp/>0x3U;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>operand<sp/>is<sp/>variable<sp/>or<sp/>memory.</highlight></codeline>
<codeline lineno="513" refid="structasmjit_1_1Operand_1ae65f6fcaacdf3a299256f909fcda5576" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ae65f6fcaacdf3a299256f909fcda5576" kindref="member" tooltip="Get whether the operand is variable or memory.">isVarOrMem</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cbad24fc6aeac580335e62f8a11e8a2043f" kindref="member" tooltip="Operand is a variable.">kOperandTypeVar</ref><sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__asmjit__config_1ga9db1c56e8381f1728245475745b6213e" kindref="member" tooltip="Assertion macro. Default implementation calls asmjit::assertionFailed() function.">ASMJIT_ASSERT</ref>(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref><sp/>==<sp/>3);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(static_cast&lt;uint32_t&gt;(<ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.op)<sp/>-<sp/>2U)<sp/>&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Size]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>size<sp/>of<sp/>the<sp/>operand<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="524" refid="structasmjit_1_1Operand_1ae5bb07ef28e2c29ebf9b762ea8f36b7e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1Operand_1ae5bb07ef28e2c29ebf9b762ea8f36b7e" kindref="member" tooltip="Get size of the operand in bytes.">getSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.size;<sp/>}</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Id]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>operand<sp/>id<sp/>(Operand<sp/>id&apos;s<sp/>are<sp/>used<sp/>internally<sp/>by</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/><sp/>//!<sp/>@ref<sp/>BaseAssembler<sp/>and<sp/>@ref<sp/>BaseCompiler<sp/>classes).</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>There<sp/>is<sp/>no<sp/>way<sp/>how<sp/>to<sp/>change<sp/>or<sp/>remove<sp/>operand<sp/>id.<sp/>If<sp/>you<sp/>don&apos;t</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/><sp/>//!<sp/>need<sp/>the<sp/>operand<sp/>just<sp/>assign<sp/>different<sp/>operand<sp/>to<sp/>this<sp/>one.</highlight></codeline>
<codeline lineno="535" refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1Operand_1a005389a2368b711612feda323d63766f" kindref="member" tooltip="Get operand id (Operand id&amp;#39;s are used internally by BaseAssembler and BaseCompiler classes)...">getId</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.id;<sp/>}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Members]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Base<sp/>data.</highlight></codeline>
<codeline lineno="543" refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>BaseOp<sp/><ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Register<sp/>or<sp/>variable<sp/>data.</highlight></codeline>
<codeline lineno="545" refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>VRegOp<sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Memory<sp/>data.</highlight></codeline>
<codeline lineno="547" refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>VMemOp<sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Immediate<sp/>data.</highlight></codeline>
<codeline lineno="549" refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ImmOp<sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Label<sp/>data.</highlight></codeline>
<codeline lineno="551" refid="structasmjit_1_1Operand_1a706538f838a8416a7e8e7cc4fa6f1db8" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>LabelOp<sp/><ref refid="structasmjit_1_1Operand_1a706538f838a8416a7e8e7cc4fa6f1db8" kindref="member" tooltip="Label data.">_label</ref>;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/><sp/><sp/>//!<sp/>@brief<sp/>Packed<sp/>operand<sp/>as<sp/>two<sp/>64-bit<sp/>integers.</highlight></codeline>
<codeline lineno="554" refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>UInt64<sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[2];</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="556"><highlight class="normal">};</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">ASMJIT_VAR<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Operand<sp/>noOperand;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::OperandUtil]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="564"><highlight class="comment">//!<sp/>@brief<sp/>Operand<sp/>utilities.</highlight></codeline>
<codeline lineno="565" refid="structasmjit_1_1OperandUtil" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1OperandUtil" kindref="compound" tooltip="Operand utilities.">OperandUtil</ref><sp/>{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Make<sp/>variable<sp/>id.</highlight></codeline>
<codeline lineno="567" refid="structasmjit_1_1OperandUtil_1a05d51e50d26642b79acc2e8cdff2449c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1OperandUtil_1a05d51e50d26642b79acc2e8cdff2449c" kindref="member" tooltip="Make variable id.">makeVarId</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>|<sp/><ref refid="group__asmjit__base_1gga1941577d59c9d0f61a4bcde8c19ec9c5a295c08b8f3024d78e730ef790265d632" kindref="member" tooltip="Operand id refers to BaseVar.">kOperandIdVar</ref>;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Make<sp/>label<sp/>id.</highlight></codeline>
<codeline lineno="572" refid="structasmjit_1_1OperandUtil_1ae37a451a0be7a004ea5c802073161601" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1OperandUtil_1ae37a451a0be7a004ea5c802073161601" kindref="member" tooltip="Make label id.">makeLabelId</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Strip<sp/>variable<sp/>id<sp/>bit<sp/>so<sp/>it<sp/>becomes<sp/>a<sp/>pure<sp/>index<sp/>to<sp/>VarData[]<sp/>array.</highlight></codeline>
<codeline lineno="577" refid="structasmjit_1_1OperandUtil_1a5961fd90a14757a7938185be30db8f02" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1OperandUtil_1a5961fd90a14757a7938185be30db8f02" kindref="member" tooltip="Strip variable id bit so it becomes a pure index to VarData[] array.">stripVarId</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&amp;<sp/>0x7FFFFFFFU;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>id<sp/>refers<sp/>to<sp/>@ref<sp/>BaseVar.</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>The<sp/>function<sp/>will<sp/>never<sp/>return<sp/>@c<sp/>true<sp/>if<sp/>the<sp/>id<sp/>is<sp/>@c<sp/>kInvalidValue.</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/><sp/>//!<sp/>The<sp/>trick<sp/>is<sp/>to<sp/>compare<sp/>a<sp/>given<sp/>id<sp/>to<sp/>-1<sp/>(kInvalidValue)<sp/>so<sp/>we<sp/>check<sp/>both</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/><sp/>//!<sp/>using<sp/>only<sp/>one<sp/>comparison.</highlight></codeline>
<codeline lineno="586" refid="structasmjit_1_1OperandUtil_1ad7ffa13ea065b296ee99988e2827a95a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1OperandUtil_1ad7ffa13ea065b296ee99988e2827a95a" kindref="member" tooltip="Get whether the id refers to BaseVar.">isVarId</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(id)<sp/>&lt;<sp/>-1;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>id<sp/>refers<sp/>to<sp/>@ref<sp/>Label.</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/>//!</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/>//!<sp/>@note<sp/>The<sp/>function<sp/>will<sp/>never<sp/>return<sp/>@c<sp/>true<sp/>if<sp/>the<sp/>id<sp/>is<sp/>@c<sp/>kInvalidValue.</highlight></codeline>
<codeline lineno="593" refid="structasmjit_1_1OperandUtil_1abf6422cdd71e44672e769bd24e920a3a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1OperandUtil_1abf6422cdd71e44672e769bd24e920a3a" kindref="member" tooltip="Get whether the id refers to Label.">isLabelId</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(id)<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal">};</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseReg]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="602"><highlight class="comment">//!<sp/>@brief<sp/>Base<sp/>class<sp/>for<sp/>all<sp/>register<sp/>operands.</highlight></codeline>
<codeline lineno="603" refid="structasmjit_1_1BaseReg" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseReg" kindref="compound" tooltip="Base class for all register operands.">BaseReg</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>dummy<sp/>base<sp/>register.</highlight></codeline>
<codeline lineno="609" refid="structasmjit_1_1BaseReg_1aeb3b2a856b508640dc374d6b96361dc4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseReg_1aeb3b2a856b508640dc374d6b96361dc4" kindref="member" tooltip="Create a dummy base register.">BaseReg</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(NoInit)</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/>{<sp/>_init_packed_op_sz_w0_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba8742403556c7e635e7531c58252de1ea" kindref="member" tooltip="Operand is a register.">kOperandTypeReg</ref>,<sp/>0,<sp/>(<ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref><sp/>&lt;&lt;<sp/>8)<sp/>+<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea3a3f6193c6ec722bcbb41009493e6bc8" kindref="member" tooltip="Invalid register index.">kInvalidReg</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);<sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>base<sp/>register.</highlight></codeline>
<codeline lineno="613" refid="structasmjit_1_1BaseReg_1ac61d7924a3f74a39c30915b363978d18" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseReg_1aeb3b2a856b508640dc374d6b96361dc4" kindref="member" tooltip="Create a dummy base register.">BaseReg</ref>(uint32_t<sp/>type,<sp/>uint32_t<sp/>index,<sp/>uint32_t<sp/>size)<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(NoInit)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/>{<sp/>_init_packed_op_sz_w0_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba8742403556c7e635e7531c58252de1ea" kindref="member" tooltip="Operand is a register.">kOperandTypeReg</ref>,<sp/>size,<sp/>(type<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>index,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);<sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>reference<sp/>to<sp/>@a<sp/>other.</highlight></codeline>
<codeline lineno="617" refid="structasmjit_1_1BaseReg_1a9871744c4d5a9d69aa6b488d42f451d0" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseReg_1a9871744c4d5a9d69aa6b488d42f451d0" kindref="member" tooltip="Create a new reference to other.">BaseReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseReg" kindref="compound" tooltip="Base class for all register operands.">BaseReg</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseReg_1aeb3b2a856b508640dc374d6b96361dc4" kindref="member" tooltip="Create a dummy base register.">BaseReg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[BaseReg<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>BaseReg<sp/>operand.</highlight></codeline>
<codeline lineno="626" refid="structasmjit_1_1BaseReg_1a94eaba0f0c5e61e39601f9146d0e3ae4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseReg" kindref="compound" tooltip="Base class for all register operands.">BaseReg</ref><sp/><ref refid="structasmjit_1_1BaseReg_1a94eaba0f0c5e61e39601f9146d0e3ae4" kindref="member" tooltip="Clone BaseReg operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseReg_1aeb3b2a856b508640dc374d6b96361dc4" kindref="member" tooltip="Create a dummy base register.">BaseReg</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>register<sp/>code<sp/>is<sp/>equal<sp/>to<sp/>@a<sp/>type.</highlight></codeline>
<codeline lineno="631" refid="structasmjit_1_1BaseReg_1ae7e080222bc00435ab847fbd85b97477" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseReg_1ae7e080222bc00435ab847fbd85b97477" kindref="member" tooltip="Get whether register code is equal to type.">isRegType</ref>(uint32_t<sp/>type)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type<sp/>==<sp/>type;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>register<sp/>code<sp/>is<sp/>equal<sp/>to<sp/>@a<sp/>type.</highlight></codeline>
<codeline lineno="636" refid="structasmjit_1_1BaseReg_1a455492c42efd02a1623d8618b4a70bf1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseReg_1a455492c42efd02a1623d8618b4a70bf1" kindref="member" tooltip="Get whether register code is equal to type.">isRegCode</ref>(uint32_t<sp/>code)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.code<sp/>==<sp/>code;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>register<sp/>code<sp/>is<sp/>equal<sp/>to<sp/>@a<sp/>type.</highlight></codeline>
<codeline lineno="641" refid="structasmjit_1_1BaseReg_1a347038655e77ca9cb894c824a295dd36" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseReg_1a347038655e77ca9cb894c824a295dd36" kindref="member" tooltip="Get whether register code is equal to type.">isRegCode</ref>(uint32_t<sp/>type,<sp/>uint32_t<sp/>index)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.code<sp/>==<sp/>(type<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>index;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>register<sp/>code<sp/>that<sp/>equals<sp/>to<sp/>&apos;(type<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>index&apos;.</highlight></codeline>
<codeline lineno="646" refid="structasmjit_1_1BaseReg_1a929fbbb73d8b17add8adb01189a73801" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseReg_1a929fbbb73d8b17add8adb01189a73801" kindref="member" tooltip="Get register code that equals to &amp;#39;(type &amp;lt;&amp;lt; 8) + index&amp;#39;.">getRegCode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.code;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>register<sp/>type.</highlight></codeline>
<codeline lineno="651" refid="structasmjit_1_1BaseReg_1a11479e7cffd15ed8f7f997f5f537ac93" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseReg_1a11479e7cffd15ed8f7f997f5f537ac93" kindref="member" tooltip="Get register type.">getRegType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.type;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>register<sp/>index.</highlight></codeline>
<codeline lineno="656" refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseReg_1a8d7aff5d8ba0646939e86a43afec750e" kindref="member" tooltip="Get register index.">getRegIndex</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.index;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASMJIT_REG_OP(_Type_)<sp/>\</highlight></codeline>
<codeline lineno="661"><highlight class="preprocessor"><sp/><sp/>ASMJIT_INLINE<sp/>_Type_<sp/>clone()<sp/>const<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="662"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>_Type_(*this);<sp/>\</highlight></codeline>
<codeline lineno="663"><highlight class="preprocessor"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="664"><highlight class="preprocessor"><sp/><sp/>\</highlight></codeline>
<codeline lineno="665"><highlight class="preprocessor"></highlight><highlight class="comment"><sp/><sp/>/*!<sp/>@brief<sp/>Set<sp/>register<sp/>@a<sp/>size.<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>_Type_&amp;<sp/>setSize(uint32_t<sp/>size)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>_vreg.size<sp/>=<sp/>static_cast&lt;uint8_t&gt;(size);<sp/>\</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*this;<sp/>\</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>\</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/>/*!<sp/>@brief<sp/>Set<sp/>register<sp/>@a<sp/>code.<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>_Type_&amp;<sp/>setCode(uint32_t<sp/>code)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>_vreg.code<sp/>=<sp/>static_cast&lt;uint16_t&gt;(code);<sp/>\</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*this;<sp/>\</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>\</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/>/*!<sp/>@brief<sp/>Set<sp/>register<sp/>@a<sp/>type<sp/>and<sp/>@a<sp/>index.<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>_Type_&amp;<sp/>setCode(uint32_t<sp/>type,<sp/>uint32_t<sp/>index)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>_vreg.type<sp/>=<sp/>static_cast&lt;uint8_t&gt;(type);<sp/>\</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>_vreg.index<sp/>=<sp/>static_cast&lt;uint8_t&gt;(index);<sp/>\</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*this;<sp/>\</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>\</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/>/*!<sp/>@brief<sp/>Set<sp/>register<sp/>@a<sp/>type.<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>_Type_&amp;<sp/>setType(uint32_t<sp/>type)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>_vreg.type<sp/>=<sp/>static_cast&lt;uint8_t&gt;(type);<sp/>\</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*this;<sp/>\</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>\</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment"><sp/><sp/>/*!<sp/>@brief<sp/>Set<sp/>register<sp/>@a<sp/>index.<sp/>*/</highlight><highlight class="normal"><sp/>\</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>_Type_&amp;<sp/>setIndex(uint32_t<sp/>index)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>_vreg.index<sp/>=<sp/>static_cast&lt;uint8_t&gt;(index);<sp/>\</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>*this;<sp/>\</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/>\</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>_Type_&amp;<sp/>operator=(const<sp/>_Type_&amp;<sp/>other)<sp/>{<sp/>_copy(other);<sp/>return<sp/>*this;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>\</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>bool<sp/>operator==(const<sp/>_Type_&amp;<sp/>other)<sp/>const<sp/>{<sp/>return<sp/>_packed[0].u32[0]<sp/>==<sp/>other._packed[0].u32[0];<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>bool<sp/>operator!=(const<sp/>_Type_&amp;<sp/>other)<sp/>const<sp/>{<sp/>return<sp/>!operator==(other);<sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal">};</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseMem]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="706"><highlight class="comment">//!<sp/>@brief<sp/>Base<sp/>class<sp/>for<sp/>all<sp/>memory<sp/>operands.</highlight></codeline>
<codeline lineno="707" refid="structasmjit_1_1BaseMem" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref><sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseMem" kindref="compound" tooltip="Base class for all memory operands.">BaseMem</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1BaseMem_1a1f4dc931e7b675d8191e73580934aefc" kindref="member" tooltip="Reset BaseMem operand.">reset</ref>();</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>BaseMem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseMem&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>BaseMem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[BaseMem<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>BaseMem<sp/>operand.</highlight></codeline>
<codeline lineno="724" refid="structasmjit_1_1BaseMem_1ae244676de26cc8dddf39ff186248a295" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>BaseMem<sp/><ref refid="structasmjit_1_1BaseMem_1ae244676de26cc8dddf39ff186248a295" kindref="member" tooltip="Clone BaseMem operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BaseMem(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Reset<sp/>BaseMem<sp/>operand.</highlight></codeline>
<codeline lineno="729" refid="structasmjit_1_1BaseMem_1a1f4dc931e7b675d8191e73580934aefc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseMem_1a1f4dc931e7b675d8191e73580934aefc" kindref="member" tooltip="Reset BaseMem operand.">reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba3d620e7f3b9d9eb43a8be405dd5a565c" kindref="member" tooltip="Operand is a memory.">kOperandTypeMem</ref>,<sp/>0,<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7ca16a9e6a8396089c64e6a1f73bebcd519" kindref="member" tooltip="Memory operand is a combination of base register, optional index register and optional displacement...">kMemTypeBaseIndex</ref>,<sp/>0,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_d2_d3(<ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>the<sp/>type<sp/>of<sp/>the<sp/>memory<sp/>operand,<sp/>see<sp/>@c<sp/>kMemType.</highlight></codeline>
<codeline lineno="735" refid="structasmjit_1_1BaseMem_1a24acdeebe5c596826d880fc0530fd286" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseMem_1a24acdeebe5c596826d880fc0530fd286" kindref="member" tooltip="Get the type of the memory operand, see kMemType.">getMemType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.type;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>type<sp/>of<sp/>the<sp/>memory<sp/>operand<sp/>is<sp/>either<sp/>@ref</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/><sp/>//!<sp/>kMemTypeBaseIndex<sp/>or<sp/>@ref<sp/>kMemTypeStackIndex.</highlight></codeline>
<codeline lineno="738" refid="structasmjit_1_1BaseMem_1a2416ca5946b07e39b5f34802b13cd51e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseMem_1a2416ca5946b07e39b5f34802b13cd51e" kindref="member" tooltip="Get whether the type of the memory operand is either kMemTypeBaseIndex or kMemTypeStackIndex.">isBaseIndexType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.type<sp/>&lt;=<sp/><ref refid="group__asmjit__base_1gga2c246b178fd6ed7e28cf318e9432af7caae883eff3882c91f1d85a2d7ff41662d" kindref="member" tooltip="Memory operand is a combination of variable&amp;#39;s memory location, optional index register and displaceme...">kMemTypeStackIndex</ref>;<sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>memory<sp/>operand<sp/>has<sp/>base<sp/>register.</highlight></codeline>
<codeline lineno="741" refid="structasmjit_1_1BaseMem_1a7cf1fa6c0ca9ad7afde684a059139b26" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1BaseMem_1a7cf1fa6c0ca9ad7afde684a059139b26" kindref="member" tooltip="Get whether the memory operand has base register.">hasBase</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.base<sp/>!=<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>;<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>memory<sp/>operand<sp/>base<sp/>id,<sp/>or<sp/>@c<sp/>kInvalidValue.</highlight></codeline>
<codeline lineno="743" refid="structasmjit_1_1BaseMem_1a584f151f9e502eef9412f03ed8fb0ecf" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1BaseMem_1a584f151f9e502eef9412f03ed8fb0ecf" kindref="member" tooltip="Get memory operand base id, or kInvalidValue.">getBase</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.base;<sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>operand<sp/>size.</highlight></codeline>
<codeline lineno="746" refid="structasmjit_1_1BaseMem_1a34a34cc4a1d02db16003ab447591c3ad" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>BaseMem&amp;<sp/><ref refid="structasmjit_1_1BaseMem_1a34a34cc4a1d02db16003ab447591c3ad" kindref="member" tooltip="Set memory operand size.">setSize</ref>(uint32_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(size);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>memory<sp/>operand<sp/>relative<sp/>displacement.</highlight></codeline>
<codeline lineno="752" refid="structasmjit_1_1BaseMem_1aa20691966aa820b34dcb858bd3ee6e8e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int32_t<sp/><ref refid="structasmjit_1_1BaseMem_1aa20691966aa820b34dcb858bd3ee6e8e" kindref="member" tooltip="Get memory operand relative displacement.">getDisplacement</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="753"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement;<sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>memory<sp/>operand<sp/>relative<sp/>displacement.</highlight></codeline>
<codeline lineno="756" refid="structasmjit_1_1BaseMem_1acf608f1620d09639a9e33244adbfa51b" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>BaseMem&amp;<sp/><ref refid="structasmjit_1_1BaseMem_1acf608f1620d09639a9e33244adbfa51b" kindref="member" tooltip="Set memory operand relative displacement.">setDisplacement</ref>(int32_t<sp/>disp)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1aae280895b95e1b083799a43306dd7e15" kindref="member" tooltip="Memory data.">_vmem</ref>.displacement<sp/>=<sp/>disp;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>BaseMem&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseMem&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>_copy(other);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseMem&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0]<sp/>==<sp/>other._packed[0])<sp/>&amp;<sp/>(<ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[1]<sp/>==<sp/>other._packed[1]);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseMem&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal">};</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::BaseVar]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="781"><highlight class="comment">//!<sp/>@brief<sp/>Base<sp/>class<sp/>for<sp/>all<sp/>variables.</highlight></codeline>
<codeline lineno="782" refid="structasmjit_1_1BaseVar" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref><sp/>{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1BaseVar" kindref="compound" tooltip="Base class for all variables.">BaseVar</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cbad24fc6aeac580335e62f8a11e8a2043f" kindref="member" tooltip="Operand is a variable.">kOperandTypeVar</ref>,<sp/>0,<sp/>0,<sp/>0,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_d2_d3(<ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>BaseVar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseVar&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/>BaseVar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1Operand_1ad67efdbe93039d4ae3f77f84fcae6331" kindref="member" tooltip="Create an uninitialized operand.">Operand</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[BaseVar<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>BaseVar<sp/>operand.</highlight></codeline>
<codeline lineno="801" refid="structasmjit_1_1BaseVar_1a9725d5f41503045af505964068c70e75" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>BaseVar<sp/><ref refid="structasmjit_1_1BaseVar_1a9725d5f41503045af505964068c70e75" kindref="member" tooltip="Clone BaseVar operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BaseVar(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/>getVarType()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a24f921b98561dea1f19faad624b9a147" kindref="member" tooltip="Register or variable data.">_vreg</ref>.vType;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>BaseVar&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseVar&amp;<sp/>other)<sp/>{<sp/>_copy(other);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseVar&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a1e918a093397232131e706fd436c1085" kindref="member" tooltip="Packed operand as two 64-bit integers.">_packed</ref>[0]<sp/>==<sp/>other._packed[0];<sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseVar&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!operator==(other);<sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal">};</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::Imm]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="823"><highlight class="comment">//!<sp/>@brief<sp/>Immediate<sp/>operand.</highlight></codeline>
<codeline lineno="824"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="825"><highlight class="comment">//!<sp/>Immediate<sp/>operand<sp/>is<sp/>usually<sp/>part<sp/>of<sp/>instruction<sp/>itself<sp/>(it&apos;s<sp/>inlined<sp/>after</highlight></codeline>
<codeline lineno="826"><highlight class="comment">//!<sp/>or<sp/>before<sp/>instruction<sp/>opcode).<sp/>Immediates<sp/>can<sp/>be<sp/>only<sp/>signed<sp/>or<sp/>unsigned</highlight></codeline>
<codeline lineno="827"><highlight class="comment">//!<sp/>integers.</highlight></codeline>
<codeline lineno="828"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="829"><highlight class="comment">//!<sp/>To<sp/>create<sp/>immediate<sp/>operand,<sp/>use<sp/>@c<sp/>imm()<sp/>and<sp/>@c<sp/>imm_u()<sp/>constructors<sp/>or</highlight></codeline>
<codeline lineno="830"><highlight class="comment">//!<sp/>constructors<sp/>provided<sp/>by<sp/>@c<sp/>Immediate<sp/>class<sp/>itself.</highlight></codeline>
<codeline lineno="831" refid="structasmjit_1_1Imm" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref><sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>immediate<sp/>value<sp/>(initial<sp/>value<sp/>is<sp/>0).</highlight></codeline>
<codeline lineno="837" refid="structasmjit_1_1Imm_1a6d6d8380a1d63120a960c5ca89e91913" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><ref refid="structasmjit_1_1Imm_1a6d6d8380a1d63120a960c5ca89e91913" kindref="member" tooltip="Create a new immediate value (initial value is 0).">Imm</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba1d91cd01cea7a2b5067aa24907d1372b" kindref="member" tooltip="Operand is an immediate value.">kOperandTypeImm</ref>,<sp/>0,<sp/>0,<sp/>0,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>signed<sp/>immediate<sp/>value,<sp/>assigning<sp/>the<sp/>value<sp/>to<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="843" refid="structasmjit_1_1Imm_1aee5dea96bee16b8f2775cc7da80cac29" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1aee5dea96bee16b8f2775cc7da80cac29" kindref="member" tooltip="Create a new signed immediate value, assigning the value to val.">Imm</ref>(int64_t<sp/>val)<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba1d91cd01cea7a2b5067aa24907d1372b" kindref="member" tooltip="Operand is an immediate value.">kOperandTypeImm</ref>,<sp/>0,<sp/>0,<sp/>0,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>a<sp/>new<sp/>immediate<sp/>value<sp/>from<sp/>@a<sp/>other.</highlight></codeline>
<codeline lineno="849" refid="structasmjit_1_1Imm_1ac14a7cfdf45b81502247342e7c76e81a" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm_1ac14a7cfdf45b81502247342e7c76e81a" kindref="member" tooltip="Create a new immediate value from other.">Imm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm_1a6d6d8380a1d63120a960c5ca89e91913" kindref="member" tooltip="Create a new immediate value (initial value is 0).">Imm</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Immediate<sp/>Specific]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Clone<sp/>Imm<sp/>operand.</highlight></codeline>
<codeline lineno="858" refid="structasmjit_1_1Imm_1a87ec34eeb52d58dedd7e8759bec0de96" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref><sp/><ref refid="structasmjit_1_1Imm_1a87ec34eeb52d58dedd7e8759bec0de96" kindref="member" tooltip="Clone Imm operand.">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1a6d6d8380a1d63120a960c5ca89e91913" kindref="member" tooltip="Create a new immediate value (initial value is 0).">Imm</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>immediate<sp/>can<sp/>be<sp/>casted<sp/>to<sp/>8-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="863" refid="structasmjit_1_1Imm_1a977e79228bf13cdbdb92379339602ce4" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1a977e79228bf13cdbdb92379339602ce4" kindref="member" tooltip="Get whether the immediate can be casted to 8-bit signed integer.">isInt8</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1a977e79228bf13cdbdb92379339602ce4" kindref="member" tooltip="Get whether the immediate can be casted to 8-bit signed integer.">IntUtil::isInt8</ref>(<ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>immediate<sp/>can<sp/>be<sp/>casted<sp/>to<sp/>8-bit<sp/>unsigned<sp/>integer.</highlight></codeline>
<codeline lineno="865" refid="structasmjit_1_1Imm_1afbd46c7c32eb36c5dc0c77756ce5f18c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1afbd46c7c32eb36c5dc0c77756ce5f18c" kindref="member" tooltip="Get whether the immediate can be casted to 8-bit unsigned integer.">isUInt8</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1afbd46c7c32eb36c5dc0c77756ce5f18c" kindref="member" tooltip="Get whether the immediate can be casted to 8-bit unsigned integer.">IntUtil::isUInt8</ref>(<ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]);<sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>immediate<sp/>can<sp/>be<sp/>casted<sp/>to<sp/>16-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="868" refid="structasmjit_1_1Imm_1a423fb499db6933e25a8e4fb75d11c30f" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1a423fb499db6933e25a8e4fb75d11c30f" kindref="member" tooltip="Get whether the immediate can be casted to 16-bit signed integer.">isInt16</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1a423fb499db6933e25a8e4fb75d11c30f" kindref="member" tooltip="Get whether the immediate can be casted to 16-bit signed integer.">IntUtil::isInt16</ref>(<ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>immediate<sp/>can<sp/>be<sp/>casted<sp/>to<sp/>16-bit<sp/>unsigned<sp/>integer.</highlight></codeline>
<codeline lineno="870" refid="structasmjit_1_1Imm_1ae4957b57c65d00a74de20f88dc7c8cc5" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1ae4957b57c65d00a74de20f88dc7c8cc5" kindref="member" tooltip="Get whether the immediate can be casted to 16-bit unsigned integer.">isUInt16</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1ae4957b57c65d00a74de20f88dc7c8cc5" kindref="member" tooltip="Get whether the immediate can be casted to 16-bit unsigned integer.">IntUtil::isUInt16</ref>(<ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]);<sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>immediate<sp/>can<sp/>be<sp/>casted<sp/>to<sp/>32-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="873" refid="structasmjit_1_1Imm_1ab5d032a848dbf3321773aff868d97d41" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1ab5d032a848dbf3321773aff868d97d41" kindref="member" tooltip="Get whether the immediate can be casted to 32-bit signed integer.">isInt32</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1ab5d032a848dbf3321773aff868d97d41" kindref="member" tooltip="Get whether the immediate can be casted to 32-bit signed integer.">IntUtil::isInt32</ref>(<ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>whether<sp/>the<sp/>immediate<sp/>can<sp/>be<sp/>casted<sp/>to<sp/>32-bit<sp/>unsigned<sp/>integer.</highlight></codeline>
<codeline lineno="875" refid="structasmjit_1_1Imm_1a385c2bb2b657e908f91d0a755cc930b1" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1a385c2bb2b657e908f91d0a755cc930b1" kindref="member" tooltip="Get whether the immediate can be casted to 32-bit unsigned integer.">isUInt32</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1a385c2bb2b657e908f91d0a755cc930b1" kindref="member" tooltip="Get whether the immediate can be casted to 32-bit unsigned integer.">IntUtil::isUInt32</ref>(<ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]);<sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>immediate<sp/>value<sp/>as<sp/>8-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="878" refid="structasmjit_1_1Imm_1a1d21f39e2f03a26c97efb1a2cb69a1db" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int8_t<sp/><ref refid="structasmjit_1_1Imm_1a1d21f39e2f03a26c97efb1a2cb69a1db" kindref="member" tooltip="Get immediate value as 8-bit signed integer.">getInt8</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i8[_ASMJIT_HOST_INDEX(8,<sp/>0)];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>immediate<sp/>value<sp/>as<sp/>8-bit<sp/>unsigned<sp/>integer.</highlight></codeline>
<codeline lineno="880" refid="structasmjit_1_1Imm_1a99bc7e7dbd8ed3e0d66abd63d0bfe059" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint8_t<sp/><ref refid="structasmjit_1_1Imm_1a99bc7e7dbd8ed3e0d66abd63d0bfe059" kindref="member" tooltip="Get immediate value as 8-bit unsigned integer.">getUInt8</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u8[_ASMJIT_HOST_INDEX(8,<sp/>0)];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>immediate<sp/>value<sp/>as<sp/>16-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="882" refid="structasmjit_1_1Imm_1af00dc4bb217fbfed84ab5c1360f34065" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int16_t<sp/><ref refid="structasmjit_1_1Imm_1af00dc4bb217fbfed84ab5c1360f34065" kindref="member" tooltip="Get immediate value as 16-bit signed integer.">getInt16</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i16[_ASMJIT_HOST_INDEX(4,<sp/>0)];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>immediate<sp/>value<sp/>as<sp/>16-bit<sp/>unsigned<sp/>integer.</highlight></codeline>
<codeline lineno="884" refid="structasmjit_1_1Imm_1a76b16f3d673e3a72a875bd0d0d7dc365" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint16_t<sp/><ref refid="structasmjit_1_1Imm_1a76b16f3d673e3a72a875bd0d0d7dc365" kindref="member" tooltip="Get immediate value as 16-bit unsigned integer.">getUInt16</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u16[_ASMJIT_HOST_INDEX(4,<sp/>0)];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>immediate<sp/>value<sp/>as<sp/>32-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="886" refid="structasmjit_1_1Imm_1aa754afbd31eccd757e9dd34fe96fa28d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int32_t<sp/><ref refid="structasmjit_1_1Imm_1aa754afbd31eccd757e9dd34fe96fa28d" kindref="member" tooltip="Get immediate value as 32-bit signed integer.">getInt32</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i32[_ASMJIT_HOST_INDEX(2,<sp/>0)];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>immediate<sp/>value<sp/>as<sp/>32-bit<sp/>unsigned<sp/>integer.</highlight></codeline>
<codeline lineno="888" refid="structasmjit_1_1Imm_1a491a62da780c14fe97712ae54c0c0ffc" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1Imm_1a491a62da780c14fe97712ae54c0c0ffc" kindref="member" tooltip="Get immediate value as 32-bit unsigned integer.">getUInt32</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>0)];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>immediate<sp/>value<sp/>as<sp/>64-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="890" refid="structasmjit_1_1Imm_1afc1791f2ac5ab3d5e5adbe04d41aa843" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int64_t<sp/><ref refid="structasmjit_1_1Imm_1afc1791f2ac5ab3d5e5adbe04d41aa843" kindref="member" tooltip="Get immediate value as 64-bit signed integer.">getInt64</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>immediate<sp/>value<sp/>as<sp/>64-bit<sp/>unsigned<sp/>integer.</highlight></codeline>
<codeline lineno="892" refid="structasmjit_1_1Imm_1af677753452a0a85ba9fa4217b3686130" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint64_t<sp/><ref refid="structasmjit_1_1Imm_1af677753452a0a85ba9fa4217b3686130" kindref="member" tooltip="Get immediate value as 64-bit unsigned integer.">getUInt64</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u64[0];<sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="894"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>immediate<sp/>value<sp/>as<sp/>intptr_t.</highlight></codeline>
<codeline lineno="895" refid="structasmjit_1_1Imm_1a6581eba1b0647130f6eb7a0118d583ee" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>intptr_t<sp/><ref refid="structasmjit_1_1Imm_1a6581eba1b0647130f6eb7a0118d583ee" kindref="member" tooltip="Get immediate value as intptr_t.">getIntPtr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(intptr_t)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t))</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">intptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Imm_1afc1791f2ac5ab3d5e5adbe04d41aa843" kindref="member" tooltip="Get immediate value as 64-bit signed integer.">getInt64</ref>());</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">intptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Imm_1aa754afbd31eccd757e9dd34fe96fa28d" kindref="member" tooltip="Get immediate value as 32-bit signed integer.">getInt32</ref>());</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>immediate<sp/>value<sp/>as<sp/>uintptr_t.</highlight></codeline>
<codeline lineno="903" refid="structasmjit_1_1Imm_1a6dec459c1fafa1f0d5f5dc0344bb9c86" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uintptr_t<sp/><ref refid="structasmjit_1_1Imm_1a6dec459c1fafa1f0d5f5dc0344bb9c86" kindref="member" tooltip="Get immediate value as uintptr_t.">getUIntPtr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uintptr_t)<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint64_t))</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uintptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Imm_1af677753452a0a85ba9fa4217b3686130" kindref="member" tooltip="Get immediate value as 64-bit unsigned integer.">getUInt64</ref>());</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uintptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="structasmjit_1_1Imm_1a491a62da780c14fe97712ae54c0c0ffc" kindref="member" tooltip="Get immediate value as 32-bit unsigned integer.">getUInt32</ref>());</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>Lo<sp/>32-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="911" refid="structasmjit_1_1Imm_1acf8da662f2d23fa45d27ad1b7dbb0e66" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int32_t<sp/><ref refid="structasmjit_1_1Imm_1acf8da662f2d23fa45d27ad1b7dbb0e66" kindref="member" tooltip="Get Lo 32-bit signed integer.">getInt32Lo</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i32[_ASMJIT_HOST_INDEX(2,<sp/>0)];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>Lo<sp/>32-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="913" refid="structasmjit_1_1Imm_1afae817e6918b48a4e620c48fdd0b808e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1Imm_1afae817e6918b48a4e620c48fdd0b808e" kindref="member" tooltip="Get Lo 32-bit signed integer.">getUInt32Lo</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>0)];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>Hi<sp/>32-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="915" refid="structasmjit_1_1Imm_1a816c84fdaa28fc6bc39c611da0d281f3" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>int32_t<sp/><ref refid="structasmjit_1_1Imm_1a816c84fdaa28fc6bc39c611da0d281f3" kindref="member" tooltip="Get Hi 32-bit signed integer.">getInt32Hi</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i32[_ASMJIT_HOST_INDEX(2,<sp/>1)];<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Get<sp/>Hi<sp/>32-bit<sp/>signed<sp/>integer.</highlight></codeline>
<codeline lineno="917" refid="structasmjit_1_1Imm_1abc08fa629bbda8a7e4516db35282a160" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/>uint32_t<sp/><ref refid="structasmjit_1_1Imm_1abc08fa629bbda8a7e4516db35282a160" kindref="member" tooltip="Get Hi 32-bit signed integer.">getUInt32Hi</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>1)];<sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="919"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>immediate<sp/>value<sp/>to<sp/>8-bit<sp/>signed<sp/>integer<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="920" refid="structasmjit_1_1Imm_1a4b0cd5360d21f41ac2aca1df50bf5068" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1a4b0cd5360d21f41ac2aca1df50bf5068" kindref="member" tooltip="Set immediate value to 8-bit signed integer val.">setInt8</ref>(int8_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kArchHost64Bit)<sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>val32<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i32[_ASMJIT_HOST_INDEX(2,<sp/>0)]<sp/>=<sp/>val32;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i32[_ASMJIT_HOST_INDEX(2,<sp/>1)]<sp/>=<sp/>val32<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>immediate<sp/>value<sp/>to<sp/>8-bit<sp/>unsigned<sp/>integer<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="933" refid="structasmjit_1_1Imm_1a8a4080a2be56a7099cdd5ec1fbb8d319" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1a8a4080a2be56a7099cdd5ec1fbb8d319" kindref="member" tooltip="Set immediate value to 8-bit unsigned integer val.">setUInt8</ref>(uint8_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kArchHost64Bit)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u64[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>0)]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>1)]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="944"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>immediate<sp/>value<sp/>to<sp/>16-bit<sp/>signed<sp/>integer<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="945" refid="structasmjit_1_1Imm_1aafa4873d3c572ca840707de03aca95aa" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1aafa4873d3c572ca840707de03aca95aa" kindref="member" tooltip="Set immediate value to 16-bit signed integer val.">setInt16</ref>(int16_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kArchHost64Bit)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>val32<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i32[_ASMJIT_HOST_INDEX(2,<sp/>0)]<sp/>=<sp/>val32;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i32[_ASMJIT_HOST_INDEX(2,<sp/>1)]<sp/>=<sp/>val32<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>immediate<sp/>value<sp/>to<sp/>16-bit<sp/>unsigned<sp/>integer<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="958" refid="structasmjit_1_1Imm_1af8588ccf00866e081a9d16b1b9fe3297" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1af8588ccf00866e081a9d16b1b9fe3297" kindref="member" tooltip="Set immediate value to 16-bit unsigned integer val.">setUInt16</ref>(uint16_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kArchHost64Bit)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u64[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>0)]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>1)]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>immediate<sp/>value<sp/>to<sp/>32-bit<sp/>signed<sp/>integer<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="970" refid="structasmjit_1_1Imm_1ad2f922217226881bb93510cd00dc5813" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1ad2f922217226881bb93510cd00dc5813" kindref="member" tooltip="Set immediate value to 32-bit signed integer val.">setInt32</ref>(int32_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kArchHost64Bit)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i32[_ASMJIT_HOST_INDEX(2,<sp/>0)]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i32[_ASMJIT_HOST_INDEX(2,<sp/>1)]<sp/>=<sp/>val<sp/>&gt;&gt;<sp/>31;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>immediate<sp/>value<sp/>to<sp/>32-bit<sp/>unsigned<sp/>integer<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="982" refid="structasmjit_1_1Imm_1a2d0b63993f1f14a6ae20a5f8d3602330" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1a2d0b63993f1f14a6ae20a5f8d3602330" kindref="member" tooltip="Set immediate value to 32-bit unsigned integer val.">setUInt32</ref>(uint32_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kArchHost64Bit)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u64[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>0)]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>1)]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>immediate<sp/>value<sp/>to<sp/>64-bit<sp/>signed<sp/>integer<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="994" refid="structasmjit_1_1Imm_1ab7aa11a9b815b72b75aae142e1a646d2" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1ab7aa11a9b815b72b75aae142e1a646d2" kindref="member" tooltip="Set immediate value to 64-bit signed integer val.">setInt64</ref>(int64_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>immediate<sp/>value<sp/>to<sp/>64-bit<sp/>unsigned<sp/>integer<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="1000" refid="structasmjit_1_1Imm_1a406bfcbb240b4a2897c2c511a0c5aa4c" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1a406bfcbb240b4a2897c2c511a0c5aa4c" kindref="member" tooltip="Set immediate value to 64-bit unsigned integer val.">setUInt64</ref>(uint64_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u64[0]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1005"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>immediate<sp/>value<sp/>to<sp/>intptr_t<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="1006" refid="structasmjit_1_1Imm_1a3c98dca08b5f1ce4d89c286802797b7e" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1a3c98dca08b5f1ce4d89c286802797b7e" kindref="member" tooltip="Set immediate value to intptr_t val.">setIntPtr</ref>(intptr_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._i64[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>immediate<sp/>value<sp/>to<sp/>uintptr_t<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="1012" refid="structasmjit_1_1Imm_1a12ed1580a8665eabdf09f9b86efb2cac" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1a12ed1580a8665eabdf09f9b86efb2cac" kindref="member" tooltip="Set immediate value to uintptr_t val.">setUIntPtr</ref>(uintptr_t<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u64[0]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Set<sp/>immediate<sp/>value<sp/>as<sp/>unsigned<sp/>type<sp/>to<sp/>@a<sp/>val.</highlight></codeline>
<codeline lineno="1018" refid="structasmjit_1_1Imm_1a03710cbc86bac2cb9a0a1f479776aff7" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1a03710cbc86bac2cb9a0a1f479776aff7" kindref="member" tooltip="Set immediate value as unsigned type to val.">setPtr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm_1a3c98dca08b5f1ce4d89c286802797b7e" kindref="member" tooltip="Set immediate value to intptr_t val.">setIntPtr</ref>((intptr_t)p);<sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Float]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/>setFloat(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>f)<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._f32[_ASMJIT_HOST_INDEX(2,<sp/>0)]<sp/>=<sp/>f;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>1)]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm_1a6d6d8380a1d63120a960c5ca89e91913" kindref="member" tooltip="Create a new immediate value (initial value is 0).">Imm</ref>&amp;<sp/>setDouble(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._f64[0]<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Truncate]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm_1a6d6d8380a1d63120a960c5ca89e91913" kindref="member" tooltip="Create a new immediate value (initial value is 0).">Imm</ref>&amp;<sp/>truncateTo8Bits()<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kArchHost64Bit)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u64[0]<sp/>&amp;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x000000FFU);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>0)]<sp/>&amp;=<sp/>0x000000FFU;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>1)]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm_1a6d6d8380a1d63120a960c5ca89e91913" kindref="member" tooltip="Create a new immediate value (initial value is 0).">Imm</ref>&amp;<sp/>truncateTo16Bits()<sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kArchHost64Bit)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u64[0]<sp/>&amp;=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x0000FFFFU);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>0)]<sp/>&amp;=<sp/>0x0000FFFFU;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>1)]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm_1a6d6d8380a1d63120a960c5ca89e91913" kindref="member" tooltip="Create a new immediate value (initial value is 0).">Imm</ref>&amp;<sp/>truncateTo32Bits()<sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structasmjit_1_1Operand_1a307e2e7b752000b12da59dad23e0ca90" kindref="member" tooltip="Immediate data.">_imm</ref>.value._u32[_ASMJIT_HOST_INDEX(2,<sp/>1)]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Assign<sp/>@a<sp/>other<sp/>to<sp/>the<sp/>immediate<sp/>operand.</highlight></codeline>
<codeline lineno="1071" refid="structasmjit_1_1Imm_1a4504699cb354b4ae4d1f0b5e4bfbde7d" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/><ref refid="structasmjit_1_1Imm_1a4504699cb354b4ae4d1f0b5e4bfbde7d" kindref="member" tooltip="Assign other to the immediate operand.">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>&amp;<sp/>other)<sp/>{<sp/>_copy(other);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1074"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>signed<sp/>immediate<sp/>value<sp/>operand.</highlight></codeline>
<codeline lineno="1075" refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref><sp/><ref refid="group__asmjit__base_1ga65a8413c6d6ca49e69246bb684ac60eb" kindref="member" tooltip="Create signed immediate value operand.">imm</ref>(int64_t<sp/>val)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>(val);<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1076"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>unsigned<sp/>immediate<sp/>value<sp/>operand.</highlight></codeline>
<codeline lineno="1077" refid="group__asmjit__base_1ga4594b4672222fbd0152080800fe73779" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref><sp/><ref refid="group__asmjit__base_1ga4594b4672222fbd0152080800fe73779" kindref="member" tooltip="Create unsigned immediate value operand.">imm_u</ref>(uint64_t<sp/>val)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>(static_cast&lt;int64_t&gt;(val));<sp/>}</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1078"><highlight class="comment">//!<sp/>@brief<sp/>Create<sp/>void*<sp/>pointer<sp/>immediate<sp/>value<sp/>operand.</highlight></codeline>
<codeline lineno="1079" refid="group__asmjit__base_1ga765b5df64ba936f3026390664085d518" refkind="member"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref><sp/><ref refid="group__asmjit__base_1ga765b5df64ba936f3026390664085d518" kindref="member" tooltip="Create void* pointer immediate value operand.">imm_ptr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Imm" kindref="compound" tooltip="Immediate operand.">Imm</ref>(static_cast&lt;int64_t&gt;((intptr_t)p));<sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[asmjit::Label]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//<sp/>============================================================================</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1085"><highlight class="comment">//!<sp/>@brief<sp/>Label<sp/>(jump<sp/>target<sp/>or<sp/>data<sp/>location).</highlight></codeline>
<codeline lineno="1086"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1087"><highlight class="comment">//!<sp/>Label<sp/>represents<sp/>locations<sp/>typically<sp/>used<sp/>as<sp/>jump<sp/>targets,<sp/>but<sp/>may<sp/>be<sp/>also</highlight></codeline>
<codeline lineno="1088"><highlight class="comment">//!<sp/>used<sp/>as<sp/>position<sp/>where<sp/>are<sp/>stored<sp/>constants<sp/>or<sp/>static<sp/>variables.<sp/>If<sp/>you</highlight></codeline>
<codeline lineno="1089"><highlight class="comment">//!<sp/>want<sp/>to<sp/>use<sp/>@c<sp/>Label<sp/>you<sp/>need<sp/>first<sp/>to<sp/>associate<sp/>it<sp/>with<sp/>@ref<sp/>BaseAssembler</highlight></codeline>
<codeline lineno="1090"><highlight class="comment">//!<sp/>or<sp/>@ref<sp/>BaseCompiler<sp/>instance.<sp/>To<sp/>create<sp/>new<sp/>label<sp/>use<sp/>@ref</highlight></codeline>
<codeline lineno="1091"><highlight class="comment">//!<sp/>BaseAssembler::newLabel()<sp/>or<sp/>@ref<sp/>BaseCompiler::newLabel().</highlight></codeline>
<codeline lineno="1092"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1093"><highlight class="comment">//!<sp/>Example<sp/>of<sp/>using<sp/>labels:</highlight></codeline>
<codeline lineno="1094"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1095"><highlight class="comment">//!<sp/>@code</highlight></codeline>
<codeline lineno="1096"><highlight class="comment">//!<sp/>//<sp/>Create<sp/>Assembler/Compiler.</highlight></codeline>
<codeline lineno="1097"><highlight class="comment">//!<sp/>Assembler<sp/>a;</highlight></codeline>
<codeline lineno="1098"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1099"><highlight class="comment">//!<sp/>//<sp/>Create<sp/>Label<sp/>instance.</highlight></codeline>
<codeline lineno="1100"><highlight class="comment">//!<sp/>Label<sp/>L_1(a);</highlight></codeline>
<codeline lineno="1101"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1102"><highlight class="comment">//!<sp/>//<sp/>...<sp/>your<sp/>code<sp/>...</highlight></codeline>
<codeline lineno="1103"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1104"><highlight class="comment">//!<sp/>//<sp/>Using<sp/>label,<sp/>see<sp/>@ref<sp/>asmjit::BaseAssembler<sp/>or<sp/>@ref<sp/>asmjit::BaseCompiler.</highlight></codeline>
<codeline lineno="1105"><highlight class="comment">//!<sp/>a.jump(L_1);</highlight></codeline>
<codeline lineno="1106"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1107"><highlight class="comment">//!<sp/>//<sp/>...<sp/>your<sp/>code<sp/>...</highlight></codeline>
<codeline lineno="1108"><highlight class="comment">//!</highlight></codeline>
<codeline lineno="1109"><highlight class="comment">//!<sp/>//<sp/>Bind<sp/>label<sp/>to<sp/>current<sp/>position,<sp/>see<sp/>@ref<sp/>asmjit::BaseAssembler::bind()</highlight></codeline>
<codeline lineno="1110"><highlight class="comment">//!<sp/>//<sp/>or<sp/>@ref<sp/>asmjit::BaseCompiler::bind().</highlight></codeline>
<codeline lineno="1111"><highlight class="comment">//!<sp/>a.bind(L_1);</highlight></codeline>
<codeline lineno="1112"><highlight class="comment">//!<sp/>@endcode</highlight></codeline>
<codeline lineno="1113" refid="structasmjit_1_1Label" refkind="compound"><highlight class="comment"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref><sp/>{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Construction<sp/>/<sp/>Destruction]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new,<sp/>unassociated<sp/>label.</highlight></codeline>
<codeline lineno="1119" refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" kindref="member" tooltip="Create new, unassociated label.">Label</ref>()<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba2dcaa04fd5ea217510587264bb4ecac8" kindref="member" tooltip="Operand is a label.">kOperandTypeLabel</ref>,<sp/>0,<sp/>0,<sp/>0,<sp/><ref refid="group__asmjit__base_1gga0e7868a21bae2d1653ab275d6020e4dea4439703abd648103096349a5066d87fa" kindref="member" tooltip="Invalid value or operand id.">kInvalidValue</ref>);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_d2_d3(0,<sp/>0);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" kindref="member" tooltip="Create new, unassociated label.">Label</ref>(uint32_t<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(NoInit)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_op_sz_b0_b1_id(<ref refid="group__asmjit__base_1gga12e36dc942976d5794c1e88619b5e8cba2dcaa04fd5ea217510587264bb4ecac8" kindref="member" tooltip="Operand is a label.">kOperandTypeLabel</ref>,<sp/>0,<sp/>0,<sp/>0,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>_init_packed_d2_d3(0,<sp/>0);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1129"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>initialized<sp/>label.</highlight></codeline>
<codeline lineno="1130"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" kindref="member" tooltip="Create new, unassociated label.">Label</ref>(BaseAssembler&amp;<sp/>a);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>new<sp/>initialized<sp/>label.</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" kindref="member" tooltip="Create new, unassociated label.">Label</ref>(BaseCompiler&amp;<sp/>c);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1134"><highlight class="comment"><sp/><sp/>//!<sp/>@brief<sp/>Create<sp/>reference<sp/>to<sp/>another<sp/>label.</highlight></codeline>
<codeline lineno="1135" refid="structasmjit_1_1Label_1a0ac1cb11998d68f74a1ff35a6df5a219" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label_1a0ac1cb11998d68f74a1ff35a6df5a219" kindref="member" tooltip="Create reference to another label.">Label</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label" kindref="compound" tooltip="Label (jump target or data location).">Label</ref>&amp;<sp/>other)<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(other)<sp/>{}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" kindref="member" tooltip="Create new, unassociated label.">Label</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>_NoInit&amp;)<sp/>:<sp/><ref refid="structasmjit_1_1Operand" kindref="compound" tooltip="Operand can contain register, memory location, immediate, or label.">Operand</ref>(NoInit)<sp/>{}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[Operator<sp/>Overload]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/><ref refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" kindref="member" tooltip="Create new, unassociated label.">Label</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" kindref="member" tooltip="Create new, unassociated label.">Label</ref>&amp;<sp/>other)<sp/>{<sp/>_copy(other);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" kindref="member" tooltip="Create new, unassociated label.">Label</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.id<sp/>==<sp/>other._base.id;<sp/>}</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/>ASMJIT_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Label_1a4a6c7bff9fb417be01710becd40e7a69" kindref="member" tooltip="Create new, unassociated label.">Label</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structasmjit_1_1Operand_1ab65e9aa7a15edd48cba687f03cb7347c" kindref="member" tooltip="Base data.">_base</ref>.id<sp/>!=<sp/>other._base.id;<sp/>}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1149"><highlight class="comment">//!<sp/>@}</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>asmjit<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Api-End]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../base/apiend.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[Guard]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>_ASMJIT_BASE_DEFS_H</highlight></codeline>
    </programlisting>
    <location file="/home/ryan/asmjit/src/asmjit/base/defs.h"/>
  </compounddef>
</doxygen>
